test_0024bebcac0ade3b83dd1930ae67631a8b812c333bf2b4977fc9e6785cfd1257.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820ecd622ccd7d3fdf31d5de025dee5d0bb85bdda234d4674e46107d369909cc4ba0029
test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol":{"keccak256":"0x3d4f259d391e13149aa0248f9c5a40d5ab7404995ed14dbcff709e68e14ff1ab","urls":["bzzr://625d9a94c8c8ea269ee82cea2758e23b4a4b3bb1eb2adda678af59c0321e11a7"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol:c 6060604052341561000f57600080fd5b5b6102208061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b8e010de14610049578063be1c766b146100b0575b600080fd5b341561005457600080fd5b61005c610115565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c3610131565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010a565b6000819050919050565b505060405180910390f35b600080366000919061012892919061014f565b50600190505b90565b60008080546001816001161561010002031660029004905090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019057803560ff19168380011785556101be565b828001600101855582156101be579182015b828111156101bd5782358255916020019190600101906101a2565b5b5090506101cb91906101cf565b5090565b6101f191905b808211156101ed5760008160009055506001016101d5565b5090565b905600a165627a7a72305820090aa56b6d7a29c883fb20572150c25b1753fd8cbaea7996e34df82aab9dbfb20029
test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol":{"keccak256":"0x82d5035630d9252f433bdcb44047f1312008fe287c5d789f97abb9595edf9237","urls":["bzzr://58ba6640a3cfd13b3c1e60c32e5d63ba1ee7c48bb0c56e3f54d9cd92fab60d62"]}},"version":1}
 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol:C 6060604052341561000f57600080fd5b5b61020a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063db06ccd114610054578063df9f5ccb146100ca578063f73d79ee14610140575b600080fd5b341561005f57600080fd5b6100676101b6565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100bf565b600060028210600081146100b7576100b9565bfe5b50919050565b505060405180910390f35b34156100d557600080fd5b6100dd6101c0565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610135565b6000600282106000811461012d5761012f565bfe5b50919050565b505060405180910390f35b341561014b57600080fd5b6101536101cf565b6040516020810161016981600084018486610173565b905080925061018b565b600084905061018182610190565b8452949350505050565b6101ab565b600060028210600081146101a3576101a5565bfe5b50919050565b505060405180910390f35b6000600590505b90565b600080600590508091505b5090565b600080600590508091505b50905600a165627a7a72305820be79ace16dba7d1d5cf5918339694a9c0f04b386e4d82cf22dbf28c8d29f63de0029
test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_inline_assignment","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_return","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_assignment","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol":{"keccak256":"0xebf7fbdb87b4443d5ea2d92b0b20c0dd06e2379f60ba1dcaf12d025101348cf6","urls":["bzzr://d137ef3549dbcae1f24c4572ec6db461fd7efe252fbd6816f99fd48a68cac670"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol:C 6060604052341561000f57600080fd5b5b6101128061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000803660405180807f6162630000000000000000000000000000000000000000000000000000000000815250600301838380828437820191505092505050604051809103902090505b905600a165627a7a72305820939b9a6e48ff2406e67fea8d397fd1228aa5b2d6e4e32cb215d8e7ed715fc55b0029
test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol":{"keccak256":"0x1425581dac1fb24699251a7767e79831ecfdb7523bf3b87e18dbcc02ac300a3f","urls":["bzzr://cafb41f8cd2b26b967befd785a0be04548a56488a9370f6fd99a317968e0fee1"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol:A 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f191505090505b905600a165627a7a723058202fbe6cc01a41e4bb823242cb5320f5c238ffb0030fbe3099e85d9ca05be9050d0029
test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol":{"keccak256":"0x1eb154e5534479391c30fe3d9143881a6d1a831bb3a1cf2e9695a00b7443b5de","urls":["bzzr://c02eb1aadf11d4596b3d31b940eb454ac942ee3d1ec268b575787b58d29baba1"]}},"version":1}
test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol:test 60606040523415600e57600080fd5b5b608a8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090508060009050505b505600a165627a7a7230582055fff98b80255663c2fe06c3506e935f2421a246772c631feeccd7bd5f6ce7a40029
test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol":{"keccak256":"0x982b2317f86535a860bcc8bf1a34d7cc76340c369e291fb98a1c5f5c8aadf923","urls":["bzzr://f6bd6627916b3e88473b47a0a739169ce009949d2e6abf15bef588f3b85e5d07"]}},"version":1}
test_01ddfdfc116b508df3a4da41929cddb51fbe1ef6b31a107cb7b9999e14d36e77.sol: ERROR
test_01e8b60d910ab1cb9aa17cbaec20e09abf847959ab3e567d629d0e3674565a76.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol:C 6060604052341561000f57600080fd5b5b6103368061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e1461003e575b600080fd5b341561004957600080fd5b61006860048080359060200190919080359060200190919050506100ba565b6040516020810161007e81600084018486610088565b90508092506100a0565b6000849050610096826100a5565b8452949350505050565b6100af565b6000819050919050565b505060405180910390f35b60006100c46102e2565b600080600186016040518059106100d85750595b90808252806020026020018201604052801561010e57816020015b6100fb6102f6565b8152602001906001900390816100f35790505b509250600191505b85821115156102a4578160405180591061012d5750595b908082528060200260200182016040525b50838381518110151561014d57fe5b906020019060200201819052506001838381518110151561016a57fe5b906020019060200201516001858581518110151561018457fe5b90602001906020020151510381518110151561019c57fe5b9060200190602002018181525083838151811015156101b757fe5b9060200190602002015160008151811015156101cf57fe5b9060200190602002018181525050600190505b600182038110156102965782600183038151811015156101fe57fe5b906020019060200201518181518110151561021557fe5b90602001906020020151836001840381518110151561023057fe5b906020019060200201516001830381518110151561024a57fe5b9060200190602002015101838381518110151561026357fe5b906020019060200201518281518110151561027a57fe5b90602001906020020181815250505b80806001019150506101e2565b5b8180600101925050610116565b82868151811015156102b257fe5b90602001906020020151600186038151811015156102cc57fe5b9060200190602002015193505b50505092915050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820e8702ea95aa1fe4b9bb4ddce6700bd7c9166087b1a143406b112c110547a5e720029
test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol":{"keccak256":"0x701a26d491bcb85a3f93e0dc4edf129f1261df17544e0f5bece1e6ea7b0339d4","urls":["bzzr://a3dc9663391832a77f2dcd34ac7918eb877c0cbcb230b51f76607416a3a0a098"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol:test 6060604052341561000f57600080fd5b5b6002600080808152602001908152602001600020600001819055505b5b6101008061003c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806362e1c91b14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600080815260200190815260200160002060008082016000905550506000808081526020019081526020016000206000015490505b905600a165627a7a72305820f3f21293f22bab5aa4c3544c3991904ebe97b8d3940f48713e83addd6b5af9ee0029
test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deleteIt","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol":{"keccak256":"0xae059cb17cc60f20165a5b1f513b7943ac5ef07f4fd283bfb6c842655a92e15e","urls":["bzzr://56b6980955a330bf9982f9cebd7784225efa08371faa9df9836425e362a4c964"]}},"version":1}
test_0235a434a95888bffad23e224a86ba220fe2979d094c8215f0377f0653a2c610.sol: ERROR
test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol:TestIt 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058200da8d5a5637f71294ed103c60c9dad0491c1984cdbae8e7e9a526fbd37af1bd00029
test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol:TestIt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"A","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol":"TestIt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol":{"keccak256":"0x6a54aa58c1c3b8473aadd0c0abb03a39c7e73a4335270a2e7d6f7f0052fe7fcd","urls":["bzzr://cd0162c136ecc1e642b04d5b6dbbea950b3533d56b79512763b39a4c3ae99938"]}},"version":1}
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 3 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_3_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:D 606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f7125387136581271652831736512837126583171583712358126000000000000815250600090805190602001906100c29291906101b1565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805190602001906101819291906101b1565b50341561018d57600080fd5b60405160208061029a833981016040528080519060200190919050505b5b50610256565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f257805160ff1916838001178555610220565b82800160010185558215610220579182015b8281111561021f578251825591602001919060010190610204565b5b50905061022d9190610231565b5090565b61025391905b8082111561024f576000816000905550600101610237565b5090565b90565b6036806102646000396000f30060606040525b600080fd00a165627a7a7230582034299d17cf26c23a0ff9f20aeea7397290d7905645a42d2d4de841f72676f0da0029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Double 6060604052341561000f57600080fd5b5b61044b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e1461005e575b600080fd5b341561005457600080fd5b61005c610073565b005b341561006957600080fd5b6100716100f4565b005b600261007d610175565b602081016100908160008401848661009a565b90508092506100b2565b60008490506100a8826100c6565b8452949350505050565b6100c1565b6000819050919050565b6100d8565b60006100d1826100b7565b9050919050565b5050604051809103906000f08015156100f057600080fd5b505b565b60036100fe610175565b602081016101118160008401848661011b565b9050809250610133565b600084905061012982610147565b8452949350505050565b610142565b6000819050919050565b610159565b600061015282610138565b9050919050565b5050604051809103906000f080151561017157600080fd5b505b565b60405161029a80610186833901905600606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f7125387136581271652831736512837126583171583712358126000000000000815250600090805190602001906100c29291906101b1565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805190602001906101819291906101b1565b50341561018d57600080fd5b60405160208061029a833981016040528080519060200190919050505b5b50610256565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f257805160ff1916838001178555610220565b82800160010185558215610220579182015b8281111561021f578251825591602001919060010190610204565b5b50905061022d9190610231565b5090565b61025391905b8082111561024f576000816000905550600101610237565b5090565b90565b6036806102646000396000f30060606040525b600080fd00a165627a7a7230582034299d17cf26c23a0ff9f20aeea7397290d7905645a42d2d4de841f72676f0da0029a165627a7a7230582031b1bb209ec611d6cd95ad88f77b90f1b0b0d48fc616399d61550445a7d13b780029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Double {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"Double"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Single 6060604052341561000f57600080fd5b5b6103aa8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b600261005d6100d4565b602081016100708160008401848661007a565b9050809250610092565b6000849050610088826100a6565b8452949350505050565b6100a1565b6000819050919050565b6100b8565b60006100b182610097565b9050919050565b5050604051809103906000f08015156100d057600080fd5b505b565b60405161029a806100e5833901905600606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f7125387136581271652831736512837126583171583712358126000000000000815250600090805190602001906100c29291906101b1565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805190602001906101819291906101b1565b50341561018d57600080fd5b60405160208061029a833981016040528080519060200190919050505b5b50610256565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f257805160ff1916838001178555610220565b82800160010185558215610220579182015b8281111561021f578251825591602001919060010190610204565b5b50905061022d9190610231565b5090565b61025391905b8082111561024f576000816000905550600101610237565b5090565b90565b6036806102646000396000f30060606040525b600080fd00a165627a7a7230582034299d17cf26c23a0ff9f20aeea7397290d7905645a42d2d4de841f72676f0da0029a165627a7a72305820117ab07f5d2a11f05d52f8e7852b6566e1ea4b2babbe26561e4b90a1bcd54eb40029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Single {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"Single"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_03733faccd09b5d3028e1725f45a67b771a0f98b4e3e12b0532357472c34a62b.sol: ERROR
test_037c4e08e599bae04d1398cd6835c91a3fab20e98b81c8f9c79e03e48d96bf02.sol: ERROR
test_03a7374f038285fc39cceb59803d0d9f02e71c60374020b8e43c22d0bc0f6387.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a723058203ae4dcebbd8a301023de155e9a0f95c3c0e49c20de45d5f09a80ea0f52f9fdde0029
test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol":{"keccak256":"0x19e1f8921f7d1041f24fc977cf3ccaacb095857d2452f23beadc166f47863a48","urls":["bzzr://8a1ce40b63539126513c8e567dd3c592b05d779bfad2252c12d84dfcbeca053f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol:C 6060604052341561000f57600080fd5b5b60f18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600a60008090505b818160ff16101560bf576001830192505b5b80600101905060a3565b5b5050905600a165627a7a72305820a8b5a61863ca6b7b27edbae744add78d2fdc19ee34277aa1f186ac36f57f98870029
test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol":{"keccak256":"0xdc442aa505edacdcbc6f53b970ef1841912199502764ea14e1df91183cb0bfb3","urls":["bzzr://78839fc56b2ec6e9a33b494ebd9384560b0f1ce52aed49e1855972f8fb9bcfba"]}},"version":1}
test_0473dc2380acfd1b51138e1f0d7b1f509499b5cbabc31191ca3c0e14779dad1d.sol: ERROR
test_0526b1a83a795c83e92d8f5b7122234927fd8c57d97ca63ae8f21fad9129ef18.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820cffa606821f4688b155d94b1c481bcb3fc99bb6bd4ee72b0b356689cf6de8f540029
test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication and cookies with nutella"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol":{"keccak256":"0xcbe803dc1327229ae6d686a36e4ba651cf354266d16a43e3d0849c8f9c4ed94c","urls":["bzzr://caecdbf0105a8fbf81ef1956f3daaeae96fb283b435cf6f14a0683877a559728"]}},"version":1}
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C1 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820439946278bfcb600327f0622d9335352c255c06ada466a16966847e29f445d270029
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":"C1"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":{"keccak256":"0x0fba92368e04d0b645bf82c46c3893531cbcbca766fab9b6f664b9fcf7c14124","urls":["bzzr://20d2023dce18a7e418649833d0c7ddcb14f7af30d7cb56a987b80cf22817a6e6"]}},"version":1}
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C2 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206c1fd65b5c1fa913a7210be66161f14e8dfb2446aa29f34f94ad671aad4792d30029
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":"C2"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":{"keccak256":"0x0fba92368e04d0b645bf82c46c3893531cbcbca766fab9b6f664b9fcf7c14124","urls":["bzzr://20d2023dce18a7e418649833d0c7ddcb14f7af30d7cb56a987b80cf22817a6e6"]}},"version":1}
test_056102b11846b4c70dd13ade063e4f3f48a980438654dcf57c0ff179fe565554.sol: ERROR
test_05c752251953565240eb015d5f79ef585b2f7684984285438ea93bfaa1b26c09.sol: ERROR
test_05defa08672337109fc1959c372b755fc5e540ef12960bb1c719010719a5809f.sol: ERROR
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol:test 6060604052607f6000806101000a81548160ff021916908360000b60ff160217905550341561002d57600080fd5b5b60da8061003c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b582ec5f14603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b60008160000b9050919050565b505060405180910390f35b6000809054906101000a900460000b815600a165627a7a72305820bf791b261003f650dad3a7ad920da7be3989b716d898ed57cd0ea5cd2da1463f0029
test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"j","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol":{"keccak256":"0xc1fd1825bcf617885c7d8e4acdc6b28618ece94aefe728fdc0290e60897b1103","urls":["bzzr://c6c9bbc2bec354562cfd35fe21f41b4e17461b51c603b6ed1349589485b15bf9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:C 6060604052341561000f57600080fd5b5b6101b38061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b60008173__test_06bdc56c19e023d03ff89762979800e__63eee9720690916000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020810161011a81600084018486610124565b905080925061013c565b600084905061013282610141565b8452949350505050565b61014b565b6000819050919050565b505060206040518083038186803b151561016457600080fd5b6102c65a03f4151561017557600080fd5b5050506040518051905090505b9190505600a165627a7a72305820ef328ff0b931dd4ca256dba6dfe2d009a9a8d73f3421e9fa333313e8c5fb19930029
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":{"keccak256":"0xed6f0e35df2c9413a85dbf315ffa23fd614ee7add2205ca1d1e42091d061f606","urls":["bzzr://e1638fb278427777ab8e349f3a3a819d99e6ef56c1eb82731978037be512782f"]}},"version":1}
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:D 6060604052341561000f57600080fd5b5b60d78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063eee9720614603d575b600080fd5b60516004808035906020019091905050609d565b60405160208101606581600084018486606e565b90508092506084565b6000849050607a826088565b8452949350505050565b6092565b6000819050919050565b505060405180910390f35b60008160020290505b9190505600a165627a7a723058200645958885d1a8e3bacb47bc51b81ccccbdcfb1d299f890855f121d87540b2030029
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"self","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":{"keccak256":"0xed6f0e35df2c9413a85dbf315ffa23fd614ee7add2205ca1d1e42091d061f606","urls":["bzzr://e1638fb278427777ab8e349f3a3a819d99e6ef56c1eb82731978037be512782f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol:C 6060604052341561000f57600080fd5b5b60fc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060a9565b60405160208101607181600084018486607a565b90508092506090565b60008490506086826094565b8452949350505050565b609e565b6000819050919050565b505060405180910390f35b6000806000600191506002905083801560c05760c7565b600393505b5b5b505b50509190505600a165627a7a7230582094413385f1f2ef712ec4662701a0b58fe43fc53eebc675eea998b22d9ccbe4ab0029
test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol":{"keccak256":"0xb91ea75ac470d3c396d7612cde55db4e047ceac69d017a11104dc764474e48ab","urls":["bzzr://4dde3af5f4e1e2be96377638fdcacbd729ebaa20ddddd017ed64dd67cb170df7"]}},"version":1}
test_06df34e71ed4c75a5e147ca09afeffa08da1ac86fc7805c6471acd6a05bb5990.sol: ERROR
test_06f0d525ffbacabc5fcd618a51102e3bd66b0ed52864fdd1832e22da80bf9b52.sol: ERROR
test_071f9fac32f65fa57bb364e124c7b05aeb485bc5670e90355eb10bcb828dd36d.sol: ERROR
test_07503b82a2da5dcfb642a9289a30899a410fb5391dd6c7219cac3fc926c1a8e9.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol:C 60606040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe00600055341561003357600080fd5b5b60cb806100426000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820343e1a3c10107c865e5b9a03c994d14d6c9e0edce172f851bdf86cd629b592750029
test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol":{"keccak256":"0x72fccf20a4fbdb07fca76707ac2750a2c7927909e117b92e43c483ac8de36e42","urls":["bzzr://28b8ea28781ff0c65fe0af80c96643cb417f45c2781cf40e2e2e541ee0b35241"]}},"version":1}
test_079a49c6bee1a49fbc498dcae1e2fb0139cbd1e4e825197b7db549877a85e3c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol:C 6060604052341561000f57600080fd5b5b60db8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600061420090506008819060020a900490505b905600a165627a7a7230582078c755e28fecc0e1401576f538eaf4c2ecea1aac7dab9f172438c7ab64c7f5ba0029
test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol":{"keccak256":"0x325cf02a933153f79e2ddd1bd1cc7c7db2b79ebbc6679028aa4a4325fefce6a1","urls":["bzzr://98bede049a601064027d6ceab0af254bf323bf3bf098543291b7cafacee4f636"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Base 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309dc6fd914603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008190505b9190505600a165627a7a723058203fd84e887e12c514637bce5b20974138afbd8800ee3a3ea5990f1e3f5b80eec60029
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"p","type":"uint256"}],"name":"baseFunction","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgBase","type":"bytes32"}],"name":"baseEvent","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":{"keccak256":"0x94cd4ef19f046a8f2c7ecd3f1bf8608950eb8c1043770e05b6e2091b98bf5c9b","urls":["bzzr://035be3b36b5c31efdf783cc44d613cdbd7f470d4c3f2a36046183895bb101365"]}},"version":1}
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Derived 6060604052341561000f57600080fd5b5b6101758061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309dc6fd91461004957806369ac2192146100bc575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610133565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100e160048080356000191690602001909190505061013e565b604051602081016100f781600084018486610101565b9050809250610119565b600084905061010f8261011e565b8452949350505050565b610128565b6000819050919050565b505060405180910390f35b60008190505b919050565b60008190505b9190505600a165627a7a72305820f6cff506d9c240a760e64b464f074b434ba1573d10f0846857a582a70f5fea010029
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"p","type":"uint256"}],"name":"baseFunction","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"p","type":"bytes32"}],"name":"derivedFunction","outputs":[{"name":"i","type":"bytes32"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgDerived","type":"uint256"}],"name":"derivedEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgBase","type":"bytes32"}],"name":"baseEvent","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":{"keccak256":"0x94cd4ef19f046a8f2c7ecd3f1bf8608950eb8c1043770e05b6e2091b98bf5c9b","urls":["bzzr://035be3b36b5c31efdf783cc44d613cdbd7f470d4c3f2a36046183895bb101365"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol:c 6060604052341561000f57600080fd5b5b6103988061001f6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630178fe3f1461007b5780630d18e43c146101005780632909f63814610173578063800bd5c8146101a8578063b55e49c01461021f578063cc959c7314610242575b600080fd5b341561008657600080fd5b61009c600480803590602001909190505061026e565b604051604081016100b2816000840184876100cd565b90506100c3816020840184866100cd565b90508093506100e5565b60008490506100db826100ea565b8452949350505050565b6100f4565b6000819050919050565b50505060405180910390f35b341561010b57600080fd5b61012160048080359060200190919050506102b3565b6040516020810161013781600084018486610141565b9050809250610159565b600084905061014f8261015e565b8452949350505050565b610168565b6000819050919050565b505060405180910390f35b341561017e57600080fd5b6101a660048080359060200190919080359060200190919080359060200190919050506102d4565b005b34156101b357600080fd5b6101bb61031a565b604051604081016101d1816000840184876101ec565b90506101e2816020840184866101ec565b9050809350610204565b60008490506101fa82610209565b8452949350505050565b610213565b6000819050919050565b50505060405180910390f35b341561022a57600080fd5b610240600480803590602001909190505061032c565b005b341561024d57600080fd5b61026c600480803590602001909190803590602001909190505061034c565b005b6000806000836104008110151561028157fe5b6002020160005b506000015491506000836104008110151561029f57fe5b6002020160005b506001015490505b915091565b600061080082610403811015156102c657fe5b0160005b505490505b919050565b81600084610400811015156102e557fe5b6002020160005b5060000181905550806000846104008110151561030557fe5b6002020160005b50600101819055505b505050565b600080610400915061040390505b9091565b8061080060026104038110151561033f57fe5b0160005b50819055505b50565b80610800836104038110151561035e57fe5b0160005b50819055505b50505600a165627a7a723058205c28d8446143ef5dda5f84d1261708166339c5f9ccf8fbf31697b0545e9c2dff0029
test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getID","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLengths","outputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"setIDStatic","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"id","type":"uint256"}],"name":"setID","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol":{"keccak256":"0x5e565b87ee11cc29674d78623d07870be16fd2cddac4573eafc1b93c9be9ca74","urls":["bzzr://45ca55089149b498eaf2cb440285e5c1d34f8aa9a31d6b1507a2bc0caf91fed5"]}},"version":1}
test_094d355cb79ddb9e256f6dd6e29f7db5f51f84bff7badcb5c8198d5ea6c425fe.sol: ERROR
test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol:test 6060604052341561000f57600080fd5b5b60a48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60007f616263000000000000000000000000000000000000000000000000000000000090505b505600a165627a7a723058200a08d7a2ea7186921757efbc9af417cb2d3ec351bafe4aae20b70136fde514900029
test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol":{"keccak256":"0x970e3339831f5c96adec97b82c20cf3b106b1d538daad01811181274a9b79d04","urls":["bzzr://519255e70686e93646b16b73f96ca3fb1e26d618975578aadcaff12ea709b23e"]}},"version":1}
test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol:C 6060604052341561000f57600080fd5b5b6101578061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d6cd497414610054578063e2179b8e146100b7578063e98a5654146100cc575b600080fd5b341561005f57600080fd5b6100b56004808035806c0100000000000000000000000090049068010000000000000000900463ffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690916020019091929050506100fa565b005b34156100c257600080fd5b6100ca6100ff565b005b34156100d757600080fd5b6100f860048080359060200190820180359060200191909192905050610126565b005b5b5050565b6101233073ffffffffffffffffffffffffffffffffffffffff1663e98a56546100fa565b5b565b5b50505600a165627a7a723058204330c6939401fc3a8f80a2f42e7e2f2a303e76e58fc587d4c072ee6a18f5d7580029
test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"function"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"callback","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol":{"keccak256":"0xa099f7ddd2b40c7543db0a45a96ba6cef975953bcc69ecfb3ffee368a237d2a7","urls":["bzzr://61a7388a3ee156e3235c76c3aac5ee760dc30701e44f10fa88266a9633fec727"]}},"version":1}
test_0a527453321528b5056d298822ab3bdf305dcc8e2278f01aa0eeeda7f4713c8a.sol: ERROR
test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol:test 6060604052341561000f57600080fd5b5b60f18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b601273ffffffffffffffffffffffffffffffffffffffff1660006040516020015260405180807f61626300000000000000000000000000000000000000000000000000000000008152506020019050602060405180830381856102c65a03f4151560b857600080fd5b505060405180519050505b5600a165627a7a7230582089fc867565e3f9bb8babffeb5733b08ff548bd7a5fa6b818a6df69705acbb2f10029
test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol":{"keccak256":"0xd2a118aada6ae66b921d86e7c173244fe581391ee1ecaab38a3ca1cb57522385","urls":["bzzr://2056ebac6d8d177b4084f6fd4746c428d0a6360e36274d10051f54e827f564f8"]}},"version":1}
test_0abdb269175725d6a6cc01694edbfb351bf7eb5ae74a3c797ef0b58c82d17bcb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol:C 6060604052341561000f57600080fd5b5b6101408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d7da973a1461003e575b600080fd5b341561004957600080fd5b6100636004808035600019169060200190919050506100d9565b60405160608101610079816000840184886100a5565b905061008a816020840184876100a5565b905061009b816040840184866100a5565b90508094506100bd565b60008490506100b3826100c2565b8452949350505050565b6100cc565b6000819050919050565b5050505060405180910390f35b60008060006020601060076000809054906101000a9050506001018260ff1692508160ff1691508060ff1690509250925092505b91939092505600a165627a7a72305820ec804c021b0283ac8c3e540720a47007b000c573cfd7821003662e0d50d9beda0029
test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol":{"keccak256":"0x747e5d02563c1c73698a51d310c31e47e6b3becb87280d41509293f1ba1d5c56","urls":["bzzr://3c75ef6dbce68a1412099fc9843e6dc6600a55878eaf65db686ca091d4e4b69e"]}},"version":1}
test_0ad18238087d8e555c3f6053366b61e4463efe37cb96fda6b0dd9e171c45298c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol:C 6060604052341561000f57600080fd5b5b60fd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ea7034114603d575b600080fd5b3415604757600080fd5b606a600480803560ff1690602001909190803560ff1690602001909190505060b6565b60405160208101607e816000840184866087565b9050809250609d565b600084905060938260a1565b8452949350505050565b60ab565b6000819050919050565b505060405180910390f35b60008160ff168360ff169060020a0260ff1690505b929150505600a165627a7a723058206b2f6ceec668d3e58c2060186554b829a79b0fcd11ebbb2a811d7e198cccc7e30029
test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol":{"keccak256":"0xeb1bea90211455182dc2b0235abff78d70af22bde66014eb4fd4dbbc6fc479e4","urls":["bzzr://f299fc57689f4ac154b27fa5b786e1747aceeefc07ae349208e699ad4602ece7"]}},"version":1}
test_0b00e78d076181e856f8050aeba649b1c642d0bfab9feea10d9322e925457882.sol: ERROR
 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol:C 6060604052341561000f57600080fd5b5b61021e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063bb0d9b6814610049578063f1370373146100f9575b600080fd5b341561005457600080fd5b61008560048080356bffffffffffffffffffffffff191690602001909190803560ff169060200190919050506101a9565b6040516020810161009b816000840184866100a5565b90508092506100bd565b60008490506100b3826100c2565b8452949350505050565b6100ee565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b505060405180910390f35b341561010457600080fd5b61013560048080356bffffffffffffffffffffffff191690602001909190803560ff169060200190919050506101ce565b6040516020810161014b81600084018486610155565b905080925061016d565b600084905061016382610172565b8452949350505050565b61019e565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b505060405180910390f35b60008160ff16836bffffffffffffffffffffffff19169060020a900490505b92915050565b60008160ff16836bffffffffffffffffffffffff19169060020a0290505b929150505600a165627a7a72305820318b3a2add01514746d020b7d0803fef172297072daabfc174c6b6911dcffb100029
test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes20"},{"name":"y","type":"uint8"}],"name":"right","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"bytes20"},{"name":"y","type":"uint8"}],"name":"left","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol":{"keccak256":"0xb5aefe600cc8e446d64a58efae871db8a9a0042e60c6c79589d6f8292d6a0d97","urls":["bzzr://259141a1e62d33b3cc7ed3b11421d1974b6e9bb58bf3086c0320c0c29044c70f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol:C 6060604052341561000f57600080fd5b5b61002d6002610039640100000000026101b8176401000000009004565b6000819055505b610047565b60006002820290505b919050565b6101f2806100566000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806355a17aba14610054578063bb806dc9146100c7578063eee972061461012c575b600080fd5b341561005f57600080fd5b610075600480803590602001909190505061019f565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b34156100d257600080fd5b6100da6101b2565b604051602081016100f0816000840184866100fa565b9050809250610112565b600084905061010882610117565b8452949350505050565b610121565b6000819050919050565b505060405180910390f35b341561013757600080fd5b61014d60048080359060200190919050506101b8565b604051602081016101638160008401848661016d565b9050809250610185565b600084905061017b8261018a565b8452949350505050565b610194565b6000819050919050565b505060405180910390f35b60006101aa826101b8565b90505b919050565b60005481565b60006002820290505b9190505600a165627a7a723058201b5b81d1a3576a3cbb785b3c45e270da775c4b928fe567065dabfe4bd9f636070029
test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"runtime","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"initial","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol":{"keccak256":"0x49ef0112abdd7df2982be6218c18d728fd7a73abdf77b61ae8b3e5551765b91d","urls":["bzzr://49812ba7972f63ed2274304fa3f51c3bced86b2ea222c10dd4ed414e36ce30ee"]}},"version":1}
test_0b9bc99b4e94c0da80943365912b2c8d05e3e3efea20056e1196f7796cca067b.sol: ERROR
test_0babb7a0c014106447c92f0d962399f9a2347690dba15a8e948fd28adff42379.sol: ERROR
test_0be7c9a49d1877a456855ef1e414aa1833397786d4022c351aced5c83ac97d68.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:BinarySearch 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820541db40107abd34eba4107b76093299a56569d32370619d5df69352af4dae3840029
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:BinarySearch {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":"BinarySearch"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":{"keccak256":"0x27748f0cab398926c796f8d85ee309e8ef949fe0dd7d048aa450c9fdd070959d","urls":["bzzr://74fd28829bff1134d3c678b0fc49ffb198cf010bb2cffb81c614dcd36b338d9c"]}},"version":1}
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:Store 6060604052341561000f57600080fd5b5b6102bf8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631003e2d2146100495780633e530e5b1461006c575b600080fd5b341561005457600080fd5b61006a60048080359060200190919050506100df565b005b341561007757600080fd5b61008d6004808035906020019091905050610123565b604051602081016100a3816000840184866100ad565b90508092506100c5565b60008490506100bb826100ca565b8452949350505050565b6100d4565b6000819050919050565b505060405180910390f35b600080548091906001016100f39190610242565b5080600060016000805490500381548110151561010c57fe5b906000526020600020900160005b50819055505b50565b6000610130600083610138565b90505b919050565b600061014b836000858054905085610154565b90505b92915050565b600080600080851480610190575060018514801561018f575083878781548110151561017c57fe5b906000526020600020900160005b505414155b5b156101bd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9250610238565b6002858115156101c957fe5b049150868287018154811015156101dc57fe5b906000526020600020900160005b50549050808410156102095761020287878487610154565b9250610238565b8084111561022c57610225876001848901016001850387610154565b9250610238565b8186019250610238565b5b5b5050949350505050565b81548183558181151161026957818360005260206000209182019101610268919061026e565b5b505050565b61029091905b8082111561028c576000816000905550600101610274565b5090565b905600a165627a7a72305820cfc31cdd1d76a6f3e55c692e9662a7760bf43f5534c98c5fc5208e3266ddd5a30029
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:Store {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"v","type":"uint256"}],"name":"add","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"v","type":"uint256"}],"name":"find","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":"Store"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":{"keccak256":"0x27748f0cab398926c796f8d85ee309e8ef949fe0dd7d048aa450c9fdd070959d","urls":["bzzr://74fd28829bff1134d3c678b0fc49ffb198cf010bb2cffb81c614dcd36b338d9c"]}},"version":1}
test_0c8f71dd3c077db7cddd888020aabe43efe0fd4a050a424d8af994ec299a2a14.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Main 60606040525b5b5b610195806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806386b714e21461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b6000806100b0610105565b604051809103906000f08015156100c657600080fd5b90508073ffffffffffffffffffffffffffffffffffffffff166108fc60009081150290604051600060405180830381858888f1935050505091505b5090565b60405160558061011583390190560060606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a72305820fdc3f031643f1b0a3a468ab129c3e33aec671151861f584bf1eb2235e736ebc10029a165627a7a72305820b9251022e8d1d980fbe5fb75cb9f2e476f63b4203a0a2b9457e1efb2cb55915f0029
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"s","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":"Main"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":{"keccak256":"0x081f1852c9922eca5a0b6a428a8b94040c9f9626aa416bdd610b7b446370c48c","urls":["bzzr://9173e983888da45e64281e6a8804185c0795faf2d8b017fd222a10d2d4ac3ac9"]}},"version":1}
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Receiver 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a72305820fdc3f031643f1b0a3a468ab129c3e33aec671151861f584bf1eb2235e736ebc10029
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":{"keccak256":"0x081f1852c9922eca5a0b6a428a8b94040c9f9626aa416bdd610b7b446370c48c","urls":["bzzr://9173e983888da45e64281e6a8804185c0795faf2d8b017fd222a10d2d4ac3ac9"]}},"version":1}
test_0cea2a40862c7caa426b995644ab00e29c7bbc653d4bc8bf8cf77826c2ac9bc0.sol: ERROR
test_0d44422274e6ebca0688bfe44638ee87dffa224149b3d6dcc4d107678853d6d1.sol: ERROR
test_0d5516eb1c44c4002a9147da32799c61391511e23904891d17d4dec5d4a89a69.sol: ERROR
test_0d5b191ebd9e8645dc3ac3aa5847d1cbee8723f36763a427be2cb0781bb9b00b.sol: ERROR
test_0d877953de0d27127a0a12518487ced65314826ef530d6e8f737d7405e7cbcad.sol: ERROR
test_0d935f6cc4c58fb0c3610a68d83220e7ad6d12a74792e2e6fcec7269e2b6e8ca.sol: ERROR
test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol:I 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058205adbd95c3edddacf708ca1d5fb85b3f455a2df4cce6cb9136e4a54a84466564c0029
test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol:I {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol":"I"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol":{"keccak256":"0x6538f89d23b058d6d99683e72349a0542ab9478259d01608aef4ef920c6cc47b","urls":["bzzr://5c2239f0682c0dda1df03d9b39b7ec1d003d5d8cfbbd555c881b19bedf06cc1a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Receiver 60606040525b5b5b61026d806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f2451461005f57806367e404ce146100c457806383a6deb51461013f578063cba2534f146101a4575b600080fd5b341561006a57600080fd5b6100726101bc565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d76101c2565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b610134565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b341561014a57600080fd5b6101526101e8565b6040516020810161016881600084018486610172565b905080925061018a565b60008490506101808261018f565b8452949350505050565b610199565b6000819050919050565b505060405180910390f35b6101ba60048080359060200190919050506101ee565b005b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b8060008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346002819055505b505600a165627a7a72305820163c1b3429381f3d2b87214730d34c310dcf1997ceaef6baddc81651a64f650d0029
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":{"keccak256":"0xa239770a6128aa5b1bcfbff9cee06a4362f0d30f6e29517c2791782106761719","urls":["bzzr://93e213a4529275d004b72317183cac12f021f298d0cf9c8a276dcd62b7e3ece5"]}},"version":1}
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Sender 60606040525b5b5b610314806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f2451461005f57806367e404ce146100c457806383a6deb51461013f5780639bfcdaa1146101a4575b600080fd5b341561006a57600080fd5b6100726101d2565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d76101d8565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b610134565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b341561014a57600080fd5b6101526101fe565b6040516020810161016881600084018486610172565b905080925061018a565b60008490506101808261018f565b8452949350505050565b610199565b6000819050919050565b505060405180910390f35b6101d0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610204565b005b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600060405180807f726563656976652875696e7432353629000000000000000000000000000000008152506010019050604051809103902090508173ffffffffffffffffffffffffffffffffffffffff16817c0100000000000000000000000000000000000000000000000000000000900460176000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050602060405180830381866102c65a03f415156102d757600080fd5b50505060405180519050505b5b50505600a165627a7a72305820946d766b4f3b8d42930f43dc650d218850e333966c915b7fb40b9873b090144b0029
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":"Sender"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":{"keccak256":"0xa239770a6128aa5b1bcfbff9cee06a4362f0d30f6e29517c2791782106761719","urls":["bzzr://93e213a4529275d004b72317183cac12f021f298d0cf9c8a276dcd62b7e3ece5"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol:C 6060604052341561000f57600080fd5b5b6101ba8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f53ec0fe14610049578063fb678c75146100ce575b600080fd5b341561005457600080fd5b610079600480803560000b90602001909190803560000b906020019091905050610153565b6040516020810161008f81600084018486610099565b90508092506100b1565b60008490506100a7826100b6565b8452949350505050565b6100c3565b60008160000b9050919050565b505060405180910390f35b34156100d957600080fd5b6100fe600480803560ff1690602001909190803560ff16906020019091905050610176565b604051602081016101148160008401848661011e565b9050809250610136565b600084905061012c8261013b565b8452949350505050565b610148565b600060ff82169050919050565b505060405180910390f35b60008160000b8360000b600082121561016857fe5b9060020a0290505b92915050565b60008160ff168360ff169060020a0290505b929150505600a165627a7a72305820f762828be6f8c67fffc1c9e45eb17f62588a1f2f5bd9690203d6d8bf97eab44d0029
test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"int8"},{"name":"y","type":"int8"}],"name":"leftS","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"leftU","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol":{"keccak256":"0xea8c1d7f77fd3b49c1f324064a2a0a203d0dc06439d5f77f26db7099a2b47344","urls":["bzzr://f336387ada53fe1c198138b9bd495550f7d4d8a14992d30166dc28186c9da2b6"]}},"version":1}
test_0e4b3d57cd6cf64d9626a66fec121e4b423c79b0fe200de79f766c78d5c40767.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:receiver 6060604052341561000f57600080fd5b5b6101258061001f6000396000f300606060405236156047576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146061578063cba2534f1460bd575b3415605157600080fd5b605f5b60806000819055505b565b005b3415606b57600080fd5b607160dd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b341560c757600080fd5b60db600480803590602001909190505060e3565b005b60005481565b6001810160008082825401925050819055505b505600a165627a7a7230582004dbf932bf0fec70c3078a410da86f64269467c90a21dd6b376dcc658f09a47f0029
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":"receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":{"keccak256":"0x875bf99f575782ec8d642e29b966f40c6a2efa0eec9af75aebf6dc42bbb935c9","urls":["bzzr://00b3ca14273e803dec1dbb99547ffda2c944b0f29424cdfb07521c5b3fb99c05"]}},"version":1}
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:sender 6060604052341561000f57600080fd5b5b610018610073565b604051809103906000f080151561002e57600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610083565b604051610144806105f883390190565b610566806100926000396000f3006060604052361561004a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631c042f66146100925780633c6bb43614610109575b341561005557600080fd5b6100905b6000366002919061006b9291906103c6565b6001908054600181600116156101000203166002900461008c929190610446565b505b565b005b341561009d57600080fd5b6100b56004808035151590602001909190505061016e565b604051602081016100cb816000840184866100d5565b90508092506100ed565b60008490506100e3826100f2565b8452949350505050565b6100fe565b60008115159050919050565b505060405180910390f35b341561011457600080fd5b61011c610316565b604051602081016101328160008401848661013c565b9050809250610154565b600084905061014a82610159565b8452949350505050565b610163565b6000819050919050565b505060405180910390f35b60008115610243576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160405180828054600181600116156101000203166002900480156102155780601f106101ea57610100808354040283529160200191610215565b820191906000526020600020905b8154815290600101906020018083116101f857829003601f168201915b505091505060006040518083038160008661646e5a03f1915050506001600061023e91906104cd565b61030c565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600260405180828054600181600116156101000203166002900480156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b505091505060006040518083038160008661646e5a03f1915050506002600061030b91906104cd565b5b600190505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156103a557600080fd5b6102c65a03f115156103b657600080fd5b5050506040518051905090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061040757803560ff1916838001178555610435565b82800160010185558215610435579182015b82811115610434578235825591602001919060010190610419565b5b5090506104429190610515565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061047f57805485556104bc565b828001600101855582156104bc57600052602060002091601f016020900482015b828111156104bb5782548255916001019190600101906104a0565b5b5090506104c99190610515565b5090565b50805460018160011615610100020316600290046000825580601f106104f35750610512565b601f0160209004906000526020600020908101906105119190610515565b5b50565b61053791905b8082111561053357600081600090555060010161051b565b5090565b905600a165627a7a7230582090e8c79cc9afecac1833d4669acdf51fbe53700edb299a5a528167edbb90477900296060604052341561000f57600080fd5b5b6101258061001f6000396000f300606060405236156047576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146061578063cba2534f1460bd575b3415605157600080fd5b605f5b60806000819055505b565b005b3415606b57600080fd5b607160dd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b341560c757600080fd5b60db600480803590602001909190505060e3565b005b60005481565b6001810160008082825401925050819055505b505600a165627a7a7230582004dbf932bf0fec70c3078a410da86f64269467c90a21dd6b376dcc658f09a47f0029
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"selector","type":"bool"}],"name":"forward","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"val","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":"sender"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":{"keccak256":"0x875bf99f575782ec8d642e29b966f40c6a2efa0eec9af75aebf6dc42bbb935c9","urls":["bzzr://00b3ca14273e803dec1dbb99547ffda2c944b0f29424cdfb07521c5b3fb99c05"]}},"version":1}
test_0e91197d66899175949e8c2de8000e48827731a1a0b11dd900f3732443e59295.sol: ERROR
test_0e979cb3c1a681255784ecd555b0dfbf5b75438ba8dac911a780bf4e1717e0b3.sol: ERROR
test_0ea9ef978871fbdc2d0534268297c1d438b2d8b66f1b93929de2f23780ad5825.sol: ERROR
test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol:Foo 606060405260076001026000906000191690553415601c57600080fd5b5b603680602a6000396000f30060606040525b600080fd00a165627a7a72305820cf2cd34ce9548b52ee1576285d14a4d82627e9dc84febd2d52d071a3cb17cb1f0029
test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol":"Foo"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol":{"keccak256":"0x29c3be2ddb02d46441be3df5d756dcff057e4e5300cb42306802529189b2daff","urls":["bzzr://16a092e7de651adce012b6e0caa3e01837846d1a9ac57b616a88ddb30bb72d2e"]}},"version":1}
test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582022eaf4c1955188073d7d11ae77d1594ec70edeeba0e6699dfe746a0b7daa973b0029
test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol":{"keccak256":"0xee757ecab16ae30db2aea5503718f3c077b39c2c2dec43eec435d95e3a80cc4a","urls":["bzzr://7554aac7a36cd651d38135358eba7eef4f9589e23513bdde4e53e5549c80dbf3"]}},"version":1}
test_0fa8f6ee4047e3c94eb78834580861a8a5029013340004581fd4b1ea98085def.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol:C 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600090505b600a81101560b95780820191505b80600101905060a1565b5b50905600a165627a7a72305820027b601d85d37ab32cc2ddc5d322fcf3590ba9736a0e7775c70de7c4ac2038170029
test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol":{"keccak256":"0xf9dd3233e669c48527d20d253c2a12e01704c17304b612f8d03732d5be4b79e6","urls":["bzzr://47ec974007c479370c86c5d088626c2cca6e8680e55a3e2e3ce91c39de15cf8a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol:test 6060604052341561000f57600080fd5b5b60f98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c040622614603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600062ffffff915062ffffff820290506101008163ffffffff1681151560be57fe5b0463ffffffff1692505b5050905600a165627a7a72305820ead5862f5fbd9eef2d28cc4e1361ca89046ada6b25fc1e1f373749418e6179500029
test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol":{"keccak256":"0x4248cafffd8568941a659e10bb7d165814557ecdeef418b1cfeba7f00e5986b8","urls":["bzzr://2c5c5cdc920ff08b4347b9659db8280d6b7fcd01ab8505aed9ff018aed688147"]}},"version":1}
test_106baa67eeec8a88ab1ff3ddd9286b77f451c3f1134d07d8f5c3e046a9183d51.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol:test 60606040525b5b5b610109806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c68d81e014603d575b600080fd5b3415604757600080fd5b6071600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060bd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16ff5b9190505600a165627a7a72305820b805a24adddc328d9440331ac2f41de825700f3603747d61ac4b91c49ced1d4c0029
test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"receiver","type":"address"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol":{"keccak256":"0xee908b0558263ff725f54e0a7cefb38949e60ec0453841b3cacb6b7b640602bb","urls":["bzzr://3f71ec504f3e92dc0d3901d60ed577bf48216ce0a661a279171f574656d726eb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol:test 6060604052341561000f57600080fd5b5b61015a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063bf06dbf11461003e575b600080fd5b341561004957600080fd5b61007160048080359060200190919080359060200190919080359060200190919050506100c3565b6040516020810161008781600084018486610091565b90508092506100a9565b600084905061009f826100ae565b8452949350505050565b6100b8565b6000819050919050565b505060405180910390f35b6000808214156100f8576000808581526020019081526020016000206000848152602001908152602001600020549050610127565b8160008086815260200190815260200160002060008581526020019081526020016000208190559050610127565b5b93925050505600a165627a7a72305820e03282b26c008b904923f937ed4948e887e04d9d24ee70740c88abe3c8ebccc20029
test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"name":"f","outputs":[{"name":"w","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol":{"keccak256":"0xbd575db46d96723664c2f4430601d6bbc04b741c6f94cd7eccdffa6f765897e3","urls":["bzzr://30c35cf5d39178cc15b2062c96c1415e28d67d54a315912386d19c1de31c1435"]}},"version":1}
test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol:C 60606040523415600e57600080fd5b5b60988061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600073fa0bfc97e48458494ccd857e1a85dc91f7f0046e90505b505600a165627a7a723058203f94183767c764d4fb75016b5fb354c5f82bd630b0f0d6b5c55985119ae5ec890029
test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol":{"keccak256":"0xb4b5da6720e236685ef421770abad0dbdaa395f9c73064d91bb2936955365336","urls":["bzzr://394aa12e17910b734acdc7e307c535f95e7013c7baf9f39dcec8eaac374a092a"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol:C 6060604052341561000f57600080fd5b5b6101ae8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afdb4ea14610049578063cb217d34146100c5575b600080fd5b341561005457600080fd5b6100736004808035906020019091908035906020019091905050610141565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b34156100d057600080fd5b6100ef6004808035906020019091908035906020019091905050610161565b604051602081016101058160008401848661010f565b9050809250610127565b600084905061011d8261012c565b8452949350505050565b610136565b6000819050919050565b505060405180910390f35b60008183600082121561015057fe5b9060020a0292508290505b92915050565b60008183600082121561017057fe5b9060020a900592508290505b929150505600a165627a7a72305820655f327b288d7d115ab7922b94bb4f0fd9a0a7045e9b133d5bd8111d30024d150029
test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"g","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol":{"keccak256":"0xfe1448a5d07b1d013e581b035c83cb7594189e36506c1b95284d9cfbd88d35fa","urls":["bzzr://21c4aef2edab85e1d11357db6cb7d58d21be896652019b22bd31399e53e79bc2"]}},"version":1}
test_116e2289af9a0b710542caa1099c8838ce272517d389c6dac32852fbf655a246.sol: ERROR
test_11bd0a304a4696825a6d6e0ec3c86c2345986e92b59dffbad31f0e874fe2f1cb.sol: ERROR
test_11be07f1b9d0ade7f28819d9af9c17f16b3712a1a401b68b593e641844673319.sol: ERROR
test_12027e9ef618c12e325c2a53f5ebd2a601c5c46e9910898db47b25a487f04b05.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol:C 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60005b905600a165627a7a72305820df8a77a05e01f0791378c288ab2014ec699c933cf8c9912e65482af0c24f22fe0029
test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol":{"keccak256":"0xa008b6ad4efdb56141bf781188c09c4a58e42de81d5e1db01c1eeb317e0d0eb4","urls":["bzzr://189f51c5052eaf1f53166a67caa816b9f9b71a13dabcd73fef18438cdbbb1a17"]}},"version":1}
test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol:Foo 6060604052341561000f57600080fd5b5b61018b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b61005b61014b565b61006361014b565b60a060405190810160405280606581526020017f303132333435363738393031323334353637383930313233343536373839303181526020017f323334353637383930313233343536373839303132333435363738393031323381526020017f343536373839303132333435363738393031323334353637383930313233343581526020017f363738393000000000000000000000000000000000000000000000000000000081525091506040805190810160405280600381526020017f313233000000000000000000000000000000000000000000000000000000000081525090505b5050565b6020604051908101604052806000815250905600a165627a7a723058206b8c4413f4dbfbb16827d4f90ee7e5a68def8a4ebdb7d466ba641bcbac0188c60029
test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol":"Foo"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol":{"keccak256":"0x14bd3f75710025760707f7cc08d626789d37c9a35cd6bc60aade84b0d510e2d8","urls":["bzzr://cf65b0f6c8205f87ce34bb8e45f15a134d06426ca78dac1dce9a9b08dcd362cb"]}},"version":1}
 conv uint256 -> uint256
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol:Test 6060604052341561000f57600080fd5b5b6101ea8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636f7132841461003e575b600080fd5b341561004957600080fd5b6100a2600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610154565b604051604081016100b8816000840184876100f0565b90506100c9816020840184866100d3565b90508093506100eb565b60008490506100e18261010d565b8452949350505050565b610108565b60008490506100fe8261013e565b8452949350505050565b610139565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b610148565b6000819050919050565b50505060405180910390f35b60008083519150838381518110151561016957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000290505b92509290505600a165627a7a723058203f7c1f301cbcfae76f810568c0b7267b3c3f56789ba5c0e2a489e41ceb31a7130029
test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"i","type":"uint256"}],"name":"set","outputs":[{"name":"l","type":"uint256"},{"name":"c","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol":{"keccak256":"0x8e7ca81bcc73e954dc413ec961e62323a54d1ca7ab4f6d196eecb22830db6dc3","urls":["bzzr://54e4ad0a761037fa80314d8058f0671f5f565b2c26824ae2e4e2613aad68f98a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol:C 6060604052341561000f57600080fd5b5b61026b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c65c00c14610049578063f8800456146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c16101a7565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600080600090507fac0db69d4d0cab623c90654fc37dc538d2855e4d313b044f0446b487c34777a681604051602081016101528160008401848661015c565b9050809250610174565b600084905061016a82610179565b8452949350505050565b610194565b6000600282106000811461018c5761018e565bfe5b50919050565b505060405180910390a1600191505b5090565b60008060009050600590507fac0db69d4d0cab623c90654fc37dc538d2855e4d313b044f0446b487c34777a681604051602081016101ea816000840184866101f4565b905080925061020c565b600084905061020282610211565b8452949350505050565b61022c565b6000600282106000811461022457610226565bfe5b50919050565b505060405180910390a1600191505b50905600a165627a7a72305820e4d6bcac9f96e6224d8d4e820da0ffc3fb2140e62962fb4aa4e17f156e8b22ed0029
test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_log_ok","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_log","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"uint8"}],"name":"Log","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol":{"keccak256":"0x290fc543ce334e20b2e65dbeacfc70793afe254589a829eaa5c75db77c4fa078","urls":["bzzr://c97f8b852491777d767046c7be7795c23f9a7c104ae4f0b50b56bd25d6227f46"]}},"version":1}
test_1318882da9d66fdd45a26ea4ad6c8029f3846484693015621855b7f605c460da.sol: ERROR
test_1373c91ad369a3e8f814242e12f4ec9de6a7e5dc3162d379cd31e3dc22104f37.sol: ERROR
test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol:test 60606040523415600e57600080fd5b5b608d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cd580ff314603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b5b505600a165627a7a7230582058004d2ca75b119a83cdfc3f00a45cabca1d8138b2b3ba2e21cd291322ee31580029
test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"b","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol":{"keccak256":"0x4dfc6ac1c94c11a4d68e15e05a04d5aefc16d66348fe80ac58b772b4789d4b5b","urls":["bzzr://1ad4f83fa2d7fe5123c32305eb9b15122bfbfdb6310718a189463e9f15d4804d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol:C 6060604052341561000f57600080fd5b5b61011b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14604757806326121ff01460a3575b600080fd5b3415605157600080fd5b605760b5565b60405160208101606b816000840184866074565b9050809250608a565b6000849050608082608e565b8452949350505050565b6098565b6000819050919050565b505060405180910390f35b341560ad57600080fd5b60b360bb565b005b60005481565b60008090505b600a81101560eb5760008081548092919060010191905055505b60eb565b808060010191505060c1565b5b505600a165627a7a723058204e26f5c947d985d3a32309b5cbfe9e6b3a1092a92f00957782abe10ebf0959b30029
test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol":{"keccak256":"0x350ecd40a96cb9b5db08a05b49273cd5d6751d075890c5ef550829facaab6923","urls":["bzzr://e00f6d0bc6ca95ea5b5ecb250e95ccdd08884796c8e76892f500fae0ba522a1d"]}},"version":1}
test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol:test 6060604052341561000f57600080fd5b5b60a38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063e2179b8e146059575b600080fd5b3415605157600080fd5b6057606b565b005b3415606357600080fd5b6069606e565b005b5b565b6074606b565b5b5600a165627a7a72305820f6bc7bd3f0e13b98ea787fc9c15fb40e522f8c42b54c8609b0a8090a61e2600d0029
test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol":{"keccak256":"0x77d82817e4cff7e90e12166b7d361301ad015ac7bf9c4e21689ff6de4ac8d528","urls":["bzzr://d8863bf132f8927f162fbf86c137e281eb66a7c0258beeb0eb316fb7f4f63612"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13f5259191a3b595d381543050a1f30780c8b27ac02f02959077123c87321b74.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol:c 6060604052341561000f57600080fd5b5b61019d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063eb8ac921146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061014a565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100e66004808035906020019091908035906020019091905050610155565b604051604081016100fc81600084018487610117565b905061010d81602084018486610117565b905080935061012f565b600084905061012582610134565b8452949350505050565b61013e565b6000819050919050565b50505060405180910390f35b60008190505b919050565b6000806101646007850161014a565b91508290505b92509290505600a165627a7a72305820ddc48efc52cc09d96afcd78cd8b2d27ff6e80ea6dcfb5a3a0d936cea988ab2380029
test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"test","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol":{"keccak256":"0xc4eb34fe8b10d59cdabad5e70951a58ab4a70e5726a95b224e77e695b0ea5791","urls":["bzzr://3e522bccf3c3e8783223092e838fb65c32a6078adf34d4e47080d38178c1b732"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Arst 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820eae7e48b78dec2a916ecc4e976e47521ed582d75c65bc2aa16e9798b1f9b2fe30029
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Arst {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":"Arst"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":{"keccak256":"0x8516a29fd86ad07611e72513b8f3acccac9686e32ea337e8486a0e88118f76eb","urls":["bzzr://15e26ff7308612fe1b36277a5a045e2cb68d1a5e546c91de47eb92d71fb9ebd9"]}},"version":1}
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Tsra 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a723058205a7365136b0c9749cf0a02383886229f28c1190a648228fa6cb7b75ec81bbc6f0029
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Tsra {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":"Tsra"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":{"keccak256":"0x8516a29fd86ad07611e72513b8f3acccac9686e32ea337e8486a0e88118f76eb","urls":["bzzr://15e26ff7308612fe1b36277a5a045e2cb68d1a5e546c91de47eb92d71fb9ebd9"]}},"version":1}
test_14a7c8c4203967e2390286d58b196ae9e400c1dcd1901f4054fdaab8dca60c6f.sol: ERROR
test_15066c8903eb613a9d2cb6c176a365cd1b56ae360d801e24a74a38b79c91f054.sol: ERROR
test_151d3f3cb6be70f3fd13c47b4bd7b12a214b1b1e5fe12a57af3ef2bc1e5a7b02.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol:test 6060604052341561000f57600080fd5b5b6101038061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008060019150600290505b8080600101915060ff1682029150828160ff1611151560d05760b3565b5b509190505600a165627a7a7230582021d7e2a1950fd5eb8f87be830a5b6eb8d7f85670bc6e138e69ae5bb89db20ff30029
test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol":{"keccak256":"0x59eb4c13a919378c96ebe10c4170edbea7acdade544497300397ef1117fe38e9","urls":["bzzr://4f55490b6c8e49171fcadeeb1807a9e44bf728e9bffc331c027d55276900dae4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol:Test 6060604052341561000f57600080fd5b5b6101ed8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100c7565b6040516060810161006781600084018488610093565b905061007881602084018487610093565b905061008981604084018486610093565b90508094506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b5050505060405180910390f35b60008060006100d4610198565b6100e2600160026003610112565b90506100ef816000610152565b93506100fc816001610152565b9250610109816002610152565b91505b50909192565b61011a610198565b83816000019060ff16908160ff168152505082816020019061ffff16908161ffff1681525050818160400181815250505b9392505050565b60008082141561016b57826000015160ff169050610192565b600182141561018457826020015161ffff169050610192565b82604001519050610192565b5b5b92915050565b606060405190810160405280600060ff168152602001600061ffff1681526020016000815250905600a165627a7a723058202b6cf02b9627acf5c488f4e871d91dae6d2836d14cf54cc136ddaaca487c13700029
test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol":{"keccak256":"0xcfc4d9f7eac76e5ac984bc118f98ee6590142b22eae556da1569f82082663ed5","urls":["bzzr://59add2486bedf8828e6b1fd91d72d2939150386e8467ec3e04ac56c73e72ef71"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Arst 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582042078b544bcee1169f3b55ece4a5849a41cffd2780a3a14e7c71bd38ccef925f0029
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Arst {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":"Arst"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":{"keccak256":"0x3311b50549efd537816579544dd07d0954f32c990070d6aae29afa03a80f1ab7","urls":["bzzr://df4fd053a4013d2114467c13ae04412f3ce9da909018255b52db086abca85242"]}},"version":1}
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Tsra 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820c385a6e5bdde784dbc7189373229e4e4d88b448570162704829fcd5c2baf6d370029
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Tsra {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":"Tsra"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":{"keccak256":"0x3311b50549efd537816579544dd07d0954f32c990070d6aae29afa03a80f1ab7","urls":["bzzr://df4fd053a4013d2114467c13ae04412f3ce9da909018255b52db086abca85242"]}},"version":1}
test_15e8accd1add8b2622d379a257b3e7e0cebd9409aa9e361ffdd3c64dc9b0447d.sol: ERROR
 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Helper 60606040523415600e57600080fd5b5b606280601c6000396000f30060606040525b3415600f57600080fd5b60345b60006009815481101515602157fe5b906000526020600020900160005b50505b565b0000a165627a7a7230582005789c8e3b905917e1ca0a1d21f1905e34e0fd0f5af6c58f5b6079a7390cd5b30029
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":"Helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":{"keccak256":"0x4d052e67f75fe5d6db1ea1486c7445c80f4ca937619b424c8f1e5b46d48499d0","urls":["bzzr://1b684d06c2d060bddc2f12d6b18f90dd8ff2f2507f404d8e87e1d185d7bfe537"]}},"version":1}
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Main 60606040525b5b5b61018f806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063723939ce1461003e575b600080fd5b341561004957600080fd5b610075600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610107565b6040516040810161008b816000840184876100a6565b905061009c816020840184866100c3565b90508093506100be565b60008490506100b4826100e0565b8452949350505050565b6100db565b60008490506100d1826100f1565b8452949350505050565b6100ec565b60008115159050919050565b6100fb565b6000819050919050565b50505060405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff166108fc60059081150290604051600060405180830381858888f193505050501591503073ffffffffffffffffffffffffffffffffffffffff163190505b9150915600a165627a7a7230582000448a4545ce0b21ca7c0493494236b84f30c3db0eec29c059e20a57915e1fa60029
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_a","type":"address"}],"name":"callHelper","outputs":[{"name":"r","type":"bool"},{"name":"bal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":"Main"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":{"keccak256":"0x4d052e67f75fe5d6db1ea1486c7445c80f4ca937619b424c8f1e5b46d48499d0","urls":["bzzr://1b684d06c2d060bddc2f12d6b18f90dd8ff2f2507f404d8e87e1d185d7bfe537"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol:First 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b60006008600014801560ae575060066003105b90505b905600a165627a7a72305820b8a9bdf3b6295ac6935852f5c35a9c631bbfcf316569b02250fbc4fa382e670a0029
test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol:First {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol":"First"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol":{"keccak256":"0x0810ebee6c415fe02137726707fa7ef1ba689cdc54de63d955856f25476022ee","urls":["bzzr://7753a2f1bd25fca2243a6d5392a0a62217a39b1e71d871e7f4ce36e5bcdd247f"]}},"version":1}
test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol:c 60606040523415600e57600080fd5b5b7812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f226000819055505b5b603680603e6000396000f30060606040525b600080fd00a165627a7a72305820db40a5c181135a6848e7e306d20b784bb9c10875def5538ff24f2eaf9138a7380029
test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol":{"keccak256":"0x96ad13eb6521f2cc06b6f8835820c67bd7545b19000274742bcd93281f8b1853","urls":["bzzr://85e0471cfc82d925c0527a403b0abd077e4a0ccc59cf2fc582324c5661bf041f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv int_const 5 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_5_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_5_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_5_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_5_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol:A 60606040526000600360006101000a81548160ff021916908315150217905550341561002a57600080fd5b5b6103018061003a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633a7d22bc14610054578063f7cb8e66146100c7578063f8a8fd6d1461012e575b600080fd5b341561005f57600080fd5b6100756004808035906020019091905050610195565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b34156100d257600080fd5b6100da6101b3565b604051602081016100f0816000840184866100fa565b9050809250610112565b600084905061010882610117565b8452949350505050565b610123565b60008115159050919050565b505060405180910390f35b341561013957600080fd5b6101416102c2565b6040516020810161015781600084018486610161565b9050809250610179565b600084905061016f8261017e565b8452949350505050565b61018a565b60008115159050919050565b505060405180910390f35b600080826003811015156101a557fe5b0160005b505490505b919050565b6000803073ffffffffffffffffffffffffffffffffffffffff16633a7d22bc60056000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020810161021e81600084018486610228565b9050809250610240565b600084905061023682610254565b8452949350505050565b61024f565b6000819050919050565b610266565b600061025f82610245565b9050919050565b5050602060405180830381600087803b151561028157600080fd5b6102c65a03f1151561029257600080fd5b5050506040518051905090506001600360006101000a81548160ff021916908315150217905550600191505b5090565b600360009054906101000a900460ff16815600a165627a7a72305820f5b561cb0fbe47736ac086d515204c8fd2e42682f15ddf8708d1a4dadaeaf0c70029
test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"getElement","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testIt","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol":{"keccak256":"0x197fdb6a5457c9909045dd167eb604d698ed6ee02127cdbe935dd8f6c16c44f0","urls":["bzzr://738b57b5da8b556f29a89b241525bf59a06f82590d40a651cf78284373d7a0cd"]}},"version":1}
test_173595f8ea0dbc8e1cd082b6e75ebf69be2d91f108433211edcd7353fd21e14e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol:test 6060604052341561000f57600080fd5b5b6101128061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006064821160c7576032821160bd57600a60c0565b60325b60ff1660da565b6103e8821160d557606460d9565b6103e85b5b61ffff1690505b9190505600a165627a7a72305820493d09be411e57406f160ab81e2375de2f6492e75ca1c7bc946240546569b2e70029
test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol":{"keccak256":"0x0ffb4e4f77d5782353ee626f56ec49e3891894744086888181f324c27933a185","urls":["bzzr://9bb68c012ccb60e3157d609afd830907f820d3a9b9ef6d644a43d4cb00b81391"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol:c 6060604052341561000f57600080fd5b5b6102b98061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b8e010de14610049578063d826f88f146100b0575b600080fd5b341561005457600080fd5b61005c610117565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c3610133565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010c565b60008115159050919050565b505060405180910390f35b600080366000919061012a929190610161565b50600190505b90565b60006001600090805460018160011615610100020316600290046101589291906101e1565b50600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101a257803560ff19168380011785556101d0565b828001600101855582156101d0579182015b828111156101cf5782358255916020019190600101906101b4565b5b5090506101dd9190610268565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061021a5780548555610257565b8280016001018555821561025757600052602060002091601f016020900482015b8281111561025657825482559160010191906001019061023b565b5b5090506102649190610268565b5090565b61028a91905b8082111561028657600081600090555060010161026e565b5090565b905600a165627a7a723058200d53c0dada04bdd8acd6c8edc25709af03a3d531f2cd995339e68ebbd085634e0029
test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"reset","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol":{"keccak256":"0xb2321c3a7f98c709e8b9755b430d9cd99cd82dc235732549dda78cf1d7fc98b1","urls":["bzzr://ee5da8cb4fa96b1c8d31c3c17c1fd7acc99614581bfa2888760cf7cd2d6f0435"]}},"version":1}
test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol:test 60606040526404a817c8006000556404a817c800600155600280556404a817c8006003556405d21dba006004553415603657600080fd5b5b60368060446000396000f30060606040525b600080fd00a165627a7a72305820879de4dc9892c4fefed4bc4eebb252581b5a2bbab6cb82d6bf6ba6528e06b1920029
test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol":{"keccak256":"0xf80c1e41f0cc56f981064dbaa8c51bfde36d9bceb554909f95e0dabf39cdb4b0","urls":["bzzr://c75426f730507f9fb8c31e790cd7dde5375da3e8dc2acb05857dd949ed557ce5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol:test 6060604052341561000f57600080fd5b5b6101488061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063e420264a1461006c575b600080fd5b341561005457600080fd5b61006a60048080359060200190919050506100df565b005b341561007757600080fd5b61008d600480803590602001909190505061010f565b604051602081016100a3816000840184866100ad565b90508092506100c5565b60008490506100bb826100ca565b8452949350505050565b6100d4565b6000819050919050565b505060405180910390f35b60078111156101025760016100f66008830a61010f565b0160018190555061010b565b60016000819055505b5b50565b600060015490505b9190505600a165627a7a72305820603837136c435c2f6a35c93c238599a05e153a5cd19b56279d836b4ea3278cd70029
test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol":{"keccak256":"0x81fea17f68454010673fe0d6f9c27eef7aa54d5d168080429ed6597f97b6effe","urls":["bzzr://f1b9ea7c24507d6ba881da3c083a113d8ab686adcc0a66b5f08251b79b15fc52"]}},"version":1}
test_17b3609d8a5330966eb0b8cbad1e409627a3767c5dc6679977844c9a46229615.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol:Test 6060604052341561000f57600080fd5b5b61015a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006002600060405180807f61626300000000000000000000000000000000000000000000000000000000008152506003019050908152602001604051809103902081905550600060405180807f6162630000000000000000000000000000000000000000000000000000000000815250600301905090815260200160405180910390205490505b905600a165627a7a72305820c409348948b1c780943fb22cb3a2a5849ed9b397af4f9645421d39a10a0eaee70029
test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol":{"keccak256":"0xe4296170234df1a72b46e77e7cee241400dc7588a17bf16c509a5b618c4ef312","urls":["bzzr://71d84480466857ae85d12ac4c23bb82202dcc36b06f9bcc63eda3d037faeed99"]}},"version":1}
 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol:C 6060604052341561000f57600080fd5b5b60f78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609d565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6092565b600061ffff82169050919050565b505060405180910390f35b600061ffff905060208101905060088161ffff169060020a02905060108161ffff169060020a900490505b905600a165627a7a72305820129c10384c849652ccc6b02492bca0e3e79a2ef072e0a5745cdda5f34149bf910029
test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol":{"keccak256":"0xc96c1b2b8cf5ee0a8238680e6fbf0036c89af58300435abdd4194326cbdafaea","urls":["bzzr://3e9b4985f199208fdd91b5789dbfd8e659a257fb7864257d7e14a8b61e3f1ae6"]}},"version":1}
test_182d623947218542e8b63a4c65488e274805a45bb2fe4bb210a186bdc05e1cb7.sol: ERROR
test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058204f955d6b2b63810f092e6e6d96468371eeaa5de41fd46f39d54fc20ade8c99130029
test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol":{"keccak256":"0x9d73c6dec9f647cec4949cfec204f5c82b25634b55b5d2c58f6d86c8c96cb8a5","urls":["bzzr://bab92a28332b7dc543451d961b316cbc78244e0930d820d25c4a6f514c18dfd8"]}},"version":1}
test_18d68acbf3ab7a993251f9e9244102a75d1266d1a9248e8530812bd4ee6ff3e1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol:test 6060604052341561000f57600080fd5b5b61012a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000806006905080915060108180600101925002820191506101008160010191508102820191506003600181905550611000600160008154809291906001019190505502820191506201000060016000815460010191905081905502820191505b50905600a165627a7a72305820f515f6c3aa4bcb69612cfc4734ad7c68318fb994b81577e5b3dffbdac4a54cf00029
test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol":{"keccak256":"0x858d10b1378c1843db38aefc3e21ad1f4274c2df3838cc9326d0b8b257372aff","urls":["bzzr://4b2178aa54bffabe7d4c53f68edf3eb005856986052f15d008e16ea57264d029"]}},"version":1}
test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol:test 6060604052341561000f57600080fd5b5b60b68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b601273ffffffffffffffffffffffffffffffffffffffff166108fc60019081150290604051600060405180830381858888f19350505050505b5600a165627a7a723058209c54772e2318692074f472f3af1e2d2ef441602c9603b777910e10be48e5ec060029
test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol":{"keccak256":"0xe1251836a0053fb06230fb96e0fe4b3422cce731bb7ee3c81dc4f5935157cb8f","urls":["bzzr://d307b6c91979ed49dd486250da8012c4d4bb34270349e2dc3c746f8b0382c57e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol:C 6060604052341561000f57600080fd5b5b61004b64010000000002610123176000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610059565b60006002820290505b919050565b610196806100686000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063eee9720614610049578063f8a8fd6d146100bc575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610123565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100cf610131565b604051602081016100e5816000840184866100ef565b9050809250610107565b60008490506100fd8261010c565b8452949350505050565b610118565b60008115159050919050565b505060405180910390f35b60006002820290505b919050565b60006101236000809054906101000a900467ffffffffffffffff1667ffffffffffffffff1663ffffffff169063ffffffff161490505b905600a165627a7a7230582053440dea124763289c9305d7b9b4b9e7da10fea5692f2186a0dadcbee40c5a4d0029
test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol":{"keccak256":"0xd99fb58464027bedb734139ad6c0cd95722e128186e2069422bd63e00d55399c","urls":["bzzr://af6d2bba6e168c0ad96ab73d095c91142ce90a97261851d86ba2993358e662b4"]}},"version":1}
test_1a3364f8f5e6365127c7a457918b47e6b282018556e9da1676bac8638994e914.sol: ERROR
test_1a3c9b304083fe3a04e2c8c1c834f7bbfc7daae72691331061fd50f8deb007fd.sol: ERROR
test_1ab12d94e657fe07023f378e761f037c98a45ebd9ed7998c19f72cfe661974fd.sol: ERROR
test_1b05943fcc40f3431a5ce865a3bd21976f4d02ed8aa72ede33d3e7a54396d434.sol: ERROR
test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol:test 60606040523415600e57600080fd5b5b608d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600260070b600263ffffffff1650505b5600a165627a7a723058207d6b6b98bdd3d89e5c7996da249e920fdadfa4cd724bb9e8eda294f238320c350029
test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol":{"keccak256":"0x270da1c6518ac8337d93990eedc61a4548dc3fec9db09dda3a8cd7f17932950f","urls":["bzzr://76cef41b26e642f89c4716d4f3d602ea6015205f5ec0809df36590801d85ee8a"]}},"version":1}
test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol:test 60606040523415600e57600080fd5b5b609c8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b6001604051808260010260001916815260200191505060405180910390a05b5600a165627a7a7230582081ec3067d50e648393b48805f7dea80cae0e2770cdab13e932de295083e6352e0029
test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol":{"keccak256":"0x2430222b7e050fc07c7dd46a49cb1b904167f8e6fe3b8eb8f9e043da77d8cdfe","urls":["bzzr://53a1feb41205c0f76b1522beab205acdc657713a0eba78aad6a565f349c1cce2"]}},"version":1}
test_1b7570f731b7d428d43dea2dc89acfabf7a73c022087aab0ef28ae10c5e3cf6b.sol: ERROR
test_1bb9b11107cce524699c7a283841a1d15a4e293518a2b149a005e061c9dd63b1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol:Test 6060604052341561000f57600080fd5b5b6101b58061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806351627d1d1461003e575b600080fd5b341561004957600080fd5b6100e460048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b828210156100c457848483905060600201600380602002604051908101604052809291908260036020028082843782019150505050508152602001906001019061007f565b505050505091908035906020019091908035906020019091905050610148565b604051604081016100fa81600084018487610115565b905061010b81602084018486610115565b905080935061012d565b600084905061012382610132565b8452949350505050565b61013c565b6000819050919050565b50505060405180910390f35b60008084519150848481518110151561015d57fe5b906020019060200201518360038110151561017457fe5b602002015162ffffff1690505b9350939150505600a165627a7a72305820607d58d8bc72ac5e69a68edbcf8fe8b07c7ec08e7b5b9b309602411dbc2649540029
test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_data","type":"uint24[3][]"},{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"set","outputs":[{"name":"l","type":"uint256"},{"name":"e","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol":{"keccak256":"0x89811138569df64ae7ebc941c4753e8a13a865dd999bef526e2dcc38676da8ec","urls":["bzzr://8c581a69d2c47a789bd909fadf0bdbd377c870260b15cdb8819c251fbf9ee199"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:C 6060604052341561000f57600080fd5b5b61017b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad61013b565b60076040518059106100bc5750595b908082528060200260200182016040525b50905060088160038151811015156100e157fe5b90602001906020020181815250506100f881610118565b80600381518110151561010757fe5b9060200190602002015191505b5090565b600281600381518110151561012957fe5b90602001906020020181815250505b50565b6020604051908101604052806000815250905600a165627a7a723058207aeda1791104ac2bea3cfe09a306b807cccfb00f8760f9209cdf436b1ab8ab020029
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":{"keccak256":"0xa5f3991b71a98634df282a99991ca81f8ac865059b9edf73de26718878740bf2","urls":["bzzr://a979d9d0249a5fbaa12452c75b9061d482d91e24d58415f5c43d104633bae267"]}},"version":1}
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207adaad072ad59dbfd23c8fd62e08c1a168553558aa90f7bb7e17c6d285c824f20029
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":{"keccak256":"0xa5f3991b71a98634df282a99991ca81f8ac865059b9edf73de26718878740bf2","urls":["bzzr://a979d9d0249a5fbaa12452c75b9061d482d91e24d58415f5c43d104633bae267"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820c99f7acb764779d01d8d023d78ac0b80c24ef2f0532ad7c0dfadb376ba1e7e4a0029
test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol":{"keccak256":"0xda53fdb4990b373a85bc4094637267f84a5274f37aba6dc0c35816aa1e738047","urls":["bzzr://e9967ec0c9597f1a398d43b77c38fdd8f2a1ef57e546ef66de0ea95f7f5c5f46"]}},"version":1}
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:C 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:C 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:I 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:I 
test_1cfc3e978441bcc1766ee71be7c15e99eda259b5a695e652608901018de9f2fa.sol: ERROR
test_1d6c1464594e42a5f6c19a29004b7de6017ec20b4a3e25fac85c22e2365a637b.sol: ERROR
test_1d772c2f7af039466d2bdb8aed1bc4bbfb31d0d2b2c965a7acf703aeea9b02e7.sol: ERROR
test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol:from 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e69ab9095c5abf0f54b00ba053f24aa3b675dd96f070de65d9b2c384bce3a81d0029
test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol:from {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol":"from"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol":{"keccak256":"0xf1dd1b82e2f655e55559020b98436cb1efa4350c4a3896962a0b1cf9b82b332d","urls":["bzzr://43d78b8ce00932d07e249d325e5fc3f819d5d2b3f5c2103090ec362b9d99885a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol:C 6060604052614200600055341561001557600080fd5b5b60cb806100246000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820daaac0482973a3e70260a266f75bf4e49dc78bfc4d79d7d4c2ef6274a1f5922a0029
test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol":{"keccak256":"0xb393cc3b7760705cde7046e9ad1f5c1e07fdbf3a76a976ef92c2bf617d04c8aa","urls":["bzzr://8e56d50ab0495f17c7a7afc704560a59bbfaea67b2e90d4f243cafa095c79d5d"]}},"version":1}
test_1de8de24f1dfad11335512b1cc46c2129dc04edae243593efc506b6e0844f545.sol: ERROR
test_1e246bccab57cf7e4947977c7f2673dd5037b99bf621e3fb68da6eafdecd0690.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820d6bbec5fe8d9160d2cd61d79874e08c37e31ff5b3bb86f16a86aadccc24b03590029
test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol":{"keccak256":"0x2fc5c32c2a7ace0133340e18e394aefa81f088206d10547ab01ca2ff9524d7fa","urls":["bzzr://80a30d4036d72bdfb0c01d7798743bfc04a2f0a2e23cbfdd46afc655cd80fe87"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol:collatz 6060604052341561000f57600080fd5b5b61024c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806391ad5c8f14610054578063a444f5e9146100c7578063a5f7af191461013a575b600080fd5b341561005f57600080fd5b61007560048080359060200190919050506101ad565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b34156100d257600080fd5b6100e860048080359060200190919050506101c4565b604051602081016100fe81600084018486610108565b9050809250610120565b600084905061011682610125565b8452949350505050565b61012f565b6000819050919050565b505060405180910390f35b341561014557600080fd5b61015b600480803590602001909190505061020f565b604051602081016101718160008401848661017b565b9050809250610193565b600084905061018982610198565b8452949350505050565b6101a2565b6000819050919050565b505060405180910390f35b60006002828115156101bb57fe5b0490505b919050565b60005b60018291508111156102095760006002838115156101e157fe5b0614156101f8576101f1826101ad565b9150610204565b6102018261020f565b91505b6101c7565b5b919050565b60006001826003020190505b9190505600a165627a7a723058201ddd144357c6debd59e986a0a6ae3b0b3d7b15cfce64c78cd4a4a52df6575a030029
test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol:collatz {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"evenStep","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"oddStep","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol":"collatz"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol":{"keccak256":"0xec19d494b24418f5d12684b3b44fe7b4d9aaf4d4e8213785992ce37dcc573750","urls":["bzzr://d1a432a28ddbcb61ef8e2451e839de6e9f9d1591645a19c9850855537d3e0f99"]}},"version":1}
test_1e973c802266487455e19f0182d49f41024fe12a673cf9d22685997391e5db2a.sol: ERROR
test_1ec89a1f59667dbcfd24a63d4f332cd1148b840cb4bc28e8d01cebe41e7e0ccc.sol: ERROR
test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol:test 60606040523415600e57600080fd5b5b6001600081905550600260008190555060006001819055505b5b60368060366000396000f30060606040525b600080fd00a165627a7a72305820d88ecae2cce72926f29a2cdff5d4bf254dc8b3f899b8240aec6c555bce40e8ea0029
test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol":{"keccak256":"0xb32034ae7a749f055cc48b09a14246ff57f551f0c1854d5996f7f0974f75934b","urls":["bzzr://73d0892c3e5816cb8cfad374645c0d78d136f9dbd8c1e96c2baf784b0666a2c0"]}},"version":1}
 conv enum Interface.MyEnum -> enum Interface.MyEnum
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_MyEnum_$3_to_t_enum$_MyEnum_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_MyEnum_$3_to_t_enum$_MyEnum_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_MyEnum_$3(value))

			}
		
			function cleanup_assert_t_enum$_MyEnum_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Impl 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d60a8565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b609d565b600060028210600081146095576097565bfe5b50919050565b505060405180910390f35b60008090505b905600a165627a7a723058204ce530675ce23d19eae8b279ef81d47998822c4d7ac510b622407a0ceb7a78750029
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Impl {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":"Impl"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":{"keccak256":"0xe3ab70bc3c2d13faecc8de09534fc41d647394476f62eabb2f3c21c14273fe3b","urls":["bzzr://9d7524a83f9cf965926a7863ce36e3f4071ccc5357861bb4fa6b6153a6144c87"]}},"version":1}
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Interface 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058201adcac012454d07ae19105a01e1162cc4be56468a2e1b7c485d758446ba254350029
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Interface {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":"Interface"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":{"keccak256":"0xe3ab70bc3c2d13faecc8de09534fc41d647394476f62eabb2f3c21c14273fe3b","urls":["bzzr://9d7524a83f9cf965926a7863ce36e3f4071ccc5357861bb4fa6b6153a6144c87"]}},"version":1}
test_1ff2e190719816b0d1a397f5c1e63278c7d398676be9ac9f8bae7b93dae667c3.sol: ERROR
test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol:C 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6010606d565b60008060008392508491506007905093509350939050565b60796003600260016055565b8260005281602052806040528360605260806000f35b5600a165627a7a72305820beec999f1c66e5463b6bc8753100a05ccb2ff71a7b1a283ff2175a47f80971270029
test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol":{"keccak256":"0x53bd61e49733823b725225623e8a1980184c0d8eea9b546b4b4d0db81a8727c6","urls":["bzzr://98c88d122bf0b851d31c9f1ac4ee707b323c0d45a0a5f845ff0724ec0dd3aa8a"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol:test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600263ffffffff1690508091505b50905600a165627a7a7230582061a609d66b23a9fc2eb0307b3c476c05cfe9c43c27ed167773afb2abbc74871b0029
test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol":{"keccak256":"0xeaea66b3c9a1e1fd21b73cd3c57abec44952185c53685936a9af85d95fa2e8e7","urls":["bzzr://5c7300a0ca411829edd183e385b0800ef13a4028a85c997ba4c639945bab8548"]}},"version":1}
test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol:test 60606040523415600e57600080fd5b5b6000670de0b6b3a764000090505b505b603680602c6000396000f30060606040525b600080fd00a165627a7a723058203a0aefe9c374adc050fe781a74e0aeeb56515c1e14bf7f57129426c78420f9ad0029
test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol":{"keccak256":"0x3d4bb3519559cdfe0dd9609bc04357a451b634368b40cc065c6500f4fe9bc5a7","urls":["bzzr://97a2ab775d67df1404e426ff7d2f35bd87f010941b8cde78a3a7e45c2d3b9db7"]}},"version":1}
test_2071a85683003fd083d9d7e879d030123a92d2da6fffff0dc5384ebae5cc335c.sol: ERROR
test_209d8b8a4bc427fe528c2b3328ae1a64ae97baf034b8f41ce9c6aba3999ef8d0.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_20f3feb9bfb8ab4076d1eef19e91f2e785eb515bc1955307d751e93458abed70.sol: ERROR
test_219335afc9c6f317a73f846bb4822dbedfcb5598b806fb4938055886e2b04d29.sol: ERROR
test_21c270ed6334d3e6637ee5cb09ef763f56f9a253eb66d5db1bc514f0348b677d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol:test 6060604052341561000f57600080fd5b5b6101068061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008060019150600290505b828160ff1611151560d3578060ff16820291505b808060010191505060b3565b5b509190505600a165627a7a723058204b709ddf28c16167d00f17a249ded6247cbad1c1670402f52bccace12d0f606d0029
test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol":{"keccak256":"0xb6096362f09f4c58d673e192b30ac76788ad407a662f037d1c94cb2fef460cba","urls":["bzzr://965cdfa81b7f634c3a4e7d2d1e22ee8f61b3ac7656d6f1ea6f3498170189ca33"]}},"version":1}
test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol:test 60606040523415600e57600080fd5b5b6000600190505b505b60368060256000396000f30060606040525b600080fd00a165627a7a72305820bcc23b701aa474b6d24068a72747c2b51986b26bb1749704c5c5b19d3ba81e6f0029
test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol":{"keccak256":"0x1b4f635f08a60596759b7249ba216cc1042da7269ebc289d0767b7ff8881d4a5","urls":["bzzr://67f732aa9a0c2cb6b120160cbbae37835715731db20cf180184173b80ded244d"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol:test 6060604052341561000f57600080fd5b5b60ff8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639f3fab5814603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b600081604051808260001916600019168152602001915050604051809103902090505b9190505600a165627a7a723058203f0d833a0e4d0c7a8aa95e6a05949fec0efb75692af00348853f960d21b477650029
test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol":{"keccak256":"0x1fc57a11d7f1427f9df46959305d7ba33bdacfada2662774588c2d5c553fd91f","urls":["bzzr://35dc68d7b12510f87ebfa7d989c22b50d1e2f427db0883e25eb5498c097f97fe"]}},"version":1}
test_22b61b7105e85eb943c6510b8ec9bc081125001beef26b7ba0a544dfec8c0812.sol: ERROR
test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol:A 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a7230582036a1cab285acdb41835e036de1144c39a321040ebce2cda70257aff32bf7966c0029
test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol":{"keccak256":"0x55901eb689106bbd50448559d47f8a16724fd661c199522e7c847df483e170a9","urls":["bzzr://21bc0f3be6e4ac8fb2ea399bb2082bb6686607d53de192404007f0a4fe034f31"]}},"version":1}
test_2317424bd51e7c080d7111067f25e30c5d169d04f81975aa1c0f509bc2ea7588.sol: ERROR
 conv bytes10 -> bytes10
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes10_to_t_bytes10(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes10(value))

			}
		
			function cleanup_assert_t_bytes10(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000)
			}
		

test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol:c 6060604052341561000f57600080fd5b5b61058a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100e9565b6040516060810161006781600084018488610093565b905061007881602084018487610093565b905061008981604084018486610093565b90508094506100ab565b60008490506100a1826100b0565b8452949350505050565b6100dc565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b5050505060405180910390f35b600080600080600178010000000000000000000000000000000000000000000000000260008060048110151561011b57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908378010000000000000000000000000000000000000000000000009004021790555060027801000000000000000000000000000000000000000000000000026000600160048110151561018c57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055506003780100000000000000000000000000000000000000000000000002600060026004811015156101fd57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908378010000000000000000000000000000000000000000000000009004021790555060047801000000000000000000000000000000000000000000000000026000600360048110151561026e57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff0219169083780100000000000000000000000000000000000000000000000090040217905550600090505b6006811015610341578060010162ffff0017760100000000000000000000000000000000000000000000026001826006811015156102f157fe5b60039182820401919006600a025b6101000a81548169ffffffffffffffffffff0219169083760100000000000000000000000000000000000000000000900402179055505b8060010190506102b7565b60006001906004610353929190610421565b506001600360068110151561036457fe5b60039182820401919006600a025b9054906101000a9004760100000000000000000000000000000000000000000000029350600160046006811015156103a657fe5b60039182820401919006600a025b9054906101000a9004760100000000000000000000000000000000000000000000029250600160056006811015156103e857fe5b60039182820401919006600a025b9054906101000a90047601000000000000000000000000000000000000000000000291505b50909192565b82600660020160039004810192821561051457916003016004900482016000805b848311156104d65784819054906101000a900478010000000000000000000000000000000000000000000000000284836101000a81548169ffffffffffffffffffff02191690837601000000000000000000000000000000000000000000009004021790555060080160208160070104948501946001030290600a0190602082600901049384019360010382029150610442565b81156105115783826101000a81549069ffffffffffffffffffff021916905590600a01906020826009010493840193600103820291506104d6565b50505b5090506105219190610525565b5090565b61055b91905b8082111561055757600081816101000a81549069ffffffffffffffffffff02191690555060010161052b565b5090565b905600a165627a7a7230582020be33629d19f8f596ab61fdbc7fd7ba0fa6cd946db5ea074b43cc82eea7c9ed0029
test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"r1","type":"bytes10"},{"name":"r2","type":"bytes10"},{"name":"r3","type":"bytes10"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol":{"keccak256":"0x22825ff21d0bf326408b8725e0902ad02f3e9c19f913ac5d3e35a43103ac9d9d","urls":["bzzr://d32f7ce842ace70b17cae4bdddc6213197e7218a7be67ee2a1ab68d17eb63170"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol:Ballot 6060604052341561000f57600080fd5b5b61042a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631afa74e5146100545780632bb9cb3f146100fe578063e652f4cc14610137575b600080fd5b341561005f57600080fd5b6100aa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506101c0565b604051602081016100c0816000840184866100ca565b90508092506100e2565b60008490506100d8826100e7565b8452949350505050565b6100f3565b60008115159050919050565b505060405180910390f35b341561010957600080fd5b610135600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610359565b005b341561014257600080fd5b61016e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103b4565b604051602081016101848160008401848661018e565b90508092506101a6565b600084905061019c826101ab565b8452949350505050565b6101b5565b6000819050919050565b505060405180910390f35b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615806102635750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156102715760009050610353565b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b9190505600a165627a7a72305820e6f79863fae4e52c9d97735ca8bc8265c9d9b7574acacd5a8c56ff9737675ab60029
test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol:Ballot {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"voter","type":"address"},{"name":"vote","type":"address"}],"name":"vote","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"grantVoteRight","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getVoteCount","outputs":[{"name":"retVoteCount","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol":"Ballot"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol":{"keccak256":"0x7e9c2dabf902c4fa4c0e1eb9cdf33fd12c307bcb5fc0b7025cffa6a202c56644","urls":["bzzr://0053c554dfedcc8505393aac2eca1382591d0ea1033a7ccd04f56737c13da3fc"]}},"version":1}
test_23adc429588449a205bb463266ac5229603bd8c3873bf1c1c49d62eeefb256a8.sol: ERROR
test_23ba8bdc2eb43c4c490e42f3b2c25fcb93edeb929ea6b6d3f289e07d2c9f243d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol:C 6060604052341561000f57600080fd5b5b6101498061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14610054578063b3de648b146100b9578063e420264a146100dc575b600080fd5b341561005f57600080fd5b6100676100ff565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da6004808035906020019091905050610105565b005b34156100e757600080fd5b6100fd600480803590602001909190505061010e565b005b60005481565b8061010e565b50565b80600202600081905550005b505600a165627a7a723058201d5cc4efcf642e6ff95e06369c136abb704b72b6e817a489b872e069bbe5a2390029
test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"y","type":"uint256"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol":{"keccak256":"0xe29b2672432fcccb6f820b005e5e4f864b0e4cbe8d13eccb61a4079c9142d801","urls":["bzzr://52c9b327a0de26c254c864b6ff731382fc79bc5e03eb08c324950c4dba2464a8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol:A 6060604052341561000f57600080fd5b5b61017a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cb97492a14610049578063e420264a146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd600480803590602001909190505061013f565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b600062010000820a90505b919050565b6000610100820a90505b9190505600a165627a7a723058209566b4a78bb7a3897b95bfd03b7f78c16e061423b77e180f2af6d840d2e845910029
test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol":{"keccak256":"0xaaea39484ac7573c38b00e0d181db53044a7d038ce0b9522b63323e28b945019","urls":["bzzr://874d6295633d4f0a11867b149c5e5c9dd863649219d0a61e9c40c7b73893c162"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol:C 6060604052341561000f57600080fd5b5b6102608061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461005f57806326121ff0146100c45780634e69e7d81461012b578063509d19e514610190575b600080fd5b341561006a57600080fd5b6100726101f5565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d7610201565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b610120565b60008115159050919050565b505060405180910390f35b341561013657600080fd5b61013e610228565b604051602081016101548160008401848661015e565b9050809250610176565b600084905061016c8261017b565b8452949350505050565b610185565b6000819050919050565b505060405180910390f35b341561019b57600080fd5b6101a361022e565b604051602081016101b9816000840184866101c3565b90508092506101db565b60008490506101d1826101e0565b8452949350505050565b6101ea565b6000819050919050565b505060405180910390f35b60018060000154905081565b600080600060019150600782556000905060008114151561021e57fe5b600192505b505090565b60025481565b600054815600a165627a7a723058206dd22c53312a92c19f43a3282c1c76f92bf22af5fa5b46d738d601ee424e07710029
test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"contents","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"separator2","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"separator","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol":{"keccak256":"0x74552441bfd9dbe3bd3cfd711ef5c650af264e8fac747fe62abc51adb7c365fa","urls":["bzzr://260fa7c6fb1ad39312c0738f3a842435baeb50d77669c32ce68e66544baea9a8"]}},"version":1}
test_2427beb71d3d0de91002d8585eb3978ca34349e23b1e89685aa6d728d7a8c3eb.sol: ERROR
test_24520dc1be54f0553bda1644967824af5b635eb19dc814b668d9b80f2e4a4f25.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582000898e56b3eced08c977e1385fb63f4881d7db0e8b9252b7c76e2fe2a2c375ed0029
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":{"keccak256":"0x5a4cf7a8be2984f7307aa801002c6f783348f4f2483efc771e1be17c0fb2dfce","urls":["bzzr://791eda40788a4f715db8fe518e2f5b5b1ac5ac8b797dbf0bba74e29742373077"]}},"version":1}
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:B 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060a160a7565b90505b90565b6000600190505b905600a165627a7a72305820e73c78005227065b8a1d956608a07ce578b51a24dc07f87789ce454c5498b1050029
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":{"keccak256":"0x5a4cf7a8be2984f7307aa801002c6f783348f4f2483efc771e1be17c0fb2dfce","urls":["bzzr://791eda40788a4f715db8fe518e2f5b5b1ac5ac8b797dbf0bba74e29742373077"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol:c 6060604052341561000f57600080fd5b5b6101178061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b94e4f714603d575b600080fd5b3415604757600080fd5b606d600480803590602001909190803590602001909190803590602001909190505060b9565b60405160208101608181600084018486608a565b905080925060a0565b600084905060968260a4565b8452949350505050565b60ae565b6000819050919050565b505060405180910390f35b6000838383604051808481526020018381526020018281526020019350505050604051809103902090505b93925050505600a165627a7a72305820587b3a5545e71ec925d3c962ad5af1af2bbc945e603a38861faee7a30b6c77490029
test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol":{"keccak256":"0x94fd345fea0183e43c205d3f6cf5863b4da25e94ae4d30f73a97b2e22c09d985","urls":["bzzr://3b291708b5b895071337c937d002baa3b62101db6a2caeab501d445eebd434e6"]}},"version":1}
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:BaseBase 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:BaseBase 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:base 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:base 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:derived 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:derived 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol:c 6060604052341561000f57600080fd5b5b6105638061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100c7565b6040516060810161006781600084018488610093565b905061007881602084018487610093565b905061008981604084018486610093565b90508094506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b5050505060405180910390f35b600080600080600090505b602081101561015e5761ffff7e010000000000000000000000000000000000000000000000000000000000000260018260208110151561010e57fe5b601091828204019190066002025b6101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055505b8060010190506100d2565b6001600e60208110151561016e57fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027e010000000000000000000000000000000000000000000000000000000000009004620100006001601f6020811015156101dc57fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027e01000000000000000000000000000000000000000000000000000000000000900402179350600090505b600a8110156102ca57806001017f010000000000000000000000000000000000000000000000000000000000000002600082600a8110151561027d57fe5b602091828204019190065b6101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000900402179055505b80600101905061023f565b6000600190600a6102dc929190610403565b50600090505b601081101561036b5780620100000a60018260208110151561030057fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027e01000000000000000000000000000000000000000000000000000000000000900402831792505b8060010190506102e2565b600090505b60108110156103fc5780620100000a60018260100160208110151561039157fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027e01000000000000000000000000000000000000000000000000000000000000900402821791505b806001019050610370565b5b50909192565b826020600f016010900481019282156104f55791601f016020900482016000805b848311156104bf5784819054906101000a90047f01000000000000000000000000000000000000000000000000000000000000000284836101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055506001016020816000010494850194600103029060020190602082600101049384019360010382029150610424565b81156104f25783826101000a81549061ffff021916905590600201906020826001010493840193600103820291506104bf565b50505b5090506105029190610506565b5090565b61053491905b8082111561053057600081816101000a81549061ffff02191690555060010161050c565b5090565b905600a165627a7a723058205a5801312f3a8acff1edcb1109867c09d2398eff9cff47ad3b29f514953a4bd90029
test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"check","type":"uint256"},{"name":"res1","type":"uint256"},{"name":"res2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol":{"keccak256":"0x6e7491d5e02d692739c3df1cff23e6843ce40400959f8ee9822a8a13cdf28497","urls":["bzzr://ee04ffc385b1f08666933d72c57563cdd7fed317dec32c315894c2978c01c2c2"]}},"version":1}
test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol:test 60606040523415600e57600080fd5b5b604380601c6000396000f30060606040525b3415600f57600080fd5b60155b5b565b0000a165627a7a723058205d0a7b518f459d4964ed61c0e8ae2e9a87e339685d1efc4ba3500ae8f55639340029
test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol":{"keccak256":"0x58d0ad6b9c3c6b05358e9f45f7086fea74d6af5ae84385f66db842bae0901841","urls":["bzzr://257311fd8ad76f65907fddb9cf365d2db85e615e13ebbda4636d96a853f84c6e"]}},"version":1}
test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol:test 6060604052341561000f57600080fd5b5b60ad8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b6000809050600090505b600a811015607c575b80806001019150506067565b5b50505600a165627a7a723058207a1540db23f82663edbd4e171316da10eb8cf85ee65d75b8cf36d8982746c5cf0029
test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol":{"keccak256":"0x23f7ed96dd02fe041551a92d3edf465d61d3cccc11f1b1cdda642d3047e00674","urls":["bzzr://6bfa10bac52cab9f620e45cfbda3a10896c12a947f7797f7c68e054b7e72e31e"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol:test 6060604052341561000f57600080fd5b5b6102878061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633a518b951461005f5780633a71386f146100d6578063e43bc1e91461014d578063f44b54ca146101c4575b600080fd5b341561006a57600080fd5b61008460048080356000191690602001909190505061023b565b6040516020810161009a816000840184866100a4565b90508092506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505060405180910390f35b34156100e157600080fd5b6100fb600480803560001916906020019091905050610243565b604051602081016101118160008401848661011b565b9050809250610133565b600084905061012982610138565b8452949350505050565b610142565b6000819050919050565b505060405180910390f35b341561015857600080fd5b61017260048080356000191690602001909190505061024b565b6040516020810161018881600084018486610192565b90508092506101aa565b60008490506101a0826101af565b8452949350505050565b6101b9565b6000819050919050565b505060405180910390f35b34156101cf57600080fd5b6101e9600480803560001916906020019091905050610253565b604051602081016101ff81600084018486610209565b9050809250610221565b600084905061021782610226565b8452949350505050565b610230565b6000819050919050565b505060405180910390f35b60005b919050565b60005b919050565b60005b919050565b60005b9190505600a165627a7a7230582057ae371c6ce85776cac36e94e7b95c003375e07f60ffddc0effabc652a3084b90029
test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName4","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName2","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName3","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName1","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName1(bytes32)":{"notice":"This is test function 1"},"functionName2(bytes32)":{"notice":"This is test function 2"},"functionName4(bytes32)":{"notice":"This is test function 4"}}}},"settings":{"compilationTarget":{"test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol":{"keccak256":"0xbecdbf670d5f2afa67a3c334d15707c485ccf10e6a473a3f963a47435704f5f0","urls":["bzzr://b84c0b4e68c537462822afab26542b00c3b550255abe794096d9da6651156e87"]}},"version":1}
test_25c8232e20cb98f900c00bd561d7bfbdb84e1ed5e6c7751a97a339658e242fcd.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol:Test 6060604052341561000f57600080fd5b5b6101268061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806332df0e8214603d575b600080fd5b3415604757600080fd5b607d60048080357effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505060cc565b60405160208101609181600084018486609a565b905080925060b0565b600084905060a68260b4565b8452949350505050565b60c1565b600060ff82169050919050565b505060405180910390f35b6000817f0100000000000000000000000000000000000000000000000000000000000000900490505b9190505600a165627a7a72305820ce084460ba384a84b4b1e1f81ff8222850d8b4f1bb645d6f21fd1d3aaf9c97f40029
test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes1"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol":{"keccak256":"0x91ed01117a4a048b83b8ea03bab360acd992dd41d3b30c5549b34eb5f8a7d1d9","urls":["bzzr://9a79e711deb19a6670e7985bcce45eae75823840a624fb26dd82cbf77280772c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol:test 6060604052341561000f57600080fd5b5b6102028061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c1461005457806398c3a6c1146100b9578063a56dfe4a1461012e575b600080fd5b341561005f57600080fd5b610067610193565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100dc6004808035151590602001909190505061019d565b604051602081016100f2816000840184866100fc565b9050809250610114565b600084905061010a82610119565b8452949350505050565b610123565b6000819050919050565b505060405180910390f35b341561013957600080fd5b6101416101ca565b6040516020810161015781600084018486610161565b9050809250610179565b600084905061016f8261017e565b8452949350505050565b610188565b6000819050919050565b505060405180910390f35b6000600190505b90565b60006101d4826101af576101ca6101b3565b6101935b90506101c18163ffffffff16565b91505b50919050565b6000600290505b90565bfe00a165627a7a723058203da32f0b5af1704b26d566c953a5437f7c152f1c0569a56122aa2481844dcca80029
test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol":{"keccak256":"0xa3f3aca34ffb14fe74d8e5d8ae6055680532f313d4560964cadfcfc508fd5c93","urls":["bzzr://91e93e2370451f9fbbc7b987f8ee25ecb8419d25e6d98b92e3e183c872ba4ac2"]}},"version":1}
test_266288371c359e298af6d2c47b378f6432c5355aea779d43e4e92b3b0725d793.sol: ERROR
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820125f01ae15caec443642ccd012707fc5b145ed764d15b4da4660ede49a044a8d0029
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":{"keccak256":"0x91e135540ecc6bd3a24a80de7778151bd48dfec6364e31740c37493c62e26a42","urls":["bzzr://efd0d92f98aad1683ebf2fc8d6ed0cb5cfe99a0fc63beabb8f10fe2f8accc878"]}},"version":1}
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:B 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600190505b505600a165627a7a7230582059e225a3078b222798f61526c5f638780ee1a5e337f76684cc38c3f9c4bb734a0029
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":{"keccak256":"0x91e135540ecc6bd3a24a80de7778151bd48dfec6364e31740c37493c62e26a42","urls":["bzzr://efd0d92f98aad1683ebf2fc8d6ed0cb5cfe99a0fc63beabb8f10fe2f8accc878"]}},"version":1}
test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol:C 6060604052341561000f57600080fd5b5b6101548061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806391e145ef1461003e575b600080fd5b341561004957600080fd5b61006a6004808035906020019082018035906020019190919290505061006c565b005b81816000919061007d929190610083565b505b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c457803560ff19168380011785556100f2565b828001600101855582156100f2579182015b828111156100f15782358255916020019190600101906100d6565b5b5090506100ff9190610103565b5090565b61012591905b80821115610121576000816000905550600101610109565b5090565b905600a165627a7a72305820925a9b8718b447ca241eaf8034d352537f57e4ed0a84f038744340b2a80452a60029
test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"string"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol":{"keccak256":"0x8bea9e588bbcfef88163cc8c6ca3f17dff6fea53639f3813bc08776c8fb4caed","urls":["bzzr://d76219cb9463b4ec0b4d705d56b20b37a74163cc049f1422d21ab1cfb9e588ca"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058200025291b5248171061be9892fbdd9fe63ac1e9524f4a0f184f44541bd2dd88b10029
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":{"keccak256":"0x9fd284c5f77803bd2e753fd84695ec847d1f6897bbf70c9b156ff8e8b184ceab","urls":["bzzr://bbdf9303f76da4a5b0613b23e276cbab32a8bc61a2253f07c8f62d4f9e8fe0f8"]}},"version":1}
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Test 6060604052341561000f57600080fd5b5b61010c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060a160c6565b60408051908101604052806002815260200160038152509050806020015191505b5090565b6040805190810160405280600081526020016000815250905600a165627a7a72305820e2d0e8b74cde961d0d674ae6ef5a1372685534de53335d009e88b8f915806f6e0029
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":{"keccak256":"0x9fd284c5f77803bd2e753fd84695ec847d1f6897bbf70c9b156ff8e8b184ceab","urls":["bzzr://bbdf9303f76da4a5b0613b23e276cbab32a8bc61a2253f07c8f62d4f9e8fe0f8"]}},"version":1}
test_28d1a7bfe6fd49dedc183722e1a34835bd5527ef39f3224e97bcebba685dbb36.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:C 60606040526112126000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561005157600080fd5b5b61034d806100616000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610054578063b8c9d365146100b9578063e2179b8e1461011e575b600080fd5b341561005f57600080fd5b610067610183565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100cc610225565b604051602081016100e2816000840184866100ec565b9050809250610104565b60008490506100fa82610109565b8452949350505050565b610113565b6000819050919050565b505060405180910390f35b341561012957600080fd5b610131610280565b6040516020810161014781600084018486610151565b9050809250610169565b600084905061015f8261016e565b8452949350505050565b610178565b6000819050919050565b505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2179b8e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561020957600080fd5b6102c65a03f1151561021a57600080fd5b505050600790505b90565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f191505050600790505b90565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2179b8e60c86040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600088803b151561030857600080fd5b87f1151561031557600080fd5b50505050600790505b905600a165627a7a723058203c70baca7e11a27191e6644b1a45eb9c325a80175f7b171a27bfb506aa99c9d30029
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol":{"keccak256":"0x670ff3047592ccf3fd30a7fb13c3a2d1217b5c6824e86527628dbddeaa7b2f4e","urls":["bzzr://6e7328babe5a56285d582d23f91612eed06d53465400d3406a8db75a2142fd1e"]}},"version":1}
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:D 
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:D 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:C 6060604052341561000f57600080fd5b5b6101888061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad610148565b60076040518059106100bc5750595b908082528060200260200182016040525b50905060088160038151811015156100e157fe5b90602001906020020181815250506100f881610118565b80600381518110151561010757fe5b9060200190602002015191505b5090565b61012181610125565b5b50565b600281600381518110151561013657fe5b90602001906020020181815250505b50565b6020604051908101604052806000815250905600a165627a7a72305820bbc3de3a81760ab7d2a0c62deef6c727af429cb1f07942c1085578dcaeab6dc50029
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":{"keccak256":"0xcf737dd686ccf8076ddf21e167cd5ea739a2d12a435b5d467e1e64cb0ef1ceb7","urls":["bzzr://1b52745462423b3f234201fbc188b4088d52ab92206f3e2965cf15b2c727be30"]}},"version":1}
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582052959495b2e56ab3d242c365f7b0e82019b50c10f6a22e898e53e7c5a025c2a00029
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":{"keccak256":"0xcf737dd686ccf8076ddf21e167cd5ea739a2d12a435b5d467e1e64cb0ef1ceb7","urls":["bzzr://1b52745462423b3f234201fbc188b4088d52ab92206f3e2965cf15b2c727be30"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:A 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820dd5f123cbc667463f42e56d8ad8773a8245ffae608dbb8311306638e5154d5150029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:B 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600260a360aa565b1790505b90565b6000600190505b905600a165627a7a7230582052151d9ef3748d8fe63fc0a78e6e7a68c6b225caca37cf07ed5b3443b77ddfe50029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:C 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600460a360aa565b1790505b90565b6000600190505b905600a165627a7a72305820ff04a1e7873eea402e5517bf819e8aaae0b6131c1ac8dfb7c4fc51e2215e9d400029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:D 6060604052341561000f57600080fd5b5b600861002d61003a640100000000026100a3176401000000009004565b176000819055505b610090565b60006004610059610060640100000000026100b4176401000000009004565b1790505b90565b6000600261007f610086640100000000026100c5176401000000009004565b1790505b90565b6000600190505b90565b60fb8061009e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b90565b6000600460ad60b4565b1790505b90565b6000600260be60c5565b1790505b90565b6000600190505b905600a165627a7a723058200751ddd0fe5ed171313e336446b64442ed4e69b28e79aac5357ecfca29c757ed0029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol:Lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820bad3d89127fe4fd86ec802acd48741b83332af1615b4065e169102a27e9b2f8d0029
test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol":{"keccak256":"0xeb8237657a02e7a99574be39e790288faea2dd3e5939cc216446dde04fdeedfe","urls":["bzzr://cedde538663e15454917121607b6024263f255a7746e16b8bfee092a36813822"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol:test 6060604052341561000f57600080fd5b5b61018f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634df7e3d014610049578063bf3b9e38146100ae575b600080fd5b341561005457600080fd5b61005c610133565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100e16004808035906020019091908035906020019091908035906020019091905050610149565b604051602081016100f781600084018486610101565b9050809250610119565b600084905061010f8261011e565b8452949350505050565b610128565b6000819050919050565b505060405180910390f35b6000610143600160026003610149565b90505b90565b600060018202600a840260648602010190505b93925050505600a165627a7a72305820c770532eafb593e2c904267dc5d8d2e91e499fc31e91540186968df49f7a6b560029
test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"a","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol":{"keccak256":"0x60f4ce96740ed633706eff6e30a82787db8eb5f5ffea535b676e73c6653642a0","urls":["bzzr://63d1efa57b1f60ebe1a7316693df7680fa8d6fe46735315f86c9bc7c24ed0731"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol:test 6060604052341561000f57600080fd5b5b7f3234000000000000000000000000000000000000000000000000000000000000600080602a815260200190815260200160002060006101000a81548163ffffffff02191690837c010000000000000000000000000000000000000000000000000000000090040217905550600060016000602a815260200190815260200160002060006101000a81548160ff021916908315150217905550600c60026000602a815260200190815260200160002081905550601f60036000602a8152602001908152602001600020600060178152602001908152602001600020819055505b5b61031d806101006000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308f08e111461005f57806313cf2545146100d45780634939dcc014610150578063cb9b5f3f146101e5575b600080fd5b341561006a57600080fd5b6100806004808035906020019091905050610258565b60405160208101610096816000840184866100a0565b90508092506100b8565b60008490506100ae826100bd565b8452949350505050565b6100c9565b60008115159050919050565b505060405180910390f35b34156100df57600080fd5b6100fe6004808035906020019091908035906020019091905050610278565b604051602081016101148160008401848661011e565b9050809250610136565b600084905061012c8261013b565b8452949350505050565b610145565b6000819050919050565b505060405180910390f35b341561015b57600080fd5b610171600480803590602001909190505061029d565b6040516020810161018781600084018486610191565b90508092506101a9565b600084905061019f826101ae565b8452949350505050565b6101da565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b34156101f057600080fd5b61020660048080359060200190919050506102d9565b6040516020810161021c81600084018486610226565b905080925061023e565b600084905061023482610243565b8452949350505050565b61024d565b6000819050919050565b505060405180910390f35b60016020528060005260406000206000915054906101000a900460ff1681565b6003602052816000526040600020602052806000526040600020600091509150505481565b60006020528060005260406000206000915054906101000a90047c01000000000000000000000000000000000000000000000000000000000281565b600260205280600052604060002060009150905054815600a165627a7a72305820f0992bbf75af49462c508d4516e63a9a0b1f4586680a963d0737d1abf9bc32360029
test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_bool_map","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"to_multiple_map","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_string_map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_uint_map","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol":{"keccak256":"0x0c3ec1f82656c8acb098901f63286348afe7420948656487ae803908bc2be8d5","urls":["bzzr://1a0cf24ccd218476bf497513e61cba8630b9a3cf3b8abb92a2c4632b4786c68a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol:test 6060604052341561000f57600080fd5b5b61015e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b600080600060019150600090506005820291505b8381101561012757808060010191505060048201915060006003858115156100e957fe5b0614156100f557610127565b600982019150600060028581151561010957fe5b0614156101155761011c565b6013820191505b6007820291506100c5565b8192505b50509190505600a165627a7a7230582037a10b4f35fb3f5421060d3138dcf4c97da801e9e9634013b81e78fd483ab1620029
test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol":{"keccak256":"0xc5dfe3366d2e50d83c1d305bd0531ac77d5cf072eab72c127bdc459f74921995","urls":["bzzr://bd9cb18a29d1a062f05e025651e4be8314b950dfd506ae7d97fb09af52c7098a"]}},"version":1}
test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol:C 60606040523415600e57600080fd5b5b60818061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60005b505600a165627a7a72305820ebd7b698a9bb7ba61c95cd105ece3387dfdab6d36f6e50ae949ecfbd3273c51e0029
test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol":{"keccak256":"0x1e055de7753197aa6caef28e40714eb0d0300647dcdc3e9901fd6359d3e75c9b","urls":["bzzr://ee11cb1c7d0cf7f2a2e582098f0bd278297c11d517e6375f59a647da435020d0"]}},"version":1}
test_2ad7fdc96bcffc9b8b3418756a788e45e3c6b61c79208dc4e880015db6d71cf8.sol: ERROR
test_2ae60d6a0895f115b7fa888469933ac3c88be554f0938bbf013c32ad979604d7.sol: ERROR
test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e12c423d053d27ca864761d38256fdc612b35b44e5f89066ce41ce306e1197740029
test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":false,"name":"e1","type":"uint256"},{"indexed":false,"name":"e2","type":"uint256"}],"name":"e1","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":false,"name":"e1","type":"uint256"},{"indexed":false,"name":"e2","type":"uint256"}],"name":"e2","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol":{"keccak256":"0xb999be5cb5f7184920f79b76a9d970455abee77bd52295c1526517bb49113f9e","urls":["bzzr://f36e8dae978c22fb46676ac40538a4d8be21bff4f8074fbf0095d8f783d78878"]}},"version":1}
test_2b585c06a537d28df25ea6ebc47bb62cae423aa3c4fea5fb5c4d29c8813b0f9a.sol:M 
test_2b585c06a537d28df25ea6ebc47bb62cae423aa3c4fea5fb5c4d29c8813b0f9a.sol:M 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol:test 6060604052341561000f57600080fd5b5b6101778061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063131e2f1814610049578063fa3bd6c5146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd600480803590602001909190505061013d565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b60006007820290505b919050565b60006003820390505b9190505600a165627a7a72305820acfbf68c174958c9f44a64e44a3036d1c37360234c9a36a00656261cbd9c68860029
test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol":{"keccak256":"0x32345209e70f28eda2aa11363c30708bc0e6792c7ff937e7fefcb516d62866cb","urls":["bzzr://d95232aee8148ed6143a6ad57a74895ca1da66ba2eff3912cd2340271fe429b8"]}},"version":1}
test_2bbdaedea9fa90ddc4c04e4d676b490c2456392a0c83b1b2d89fc243f08458f1.sol: ERROR
test_2bdcc8bfb761d26576f8874d34645da6df2be8650e9074c16ffa339b6f432db3.sol: ERROR
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820d035d250171fabb124581b00749d5f37b64a321a3112013f1e52cdaf45f556390029
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":{"keccak256":"0xbb860d220d3a6b9fd0532ef1c1d7fcd7683fde9d94ae020004ba65c85594f865","urls":["bzzr://fc00cf803a5cdde01f232bccd57f8fd70110c3a7c0035e76aa5aff53f4c00ccb"]}},"version":1}
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:Test 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631427a693146047578063cadaacbf146059575b600080fd5b3415605157600080fd5b6057608f565b005b3415606357600080fd5b608d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060ba565b005b60b76000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660ba565b5b565b5b505600a165627a7a7230582064bd80b82998feb0388ca808f4cdcda28922516a51d420b8dd69aabcbfabb2c70029
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"internalCall","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":{"keccak256":"0xbb860d220d3a6b9fd0532ef1c1d7fcd7683fde9d94ae020004ba65c85594f865","urls":["bzzr://fc00cf803a5cdde01f232bccd57f8fd70110c3a7c0035e76aa5aff53f4c00ccb"]}},"version":1}
test_2c19ddc5d13b5f0f581ec94d2493c8ff10492c8464bf691e6f757ff59c933420.sol: ERROR
test_2c1a59969ca02ca9d2e50f4c7eb7b02696fbfbd5035cecfd44366fca4eb3c2f5.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2c95d7c2c9478cdf7030cdc7c543dfa905b262b3fea0cfb05eac9cd801942e02.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2cd1fa33d46dde7da4cf3ab9bf7879f3190a627a4fcf8081e8e5fabb197e5f7e.sol: ERROR
test_2dca21b55b2cc7638f34edb2e7539a2dfd0f9a8a7d37b10ddbf455965633048e.sol: ERROR
 conv uint256 -> uint256
test_2e33b6af212d5061d7bae5cd85461d3fad525e5727539d0ccc82c620774d5654.sol: ERROR
test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol:c 60606040523415600e57600080fd5b5b604380601c6000396000f30060606040525b3415600f57600080fd5b60155b5b565b0000a165627a7a72305820fb7abb7e5eae5a252d3113dcacec55c17e4cefcffaabd933949b8264e387d9c80029
test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol":{"keccak256":"0x32069e251a9a1bd3499641f8c9eba13402b529378e8e863ea197fa67f30d150a","urls":["bzzr://8706fb4b89fa12c8344ffa1ba13c194abc3778a832507e49101289b152ef1e67"]}},"version":1}
test_2e67b197242ff144a22953286a60e3c80e47124d7251a5b3fd1f51b8e03003f0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063131e2f1814603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a72305820e772d2cbda8d066ea07f6232cdb7d74036b5baa2e030d97abf4b4ae4a5db1b210029
test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"Multiplies `a` by 7"}}}},"settings":{"compilationTarget":{"test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol":{"keccak256":"0xa22d17bbc30d7f304ef9332e5e7a020846475329db10636c53488d798d8005f3","urls":["bzzr://2ba8b4288e297f078a805b67345de4aeb47819809b3b9e04203bae96094a9f6e"]}},"version":1}
test_2e81cff8bf1f02c463318a907770cac0ca269d59b18d24f259f29adb27485e1b.sol: ERROR
test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol:test 6060604052341561000f57600080fd5b5b60c58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063544aa3b314603d575b600080fd5b3415604757600080fd5b608e60048080359060200190820180359060200191909192908035906020019082018035906020019190919290803590602001908201803590602001919091929050506090565b005b5b5050505050505600a165627a7a72305820b27865cfea22dcc73e9b9d6a7f4e6e0dbfc26b32f4390d6ca65cf7862e519bb10029
test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"string"},{"name":"b","type":"bytes"},{"name":"c","type":"uint256[]"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol":{"keccak256":"0xcd22b0144b1ef4a6d44fff61d8214a6c60e6cb5b1aa48d9329121c93587c6190","urls":["bzzr://845796776b21b47b4626b5af8ade0a88b7f83263e08ab3f379c49744269e0381"]}},"version":1}
test_2e9c1616ce7f9ca9397503924749c6fe5e2a42bec6a584eca226f980f349099b.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol:test 6060604052341561000f57600080fd5b5b60ee8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff890505b905600a165627a7a723058202827aa9845669cf1273e8e8bd824f3e6350d6713b34a582bae5a474d6009e6fc0029
test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol":{"keccak256":"0xedbcf6ee7b196d7d6c4e8d287ecafa9448ddcbf7a6b425e763367729af11d7cf","urls":["bzzr://073ca2a8392c901528de2685dae18e28b11964705fb5d1ebafa17cb0fc5b4243"]}},"version":1}
test_2f1d5f25a076f2a69c5b0573598bbd142b8d02e40e3cefae798e0e518c29d1c6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol:C 6060604052341561000f57600080fd5b5b6102ff8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14610049578063f8a8fd6d146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161011d565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b6000600790505b90565b6000600a60008161012e91906101dd565b506101136000600981548110151561014257fe5b90600052602060002090600491828204019190066008025b6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001908054610190929190610217565b506101d7600160098154811015156101a457fe5b90600052602060002090600491828204019190066008025b9054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b8154818355818115116102125760030160049004816003016004900483600052602060002091820191016102119190610277565b5b505050565b82805482825590600052602060002090600301600490048101928215610266576000526020600020916003016004900482015b8281111561026557825482559160010191906001019061024a565b5b509050610273919061029c565b5090565b61029991905b8082111561029557600081600090555060010161027d565b5090565b90565b6102d091905b808211156102cc57600081816101000a81549067ffffffffffffffff0219169055506001016102a2565b5090565b905600a165627a7a72305820d411116992e96749b84a216d4c3a06e8e36dffe9f13a3a6fce59370bd9614d110029
test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol":{"keccak256":"0x18d9029ccdd56a80a09b3076aade10e461c1b87b052b4bdcdbca8b2b94afae9c","urls":["bzzr://bd61cc8b2dc00561b324e898b2dd149791b009d3f601704d6885809beee5c9f1"]}},"version":1}
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:C 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820f5f27cf0ad70cfe9006800b858920f6601e37e0095403047ae959a2f08e2907f0029
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol":{"keccak256":"0xe447f9d208858b03796b24c5279555ed414bff07299355e073704e60a114949e","urls":["bzzr://d2317ea5e6bda80982c09ad474dc857b0901795a1115c7d2e65acf6892aeab85"]}},"version":1}
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:I 
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:I 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:base 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:base 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:foo 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:foo 
test_2fe7776b656c9116693c06122c8d1b26f1e87f6a058d58a410dbfa0b8f69735c.sol: ERROR
test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol:C 6060604052341561000f57600080fd5b5b60a58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600080600080600060019450600193506001856002019250925060019050600394505b50505050505600a165627a7a72305820a3271f2b54c94504a07ddec4b00726f0d94c3760d7bb9f30e4b1b8308e44094a0029
test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol":{"keccak256":"0xe236ad556b65c5070dc653c0fd5546aa99be03fae183018ea79bbae5c6854ef6","urls":["bzzr://7bf8972a6697d01d2c5a766c0fd12662efe5500ec3161efc528c7d2d5bc73ec9"]}},"version":1}
test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol:c 60606040523415600e57600080fd5b5b608b8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600281600001819055505b505600a165627a7a72305820ec901cc471e2a264776fa3a61b1833a9e1e55811c9b81ae3138a387424daeaf70029
test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol":{"keccak256":"0xc4869342ba4dae1fd52ee3783522b5a1628e628e5f16c2bcfb5c997d24c912c3","urls":["bzzr://eacfc44e05719cda49c973c97b26ba3dd0e16f83a41c6bf60b46ab7f758baa45"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol:test 6060604052341561000f57600080fd5b5b6101c78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806368898b5e146100495780639f3fab58146100c0575b600080fd5b341561005457600080fd5b61006e600480803560001916906020019091905050610139565b604051602081016100848160008401848661008e565b90508092506100a6565b600084905061009c826100ab565b8452949350505050565b6100b5565b6000819050919050565b505060405180910390f35b34156100cb57600080fd5b6100e5600480803560001916906020019091905050610161565b604051602081016100fb81600084018486610105565b905080925061011d565b600084905061011382610122565b8452949350505050565b61012e565b60008115159050919050565b505060405180910390f35b600081604051808260001916600019168152602001915050604051809103902090505b919050565b600061016c82610139565b60001916826040518082600019166000191681526020019150506040518091039020600019161490505b9190505600a165627a7a723058205cd46f8a43fbad63d158be6d1027e088a6df77af3644e35013343611d8b3ed800029
test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"b","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol":{"keccak256":"0xd868b449256edf783251232ae8e9ad43971f812417c715bc5a357a6a663fa867","urls":["bzzr://00ce13968d06d5d7dbcea0c1f2ca5cf5d3949c20d15912195c3ffd2681cb98c4"]}},"version":1}
test_30fba7e835bc9fe59bdf2cd6a8d8439886aea56fd1b7357d56452d5e0ec9d89e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol:test 6060604052341561000f57600080fd5b5b6102468061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461005f57806326121ff0146100c45780634df7e3d014610129578063c3da42b81461018e575b600080fd5b341561006a57600080fd5b6100726101f3565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d76101fc565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b61011e565b6000819050919050565b505060405180910390f35b341561013457600080fd5b61013c610206565b604051602081016101528160008401848661015c565b9050809250610174565b600084905061016a82610179565b8452949350505050565b610183565b6000819050919050565b505060405180910390f35b341561019957600080fd5b6101a1610210565b604051602081016101b7816000840184866101c1565b90508092506101d9565b60008490506101cf826101de565b8452949350505050565b6101e8565b6000819050919050565b505060405180910390f35b60008090505b90565b6000600390505b90565b6000600190505b90565b6000600290505b905600a165627a7a7230582013006883e309e44e6f083bff2bd85b76929d1a0ef5e6f11f0ca2369f78d680180029
test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"c","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol":{"keccak256":"0x1705c7872495911cf09db3d80c1cf0e4a0bbcd9a83bd7479b9bedd9e4c41b38a","urls":["bzzr://5b9ebf61e744f4b12c23385fd40736323281e48e0ab25cf0d86ace50975e2d2d"]}},"version":1}
test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol:c 6060604052341561000f57600080fd5b5b6101a68061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b60016000908054610065929190610069565b505b565b8280548282559060005260206000209060070160089004810192821561013657600052602060002091601f016020900482016000805b848311156100fe5784819054906101000a900460ff1684836101000a81548163ffffffff021916908360ff160217905550600101602081600001049485019460010302906004019060208260030104938401936001038202915061009f565b81156101335783826101000a81549063ffffffff021916905590600401906020826003010493840193600103820291506100fe565b50505b5090506101439190610147565b5090565b61017791905b8082111561017357600081816101000a81549063ffffffff02191690555060010161014d565b5090565b905600a165627a7a723058201270eda7ffddd4a6d08aa7b708a1918810139dab0bbf9b85bf853dee8bacfc400029
test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol":{"keccak256":"0xf89a93771e5d4eee7d434d0886e9adc024fff9deea9c9ad04f6537756b82d883","urls":["bzzr://46fa629f2af0e501c9a4423ffb5d4d1ed30b4c0e20de95a795cc4e9bdaac24e4"]}},"version":1}
test_313170ced34ab41ee17a281af7b38a943a4806b469e2660420b9888b6c0d133e.sol: ERROR
test_315255d5969e9c19086df9370ca472744ac6acbea3ba0fae1d006bcddba7447a.sol: ERROR
test_315cb308a840dd1210b9b918dfd0101c7772aaf4acbb69b948fdd755879ac62c.sol: ERROR
test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol:A 6060604052341561000f57600080fd5b5b60a98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000806001605d5760006060565b60015b60ff169150600060705760016073565b60005b60ff1690505b50505600a165627a7a723058204ef613d54a8afc0a632e234d48fba975fa67909b780828c74af0a843d577650f0029
test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol":{"keccak256":"0xe948f34ace725ee930087f36e82997b3a3dc069050afe0ec811b80d87fc89cba","urls":["bzzr://8278b967a9f0dc4379fcac1f0c60fe352f8ea3ca943626e7073044b39700eb50"]}},"version":1}
test_32497a70dbc22d549d17702560ebfc5d450449c45c978a471f35f5fe044409b7.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol:test 6060604052341561000f57600080fd5b5b61010b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b600080600080549150600190505b83840281101560d7576000549250806000819055505b808060010191505060b5565b5b50509190505600a165627a7a72305820085040a5e1d7d6fe32855c5683f58b82efc3c84b481c4cce966ff7b40518ff950029
test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol":{"keccak256":"0xe5d85352882d157c9d9bb5e1ecdb9e8e370a7a91c1169541874800ed20740276","urls":["bzzr://bc0729e585d948db3a0a1f4422e11e6a0362003e977a3daed4e79d2a38262735"]}},"version":1}
test_32535df9c37fbc1561f69fc3000f212cc16b35e71cc3a053e69dc1b2221913b3.sol: ERROR
test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol:A 6060604052341561000f57600080fd5b5b60af8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000806001915060006003106064576006606a565b60039050805b905060016077576004607d565b60039050805b505b50505600a165627a7a723058207509f50689efb360b537f6b33384f351a5a1b1e9dcb88e90ef141c2cf12a2d720029
test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol":{"keccak256":"0x0368835aae8e395fac1854be8dcbcc0500d0127d3b281ae7ccc710ff4f99cdd6","urls":["bzzr://ef623467b4bf18fef189db6c7668b2f5adc8c98b23d9d7e1c06ad844ccfaba50"]}},"version":1}
test_32840422b0a0137319f022ed1ae16f00b45d85b00f908ef569d6bc4061b8055e.sol: ERROR
test_32a8c0e116377699148f8688a6dac55c17ee2b012e72c70f8ac43ae8b17f94d4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol:A 6060604052341561000f57600080fd5b5b61010b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634773e08514603d575b600080fd5b3415604757600080fd5b6071600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060bd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff163190505b9190505600a165627a7a72305820efbfd388d0fa4fa068861d80cc159b16705f2a5c416c2f99d74aba16a17bbd330029
test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"address"}],"name":"lookup_balance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol":{"keccak256":"0xf7887aa6215326ff4b9a35a52a97c3e22781b6ce23565abfd63accb207c5c801","urls":["bzzr://9240467964fd5233781fc5e2aef3e5e2140d7933cff7e7562b2bde7fd6aca702"]}},"version":1}
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol:C 6060604052341561000f57600080fd5b5b60408051908101604052806001815260200160011515815250600080820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050505b5b61011e806100686000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806386b714e214603d575b600080fd5b3415604757600080fd5b604d60d3565b604051604081016061816000840184876093565b90506070816020840184866079565b9050809350608f565b600084905060858260ad565b8452949350505050565b60a9565b6000849050609f8260bd565b8452949350505050565b60b9565b60008115159050919050565b60c7565b6000819050919050565b50505060405180910390f35b60008060000154908060010160009054906101000a900460ff169050825600a165627a7a72305820d740c91dcf157b898e299f7f27996b44f66a1c3e193a4428efa8cd59ebd289af0029
test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"s","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol":{"keccak256":"0x19fd732beeb6f4d596f593ecca0684881900a50877a51e743a2a53e89ec41e8d","urls":["bzzr://0981498556c202868dbf435d3240105add9c9b08b99956048f95e321ca8534a6"]}},"version":1}
test_334c9de02a0b2e65dc57e059735923aac21f05f99930b42aa88c93b89d8d0858.sol: ERROR
test_3372262e5a40a66443c5d01a05573bde692f0207115afcdae6053404e37db4cf.sol: ERROR
test_33869ca79496600f2f42f36d9632270889d356571832756a6316bbd408a3b3cd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Base 606060405261001f61002e6401000000000261011d176401000000009004565b5b806000819055505b5061005b565b600061004b61005164010000000002610113176401000000009004565b90505b90565b6000600190505b90565b6101598061006a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063275a4dcc14610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161011d565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b6000600190505b90565b6000610127610113565b90505b905600a165627a7a72305820c4412a0db185fd8cddb2e047f86cd84ecc1dda0fb34319ff1b8feffe1dfa3b520029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:BaseBase 6060604052341561000f57600080fd5b60405160208061019e833981016040528080519060200190919050505b806000819055505b505b610159806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063275a4dcc14610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161011d565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b6000600190505b90565b6000610127610113565b90505b905600a165627a7a72305820785589ec87d3a1592e1cc57493e3a538cf6f15988ff5d9b8f0391ae9c5da28d00029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Derived 606060405261001f61002e64010000000002610197176401000000009004565b5b806000819055505b5061005b565b600061004b61005164010000000002610183176401000000009004565b90505b90565b6000600290505b90565b6101d38061006a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063275a4dcc14610054578063d46300fd146100b9578063e2179b8e1461011e575b600080fd5b341561005f57600080fd5b610067610183565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100cc61018d565b604051602081016100e2816000840184866100ec565b9050809250610104565b60008490506100fa82610109565b8452949350505050565b610113565b6000819050919050565b505060405180910390f35b341561012957600080fd5b610131610197565b6040516020810161014781600084018486610151565b9050809250610169565b600084905061015f8261016e565b8452949350505050565b610178565b6000819050919050565b505060405180910390f35b6000600290505b90565b6000805490505b90565b60006101a1610183565b90505b905600a165627a7a7230582042499b86f4ad8799057c871f7bde9c8dbeaaaadae851a475af3253cfb50af74b0029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_33a06d97652e53ef2551f939b41aa48c5e914950fc245e0970645653e9e72bf5.sol: ERROR
test_33ae280f7aa68d69447fdc4573cd1cb2d6b75247c45519d27cee0763fa86c640.sol: ERROR
test_33dda9001ab85d0e7dba349e8fc3b49520da93418b5396d981284b629a837f6c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol:C 6060604052341561000f57600080fd5b5b60d38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060016105790190505b905600a165627a7a7230582039d83f4c13c0d244cbbe0588b66e418f16cae2726c70d3ee9206ef2d2bb0f8880029
test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol":{"keccak256":"0x746e12e00d70ebcbc7f3adfe0f6688e68f40d8f8c1b6c30b3f91276dcc3c3824","urls":["bzzr://4e2df7bf5e924949156b2571c83d3079142ebfd7c47444341f49dbd503a58dfe"]}},"version":1}
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:base 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:base 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:derived 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:derived 
 conv enum test.ActionChoices -> enum test.ActionChoices
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_ActionChoices_$5_to_t_enum$_ActionChoices_$5(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_ActionChoices_$5_to_t_enum$_ActionChoices_$5(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_ActionChoices_$5(value))

			}
		
			function cleanup_assert_t_enum$_ActionChoices_$5(value) -> cleaned {
				switch lt(value, 4) case 0 { invalid() }
			}
		

test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol:test 6060604052341561000f57600080fd5b604051602080610120833981016040528080519060200190919050505b5b505b60e38061003d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b08d96f14603d575b600080fd5b3415604757600080fd5b604d60a8565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b609d565b600060048210600081146095576097565bfe5b50919050565b505060405180910390f35b600080600090508091505b50905600a165627a7a7230582090fb47d838edec058dd27f99eb84e7a579ba0feb77da8db68221d9e3431e76e10029
test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"ret","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"inputs":[{"name":"param","type":"uint8"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol":{"keccak256":"0x4927fcdc682ced2516f6c177a0c1b51c9aafc4fbb1581d48d63df53c892fd5b1","urls":["bzzr://a66b53b8cf17044ec4a4aeb8cf1dc51f82cd02a1969d11cc93b71047783a9a68"]}},"version":1}
test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582002b3763a0c906d90e3520b13cd8c411b9ab0d494ea19ee5f39480feefddb0fac0029
test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol":{"keccak256":"0xf1c86fa9a57c46007b81172ed0adceda6a716344435b80991c53283b3dd241b2","urls":["bzzr://ff8ef708d8095f167909f539e94b32a2066a901e4aa92f29c8a711ac2fd2974c"]}},"version":1}
test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol:C 6060604052341561000f57600080fd5b5b61011c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806347dd98d414603d575b600080fd5b3415604757600080fd5b606e60048080356fffffffffffffffffffffffffffffffff19169060200190919050506070565b005b806000809054906101000a90046c01000000000000000000000000026002601481101515609957fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460108110151560ea57fe5b1a505b505600a165627a7a723058207adec05ae04989e7ce60a255f63b93589a3120d5cca75fd93741f4f34fb09cd20029
test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bytes16"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol":{"keccak256":"0xd045228bebfbe3942f1e46b22403745953acbeaf6a832cc44cb99a5767cd12e3","urls":["bzzr://e23becc0c6c08ebf153374af89bab90cd3d2b44e0859ded9e0561e217c87ab0e"]}},"version":1}
test_35323de751f76d90eb0036c6719cfe26a581fae1ca5db8afd7c7a45eb5a88ce0.sol: ERROR
test_3555e13fc62712204e476ff052a5bde423f5cfa40210b910ddaa657ffafd0265.sol: ERROR
test_35b0ce195d847966ec628baee8ee81ce28ebbfe3f447366d3163b249c4840f01.sol: ERROR
test_35c731462dacc9179d48fe224362bf3a6fbc44027c74404780d5b4d810dfa6a8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol:C 6060604052341561000f57600080fd5b5b60d58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000801560a5573490505b5b5b905600a165627a7a723058204f03386eecea6a7808c8d7152088b33ed650c1d7874bff0c1b9a97ab4297db810029
test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol":{"keccak256":"0xdacf3bb9ff368aef3ed81023987637acfcc4381ee926cdd02372a1504dc81297","urls":["bzzr://8047ff1dbded633da2ecb8a94766ddaa1ba32e5b2b6255dd66ab27ede6b0c600"]}},"version":1}
test_3608d37527c73407d71d722e1f5d718129745d2259de923de815f1e42ecd9470.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol:C 6060604052341561000f57600080fd5b5b60e68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b6000806001905080830191505b509190505600a165627a7a7230582041121b5fad336d28783a0c7445b742bc4a0fe596dfbab4001c6b3d5a1b0701b50029
test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol":{"keccak256":"0x2021b3f140ec4eb27a695456ee79f5c9710e4aa6351bc1a82505160ec1dd02ca","urls":["bzzr://76c80f73caf6a7966b590a7f3fde34266662b970f0feb18550d8eb4866e2cfa8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol:test 6060604052341561000f57600080fd5b5b6104778061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c11461003e575b600080fd5b341561004957600080fd5b610061600480803515159060200190919050506100b3565b6040516020810161007781600084018486610081565b9050809250610099565b600084905061008f8261009e565b8452949350505050565b6100a8565b6000819050919050565b505060405180910390f35b60006100bd610317565b6100c5610317565b60007f61610000000000000000000000000000000000000000000000000000000000008360006002811015156100f757fe5b60200201907dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250507f626200000000000000000000000000000000000000000000000000000000000082600060028110151561017457fe5b60200201907dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050846101cc57816101ce565b825b60009060026101de92919061035f565b50600090507f616100000000000000000000000000000000000000000000000000000000000060008060028110151561021357fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561027757600190505b7f62620000000000000000000000000000000000000000000000000000000000006000806002811015156102a757fe5b601091828204019190066002025b9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561030b57600290505b8093505b505050919050565b60408051908101604052806002905b60007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906001900390816103265790505090565b826002600f016010900481019282156104095791602002820160005b838211156103d957835183826101000a81548161ffff02191690837e0100000000000000000000000000000000000000000000000000000000000090040217905550926020019260020160208160010104928301926001030261037b565b80156104075782816101000a81549061ffff02191690556002016020816001010492830192600103026103d9565b505b509050610416919061041a565b5090565b61044891905b8082111561044457600081816101000a81549061ffff021916905550600101610420565b5090565b905600a165627a7a723058207d5308b0e461fb6b34be142ab6bc353e799c1791f941910b9b1994562b9b9b5d0029
test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol":{"keccak256":"0xc4b75b9a572c08a3ae94a02d307289b3499c948ef1ae5c77907f6e17b790b658","urls":["bzzr://1048eaf67bd20f35662198e97d52f4c09ad348a0075e5863ef551c7765c99298"]}},"version":1}
test_361c90056554b0ca52c70143ba596bee04704a63d08080e90df9b1e80444224e.sol: ERROR
test_3624bb96451337b724d28b6c4af49eedde1e564cddb1de06e3d290275434c5f0.sol: ERROR
test_3628ae674223c9480c514e7816b6d40820db83d7ef641b9b413e75a6b087ee67.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008190505b9190505600a165627a7a723058205a16297eed1fcac3c5bc9af6e941e4c225bfdd10654e8e8f0b7d2e475509b35e0029
test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol":{"keccak256":"0x83e0a87cd91a4f3d08b675c13db7b4aa1db9ea20671db385cff0b721e831f3e7","urls":["bzzr://4c2adaa3e2045d267aa890accfa5399305f50e121e937dea26d796d6002f7a48"]}},"version":1}
test_364ce4727a6fec9093069498848b7bdbc36574d650669bd200da2282e035f723.sol: ERROR
 conv bytes10 -> bytes10
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes10_to_t_bytes10(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes10(value))

			}
		
			function cleanup_assert_t_bytes10(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000)
			}
		

test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol:c 6060604052341561000f57600080fd5b5b6105318061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b61005161010d565b60405160a081016100678160008401848a6100b5565b9050610078816020840184896100b5565b9050610089816040840184886100b5565b905061009a816060840184876100b5565b90506100ab816080840184866100b5565b90508096506100cd565b60008490506100c3826100d2565b8452949350505050565b6100fe565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b50505050505060405180910390f35b60008060008060008060096000816101259190610354565b50600090505b6000805490508110156101bd578078010000000000000000000000000000000000000000000000000260008281548110151561016357fe5b90600052602060002090600491828204019190066008025b6101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055505b80600101905061012b565b600060019080546101cf92919061038e565b506001808154811015156101df57fe5b9060005260206000209060039182820401919006600a025b9054906101000a90047601000000000000000000000000000000000000000000000295506001600281548110151561022b57fe5b9060005260206000209060039182820401919006600a025b9054906101000a90047601000000000000000000000000000000000000000000000294506001600381548110151561027757fe5b9060005260206000209060039182820401919006600a025b9054906101000a9004760100000000000000000000000000000000000000000000029350600160048154811015156102c357fe5b9060005260206000209060039182820401919006600a025b9054906101000a90047601000000000000000000000000000000000000000000000292506001600581548110151561030f57fe5b9060005260206000209060039182820401919006600a025b9054906101000a90047601000000000000000000000000000000000000000000000291505b509091929394565b81548183558181151161038957600301600490048160030160049004836000526020600020918201910161038891906104a7565b5b505050565b82805482825590600052602060002090600201600390048101928215610496576000526020600020916003016004900482016000805b848311156104585784819054906101000a900478010000000000000000000000000000000000000000000000000284836101000a81548169ffffffffffffffffffff02191690837601000000000000000000000000000000000000000000009004021790555060080160208160070104948501946001030290600a01906020826009010493840193600103820291506103c4565b81156104935783826101000a81549069ffffffffffffffffffff021916905590600a0190602082600901049384019360010382029150610458565b50505b5090506104a391906104cc565b5090565b6104c991905b808211156104c55760008160009055506001016104ad565b5090565b90565b61050291905b808211156104fe57600081816101000a81549069ffffffffffffffffffff0219169055506001016104d2565b5090565b905600a165627a7a723058206cc8a1125e3ec5954fc45ecd87cb830bc4f7cfa43f1a0ab5f09ce50d1765f8160029
test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"bytes10"},{"name":"b","type":"bytes10"},{"name":"c","type":"bytes10"},{"name":"d","type":"bytes10"},{"name":"e","type":"bytes10"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol":{"keccak256":"0xa3c295cedf370196ac12e041f448897098519f167af2d111b7dcd669030b1ced","urls":["bzzr://5459def2ac00d664074629e46ee4aa21273b763c71d443ff01073de21311e39f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol:C 6060604052341561000f57600080fd5b5b6101648061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b6000806100c0610111565b600392506006915060408051908101604052808481526020018381525090508060006002811015156100ee57fe5b602002015181600160028110151561010257fe5b6020020151925092505b509091565b60408051908101604052806002905b600081526020019060019003908161012057905050905600a165627a7a72305820d7cb292a442c4d5bce00ed97ce953e05316ae0e823ad6e56aef7d99f7a51db960029
test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol":{"keccak256":"0x03fc1e195443e8dbd7f4883643d206a061ea90b4468b0ef07521dfe2b6d3868f","urls":["bzzr://aa8799788254702d298b765e3eecd9b660372ca00b61ff77dd0d2f975d31b602"]}},"version":1}
test_36a894e45d0923b0e138ed87cdb84c532c83823e16354824c59674d90caf2edd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol:test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000806064905080600a0a60ff1691505b50905600a165627a7a72305820b5862724ea2b292b0de7e5f86cd4e52d707e4234f22485df0601ea8617ef654b0029
test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol":{"keccak256":"0x61fe012273883e397038eace69a62d33c1cfbf1bdefdcbbd08ca1c9e99ac3e75","urls":["bzzr://42a74244925141085daa9a4a037b49bcdc6ffd1bda79cd58d14b7fb240a83b9d"]}},"version":1}
test_371880fccafff454a9c48355e45574cd25382972820f2e003afd2d600b652fb2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol:C 6060604052341561000f57600080fd5b5b60f78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d2bf3cc214603d575b600080fd5b3415604757600080fd5b6067600480803590602001909190803560ff1690602001909190505060b3565b60405160208101607b816000840184866084565b9050809250609a565b6000849050609082609e565b8452949350505050565b60a8565b6000819050919050565b505060405180910390f35b60008160ff16839060020a0292508290505b929150505600a165627a7a7230582056fe0b9e0285378b2d38abbd66e173a75dd8f04444ce6bb1c3946430fbc995da0029
test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol":{"keccak256":"0x4187563202f8482288fa5663d85a04ee701a2f586cb0fa78c7af59c12204ec1e","urls":["bzzr://2e3d4444cc80ec5263ec4b8ac021a1017bf77211f95b6faeb17eb143e5fd6f77"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Base 60606040523415600e57600080fd5b5b60075b806000819055505b5060005460008082825402925050819055505b5b603680603b6000396000f30060606040525b600080fd00a165627a7a7230582002847cc53ca525d31de16d5fb60271adce6630ff578aa04cb7b6ea58beb0ce430029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:BaseBase 60606040523415600e57600080fd5b6040516020806077833981016040528080519060200190919050505b806000819055505b505b60368060416000396000f30060606040525b600080fd00a165627a7a723058202a1cede1454723451a1fc7a98ba9cc79fa78bf445dc7b5221837f1bfd7c3f6290029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Derived 60606040525b60075b806000819055505b5060005460008082825402925050819055505b5b60cf806100326000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d46300fd14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a7230582056d5358318a486ce8710f75fa990cdb6e4f590c44fbd257cfe6da92128572b620029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol:C 6060604052341561000f57600080fd5b5b61002b610032640100000000026101d4176401000000009004565b505b61013b565b60007f077abc00000000000000000000000000000000000000000000000000000000016000819055507f081741692784623948712346918723129873416293487126394123412751827660018190555061009d6100a564010000000002610234176401000000009004565b600190505b90565b7f08174169278462394871234691872312987341629348712639412341275182766001819055507f081741692784623948712346918723129873416293487126394123412751827660028190555061010e610111640100000000026101aa176401000000009004565b5b565b7fff056949000000000000000000000000000000000000000000000000000000006003819055505b565b6102b98061014a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636d4ce63c1461005f578063b8c9d365146100fa578063b8e010de1461010f578063e2179b8e14610174575b600080fd5b341561006a57600080fd5b610072610189565b60405160808101610088816000840184896100c5565b9050610099816020840184886100c5565b90506100aa816040840184876100c5565b90506100bb816060840184866100c5565b90508095506100dd565b60008490506100d3826100e2565b8452949350505050565b6100ec565b6000819050919050565b505050505060405180910390f35b341561010557600080fd5b61010d6101aa565b005b341561011a57600080fd5b6101226101d4565b6040516020810161013881600084018486610142565b905080925061015a565b60008490506101508261015f565b8452949350505050565b610169565b6000819050919050565b505060405180910390f35b341561017f57600080fd5b610187610234565b005b60008060008060005493506001549250600254915060035490505b90919293565b7fff056949000000000000000000000000000000000000000000000000000000006003819055505b565b60007f077abc00000000000000000000000000000000000000000000000000000000016000819055507f081741692784623948712346918723129873416293487126394123412751827660018190555061022c610234565b600190505b90565b7f08174169278462394871234691872312987341629348712639412341275182766001819055507f081741692784623948712346918723129873416293487126394123412751827660028190555061028a6101aa565b5b5600a165627a7a72305820152819b991361828117f107dc7ac5ffb0699b108f5a3b0e2ee30219cbc3399990029
test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"get","outputs":[{"name":"ra","type":"uint256"},{"name":"rb","type":"uint256"},{"name":"rc","type":"uint256"},{"name":"rd","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol":{"keccak256":"0xb92bfc33aae4ae162b4a1df27bfb7c229ffba78b1fc70144b37a5a5e24c9a988","urls":["bzzr://7cb0104a3738c144b49c20cf5732890756cc0ddebaee3b9684898b3bd0b518d7"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol:c 6060604052341561000f57600080fd5b5b60e78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600061070160ff16600181111560ab57fe5b600181111560b557fe5b90505b905600a165627a7a723058200fd93aad05622715d301bd07470142d8c546cab30f3a33f0674009dd0defcaf90029
test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol":{"keccak256":"0xd29621ffec639324b436bc43a3f74626b32debcb4716bd8bd0fc51d4d1c0b8dd","urls":["bzzr://afb392ea29da66239f06a094f5431fd6109dfc5080ff638484cd114616bb18b1"]}},"version":1}
test_397a81d1e23f02bff001ea4d883673dc40eb27e21515d10b2f6a00b001fc13f8.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol:test 6060604052341561000f57600080fd5b604051602080610128833981016040528080519060200190919050505b80604051808281526020019150506040518091039020600081600019169055505b505b60cb8061005d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063834ba3d714603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820577a14a791881d3def9883504bd90c89d1fd422747f0016406eaa519753aea120029
test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"shaValue","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol":{"keccak256":"0xde0f948c27274cb5caeef05d57a71abba1f00b87a3b2a28bd95b91033f3217d9","urls":["bzzr://e5bca0bb1e421f8e2d79f00dce5314a2d4ef5e65676595035ac0d695e3fb18ba"]}},"version":1}
test_39ad2b9205c1d900c885cbe4352175ed45edc58dbfdb08ed06fa5dec9fa557d1.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol:test 6060604052341561000f57600080fd5b5b6102d68061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063919840ad14610049578063b8e010de146100b0575b600080fd5b341561005457600080fd5b61005c6100c5565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c36101d3565b005b600060026000800160009054906101000a900463ffffffff1663ffffffff1614801561012357506003600060010160008060ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b8015610178575060008060010160008060ff1681526020019081526020016000206001016000600160ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b80156101cd57506001600060010160008060ff16815260200190815260200160002060010160008060ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b90505b90565b60008060026000800160006101000a81548163ffffffff021916908363ffffffff160217905550600060010191508160008060ff168152602001908152602001600020905060038160000160006101000a81548163ffffffff021916908363ffffffff1602179055506001816001016000600160ff16815260200190815260200160002060000160009054906101000a900463ffffffff16018160010160008060ff16815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b50505600a165627a7a7230582002fe561d112b40bb9effce49de241e57137ca754c5137d04656f42fa48de0a5c0029
test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"check","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol":{"keccak256":"0x6020bdd012d661a1e0ac74fa19c2aafc8b7b83726f66d605620f77261138a908","urls":["bzzr://40d131d8b6c335d44836fb142300438c5e267ed8c420ae8380ac13e72e319c53"]}},"version":1}
test_39cd8d48ea73d9a6b9ad1539e836551925ffca2bc309ffe0a4046814aef62e2e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol:test 6060604052341561000f57600080fd5b5b6104118061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063919840ad14610049578063b8e010de146100b0575b600080fd5b341561005457600080fd5b61005c6100c5565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c361025d565b005b600060016000800160009054906101000a900463ffffffff1663ffffffff1614801561010957506002600060010160000160009054906101000a900460ff1660ff16145b801561012e575060011515600060010160000160019054906101000a900460ff161515145b80156101855750600560006002016000600360ff1681526020019081526020016000206002016000600460ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b80156101dc5750600660006002016000600460ff1681526020019081526020016000206002016000600360ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b8015610218575060001515600060020160008060ff16815260200190815260200160002060010160000160019054906101000a900460ff161515145b80156102575750600960006002016000600460ff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b90505b90565b60016000800160006101000a81548163ffffffff021916908363ffffffff1602179055506002600060010160000160006101000a81548160ff021916908360ff1602179055506001600060010160000160016101000a81548160ff021916908315150217905550600560006002016000600360ff1681526020019081526020016000206002016000600460ff16815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff160217905550600660006002016000600460ff1681526020019081526020016000206002016000600360ff16815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff16021790555060008060020160008060ff16815260200190815260200160002060010160000160016101000a81548160ff021916908315150217905550600960006002016000600460ff16815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b5600a165627a7a72305820282ef74fea83f0b9abc5c9b9692578b2b8fecf339c4818f639ac70f02c6608a00029
test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"check","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol":{"keccak256":"0x35cf550c4a319608c1f5c111846fef991f7a5e61f4b115006be5f9f187fd2f27","urls":["bzzr://96e9840eb9ca2d074341374b2830dd2a517a9848b50e6218ac059c81920dd2a2"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:FixedFeeRegistrar 6060604052341561000f57600080fd5b5b61122c8061001f6000396000f300606060405236156100ad576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063213b9eb8146100b2578063511b1df91461012e5780637f445c24146101f1578063ae999ece146102b4578063b575404514610306578063ccf4f41314610382578063dd54a62f146103fe578063df55b41a146104ab578063e51ace161461056e578063fbf58b3e14610693578063fd6f54301461070f575b600080fd5b34156100bd57600080fd5b61012c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610779565b005b341561013957600080fd5b610189600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108bd565b6040516020810161019f816000840184866101a9565b90508092506101c1565b60008490506101b7826101c6565b8452949350505050565b6101e6565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b34156101fc57600080fd5b61024c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108f4565b604051602081016102628160008401848661026c565b9050809250610284565b600084905061027a82610289565b8452949350505050565b6102a9565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b610304600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061092b565b005b341561031157600080fd5b610380600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a69565b005b341561038d57600080fd5b6103fc600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cd2565b005b341561040957600080fd5b610459600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e16565b6040516020810161046f81600084018486610479565b9050809250610491565b600084905061048782610496565b8452949350505050565b6104a0565b6000819050919050565b505060405180910390f35b34156104b657600080fd5b610506600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e2d565b6040516020810161051c81600084018486610526565b905080925061053e565b600084905061053482610543565b8452949350505050565b610563565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b341561057957600080fd5b6105c9600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e64565b604051608081016105df8160008401848961061c565b90506105f08160208401848861061c565b905061060181604084018487610639565b90506106128160608401848661061c565b9050809550610634565b600084905061062a82610656565b8452949350505050565b610651565b60008490506106478261067b565b8452949350505050565b610676565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610685565b6000819050919050565b505050505060405180910390f35b341561069e57600080fd5b61070d600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610efc565b005b341561071a57600080fd5b610777600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803560001916906020019091905050611040565b005b813373ffffffffffffffffffffffffffffffffffffffff1661079a8261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108b757816107e48461114e565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826040518082805190602001908083835b60208310151561085c57805182525b602082019150602081019050602083039250610836565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5b505050565b60006108c88261114e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b60006108ff8261114e565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b60006109368261114e565b905060008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561098b57506803bd913e6c1df400003410155b15610a6457338160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816040518082805190602001908083835b602083101515610a0a57805182525b6020820191506020810190506020830392506109e4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5050565b813373ffffffffffffffffffffffffffffffffffffffff16610a8a8261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ccc5760006008846040518082805190602001908083835b602083101515610b0557805182525b602082019150602081019050602083039250610adf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515610b3f57fe5b047f200000000000000000000000000000000000000000000000000000000000000081101515610b6b57fe5b6004020160005b6000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508173ffffffffffffffffffffffffffffffffffffffff166108fc6803bd913e6c1df400009081150290604051600060405180830381858888f193505050501515610c3a57600080fd5b826040518082805190602001908083835b602083101515610c7157805182525b602082019150602081019050602083039250610c4b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5b505050565b813373ffffffffffffffffffffffffffffffffffffffff16610cf38261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e105781610d3d8461114e565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826040518082805190602001908083835b602083101515610db557805182525b602082019150602081019050602083039250610d8f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5b505050565b6000610e218261114e565b6002015490505b919050565b6000610e388261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000806000806000610e758661114e565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350806002015492508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b509193509193565b813373ffffffffffffffffffffffffffffffffffffffff16610f1d8261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561103a5781610f678461114e565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826040518082805190602001908083835b602083101515610fdf57805182525b602082019150602081019050602083039250610fb9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5b505050565b813373ffffffffffffffffffffffffffffffffffffffff166110618261114e565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561114857816110ab8461114e565b6002018160001916905550826040518082805190602001908083835b6020831015156110ed57805182525b6020820191506020810190506020830392506110c7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f1cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b6976560405160405180910390a25b5b5b505050565b6000806008836040518082805190602001908083835b60208310151561118a57805182525b602082019150602081019050602083039250611164565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190048115156111c457fe5b047f2000000000000000000000000000000000000000000000000000000000000000811015156111f057fe5b6004020160005b5090505b9190505600a165627a7a723058204042de8c2f2a8483f2d544273496cd57a9a7d7e4739aacc79ef75977b0ffabd50029
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:FixedFeeRegistrar {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_a","type":"address"}],"name":"setAddr","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"addr","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"subRegistrar","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"reserve","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_refund","type":"address"}],"name":"disown","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"record","outputs":[{"name":"o_addr","type":"address"},{"name":"o_subRegistrar","type":"address"},{"name":"o_content","type":"bytes32"},{"name":"o_owner","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_newOwner","type":"address"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"string"}],"name":"Changed","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol":"FixedFeeRegistrar"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol":{"keccak256":"0x3c579d6b94979889a75cf5291b1b5877e3160f11bdb0fd5c3961292a42395d86","urls":["bzzr://63f4900accfc457b4b4e7db6efa14571ccc7cdf1cf5e9366c6dd897c3b8030a3"]}},"version":1}
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:Registrar 
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:Registrar 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol:C 6060604052341561000f57600080fd5b5b61022b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad61013a565b600a6040518059106100bc5750595b9080825280602002602001820160405280156100f257816020015b6100df610154565b8152602001906001900390816100d75790505b50816000018190525061010361013a565b905060008001805480919060010161011b919061016e565b5060008060008201600061012f919061019a565b5050600191505b5090565b60206040519081016040528061014e6101bc565b81525090565b6020604051908101604052806101686101bc565b81525090565b8154818355818115116101955781836000526020600020918201910161019491906101d0565b5b505050565b50805460008255906000526020600020908101906101b891906101d0565b5b50565b602060405190810160405280600081525090565b6101fc91905b808211156101f857600080820160006101ef919061019a565b506001016101d6565b5090565b905600a165627a7a72305820f3798f130167d0f1c9797abfebaba474c9fd148b3607df952a90a554efc44eb00029
test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol":{"keccak256":"0x5a74f801e15a9a6af3df6aa9a522ebf1d071095f24360e21c9b347a6f9406c3a","urls":["bzzr://e9b3c6e31cc47c89d2f7f37c62c9ce7c9b96f19f8f3ef489f64aa9a083862a83"]}},"version":1}
test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol:test 60606040523415600e57600080fd5b5b609b8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000601273ffffffffffffffffffffffffffffffffffffffff1690505b505600a165627a7a723058207a47292806a952fd0b86382d02be4fc4e1e72555c793f9fb2d8f24bf37710e980029
test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol":{"keccak256":"0xba87569db18676e152cc3514b58a3a9256273d3acda6fb2a824e9dbaf5cee4d0","urls":["bzzr://7cfbf8f2a0967c06bf29f74f219c3e00af367b121180557f04b6927b20f1c883"]}},"version":1}
test_3b9fff478528bd8f7bc9a4e1faf3de72ebee8920589bba0685cabddabe5fe832.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol:test 6060604052341561000f57600080fd5b5b60056000819055506001806003018190555060018060040160008081526020019081526020016000208190555060026001600401600060018152602001908152602001600020819055506002600160000160000181905550600180600001600101600080815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600160000160010160006001815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600080820160008082016000905550506003820160009055505060008090555b5b610328806100fe6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806316178e1c1461006a5780635ff76c8a146100cf57806379e44a3814610134578063e2943ff714610199578063fc6946891461020e575b600080fd5b341561007557600080fd5b61007d610281565b604051602081016100938160008401848661009d565b90508092506100b5565b60008490506100ab826100ba565b8452949350505050565b6100c4565b6000819050919050565b505060405180910390f35b34156100da57600080fd5b6100e261028b565b604051602081016100f881600084018486610102565b905080925061011a565b60008490506101108261011f565b8452949350505050565b610129565b6000819050919050565b505060405180910390f35b341561013f57600080fd5b61014761029c565b6040516020810161015d81600084018486610167565b905080925061017f565b600084905061017582610184565b8452949350505050565b61018e565b6000819050919050565b505060405180910390f35b34156101a457600080fd5b6101ba60048080359060200190919050506102aa565b604051602081016101d0816000840184866101da565b90508092506101f2565b60008490506101e8826101f7565b8452949350505050565b610203565b60008115159050919050565b505060405180910390f35b341561021957600080fd5b61022f60048080359060200190919050506102db565b604051602081016102458160008401848661024f565b9050809250610267565b600084905061025d8261026c565b8452949350505050565b610276565b6000819050919050565b505060405180910390f35b6000805490505b90565b600060016000016000015490505b90565b600060016003015490505b90565b60006001600001600101600083815260200190815260200160002060009054906101000a900460ff1690505b919050565b6000600160040160008381526020019081526020016000205490505b9190505600a165627a7a72305820869016377b0475fd75b0f78441500691b8d2d6449d698131b2450c694351ff980029
test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getToDelete","outputs":[{"name":"res","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getNestedValue","outputs":[{"name":"nestedValue","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getTopValue","outputs":[{"name":"topValue","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getNestedMapping","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getTopMapping","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol":{"keccak256":"0x2ed1ef1d5df3dbf6816ab4ffbc1f04430bd3a612c89f3ad7b74605d60ec772fa","urls":["bzzr://4ddf08d4484f06e0b9f8ed96b6ac7d04a639d9f1f1f71a9dffc35645149befb2"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol:c 6060604052341561000f57600080fd5b5b6103748061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ff2af2d1461005457806360fe47b1146100d25780638f88708b14610147575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101f0565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c7565b60008115159050919050565b505060405180910390f35b34156100dd57600080fd5b6100f36004808035906020019091905050610256565b6040516020810161010981600084018486610113565b905080925061012b565b600084905061012182610130565b8452949350505050565b61013c565b60008115159050919050565b505060405180910390f35b341561015257600080fd5b61016860048080359060200190919050506102d4565b6040516080810161017e816000840184896101bb565b905061018f816020840184886101bb565b90506101a0816040840184876101bb565b90506101b1816060840184866101bb565b90508095506101d3565b60008490506101c9826101d8565b8452949350505050565b6101e2565b6000819050919050565b505050505060405180910390f35b60008060008481526020019081526020016000206000808481526020019081526020016000206000820154816000015560028201816002016000820154816000015560018201548160010155505060048201548160040155905050600190505b92915050565b6000600160008084815260200190815260200160002060000181905550600360008084815260200190815260200160002060020160000181905550600460008084815260200190815260200160002060020160010181905550600260008084815260200190815260200160002060040181905550600190505b919050565b6000806000806000808681526020019081526020016000206000015493506000808681526020019081526020016000206002016000015492506000808681526020019081526020016000206002016001015491506000808681526020019081526020016000206004015490505b91935091935600a165627a7a723058204b082eb3cf9766f974eaa9a777991a4639d5b49a876762ac3b14198f619e59780029
test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"from","type":"uint256"},{"name":"to","type":"uint256"}],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"retrieve","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"c","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol":{"keccak256":"0x25692ca6c8885b5343adf3cf6d8afc75fc448a88acf410a0b0d00fe887c60216","urls":["bzzr://f4fd198024ae92ed0bc98e282daafc6e1f2439c506567358127ebfb27fe80932"]}},"version":1}
 conv bytes16 -> bytes16
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bytes16_to_t_bytes16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes16_to_t_bytes16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes16(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes16(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol:test 6060604052341561000f57600080fd5b5b6102368061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806323c450b214610049578063cef7e0de1461014a575b600080fd5b341561005457600080fd5b61009660048080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190803515159060200190919050506101af565b604051604081016100ac816000840184876100e4565b90506100bd816020840184866100c7565b90508093506100df565b60008490506100d582610101565b8452949350505050565b6100fc565b60008490506100f282610112565b8452949350505050565b61010d565b60008115159050919050565b61013e565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b50505060405180910390f35b341561015557600080fd5b61015d6101e1565b604051602081016101738160008401848661017d565b9050809250610195565b600084905061018b8261019a565b8452949350505050565b6101a4565b6000819050919050565b505060405180910390f35b600080829050837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191691505b9250929050565b60007f61626300ff5f5f0000000000000000000000000000000000000000000000000090505b905600a165627a7a723058209bc9e5bf14b51dd0cd6fa781e692d46a6319ec7e78a12ba3383b13b63ef3ab260029
test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"small","type":"bytes2"},{"name":"one","type":"bool"}],"name":"pipeThrough","outputs":[{"name":"large","type":"bytes16"},{"name":"oneRet","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fixedBytes","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol":{"keccak256":"0xb83b3de1c34997282b1b1c158d68b9de857a2974f2f0a32529c4cca972219e8c","urls":["bzzr://654d2e0e26d05576f9b7c1e8837017a6700fb63c2a93a0b32903ce3bf1d5f498"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol:test 6060604052341561000f57600080fd5b5b6103ac8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c11461003e575b600080fd5b341561004957600080fd5b610061600480803515159060200190919050506100b3565b6040516020810161007781600084018486610081565b9050809250610099565b600084905061008f8261009e565b8452949350505050565b6100a8565b6000819050919050565b505060405180910390f35b60006100bd610338565b6100c5610338565b60007f63630000000000000000000000000000000000000000000000000000000000006000806002811015156100f757fe5b601091828204019190066002025b6101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055507f626200000000000000000000000000000000000000000000000000000000000082600060028110151561016b57fe5b60200201907dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505084610262576000600280602002604051908101604052809291908260028015610258576020028201916000905b82829054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600201906020826001010492830192600103820291508084116101e55790505b5050505050610264565b815b9250600090507f626200000000000000000000000000000000000000000000000000000000000083600060028110151561029a57fe5b60200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156102cb57600190505b7f63630000000000000000000000000000000000000000000000000000000000008360006002811015156102fb57fe5b60200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561032c57600290505b8093505b505050919050565b60408051908101604052806002905b60007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060019003908161034757905050905600a165627a7a7230582077124a904a0a6467a01bd83e7b45f7be36fcf0517b8870ffd5a148c6462403d50029
test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol":{"keccak256":"0xfa252dbb69a4f596a074cb189fcc3ff7f40de4e1d6407c43b9f8c8a7e5f44c86","urls":["bzzr://2c3ea6fa5d848c59dff0e8260753e307d1b637b461de9f80cd2dc08c636174ee"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:C 6060604052341561000f57600080fd5b5b61018c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bc5bbbf1461003e575b600080fd5b341561004957600080fd5b6100966004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506100e8565b604051602081016100ac816000840184866100b6565b90508092506100ce565b60008490506100c4826100d3565b8452949350505050565b6100dd565b6000819050919050565b505060405180910390f35b60006100f882610100600061010e565b90505b919050565b600081830190505b92915050565b600080600090505b845181101561015457610144858281518110151561013057fe5b90602001906020020151848663ffffffff16565b92505b8080600101915050610116565b8291505b5093925050505600a165627a7a723058206fe88337e4935ff4e37b1186e8ee410db0bca3d1a891daa0bdbf39808b679ce60029
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":{"keccak256":"0xcaca2da3843b5ced0ccaa40fc9d9f18d3262e03977000a92490e15e2a04d525a","urls":["bzzr://5cd71f46d5c7f4f895a12627cc15bea6585af29a976720194860a6ca207fa117"]}},"version":1}
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:Utils 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207e37f08c6da2c32926bb0b32dd5223cd09f2fbf13c32faa1a487dea35bc13b7a0029
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:Utils {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":"Utils"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":{"keccak256":"0xcaca2da3843b5ced0ccaa40fc9d9f18d3262e03977000a92490e15e2a04d525a","urls":["bzzr://5cd71f46d5c7f4f895a12627cc15bea6585af29a976720194860a6ca207fa117"]}},"version":1}
test_3cfe7caa18e4cbc9ce58139dc1f4104785fc5dfdea1a6f904f50e32bbad8a8f1.sol: ERROR
test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol:test 6060604052341561000f57600080fd5b5b60b28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b600080600091505b600a8210156080578190506080565b81806001019250506065565b5b5050505600a165627a7a72305820045f82d45ad6bc77840efca0d0c653be57c0e1a5bb4e7a71ab9f0e1de080ff930029
test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol":{"keccak256":"0x6e97efcc923914dcb4f3080718602a70508aa0f31d4219867fefb4f9c7e0be82","urls":["bzzr://9b6e06ff677128e123f6955d84cf2072ccaa0235f268550fc2b08904596a84d6"]}},"version":1}
test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol:test 60606040523415600e57600080fd5b5b608a8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600060019050600290505b5b505600a165627a7a72305820902bde4400716fec4a02c7e6d1530fe3185e187fbad43d78c0a1afdf9f6f3daf0029
test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol":{"keccak256":"0x3102077a666a689d2fe6dfaa1bbf2c7236b406be478192b2b673fa7e2a0f7728","urls":["bzzr://5448d8f1f54132a74a052dbe38dde953a52dd8a0e05233387aaba2e6da6f511a"]}},"version":1}
test_3da9bb63ed2853c9a5d38de0cd5af73df0b74c5502d993bdc8775369766817d9.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Base 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600290505b905600a165627a7a723058207d256fb98430c51b569fbdc1acd3ed3d571b5866c14a8ba4eaca307ce7c2ae220029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:BaseBase 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820bca03a9b173d9c8d0dfa97e9834aba9bb1a9c74edb6db395cd1128c3037e97cf0029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Derived 6060604052341561000f57600080fd5b5b6101638061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610123565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600061011d61012d565b90505b90565b6000600390505b90565b6000600190505b905600a165627a7a723058204682848b850f7acb0c64dbd9202265a1074ff25711e730fa60ad9ff3de52eb070029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3e2e7f1813f202e9957fffebfe3d1820fa7228bcb5e4736f945311066fa3e294.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3ebfdfacb1f75c8f29fa98c56fc649f43ab8dc81daf6a41e50f19b164bd223eb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol:C 6060604052341561000f57600080fd5b5b6103c68061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060016000800160006101000a81548160ff021916908360038111156100c657fe5b0217905550600160038111156100d857fe5b6000800160009054906101000a900460ff1660038111156100f557fe5b1415156101055760029050610397565b60026000800160016101000a81548160ff0219169083600381111561012657fe5b02179055506002600381111561013857fe5b6000800160019054906101000a900460ff16600381111561015557fe5b1415156101655760039050610397565b60036000800160026101000a81548160ff0219169083600481111561018657fe5b02179055506003600481111561019857fe5b6000800160029054906101000a900460ff1660048111156101b557fe5b1415156101c55760049050610397565b600160038111156101d257fe5b6000800160009054906101000a900460ff1660038111156101ef57fe5b1415156101ff5760059050610397565b60026000800160006101000a81548160ff0219169083600381111561022057fe5b02179055506002600381111561023257fe5b6000800160009054906101000a900460ff16600381111561024f57fe5b14151561025f5760069050610397565b6002600381111561026c57fe5b6000800160019054906101000a900460ff16600381111561028957fe5b1415156102995760079050610397565b60036000800160016101000a81548160ff021916908360038111156102ba57fe5b02179055506003808111156102cb57fe5b6000800160019054906101000a900460ff1660038111156102e857fe5b1415156102f85760089050610397565b6003600481111561030557fe5b6000800160029054906101000a900460ff16600481111561032257fe5b1415156103325760099050610397565b60016000800160026101000a81548160ff0219169083600481111561035357fe5b02179055506001600481111561036557fe5b6000800160029054906101000a900460ff16600481111561038257fe5b14151561039257600a9050610397565b600190505b905600a165627a7a723058207e810eb5f51424d0452fb019d697feb89969a9e28a3c2abec413f7b162a4e9fd0029
test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol":{"keccak256":"0x025bc40c3591112f2f8d4ae46fa9a3086b899270df09dc277b96f8152b0bc14f","urls":["bzzr://27699d1e46197cfbfe6c48382ea0864a48fbfc1e83b37ded1f89db2554f2daa3"]}},"version":1}
test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol:test 60606040523415600e57600080fd5b5b60848061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090505b505600a165627a7a72305820d0610516f17e6baf83464ffc2195df65573df39ff0f6aba50d35d5eb2b0e01940029
test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol":{"keccak256":"0x26e12cfc3db630672864e52381d6ed6417d9f2af4d18b86a72d189407f9ef55f","urls":["bzzr://6f673694716940dce0ac369d33872383b2b0ef29eb432dee04192ef46e8aa678"]}},"version":1}
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol:test 6060604052341561000f57600080fd5b5b6101cf8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632fbebd38146100495780634b3df200146100de575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610165565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100d3565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b34156100e957600080fd5b6100f1610177565b6040516020810161010781600084018486610111565b9050809250610129565b600084905061011f8261012e565b8452949350505050565b61015a565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b600061016f610177565b90505b919050565b600080357fffffffff000000000000000000000000000000000000000000000000000000001690505b905600a165627a7a723058207fae59ff05e7aff186c504d4edf9539aed85a2b10a36e594e48843259dd910400029
test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"foo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"boo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol":{"keccak256":"0x9ab487cca172ad8dd6ae9db9f68a29985fea611cd299d17da413df804e601ffa","urls":["bzzr://4ed55a650c9a5afc59b3f62e63739298ea58ef2033835ec4910168e384ab59a7"]}},"version":1}
test_3fa7a4d7582402a0e167324c22698ac8c32ad0fc9143fb19cff41a74c8721685.sol: ERROR
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:A 60606040523415600e57600080fd5b5b608d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b5b505600a165627a7a72305820953a97fc6cd988d2c49b9309c8f8b6f8c68abcc1419b7ce3bdacfc8c3c5e3d320029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:B 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a7230582074679e8954884ae05fd8ee10a3197228b520c3319b0a5eb42311c4b6702afcd90029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:C 6060604052341561000f57600080fd5b5b60ac8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063b3de648b146059575b600080fd5b3415605157600080fd5b60576079565b005b3415606357600080fd5b60776004808035906020019091905050607c565b005b5b565b5b505600a165627a7a7230582061d27abf60f4d0902aaa9ca1f48bd1f2f7bd879b2228a8268d62f25a59ed05e50029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008160020a90505b9190505600a165627a7a723058203c5bc95ebbe6ec62ad36f848e9f1751634dc1620d9b81461fd3dcec65f1b4b180029
test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol":{"keccak256":"0xe20882db9cc891bf7f7530097711ae470ef3067637ea512c855efbc1ff8b11dc","urls":["bzzr://fdab382c12fe2a04ac104a229667511dc7fafe9e2b2e9ed344ddb6c0c881623c"]}},"version":1}
test_4000d35769057d71d9d5250199319a17234b751109e6bb8c624c9c7a311bb2df.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol:C 6060604052341561000f57600080fd5b5b60f68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000602060405190810160405280600460ff16815250600060018110151560bc57fe5b602002015160ff1690505b905600a165627a7a72305820b03a32dd02d6dcab72efe17c80f38b132509e1ec336113e5755ef91823d8493d0029
test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol":{"keccak256":"0xebf3dd4f6f9ecd3b4329e2f8e691f5713d0ef785b1e57cb43df45ee1cb03bae0","urls":["bzzr://f4f74e98a058153af628ba83fb207c5ccf4f97d881eb1d4347e5ecb2a4b38e6d"]}},"version":1}
test_4020d5dfb40327ce841a087748de6aefad09a2af721bdbcf090be27cdeb34e51.sol: ERROR
 conv uint64 -> uint64
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint64_to_t_uint64(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint64_to_t_uint64(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint64(value))

			}
		
			function cleanup_assert_t_uint64(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFF)
			}
		

test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol:Test 6060604052341561000f57600080fd5b5b6101278061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635ad298bd14603d575b600080fd5b3415604757600080fd5b607a60048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505060d0565b60405160208101608e816000840184866097565b905080925060ad565b600084905060a38260b1565b8452949350505050565b60c5565b600067ffffffffffffffff82169050919050565b505060405180910390f35b6000817c0100000000000000000000000000000000000000000000000000000000900490505b9190505600a165627a7a7230582090df4c99336fde733d09d46b51738b81eaf604ab9127f80f278a13e6357ab2e70029
test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes4"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint64"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol":{"keccak256":"0xe297e64f19052e44ff990b5f50ca3dee35ad285b59125534bf3443fadb6a6a83","urls":["bzzr://32eeeab9310e2d0e49b5db3cd53daf965e1de36dfcdd03d215d0c71e70ec4247"]}},"version":1}
test_4088ccbaadfece1fd1750e45f21e43c45aab4d83853af0a1bd41e7bfd87855b5.sol: ERROR
test_408a7dfb9c2807e8783322ef026e76f8da7a861e660e4719273f1012723baefb.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol:C 6060604052341561000f57600080fd5b5b6101a88061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afdb4ea14610049578063cb217d34146100c5575b600080fd5b341561005457600080fd5b6100736004808035906020019091908035906020019091905050610141565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b34156100d057600080fd5b6100ef600480803590602001909190803590602001909190505061015e565b604051602081016101058160008401848661010f565b9050809250610127565b600084905061011d8261012c565b8452949350505050565b610136565b6000819050919050565b505060405180910390f35b60008183600082121561015057fe5b9060020a0290505b92915050565b60008183600082121561016d57fe5b9060020a900590505b929150505600a165627a7a723058202771974a32faa0697a41e894603ff6a7ddfee5a1aa020d2a6a158fa16749eef90029
test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"g","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol":{"keccak256":"0x8e5bf97d60d16e50db68988d7db122915d52484e2a5a696ab19ee81ea7fee1b3","urls":["bzzr://465875b751f4a9c8e53192407bc402c2c7f5bae477c28bf81a323d21065df3eb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820d9be95c5e49decd104b92e71a20e50ee7bfd3e8c0efe063afaee8b15f0886edd0029
test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol":{"keccak256":"0x45d66598f92988be5e20a9308213fee7c6df7f71998f3d4f364dbb23bc1f2d72","urls":["bzzr://8d38535fd4e23aa23294f2a1a9d19491ab0f2ec721b6eb7e95c217748ace850f"]}},"version":1}
test_40edd44acbebf06a263c823589e2d61f2d4271c2c423963e531f7c40ad06d601.sol: ERROR
test_41034629d082183d076fbee744cac00918928775df47f80908a6b67e5a4c75bd.sol: ERROR
test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol:C 60606040523415600e57600080fd5b5b607f8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005bfe5b5600a165627a7a723058206b28f6016ad0b0a6f93153f73d622e90cef108f60feafc22651ed9573575c1210029
test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol":{"keccak256":"0xef45ba97027569417c6134192cf122cd0e6aa099c86baff7b6bb0d5d42c7478d","urls":["bzzr://947d48816af184c680ce46ff75cf9861d18bf4bb2aed732b0640fd8c34d3d0b6"]}},"version":1}
test_411b766bb3045158a00a4f88620c93bdf6182933f213d44233ac6fb7cb028450.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol:Test 6060604052341561000f57600080fd5b5b60e68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cfc5a96914603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b6000816001900490505b9190505600a165627a7a7230582098fb3e9877a5601173a470b85413db952db74ab985e26c2169e2a081405a55170029
test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes32"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol":{"keccak256":"0xd2383d01c61c33b2db6eebaf73b2213d846804ab99a255798dd0b1f26f7ee0bc","urls":["bzzr://8110217be654bc22ce8c1e2ff58c7cd03bbf386a10bc03953d3307b2b78da2ba"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_420e60156c351653443e1177e5d8169cffa2d8752f523f964d28b26566517a6d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol:test 6060604052341561000f57600080fd5b5b60e58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b600060b260005460a7565b505b9190505600a165627a7a7230582025ab1274f0b161567e6560a5c40594b94be83cb98705b7168414f3e35ee9d8fd0029
test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"f","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol":{"keccak256":"0xae7f1116a32849b58c560f2e8600c05e9c4b8acd1d4beea8b362ead833e2469f","urls":["bzzr://56afe1b120313f31f7bc01529f06865357ec2d64e6e0fdc5e78ed8d31cfab8c5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol:C 6060604052341561000f57600080fd5b5b60f28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081839060020a900492508290505b929150505600a165627a7a72305820a04e3c077385797cd9cd6c8b3ae3c0870e253a0b7b87af6036d836498264c44a0029
test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol":{"keccak256":"0x6f1b6d67966df6e5d8223d0da977e67ff2be7f470b3e42f6d68c56cefa3cb1d9","urls":["bzzr://f499eea7949eac196e58ddd64825a5cf4cc71eae5a2ac399d2db7ee95ec9f7af"]}},"version":1}
test_437709f3c9d281d9b8871d26dcebf1467185afaec8a463e145419bceda1f7dd3.sol: ERROR
test_437e82f39a87ebd45d958c626a4c098a3dc2947fac02a0487506d4675781229d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063131e2f1814603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a72305820f051f6ad6f2c2cb73e2ee7b5fb8adad8a5fdd6ad1c16543ac911e7baff02000d0029
test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"I do something awesome which requires two lines to explain"}}}},"settings":{"compilationTarget":{"test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol":{"keccak256":"0x7a12d68d0530c37d9dfeb382dcfce9c54015a85bbc767c7a6a9c214477f77776","urls":["bzzr://29742b15c67dd1f3ac7599071e2245522502942f4b6044623502b7db5ddf7220"]}},"version":1}
test_43acab6cab6300ff5b61a4abe8c251b70f6511177b4befc38ac92b1d3b0c107c.sol: ERROR
test_43e244475ef247286b61f30fdcfdb5ded21cf5fe4338dc86c3599aeb189101dc.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol:test 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600890505b905600a165627a7a7230582084fd852731713a5754c728ac4f8c47863f5b0ac6b12702dce71f7879679e34cb0029
test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol":{"keccak256":"0x397d83058b179e452152511e8919de23fcbb957c9c27f4dbf987d80f46e1eaac","urls":["bzzr://7b26b88f4cf7154e25a9534b4b49358f5a2450efd07f44345a0577def542dbcc"]}},"version":1}
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058209ff7c82157fffd138fd2875cdaa01d17494e2b9d957bd9f1a9c9d327f6503b200029
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":"base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":{"keccak256":"0xe5ebc649b52f89f71ab60d4e8a52a68a1f43b3470f448c80f85884cc97cf9990","urls":["bzzr://9e67bcd99342790ab0136337d072c91117cf113d56bf38781957910d6382ff15"]}},"version":1}
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:derived 60606040523415600e57600080fd5b5b60868061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60076000819055505b5600a165627a7a723058206fde7a4e5a987bf4a11a0728f0e7211bcaf92bbc4ab5c004c6c37199f2db5c6d0029
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":"derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":{"keccak256":"0xe5ebc649b52f89f71ab60d4e8a52a68a1f43b3470f448c80f85884cc97cf9990","urls":["bzzr://9e67bcd99342790ab0136337d072c91117cf113d56bf38781957910d6382ff15"]}},"version":1}
test_4584425ac67874e1f10f489e65c19ee73215aa0c50c06a5f1600e2f267fd1690.sol: ERROR
test_45cc7c92261d2a18ed7ecd711a0f9889cc741e0b85bdef17d64a2911c649bf3a.sol: ERROR
test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol:test 60606040523415600e57600080fd5b5b60a28061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b600080600091505b8190506070565b6065565b5b5050505600a165627a7a72305820a2c7be59c156f2813e93e1b50e6ed9b2ccea772b4dcaa563c41012ac6e58fd270029
test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol":{"keccak256":"0xfb6dd5741cffe4689fdaf4be1072532199ec8385af766ad8f2b95ed62afb4c1e","urls":["bzzr://24cb3d1c123c1b4a13c1ceffdce877b1e1d7dbe3a7f02ecd618c46a956b5af1e"]}},"version":1}
test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol:test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b601273ffffffffffffffffffffffffffffffffffffffff1660405180807f616263000000000000000000000000000000000000000000000000000000000081525060200190506000604051808303816000866102c65a03f2915050505b5600a165627a7a72305820bacd48a1efebfd8f879844dc876ec5e6246524df8bb4cd80bb06918212c9acb60029
test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol":{"keccak256":"0xd845b1cf767d1ace7272fe9db9ebfc620a0086d80c2a792a9f8a440f0f354be6","urls":["bzzr://8e68fa48c840141fb3ed74c5f1d6886fd5af44325a576126765c45ec42a133b3"]}},"version":1}
test_4648e4a17673d62d57e7b3cca2248ba14038fef39701c4fa39f4a505577d01d6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820fbfb257320d5ce4142253fd8781263c9001c029e32607d70a8fd9328233f81bb0029
test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication and cookies with nutella"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol":{"keccak256":"0x970139ac3ee3299a92cde3bcb6a8b851b11cf101e5dfea619a9ec50c59047874","urls":["bzzr://5c0d3c4d22753664fce5494ae524d98942d5d012ac0fae50be63b4351b4d7db2"]}},"version":1}
test_464b678525c437ff14b525d9a65d4b52bdfbcfb59c93d33e04e94dcc31e41470.sol: ERROR
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:c 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820df56796e88c21a603432d1b2b0808f03f69a421495496bb47cb6f1bd11941fe10029
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":{"keccak256":"0x7ebfc4781e709980233d80a19a4f411a3ec31b4b1002d5298cccdef16e33ae0c","urls":["bzzr://fade1f2b85e96bc2d3aab2b4df4bb9cfb879472e8099a6954f8d8cb687462a54"]}},"version":1}
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:d 6060604052341561000f57600080fd5b5b60f48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d604f565b005b600073ffffffffffffffffffffffffffffffffffffffff166326121ff06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151560b257600080fd5b6102c65a03f1151560c257600080fd5b5050505b5600a165627a7a72305820fb2f01e97798de7724216ba42c20a030125eb2e9a4423309c4ac85b8768b85950029
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:d {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":"d"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":{"keccak256":"0x7ebfc4781e709980233d80a19a4f411a3ec31b4b1002d5298cccdef16e33ae0c","urls":["bzzr://fade1f2b85e96bc2d3aab2b4df4bb9cfb879472e8099a6954f8d8cb687462a54"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Lib 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632021012c14603d575b600080fd5b605a600480803590602001909190803590602001909190505060a6565b60405160208101606e816000840184866077565b9050809250608d565b60008490506083826091565b8452949350505050565b609b565b6000819050919050565b505060405180910390f35b600081830290505b929150505600a165627a7a72305820bb8c5547c9e6111478e4c6ab5ea3359ed374f06951a0d86d44f77d212891c8560029
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"m","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":{"keccak256":"0x17dcfe16552f0edbcf90a10945aa118954d1b881bcf317f1531e13dc386d64d2","urls":["bzzr://0a1af6ff8e0348d443b5820e4ef002364c4d374204e5b2eb018b93cec3ad5069"]}},"version":1}
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006009820190505b9190505600a165627a7a723058200adda98cf197f16adf97e071b316bf37b94f643301c16e0c431efa223888b9120029
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":{"keccak256":"0x17dcfe16552f0edbcf90a10945aa118954d1b881bcf317f1531e13dc386d64d2","urls":["bzzr://0a1af6ff8e0348d443b5820e4ef002364c4d374204e5b2eb018b93cec3ad5069"]}},"version":1}
test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol:Foo 60606040523415600e57600080fd5b5b609c8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60006057605c565b5b5050565b6020604051908101604052806000815250905600a165627a7a723058207243e4c06ea230c8c67c1fc304fb9c34ae465efe093099e756bd5e3d943cc80b0029
test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol":"Foo"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol":{"keccak256":"0x030bc65db602c7d3762e86395bef32e5a92fbff312b2c257db36079bb7d8fce5","urls":["bzzr://9ee43aad9d16b76c1539e9bcebe22e45f229e04c6df36cd6aceee72c72359ac9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol:c 6060604052341561000f57600080fd5b5b61027b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e146100545780636b9e8bb014610080578063e420264a1461015a575b600080fd5b341561005f57600080fd5b61007e600480803590602001909190803590602001909190505061017d565b005b341561008b57600080fd5b6100d2600480803590602001909190803590602001908201803590602001919091929080359060200190820180359060200191909192908035906020019091905050610193565b604051608081016100e881600084018489610125565b90506100f981602084018488610125565b905061010a81604084018487610125565b905061011b81606084018486610125565b905080955061013d565b600084905061013382610142565b8452949350505050565b61014c565b6000819050919050565b505050505060405180910390f35b341561016557600080fd5b61017b600480803590602001909190505061023c565b005b80820160008082825401925050819055505b5050565b6000806000808993503073ffffffffffffffffffffffffffffffffffffffff1689896040518083838082843782019150509250505060006040518083038160008661646e5a03f1915050503073ffffffffffffffffffffffffffffffffffffffff1687876040518083838082843782019150509250505060006040518083038160008661646e5a03f19150505060005492508491508888905090505b9650965096509692505050565b8060008082825402925050819055505b505600a165627a7a723058200be83bc1fef4e8ac175b7dca27c2aadd749d257ab79a4151467be00a807f84220029
test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"data1","type":"bytes"},{"name":"data2","type":"bytes"},{"name":"b","type":"uint256"}],"name":"test","outputs":[{"name":"r_a","type":"uint256"},{"name":"r","type":"uint256"},{"name":"r_b","type":"uint256"},{"name":"l","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol":{"keccak256":"0x8329268f6c5f48083e00de75d6a04d7b399ebf7562661407c75c9c28068fd9af","urls":["bzzr://79380c8bc412073581897cb74df8cdcb857cc8667a38e21611fc60f45ab5adaf"]}},"version":1}
test_479cafd957f24a975ea176db376d038b5061b4f0cb35e4891966ba696f45a3c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:A 60606040525b5b5b6101f1806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a044b07014610049578063d85e2d20146100db575b600080fd5b341561005457600080fd5b610089600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061011d565b6040516020810161009f816000840184866100a9565b90508092506100c1565b60008490506100b7826100c6565b8452949350505050565b6100d0565b6000819050919050565b505060405180910390f35b34156100e657600080fd5b61011b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610180565b005b60008273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561015f57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163190505b92915050565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156101c057600080fd5b5b50505600a165627a7a723058208ff847bbe1be9e71539c0e68dbe7aa48d94bcec68284acb1990a604387057d400029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"b","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058204e65e8cf525faabfb7f857fc9843f79e881817cdc2156a3be2fe824a3f2ea43a0029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:C 60606040523415600e57600080fd5b5b603d80601c6000396000f30060606040525b600f5b600080fd5b565b0000a165627a7a723058202881741140bff448df85ff8e832f58bc1ba787eacf541ea797a7c94f434e91820029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol:test 6060604052341561000f57600080fd5b5b6102218061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806393245a0914610054578063f88e9fbf146100d0578063fa3bd6c51461014c575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101bf565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b34156100db57600080fd5b6100fa60048080359060200190919080359060200190919050506101d0565b604051602081016101108160008401848661011a565b9050809250610132565b600084905061012882610137565b8452949350505050565b610141565b6000819050919050565b505060405180910390f35b341561015757600080fd5b61016d60048080359060200190919050506101e7565b604051602081016101838160008401848661018d565b90508092506101a5565b600084905061019b826101aa565b8452949350505050565b6101b4565b6000819050919050565b505060405180910390f35b600081600784020190505b92915050565b600081838115156101dd57fe5b0490505b92915050565b60006003820390505b9190505600a165627a7a723058204b04edb8c1c5705119a69caaf0790a13d4cf57ffd2439a78aebc9523c24328550029
test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul_and_add","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"uint256"},{"name":"div","type":"uint256"}],"name":"divide","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"divide(uint256,uint256)":{"notice":"Divides `input` by `div`"},"mul_and_add(uint256,uint256)":{"notice":"Multiplies `a` by 7 and then adds `b`"},"sub(int256)":{"notice":"Subtracts 3 from `input`"}}}},"settings":{"compilationTarget":{"test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol":{"keccak256":"0x7130751238f95ca020ae48e32d4d8356dab4a0da630fb641fe20e795b399626c","urls":["bzzr://df7158547b87a1259cd0e68778d2b5b1d81867ac022867075f791c8325f7de4e"]}},"version":1}
test_489b6c50e9ea7c794fc2704c479a4de1bed1fdb0f4d52017a8cd526a22d6f1f8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol:Test 6060604052341561000f57600080fd5b5b6102748061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063693ec85e146100495780638a42ebe9146100f6575b600080fd5b341561005457600080fd5b6100a4600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061015c565b604051602081016100ba816000840184866100c4565b90508092506100dc565b60008490506100d2826100e1565b8452949350505050565b6100eb565b6000819050919050565b505060405180910390f35b341561010157600080fd5b61015a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506101d2565b005b600080826040518082805190602001908083835b60208310151561019657805182525b602082019150602081019050602083039250610170565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490505b919050565b806000836040518082805190602001908083835b60208310151561020c57805182525b6020820191506020810190506020830392506101e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505b50505600a165627a7a7230582067e26044305355a50e43bb7ab20fe53f838db71375ad8ae236452f111192a5c50029
test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_s","type":"string"},{"name":"_v","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol":{"keccak256":"0x4d10c70752aa0aeebedb7e0f595cd54aa14c504bf7856cf8bf6c0ac01f112661","urls":["bzzr://d2c4af0dd5571c02135d750477105a04d47505c11efc36f037430c800be49d77"]}},"version":1}
test_48ba5f656955c320a034d07dfc201b98f362feade19b006fbfcc268c081da1ba.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol:c 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600890506001810160ff1691505b50905600a165627a7a7230582010cc85e8188f48ab0834d3e6eed31dcf39d6e08d40fa7117dba3e1d4f98c59790029
test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol":{"keccak256":"0x17aed5fe2a10fc59b59e9826f066b0b0727a90195d8dc96986c1b5de993946a1","urls":["bzzr://28936fb98bf6ae058eeb21ecdab08a9e6a594c560ed38f03a07ce7cb21799cf6"]}},"version":1}
test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol:test 60606040523415600e57600080fd5b5b60938061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60008190505b50505600a165627a7a723058202cc8557bb0789e5833e8e5e655a8bda64aaa70fbc46b9aa62d82ee6db06e78950029
test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol":{"keccak256":"0xe673eb0ff8c328aaafaac4513a9b6fe33c3b12f828929d596791ad8133e722d7","urls":["bzzr://1b6f8050bb86c8f50148be9ed4c1d7710dbbbe0e7fdcbe3ea372ee5dc152c308"]}},"version":1}
test_494b5a0205a789914b6ea9a2c283d15b652a54bf52194976f1608ea50d7f60af.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol:C 6060604052341561000f57600080fd5b5b6101708061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e146100b0575b600080fd5b341561005457600080fd5b61005c610117565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c361012d565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010c565b60008115159050919050565b505060405180910390f35b60006101176101179063ffffffff161490505b90565b60006101176101179063ffffffff16141590505b905600a165627a7a723058200d5ae6f97d7ad39d745e01c80219a37205445176b5f39beaa9016fecff3e3c6c0029
test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol":{"keccak256":"0x485de98e0d4b8b7eb7fa3985fffe009cafb51ead331a07f2af21348a85a176d6","urls":["bzzr://0e7cbe405433e325e3c21ddf4a062e8b98a2ac25555c3ea0b959e1fef7bfe381"]}},"version":1}
test_49c5e459a3500e05dc2302b3230b1557f69e60c4d62ca2fd016dc846020f66c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a72305820481724cf981f04b78cc1f9b2c22916d80540e68581ab614573edd0d8aa9e2cac0029
test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"b","type":"uint256"},{"indexed":true,"name":"c","type":"address"}],"name":"e1","type":"event"},{"anonymous":false,"inputs":[],"name":"e2","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol":{"keccak256":"0xec0cd59390ecfbcfbf6e9c05e83d4257888d8508a96628f775ed11549025f0ac","urls":["bzzr://a6cf582fc0ad043726cd5b6aa3268768ab190532a9e09f67d0e86069a727b342"]}},"version":1}
test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol:A 6060604052341561000f57600080fd5b5b60af8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600080600060031160605760006063565b60035b60ff169150600060031160765760006079565b60035b60ff1690505b50505600a165627a7a72305820dcf3325fe08cf28d088b3aa7e8fae7ebf61d279eac01a4883d32c4474ca4b1bf0029
test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol":{"keccak256":"0x5cf3fa04ba3d040f7a7830cc45a255bf3de1ebc03dbeca1e521d03d8a8733926","urls":["bzzr://2e87edd9138a3de680313f03ff58c5328034cba145ba5eb818e388f62a9b9a24"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol:C 6060604052341561000f57600080fd5b5b6106b08061001f6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14610091578063b8c9d365146100f9578063b8e010de1461015e578063baf2f86814610173578063cfad78b1146101d8578063e2179b8e1461023d578063fb5343f3146102a2578063feae062d14610307575b600080fd5b341561009c57600080fd5b6100a461036c565b604051602081016100ba816000840184866100c4565b90508092506100dc565b60008490506100d2826100e1565b8452949350505050565b6100ee565b600060ff82169050919050565b505060405180910390f35b341561010457600080fd5b61010c61037f565b604051602081016101228160008401848661012c565b9050809250610144565b600084905061013a82610149565b8452949350505050565b610153565b6000819050919050565b505060405180910390f35b341561016957600080fd5b610171610389565b005b341561017e57600080fd5b6101866104de565b6040516020810161019c816000840184866101a6565b90508092506101be565b60008490506101b4826101c3565b8452949350505050565b6101cd565b6000819050919050565b505060405180910390f35b34156101e357600080fd5b6101eb610583565b604051602081016102018160008401848661020b565b9050809250610223565b600084905061021982610228565b8452949350505050565b610232565b6000819050919050565b505060405180910390f35b341561024857600080fd5b6102506105ac565b6040516020810161026681600084018486610270565b9050809250610288565b600084905061027e8261028d565b8452949350505050565b610297565b6000819050919050565b505060405180910390f35b34156102ad57600080fd5b6102b56105b6565b604051602081016102cb816000840184866102d5565b90508092506102ed565b60008490506102e3826102f2565b8452949350505050565b6102fc565b6000819050919050565b505060405180910390f35b341561031257600080fd5b61031a6105df565b604051602081016103308160008401848661033a565b9050809250610352565b600084905061034882610357565b8452949350505050565b610361565b6000819050919050565b505060405180910390f35b600260009054906101000a900460ff1681565b6000600890505b90565b60028060006101000a81548160ff021916908360ff1602179055506105ac600160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1663b8c9d365600160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff02191690848463ffffffff169073ffffffffffffffffffffffffffffffffffffffff1664010000000002170217905550503073ffffffffffffffffffffffffffffffffffffffff1663b8c9d365600060086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff02191690848463ffffffff169073ffffffffffffffffffffffffffffffffffffffff1664010000000002170217905550506105ac6000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b565b60008060089054906101000a900480640100000000900473ffffffffffffffffffffffffffffffffffffffff169063ffffffff166000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561056257600080fd5b6102c65a03f1151561057357600080fd5b5050506040518051905090505b90565b60006105a66000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b6000600790505b90565b60006105d96000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b60008060089054906101000a900480640100000000900473ffffffffffffffffffffffffffffffffffffffff169063ffffffff166000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561066357600080fd5b6102c65a03f1151561067457600080fd5b5050506040518051905090505b905600a165627a7a723058201fe7d1530c1079b7e12fe3b26575014d8b2f1f8a8387dc4ac40ed04bb18d8ae60029
test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t2","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t3","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t1","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t4","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol":{"keccak256":"0x4559b40c968acccee4619ad037ac47215406715db520d3e48ad6e0c38f397cfa","urls":["bzzr://cafe4c338dc286f432042ee46f278644ea235ad7dd4537651fc51e026647425c"]}},"version":1}
test_4a456e7c7718df0f3ff093182aa9292aa7fdfdbb34b85d3f29aad362bc9e2094.sol: ERROR
test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol:C 6060604052341561000f57600080fd5b5b6103718061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d0e30db01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b6000605a6000816100649190610257565b50600090505b605a81101561011b57807f01000000000000000000000000000000000000000000000000000000000000000260008281546001816001161561010002031660029004811015156100b657fe5b8154600116156100d55790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055505b808060010191505061006a565b60046001600060048110151561012d57fe5b0160005b5081905550600560018060048110151561014757fe5b0160005b508190555060066001600260048110151561016257fe5b0160005b508190555060076001600360048110151561017d57fe5b0160005b508190555060016040518082600480156101b0576020028201915b81548152602001906001019080831161019c575b505091505060405180910390206000604051808280546001816001161561010002031660029004801561021a5780601f106101f857610100808354040283529182019161021a565b820191906000526020600020905b815481529060010190602001808311610206575b505091505060405180910390207f4e1f36d07c9214512662052328cbfc5c72416274c922d32aa208b4d43cb72e1c60405160405180910390a35b50565b81546001816001161561010002031660029004825481601f106102b25782601f10610297575b826008026101000360020a8091040282800117835561031b565b60ff191683600052602060002055818001600101835561031b565b82601f106102e2575082600052602060002080549082601f01602090048101906102dc9190610320565b5061027d565b5081800160010183558181151161031b57601f016020900481601f0160209004836000526020600020918201910161031a9190610320565b5b505050565b61034291905b8082111561033e576000816000905550600101610326565b5090565b905600a165627a7a72305820991321218b8329fb3232115351caece45c6730f4dc1db3c2fd9c54ad100326280029
test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"r","type":"string"},{"indexed":true,"name":"t","type":"uint256[4]"}],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol":{"keccak256":"0x57768963ff8ef460db74df3a4814e3b1189e8bfad87fb4e475e9841984559446","urls":["bzzr://cdb001a329f4035fb258d816ead5d37a89b82b2951334e410081696f437cfe95"]}},"version":1}
test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol:c 6060604052341561000f57600080fd5b5b60d18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600115157f616263000000000000000000000000000000000000000000000000000000000060027f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60405160405180910390a45b5600a165627a7a723058200b2f970491a938d95249ad8bad407e317f7f4cc6ffe4c235f60d60c92a587b160029
test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol":{"keccak256":"0x21e153e8924ac7bce088709dea8c6d6edfa04939f361b817784b3c818f99d18d","urls":["bzzr://a8568529c4e3e4fa466d829ebca7212fa81e94ccd944ce90ef8e869f88ad76ff"]}},"version":1}
test_4bb8d86da72a524930f9172e2e4f7f0ba08c91d16508818e35a66a6d83d4f43c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:A 6060604052341561000f57600080fd5b5b60e98061001e6000396000f30060606040523615603d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de30146057575b3415604757600080fd5b60555b60016000819055505b565b005b3415606157600080fd5b606760b3565b60405160208101607b816000840184866084565b9050809250609a565b6000849050609082609e565b8452949350505050565b60a8565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a723058202ca49042af75403df8af13708580881d9ed27b0c540a05506d0270f9b14ce6f20029
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":{"keccak256":"0x45b15f57dbc887b57ca294c506553eb27e874cbfd696692261b684b10698ffb5","urls":["bzzr://d92c078fc05f10c08dc525988bc330dddd355186492117d4848237ce6454c0d4"]}},"version":1}
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:B 6060604052341561000f57600080fd5b5b60e98061001e6000396000f30060606040523615603d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de30146057575b3415604757600080fd5b60555b60016000819055505b565b005b3415606157600080fd5b606760b3565b60405160208101607b816000840184866084565b9050809250609a565b6000849050609082609e565b8452949350505050565b60a8565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a7230582088631e859831ec3b8f9bcf3ab559715683f2d9391195bc03c98559069915f2970029
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":{"keccak256":"0x45b15f57dbc887b57ca294c506553eb27e874cbfd696692261b684b10698ffb5","urls":["bzzr://d92c078fc05f10c08dc525988bc330dddd355186492117d4848237ce6454c0d4"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol:test 6060604052341561000f57600080fd5b5b60d58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b600060026001101590505b905600a165627a7a72305820e36f4d22b84bbedc8fb77b55cd0ab8c492f86a85a1f0f5917f3c5eae6042cbc90029
test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol":{"keccak256":"0x1a5fffd77163b17af7fdb4db0227b24ec7c4e0529f632eb4f3d0a9a93dca9643","urls":["bzzr://485c87025fcbddbbe30d317a072c113408b4b0d183e5abcfc058dea19c3d5188"]}},"version":1}
test_4c13e96d0350f7611b2bc19e1fa973bb35d013c2f161fc85a848203675231675.sol: ERROR
test_4cb734b2bbb117222693fc5430043c6805e3958f61239a4bae7e453c42efe051.sol: ERROR
test_4cf33cdf17de27245d0f50d3410dd439e01cffcb082c1cc0a01cf98d4d46b042.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol:C 60606040526042600055341561001457600080fd5b5b60cb806100236000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a723058209b146c76bc79498addfe40a215028c9f63f55094b93c2eed36abc98410832aab0029
test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol":{"keccak256":"0xe2cb33a865630c2e1212c8e98915e413c37c07885b2e423c7a07b6f94951f96c","urls":["bzzr://9aba0e5379c19eacd2f6aafdd99c846cc43c0be5d6006abc84583cd7ddc91972"]}},"version":1}
test_4d05be6403c97195c3651af1112798e3d70c02b163a8f7d8688ebd915b34037b.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol:C 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600390505b905600a165627a7a7230582046d2f586b2e1a3cdf989657ae276e8de85423dfecc035579297d3476db1b57e70029
test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol":{"keccak256":"0x10c5e5baa9ddf45cfbaac393ecb05a184e5737216b4b34b8d7a058eb05eaeec4","urls":["bzzr://dc192e01be1416b3a0be2b4af4ab88a376759e8d16558a2e867855068860e571"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol:C 6060604052341561000f57600080fd5b5b6101528061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad6100fe565b60006040518059106100bc5750595b9080825280602002602001820160405280156100f257816020015b6100df610112565b8152602001906001900390816100d75790505b509050600791505b5090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a7230582004b23c0155192d339c162aa571842fc848cf372cb7b111159887766bc48274dc0029
test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol":{"keccak256":"0x04f6e98fd3fb33cb21ce6bf1cd4aa6af6b94c7296f92319aedb10a32fc3f69f7","urls":["bzzr://c8257c0a36fe78a5246fdec845391c9121f9a195b36316f10e1b4fdda8688d99"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol:C 6060604052341561000f57600080fd5b5b6101c48061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a0581e1461005457806326121ff0146100cb578063d48092f7146100e0575b600080fd5b341561005f57600080fd5b61007760048080351515906020019091905050610157565b6040516020810161008d81600084018486610097565b90508092506100af565b60008490506100a5826100b4565b8452949350505050565b6100c0565b60008115159050919050565b505060405180910390f35b34156100d657600080fd5b6100de61016f565b005b34156100eb57600080fd5b6101036004808035151590602001909190505061017c565b6040516020810161011981600084018486610123565b905080925061013b565b600084905061013182610140565b8452949350505050565b61014c565b60008115159050919050565b505060405180910390f35b600081151561016557600080fd5b600190505b919050565b6000151561017957fe5b5b565b60006001151582151514151561018e57fe5b600190505b9190505600a165627a7a7230582036756497a336b431d3a86b4362d775aa061b3b5bd7dba039a21a49964f8328f90029
test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"val","type":"bool"}],"name":"h","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"val","type":"bool"}],"name":"g","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol":{"keccak256":"0x1f397911ac4a3d947299fc0cd312a9ba656a601fe8004336553ac35d957b91ee","urls":["bzzr://255db65124fd68fdff97f97f52d1590331466e732d91596b89aff989e4362ce5"]}},"version":1}
test_4dc3f2bd43329785b4839a8300e5486aa77a88d576f92dd9776bb350edfbfd6b.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:A 6060604052341561000f57600080fd5b5b6101088061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008073ffffffffffffffffffffffffffffffffffffffff1663e2179b8e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151560bc57600080fd5b6102c65a03f1151560cc57600080fd5b5050506040518051905090505b505600a165627a7a7230582031a930b50f951bda5f5c6e17877f8438d2088bacdf2babddf356469b410dee9c0029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:B 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063e2179b8e146059575b600080fd5b3415605157600080fd5b605760b8565b005b3415606357600080fd5b606960bb565b60405160208101607d816000840184866086565b9050809250609c565b600084905060928260a0565b8452949350505050565b60ad565b600060ff82169050919050565b505060405180910390f35b5b565b60005b905600a165627a7a72305820ddbd3497f3eba078e0737910618c645738231b65074295a8a45cc699a2b1ed720029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:C 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063e2179b8e146059575b600080fd5b3415605157600080fd5b605760b8565b005b3415606357600080fd5b606960bb565b60405160208101607d816000840184866086565b9050809250609c565b600084905060928260a0565b8452949350505050565b60ad565b600060ff82169050919050565b505060405180910390f35b5b565b60005b905600a165627a7a723058207bf676501b8ca69e52b90c85782a9f3441948476990c1662d1bced95b6324a880029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e870e0e0c991d39814bb1f772e4e8c8c2d91911b08ca694fb8490c7975ac4e4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol:C 6060604052341561000f57600080fd5b5b60ef8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081839060020a900490505b929150505600a165627a7a723058204bd54847f03bc597ba62ea9dd64e7a14923a0eaecd54ee860cdea59425d061990029
test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol":{"keccak256":"0x1bdbabd54ea9721a21ca3ed9446ec0e1c62ee6e60da0382e14e97c9d4319153f","urls":["bzzr://c03c097e0d1ba35c2c7142b3ac35565cea5735d45f2a1f30a852461c77678997"]}},"version":1}
test_4ed4b92817da31f161ef542307fc8a9b0c4759d680b93416d0120ac98eacd7ce.sol: ERROR
test_4ee4530975514bf378e95e976fa4ab794f04af2d7139f78c047efa98a98ae439.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol:c 6060604052341561000f57600080fd5b5b61044a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c29855781461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b600060036000816100b69190610330565b507f660000000000000000000000000000000000000000000000000000000000000060008081546001816001161561010002031660029004811015156100f857fe5b8154600116156101175790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055507f6f0000000000000000000000000000000000000000000000000000000000000060006001815460018160011615610100020316600290048110151561019157fe5b8154600116156101b05790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055507f6f0000000000000000000000000000000000000000000000000000000000000060006002815460018160011615610100020316600290048110151561022a57fe5b8154600116156102495790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060405180807f666f6f00000000000000000000000000000000000000000000000000000000008152506003019050604051809103902060001916600060405180828054600181600116156101000203166002900480156103185780601f106102f6576101008083540402835291820191610318565b820191906000526020600020905b815481529060010190602001808311610304575b50509150506040518091039020600019161490505b90565b81546001816001161561010002031660029004825481601f1061038b5782601f10610370575b826008026101000360020a809104028280011783556103f4565b60ff19168360005260206000205581800160010183556103f4565b82601f106103bb575082600052602060002080549082601f01602090048101906103b591906103f9565b50610356565b508180016001018355818115116103f457601f016020900481601f016020900483600052602060002091820191016103f391906103f9565b5b505050565b61041b91905b808211156104175760008160009055506001016103ff565b5090565b905600a165627a7a72305820bb2be7b64e985f263c15cc49c97031778772bc40ef8ee26a5edd9ca408ce11a40029
test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol":{"keccak256":"0xadccfb65e1c92fb3b3f71bac964534665198a107cae0cdf90c815055f33db433","urls":["bzzr://40e28d1103a77811d756b119cd0bb9b61ae6ecdd23637711a7ad2bbee91d812b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol:C 6060604052341561000f57600080fd5b5b6101788061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b6000806000806100b161011e565b6007935060089250600991506060604051908101604052808560ff1663ffffffff1681526020018461ffff1663ffffffff1681526020018363ffffffff1663ffffffff16815250905080600160038110151561010957fe5b602002015163ffffffff1694505b5050505090565b6060604051908101604052806003905b600063ffffffff1681526020019060019003908161012e57905050905600a165627a7a7230582022f287c49009169bfff037cffbed3dc522ff71f42d5446803b392dab9618a9a50029
test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol":{"keccak256":"0xafe305c1e933f8f38176ca836db8a90d0053da0a1cdffc9fea108ef8679ec7c7","urls":["bzzr://95f144090d0b445c3bfd567d9bb4601b2b4926a86dd968ae258a5f043fc3a0d1"]}},"version":1}
test_4f3adbb9101e463ffe4280c96ef7b44817b8305081fd83e172de2b8ce7f86f33.sol: ERROR
test_4f7bc300ce224de4c3c53c6533af4d62f047fd433e3655543f8cf6e71161a456.sol: ERROR
test_4fe9c48859ea708f0115006995666c9c89cc223fda73cd347280f8d11b09328d.sol: ERROR
test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820b0b9ac966f972bd47f97bdcd210c335314bf7f6a737568b97e2153f8b01632090029
test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":true,"inputs":[],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol":{"keccak256":"0x45f635d60815bf6ca253d128995cc6b0eda5cabae6160bf92de6aa8c60e7e85f","urls":["bzzr://94cbf9a0f0e7572f8db28e376b894b70f7764d36b73e2f3aea75fd8a6c105165"]}},"version":1}
test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol:test 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a723058201b2820c222329ef206bda45175fb00e696372d9a27d09825b44291a1f7501b070029
test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol":{"keccak256":"0xd7e561c67581743ff8eb2fb92e2435c789ac0398fe158fd384dcc5ff9ff4570d","urls":["bzzr://b524ebb682d571b9f67fcac40c3572b7f782f61d7c3392f46eae5274845623a3"]}},"version":1}
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:base 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a723058200838bc76793fd7791590a4d0902f6e79b1fbeddae29668dd284124da7759a32e0029
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":"base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":{"keccak256":"0xac66a663fdfc93a799c8964df07b326adaf8549176007fe999a4f1469bd6f39b","urls":["bzzr://1cdfd20a97a208dcee206537e13418d106f48d518c42acb0f982b282bc013044"]}},"version":1}
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:derived 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a7230582014a039ea591920956ec918c1bf6472912b54a026c11d47d65bd7f161971824470029
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":"derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":{"keccak256":"0xac66a663fdfc93a799c8964df07b326adaf8549176007fe999a4f1469bd6f39b","urls":["bzzr://1cdfd20a97a208dcee206537e13418d106f48d518c42acb0f982b282bc013044"]}},"version":1}
test_508758ea7e183ee47f4b481359b186918ef43ea33ad198ced271c43a8cbff6cc.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint24 -> uint24
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint24_to_t_uint24(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint24_to_t_uint24(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint24(value))

			}
		
			function cleanup_assert_t_uint24(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF)
			}
		

test_50b2d953e9878e01e12115776c972712b774f991d32d5c4ff8f8689feca099b8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol:test 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000601090505b905600a165627a7a72305820a6d37a952235e8d28181e0bb03e38a2f9852cef58115e207300876287a991e6e0029
test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol":{"keccak256":"0xb3596e3f2e85376b97760d6c095b0a0365d8230490341f8ea05a992f4828849b","urls":["bzzr://130b30ad0b774ceb0151559eda46790e2203bb0cc07e224817a218e248f4bb9c"]}},"version":1}
test_50f33136dff592a17704745f5ffa8f9a02a4babd9aeb54a8db7c5962980aa222.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol:test 6060604052341561000f57600080fd5b5b6101278061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639f3fab5814603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b600060028260006040516020015260405180826000191660001916815260200191505060206040518083038160008661646e5a03f1151560ea57600080fd5b50506040518051905090505b9190505600a165627a7a723058201a02ebbd0f6558ed97976103f47e16c51d75c305fe18cd56f953d41bddde34f30029
test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"sha256hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol":{"keccak256":"0x5d0bc6a960b7e8f2b16973b250dd0d3c79461a48517c4505c167d225efaf76a0","urls":["bzzr://8878f3e1dd0f89e01503140173d6b37336f95cfe80e81bcd1a3207a835f34388"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol:C 6060604052341561000f57600080fd5b60405160808061022d83398101604052808051906020019091505b8160008190555080600190600361004292919061004b565b505b50506100b0565b826003810192821561007a579160200282015b8281111561007957825182559160200191906001019061005e565b5b509050610087919061008b565b5090565b6100ad91905b808211156100a9576000816000905550600101610091565b5090565b90565b61016e806100bf6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14610049578063cd580ff3146100ae575b600080fd5b341561005457600080fd5b61005c610121565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100cf6004808035906020019091905050610127565b604051602081016100e5816000840184866100ef565b9050809250610107565b60008490506100fd8261010c565b8452949350505050565b610116565b6000819050919050565b505060405180910390f35b60005481565b60018160038110151561013657fe5b0160005b9150905054815600a165627a7a723058208746010280f8b29dfebe6b9ace369e6531f8228fd4fe40f2a680322f4d9624820029
test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_a","type":"uint256"},{"name":"_b","type":"uint256[3]"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol":{"keccak256":"0x7e8d54fbff6d66208aff505c7efb26f9e0c966667447b9db77ea7818a068684b","urls":["bzzr://9ee2e0f1e3084343bc2c00f2127cd3ec104a91dddecf569eb25a5e2cf6bddfbb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol:C 6060604052341561000f57600080fd5b5b61022b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e146100b0575b600080fd5b341561005457600080fd5b61005c610139565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c36101e8565b604051606081016100d981600084018488610105565b90506100ea81602084018487610105565b90506100fb81604084018486610105565b905080945061011d565b600084905061011382610122565b8452949350505050565b61012c565b6000819050919050565b5050505060405180910390f35b600080600080600080600061014c6101e8565b955095509550600186141580610163575060028514155b8061016f575060038414155b1561017d57600096506101df565b6101856101e8565b5093505060028314151561019c57600096506101df565b6101a46101e8565b505091506001821415156101bb57600096506101df565b6101c36101e8565b925050506003811415156101da57600096506101df565b600196505b50505050505090565b60008060006001925060029150600390505b9091925600a165627a7a7230582051e0f2c5a9923f9168ebd65d73fa6a6ec816577333cfb535a0af57412f2753fa0029
test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol":{"keccak256":"0x5849350fef312df1314053a218008e803e0ddcfa93e6cb7e28f2dece55be3ad1","urls":["bzzr://7e4964a0a21a8504cc8fa18eea343eb434648aef9d27d5833c9a91768473d97f"]}},"version":1}
test_5221263da48451d1edd163b29e1b7b99be2ad44a96f6bf831f42cddec12fe264.sol: ERROR
test_5242e3e47d4b6640484fddacf845c41c4cff4ae583ef9771cfc8190df1a9b251.sol: ERROR
test_529a4c8337c76645b862cc255b9d696e8b22cb590d5544ad01f80dbd038584b6.sol: ERROR
test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol:c 6060604052341561000f57600080fd5b5b60f38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806352efea6e146047578063d9c55ce1146059575b600080fd5b3415605157600080fd5b6057606b565b005b3415606357600080fd5b6069607a565b005b600260006077919060b2565b5b565b60008090505b600381101560ae5760018101600282600381101515609a57fe5b0160005b50819055505b8060010190506080565b5b50565b506000815560010160008155600101600090555600a165627a7a723058202d63e1d83a9aa4b550bf6179dcac2d9e3e5e8e43f06d3750b06c1f36392c16940029
test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol":{"keccak256":"0xfbb32c91f9d44c7c0c9f59e230c2caa436d6de57c93f3fbc09321c6f3e9f2182","urls":["bzzr://8553638973e7689e33ac5910e8bb60c8c1d4a6a1a749b60a6e85454788ff52ff"]}},"version":1}
test_53654e981b463e4a2df635c6d4c877c54108666956c057f497d291841896a396.sol: ERROR
 conv bytes1 -> bytes1
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol:C 6060604052341561000f57600080fd5b5b6105868061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610127565b60405160808101610067816000840184896100a4565b9050610078816020840184886100c1565b9050610089816040840184876100c1565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100de565b8452949350505050565b6100d9565b60008490506100cf8261010f565b8452949350505050565b61010a565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b610119565b6000819050919050565b505050505060405180910390f35b6000806000806101356104bc565b61013d6104d0565b6101456104e4565b60c86040518059106101545750595b908082528060200260200182016040525b5092507f41000000000000000000000000000000000000000000000000000000000000008360c781518110151561019857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061012c6040518059106101d85750595b90808252806020026020018201604052801561020e57816020015b6101fb6104f8565b8152602001906001900390816101f35790505b50915060088260cb81518110151561022257fe5b90602001906020020151600160028110151561023a57fe5b60200201818152505060b46040518059106102525750595b90808252806020026020018201604052801561028857816020015b61027561051f565b81526020019060019003908161026d5790505b50905060048160aa81518110151561029c57fe5b906020019060200201516000015160016002811015156102b857fe5b60200201818152505060666040518059106102d05750595b908082528060200260200182016040525b508160aa8151811015156102f157fe5b90602001906020020151602001819052507f42000000000000000000000000000000000000000000000000000000000000008160aa81518110151561033257fe5b9060200190602002015160200151606381518110151561034e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508260c781518110151561038d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028260cb8151811015156103e757fe5b9060200190602002015160016002811015156103ff57fe5b60200201518260aa81518110151561041357fe5b9060200190602002015160000151600160028110151561042f57fe5b60200201518360aa81518110151561044357fe5b9060200190602002015160200151606381518110151561045f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000296509650965096505b50505090919293565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b60408051908101604052806002905b60008152602001906001900390816105075790505090565b6060604051908101604052806105336104f8565b8152602001610540610546565b81525090565b6020604051908101604052806000815250905600a165627a7a72305820e1187d3292f0905b29c1ed8845bf5ab55519567a35e5ed4e920bf5988150fa370029
test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes1"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol":{"keccak256":"0xa825784197bc7b37a3d8a0de830d0ca683ad46cf57d27dc5263d0b5801801f94","urls":["bzzr://cf55ce57af2e2b4a718041da2770ca28bd7418b2fc00b7150df68859228b45e5"]}},"version":1}
test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol:C 6060604052341561000f57600080fd5b5b60a28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6004356001805b60008314606a578101906001830392506056565b8160005260206000f35b5600a165627a7a72305820fb98cf93ddbb153604be1c88cbd3559fb14107a032ef1d12ce91664f432d61860029
test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol":{"keccak256":"0x4696a08d7492f391bfcfb297a167c6bcbfb8fb47a9901354f3718b25e8c317c8","urls":["bzzr://0ad18feee5612efdfec8fff873a3256bdc92a55dd2d25e99e1614b2094ccde53"]}},"version":1}
test_53989775530bc57e1e028a66b1fae198f8d3775a4d37ab7c41a1de71e0785c10.sol: ERROR
 conv int_const 12 -> uint256
 conv int_const 7 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_rational_12_by_1_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_7_by_1_to_t_uint256_lib(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_12_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_12_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_rational_7_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_7_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_12_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		
			function convert_t_rational_7_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Lib 
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Lib 
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Test 6060604052341561000f57600080fd5b5b6101b18061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b600073__test_53e84970cbd1207cda1459fa25e9c57__637ae2b5c7600c60076000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604081016100bd816000840184876100d8565b90506100ce816020840184866100f5565b90508093506100f0565b60008490506100e682610121565b8452949350505050565b61010d565b600084905061010382610138565b8452949350505050565b61011c565b6000819050919050565b610133565b600061012c82610112565b9050919050565b61014a565b600061014382610112565b9050919050565b50505060206040518083038186803b151561016457600080fd5b6102c65a03f4151561017557600080fd5b5050506040518051905090505b505600a165627a7a723058203c843ba2c8086f647a88af8deb9c1e0b35821022c94d952d2927681ecc2dac2f0029
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol":{"keccak256":"0x9cbc5c1ada5af3eb93d1d337fbd882a2c39ccd683623b1756a105a32f2dbc1c0","urls":["bzzr://ec6d9d25c357879716b8042778607b73c9cd3973cd7a9ddf0a9b948d8ffa8055"]}},"version":1}
test_540c266553b6209439793cfc36736ac59d5ef6451519183f68d132c74515514e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes16 -> bytes16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes16_to_t_bytes16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes16_to_t_bytes16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes16(value))

			}
		
			function cleanup_assert_t_bytes16(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000)
			}
		

test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol:C 6060604052341561000f57600080fd5b5b6106688061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636a5c7bf414610054578063d7da973a146100cb578063f0ba844014610164575b600080fd5b341561005f57600080fd5b6100796004808035600019169060200190919050506101f9565b6040516020810161008f81600084018486610099565b90508092506100b1565b60008490506100a7826100b6565b8452949350505050565b6100c0565b6000819050919050565b505060405180910390f35b34156100d657600080fd5b6100f06004808035600019169060200190919050506104a4565b6040516020810161010681600084018486610110565b9050809250610128565b600084905061011e8261012d565b8452949350505050565b610159565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b341561016f57600080fd5b61018560048080359060200190919050506104e0565b6040516020810161019b816000840184866101a5565b90508092506101bd565b60008490506101b3826101c2565b8452949350505050565b6101ee565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b505060405180910390f35b600060606040519081016040528083600060208110151561021657fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200183600160208110151561029157fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200183600260208110151561030c57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152506000906003610386929190610527565b507f31323334350000000000000000000000000000000000000000000000000000006000808154811015156103b757fe5b90600052602060002090600291828204019190066010025b6101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555060008081548110151561041457fe5b90600052602060002090600291828204019190066010025b9054906101000a900470010000000000000000000000000000000002600460108110151561045657fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490505b919050565b60008160026020811015156104b557fe5b1a7f01000000000000000000000000000000000000000000000000000000000000000290505b919050565b6000818154811015156104ef57fe5b90600052602060002090600291828204019190066010025b915054906101000a90047001000000000000000000000000000000000281565b828054828255906000526020600020906001016002900481019282156105ec5791602002820160005b838211156105ae57835183826101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055509260200192601001602081600f01049283019260010302610550565b80156105ea5782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f010492830192600103026105ae565b505b5090506105f991906105fd565b5090565b61063991905b8082111561063557600081816101000a8154906fffffffffffffffffffffffffffffffff021916905550600101610603565b5090565b905600a165627a7a723058205f659e12159eed5ce1d9f120a6efa166fb3cfbf4ca0cd5801edd7dbf18fefda30029
test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"f","outputs":[{"name":"","type":"bytes1"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"bytes16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol":{"keccak256":"0xe10073ac3821406bfdbb37f6f220d4508fdae64817524ec8fd7a2f5e92fd01ad","urls":["bzzr://14e2756cc0b429d0f0a042b24e56305e7a2c3a2aa6ac735aab77ff17a347cb18"]}},"version":1}
test_5468568547fcacdfbe1efede585622d519d8be7489301e38052fc89b6f41b6a9.sol: ERROR
 conv bytes8 -> bytes8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes8_to_t_bytes8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes8_to_t_bytes8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes8(value))

			}
		
			function cleanup_assert_t_bytes8(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000)
			}
		

test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol:Test 6060604052341561000f57600080fd5b5b6101238061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a45bb8da14603d575b600080fd5b3415604757600080fd5b605f600480803561ffff1690602001909190505060cd565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60c2565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b60008161ffff1678010000000000000000000000000000000000000000000000000290505b9190505600a165627a7a723058208f17cf3b4a88dfb0a54ea88b08cba43e9c85ff6286677b6b13869ea7b1dbbc630029
test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint16"}],"name":"UintToBytes","outputs":[{"name":"s","type":"bytes8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol":{"keccak256":"0xd54e3ea09b12134827b7fc6c78a4ffee94ca347c4ec08cc94c06b3b77ea95778","urls":["bzzr://a4c6122295cca5ea7b4d8f70f466cd41c68e9df0eafcdb181230c3037f5ea22e"]}},"version":1}
test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol:test 60606040526000809054906101000a900467ffffffffffffffff16600060086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503415604c57600080fd5b5b603680605a6000396000f30060606040525b600080fd00a165627a7a723058203a4d7454946360684a79c42bdef16ad1157888486d00f3c48fb710b81b56aad00029
test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol":{"keccak256":"0x640bd486d463e736d9442f064158f50eb11efbe043b34804754899ac1ef8ccfc","urls":["bzzr://d2b2cafa8c7265d8b324f013d9a95be3cfd8131540ec6b31cce4796c3764a0db"]}},"version":1}
test_54bb06e5936599f641e24e3f46310c18ef1743566678eba577ee484022254be6.sol: ERROR
test_54d48a45dc7ae783ac2778d247dd9371498a530e98e93876f8f7eb14ffa25cc3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:C 6060604052341561000f57600080fd5b5b60ad8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b8073__test_54ef8be3a949c920c79fb896934442b__63eee9720690915050505b505600a165627a7a723058202d8afdbe95c79c1e994ea363d3347973d1aa8dee60a8e9b5978e5e17c8d4f4d70029
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":{"keccak256":"0x6759dca39e3c0c82c7f79b03b87e6e8946a71081d1044433b8075d2cd9a5c152","urls":["bzzr://73e815f39190a92a5be22dbe2673432a8a842254da93f8530ffe97b340911d98"]}},"version":1}
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:D 6060604052341561000f57600080fd5b5b60d78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063eee9720614603d575b600080fd5b60516004808035906020019091905050609d565b60405160208101606581600084018486606e565b90508092506084565b6000849050607a826088565b8452949350505050565b6092565b6000819050919050565b505060405180910390f35b60008160020290505b9190505600a165627a7a72305820176fb87517160bfbade7a6dd22b673f6bdaacc5f3b97031e10043b70cf6c8bb00029
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"self","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":{"keccak256":"0x6759dca39e3c0c82c7f79b03b87e6e8946a71081d1044433b8075d2cd9a5c152","urls":["bzzr://73e815f39190a92a5be22dbe2673432a8a842254da93f8530ffe97b340911d98"]}},"version":1}
test_551124ebb8df1835e98ecc89d037f39c5a5de994cbc343c8d2dff06bd9fad023.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol:test 6060604052341561000f57600080fd5b5b6101218061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324b912e514603d575b600080fd5b3415604757600080fd5b606d600480803590602001909190803590602001909190803590602001909190505060b9565b60405160208101608181600084018486608a565b905080925060a0565b600084905060968260a4565b8452949350505050565b60ae565b6000819050919050565b505060405180910390f35b600080600080600192506010915061010090508486888385870160ff160161ffff160101019350858260ff1601840193505b50505093925050505600a165627a7a72305820a58d3ccc0c5f0edc845c9102deba8711dc01a937c173ebbf308dbfa7aeabec2b0029
test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x1","type":"uint256"},{"name":"x2","type":"uint256"},{"name":"x3","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol":{"keccak256":"0xedf25866148b0e691ccdf7ddc1943e05d2aca16ce5f0ce0f691d17e65c22b20c","urls":["bzzr://0a314c83f49825f68399893ac43188e85b4186a5fb9d167d659ff24a5870229e"]}},"version":1}
test_5578b61d7a583f06b88c397f741e131ed56dea318d13d7de13148acd47cac8a3.sol: ERROR
test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol:test 60606040523415600e57600080fd5b6040516060806084833981016040528080519060200190919080519060200190919080519060200190919050505b5b5050505b603680604e6000396000f30060606040525b600080fd00a165627a7a72305820617b539f7fca8733632239836915b7316fb1027f87b840b317d4fe27447aa5e90029
test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"param1","type":"uint256"},{"name":"param2","type":"address"},{"name":"param3","type":"bool"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol":{"keccak256":"0x974d8e6422ea274b57aee5472cefb646979c8a8c7aa04e32179f7ae00e01522a","urls":["bzzr://ba16cd64d5e0f6e0c64768c5a7fcf60898c448b6742f5ee8bb1c050cac6ef88b"]}},"version":1}
test_55b7126d712cac99400f891a31a04ce3bf4a038f9206ede8c6ce1a2e02a3e79e.sol: ERROR
test_55cde94ea1c1f1a295d1420e3f426bd86d73583cee6fb651f03469cc86109a2c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_560b6b48bb1ae7fe1d9af65bada5622978d9f9a1c0ac4806bd42bbbeafa6bd90.sol: ERROR
test_564edd48e5d247a5ac08664185cd6dcc593e1350ab54182ca60d8017966ca35d.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol:C 6060604052341561000f57600080fd5b5b61024f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461005f578063b8c9d365146100c4578063e2179b8e14610129578063e5aa3d581461018e575b600080fd5b341561006a57600080fd5b6100726101f3565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d76101ff565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b61011e565b6000819050919050565b505060405180910390f35b341561013457600080fd5b61013c61020b565b604051602081016101528160008401848661015c565b9050809250610174565b600084905061016a82610179565b8452949350505050565b610183565b6000819050919050565b505060405180910390f35b341561019957600080fd5b6101a1610217565b604051602081016101b7816000840184866101c1565b90508092506101d9565b60008490506101cf826101de565b8452949350505050565b6101e8565b6000819050919050565b505060405180910390f35b60008060002090505b90565b60008060002090505b90565b60008060002090505b90565b60008060002090505b905600a165627a7a72305820b300096bbb02e7bc0e5da7590ce3458bdcb1b384bdb28ce947a22df0d23edcb10029
test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"i","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol":{"keccak256":"0xccf11f5b60afcc4b916a7728f0beec4ae3d7d5b2cfd0181d8980225fc0950720","urls":["bzzr://ae635c454fcb8d2e3b3900039dc0d909a4172490be36655e496fc430c46c461b"]}},"version":1}
test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582052b9042a56bf566b93e5f45b2b48ecc3da929bbbf68a04162273dd476d3c11520029
test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol":{"keccak256":"0x6480504b545240018abe31d78474e73d0eb4a6f4b43f6a9971316d16621bb7ce","urls":["bzzr://ed6e40da03a0ce06908b26f614630a4217679f6fad3f6495024b83bd01b0b8fe"]}},"version":1}
test_56eca85551d93cab7020c8991a206116a9b562a68c7924fad5627d911ff7c456.sol: ERROR
test_57356d7bde66ba99876e4611c577ec0706ff5da5d09a30dec3479a02cb6066cd.sol: ERROR
test_57447db1d73990f58b040a473e41c3499f379b61e96b0f571d3c711676499176.sol: ERROR
test_5763062d4894970a666a01d890953e350e6bf2656d159075c27cc7b519e7f821.sol: ERROR
test_5790808c858b32f8889bc4616e4c80c05305e6c3ee7667ac232d8169706b8de1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820370541ecc24f6ab59682fa7ce6fb290353e3787ef7228695e0bb0c26f3fd2a740029
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"x","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":{"keccak256":"0x71f9a087c6997ac08bf3f3019013510d8c769866670e838c905ed6e62aad7ee3","urls":["bzzr://bc5f03f6385752ba59512840ddd4c74c73711686047ee3c9aea77b80f0712746"]}},"version":1}
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:B 6060604052341561000f57600080fd5b5b60fb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60007f0c55699c4769c0b08a59db8a53119b799ea10ec55a4da92af76b0404363e098060405160405180910390a1600190505b905600a165627a7a72305820ea5af94bcd4c8397a080fb9635440117c3e788188258d46521bf4fe936746e3d0029
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"x","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":{"keccak256":"0x71f9a087c6997ac08bf3f3019013510d8c769866670e838c905ed6e62aad7ee3","urls":["bzzr://bc5f03f6385752ba59512840ddd4c74c73711686047ee3c9aea77b80f0712746"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol:C 6060604052341561000f57600080fd5b5b6101088061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806392d0d15314603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600154131560ac576007905060d9565b6001808190555060d36000809054906101000a900467ffffffffffffffff1663ffffffff16565b50600290505b905600a165627a7a723058202467b38ed696298197ef3501a1880745111a38720223878de0a5def667540d3f0029
test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol":{"keccak256":"0x6b5b5876bca9ad51fe7d28a2238d68d31b61a5987bb449074c0e3edf3a21087a","urls":["bzzr://ea703a2c9b5a7cab85c3b2736ac7431de6e62aca01b50b605f9689949ab499c3"]}},"version":1}
test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol:test 6060604052341561000f57600080fd5b5b60a68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b600360010260026001026001604051808260010260001916815260200191505060405180910390a25b5600a165627a7a72305820588c6bc140c4fc5629762156e0ff36d3e6cc41f0378e6931c60be905eafb8f4c0029
test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol":{"keccak256":"0xdbc4f8e447dd5374abfc2f4134abfc3f5d4a62a68fcd01c3cacdbee239fea036","urls":["bzzr://96b6afdf06b90e799e5623718573372f74df94b7f56655a3f6dc82fa9b1e3cac"]}},"version":1}
test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol:test 6060604052341561000f57600080fd5b5b60b18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60836000607c6074606c60648563ffffffff16565b63ffffffff16565b63ffffffff16565b63ffffffff16565b90505b5050565bfe00a165627a7a7230582022c1954bfbd1ae19e56b4d4d7deda7b6c876a4a181e5258d10aadfd602a4743a0029
test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol":{"keccak256":"0xc241ca57644b25ccddaeb2dc23b89d889b53bd3b2d1c9f75581c6c9fdf6674cc","urls":["bzzr://237d0ec216a0bb6a593932fa497977c8abbc604b28be707e01c4a686231ff8fe"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol:C 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60005b905600a165627a7a72305820d270e181617f5fb11883d26c9b82f0e26b98040127dd358ab06158d1b86343d40029
test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol":{"keccak256":"0x989b30d56bb4ccfb82ccdbb8802808143f1a960ffc4a51451cbda13935fbeadb","urls":["bzzr://bebaeffc56ede76f27dde0dc39ee5fc752966d380d03f15f2a4d208f4d85eb11"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol:C 6060604052341561000f57600080fd5b5b6102c78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461005f5780637934fd96146100c45780638a054ac214610129578063b8e010de1461018e575b600080fd5b341561006a57600080fd5b6100726101f3565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d76101fd565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b61011e565b6000819050919050565b505060405180910390f35b341561013457600080fd5b61013c610226565b604051602081016101528160008401848661015c565b9050809250610174565b600084905061016a82610179565b8452949350505050565b610183565b6000819050919050565b505060405180910390f35b341561019957600080fd5b6101a1610248565b604051602081016101b7816000840184866101c1565b90508092506101d9565b60008490506101cf826101de565b8452949350505050565b6101e8565b6000819050919050565b505060405180910390f35b6000600790505b90565b60006102206000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b60008060006101000a81549067ffffffffffffffff0219169055600190505b90565b60006101f36000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506102956000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b905600a165627a7a72305820773ac7ad1f23f956dcd7500f6c3fed932d1b2207b0603da9e3e9761008a8d7ad0029
test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ca","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"d","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol":{"keccak256":"0xba8f194ae2978b7582c33163df695bb7c75cd397f3cdf6a25456d1966ba734ef","urls":["bzzr://17f075f713aafb1cb61145e1c92ced28c1d76fbe5926d08212ef10fb125175d5"]}},"version":1}
test_5869c04d16b5835beaa4ce684bc581c051e819d94e0fa78f10fdf74e281d18db.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol:test 6060604052341561000f57600080fd5b5b61011b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060b9565b604051604081016071816000840184876089565b90506080816020840184866089565b9050809350609f565b600084905060958260a3565b8452949350505050565b60ad565b6000819050919050565b50505060405180910390f35b6000808260ce576003600481915080905060d9565b600160028191508090505b8160ff1691508060ff169050915091505b9150915600a165627a7a72305820dfb740b15e9f9f8d50913a8ea6f2c0720ce8bef658e71c2534fdf6e413521e9c0029
test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol":{"keccak256":"0x2508a89bf23757bcd2e4ae44591046202d85398f84fed82d5b1ac6016aaecccd","urls":["bzzr://ee2b39283d433759048dc9aa0ad7eced2727834e4529fb01f5fe5b0ca88198be"]}},"version":1}
 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C 6060604052341561000f57600080fd5b5b61064a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b80ee89714610054578063baf2f8681461010a578063f8a8fd6d1461019c575b600080fd5b341561005f57600080fd5b61008b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610240565b604051602081016100a1816000840184866100ab565b90508092506100c3565b60008490506100b9826100ed565b8452949350505050565b6100e8565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100ff565b60006100f8826100c8565b9050919050565b505060405180910390f35b341561011557600080fd5b61011d61024b565b604051602081016101338160008401848661013d565b9050809250610155565b600084905061014b8261017f565b8452949350505050565b61017a565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610191565b600061018a8261015a565b9050919050565b505060405180910390f35b34156101a757600080fd5b6101af610255565b604051604081016101c5816000840184876101e0565b90506101d6816020840184866101e0565b90508093506101f8565b60008490506101ee82610222565b8452949350505050565b61021d565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610234565b600061022d826101fd565b9050919050565b50505060405180910390f35b60008190505b919050565b6000600990505b90565b6000806000600961026461047c565b6020810161027781600084018486610281565b9050809250610299565b600084905061028f826102c3565b8452949350505050565b6102be565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6102d5565b60006102ce8261029e565b9050919050565b5050604051809103906000f08015156102ed57600080fd5b90508073ffffffffffffffffffffffffffffffffffffffff1663f07494a06000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561035b57600080fd5b6102c65a03f1151561036c57600080fd5b5050506040518051905092503073ffffffffffffffffffffffffffffffffffffffff1663b80ee89760076000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016103e0816000840184866103ea565b9050809250610402565b60008490506103f88261042c565b8452949350505050565b610427565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61043e565b600061043782610407565b9050919050565b5050602060405180830381600087803b151561045957600080fd5b6102c65a03f1151561046a57600080fd5b5050506040518051905091505b509091565b6040516101928061048d8339019056006060604052341561000f57600080fd5b604051602080610192833981016040528080519060200190919050505b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b6101148061007e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f07494a014603d575b600080fd5b3415604757600080fd5b604d60c3565b60405160208101606181600084018486606a565b90508092506080565b600084905060768260a8565b8452949350505050565b60a4565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60b8565b600060b1826084565b9050919050565b505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820e81f0b3338b9df5808a846602a5d1d7ce1eb3488db86a4341d6fe8974545271b0029a165627a7a723058207c9afd312e0b8936361bf25253cd15e6f3177cfd5c6fa0fbe35b5c5d737035a90029
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"address"}],"name":"t1","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t2","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"address"},{"name":"y","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":{"keccak256":"0x20ba90beb3e1c90b6410daa4f2843e8b48647b91356626582058405182d2e57e","urls":["bzzr://8e518c2ffcd40f5f88fc0654d8f0ea0aa8a9fc63bb42d7a2d2425d1442ce245d"]}},"version":1}
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C1 6060604052341561000f57600080fd5b604051602080610192833981016040528080519060200190919050505b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b6101148061007e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f07494a014603d575b600080fd5b3415604757600080fd5b604d60c3565b60405160208101606181600084018486606a565b90508092506080565b600084905060768260a8565b8452949350505050565b60a4565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60b8565b600060b1826084565b9050919050565b505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820e81f0b3338b9df5808a846602a5d1d7ce1eb3488db86a4341d6fe8974545271b0029
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"bla","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"address"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":"C1"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":{"keccak256":"0x20ba90beb3e1c90b6410daa4f2843e8b48647b91356626582058405182d2e57e","urls":["bzzr://8e518c2ffcd40f5f88fc0654d8f0ea0aa8a9fc63bb42d7a2d2425d1442ce245d"]}},"version":1}
test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol:C 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6001600280600090919250909150819150809050600080600260008491905060008201548160000155600182015481600101555050839190506000820154816000015560018201548160010155505050505b5600a165627a7a72305820e4ff0b21d54902e4bbbf7aa6a91eb83c965e4c73d33b647c0b875cdf77a362d00029
test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol":{"keccak256":"0x2b64ae70cafd8f731600924ec305e12855a58f279c11b0329a8aa4d432bc6bf1","urls":["bzzr://3b350fd2e80d434f06b06ef0b385d213bf8a3d835622fb036c67631c54c40679"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol:C 6060604052341561000f57600080fd5b5b60f38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060a9565b60405160208101607181600084018486607a565b90508092506090565b60008490506086826094565b8452949350505050565b609e565b6000819050919050565b505060405180910390f35b600081801560b9576001820191505b5b6001820191505b5b509190505600a165627a7a723058201d1b456d6b6201eff45f72d681e8674708ca387a25547f277acecbbe4b5e73da0029
test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"twice","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol":{"keccak256":"0x6886e86b5c4b7424cb88d9857da04a6e33d53609a59223ee929b77ad406043f8","urls":["bzzr://0eb273b12410cdba04e0db2eb1f30668a0eb7519bc92da57bcb870b220d0162c"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol:C 6060604052341561000f57600080fd5b5b6109658061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b600060017f0100000000000000000000000000000000000000000000000000000000000000026000806101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060027f010000000000000000000000000000000000000000000000000000000000000002600160000160006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060037f0100000000000000000000000000000000000000000000000000000000000000026001800160000160006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060047f0100000000000000000000000000000000000000000000000000000000000000026001800160000160016101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000900402179055507f31323334353637383930000000000000000000000000000000000000000000006001800160000160026101000a81548169ffffffffffffffffffff0219169083760100000000000000000000000000000000000000000000900402179055507f313233343536373839000000000000000000000000000000000000000000000060018001600001600c6101000a81548168ffffffffffffffffff021916908377010000000000000000000000000000000000000000000000900402179055507f6162636465666768696a000000000000000000000000000000000000000000006001800160000160156101000a81548169ffffffffffffffffffff02191690837601000000000000000000000000000000000000000000009004021790555060057f010000000000000000000000000000000000000000000000000000000000000002600160020160006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060067f010000000000000000000000000000000000000000000000000000000000000002600160020160016101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060077f010000000000000000000000000000000000000000000000000000000000000002600460006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009004021790555060017f0100000000000000000000000000000000000000000000000000000000000000026000809054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015610561575060027f010000000000000000000000000000000000000000000000000000000000000002600160000160009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156105e4575060037f0100000000000000000000000000000000000000000000000000000000000000026001800160000160009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610667575060047f0100000000000000000000000000000000000000000000000000000000000000026001800160000160019054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156106d557507f31323334353637383930000000000000000000000000000000000000000000006001800160000160029054906101000a90047601000000000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff1916145b801561074557507f313233343536373839000000000000000000000000000000000000000000000060018001600001600c9054906101000a9004770100000000000000000000000000000000000000000000000276ffffffffffffffffffffffffffffffffffffffffffffff1916145b80156107b357507f6162636465666768696a000000000000000000000000000000000000000000006001800160000160159054906101000a90047601000000000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff1916145b8015610834575060057f010000000000000000000000000000000000000000000000000000000000000002600160020160009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80156108b5575060067f010000000000000000000000000000000000000000000000000000000000000002600160020160019054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610933575060077f010000000000000000000000000000000000000000000000000000000000000002600460009054906101000a90047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b90505b905600a165627a7a7230582056658571b7d7bb8b81c3f9a1434ad432790c9a7b27c21433ccd60bad0647b9e40029
test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol":{"keccak256":"0x5d0dbd96e6aa96677073a6945a99cd08b77de9413a454e8bd0e50d442d591162","urls":["bzzr://6d20cebf165156e8666bdd6dc5a8f3c93094223edf3a46f95ff22948515c3ebe"]}},"version":1}
test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol:C 60606040523415600e57600080fd5b5b60a38061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600060576063565b605d6063565b5b505050565b6020604051908101604052806000815250905600a165627a7a7230582084ea76970668761b41736f7f309a7982eb1af8c5f92df8d7af1bc17e8608af860029
test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol":{"keccak256":"0x630a3bcdc25a2c1085395f91c36b678ab02a265d11b1620d4951724e5c18dd5e","urls":["bzzr://614086f1f7e91b80940ee71099142d601d6b4debf8990c5710ae63ec64812fef"]}},"version":1}
test_5a1cb2e2ee5603e9528f1baf9b78e7291656268d70083d018a72679c627ac1eb.sol: ERROR
 conv int_const 10 -> uint256
test_5a471346e7b8c89393b5fff654bdb361bbe3b0ca93eb63bc7abf54e1ac01669c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063131e2f1814603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a72305820e46d0d87c8e5d296098845252457b6648945e8e9be7c945f129a70827e90fac60029
test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"I do something awesome"}}}},"settings":{"compilationTarget":{"test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol":{"keccak256":"0x97440e1fe05b5a9402a81c82ee29e30dcdbd72e3e5e205209eeb31a9b2290da8","urls":["bzzr://79643ec41cb047f71b452897edc0811d1f90ec4c5539aa3e73e05c86fc59be6e"]}},"version":1}
test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol:test 6060604052341561000f57600080fd5b5b60f88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b605560b8565b606060405190810160405280602181526020017f313233343536373839303132333435363738393031323334353637383930313281526020017f330000000000000000000000000000000000000000000000000000000000000081525090505b50565b6020604051908101604052806000815250905600a165627a7a72305820abb93c4dea73e9ec3fbed892d24fc57bf8f7717017ad7c08a1104e6279a97a8d0029
test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol":{"keccak256":"0xfccce00aa5b8c5540981458295a415c46a0aefb7135aa05aa2886e34297aff16","urls":["bzzr://8e1c7a3f097f3a5cb669e35e16b520a9ab9dbf792c668b8ea62d2cf388e9e7f4"]}},"version":1}
test_5a931ee5ca4dbc71c43bac230b1d2b714ba8692e96995431e8fc4edd22555574.sol: ERROR
test_5b1274f9b28fe245f4e65caa5e0b6e3c33ce6e595606e9ddef86bc2270b6622a.sol: ERROR
 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol:C 6060604052341561000f57600080fd5b5b6102348061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14610054578063d7b52a1f146100ca578063ef9d1d861461012f575b600080fd5b341561005f57600080fd5b610067610194565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100bf565b600060028210600081146100b7576100b9565bfe5b50919050565b505060405180910390f35b34156100d557600080fd5b6100dd6101a6565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b341561013a57600080fd5b6101426101d2565b6040516020810161015881600084018486610162565b905080925061017a565b60008490506101708261017f565b8452949350505050565b610189565b6000819050919050565b505060405180910390f35b6000809054906101000a900460ff1681565b6000806000806101000a81548160ff021916908360018111156101c557fe5b0217905550600190505b90565b6000806000905060059050806000806101000a81548160ff021916908360018111156101fa57fe5b0217905550600191505b50905600a165627a7a72305820bbd6dc23586377fa112dc5320eeab7267b933330775c0b16921ba71a6c3f7a530029
test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_store_ok","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_store","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol":{"keccak256":"0x26bee7d71dd947603563f3527a235e296520d9dc5941e54c59833c22729cdd32","urls":["bzzr://3ad36f775db16799e66d93eb15c9646e7a623f863b14c9964f29ce7d43aba719"]}},"version":1}
test_5b5aa050c701a03115200586a06d6203913e4e75c203587d496f6c960044fab1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:C 6060604052341561000f57600080fd5b5b6101c78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad610159565b60076040518059106100bc5750595b908082528060200260200182016040525b5081600001819052506008816000015160038151811015156100eb57fe5b906020019060200201818152505061010281610121565b600381518110151561011057fe5b9060200190602002015191505b5090565b610129610173565b60028260000151600381518110151561013e57fe5b9060200190602002018181525050816000015190505b919050565b60206040519081016040528061016d610187565b81525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820186ccfbf0d35c81add7ee40690fd598bfe413959efc6cf0e2bb10c7142649fce0029
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":{"keccak256":"0xdf69479d911fe65432712720c161dfdc41592663e9f78369c7a5abc1d6587f6f","urls":["bzzr://8496e6ceff5e61321f58699a252ca0f503de2faf0119d0382628db4e384e8798"]}},"version":1}
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820786497636be0db33bc5fbbf77d3778ad4ea1aab7ba97c428254ce66842050f290029
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":{"keccak256":"0xdf69479d911fe65432712720c161dfdc41592663e9f78369c7a5abc1d6587f6f","urls":["bzzr://8496e6ceff5e61321f58699a252ca0f503de2faf0119d0382628db4e384e8798"]}},"version":1}
test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol:test 60606040523415600e57600080fd5b5b609f8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b606460048080359060200190919080359060200190919050506066565b005b60028183019250505b50505600a165627a7a723058207776be6172ef40ac4232f7d6373e65e76f3405c9bcd6a348fdafb2ab21173b840029
test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol":{"keccak256":"0x055a96dae386107c7ded9452b65376f8acc70c6744f075d1e3aad2066dcb9caa","urls":["bzzr://893aaf099a45fbf8495164fbbfeb125647763c730c456913011c46ee9c9fac8a"]}},"version":1}
test_5bf1631305324e367bf3061b849d3058ac26a29443d0ba71a95b8d436199db62.sol: ERROR
test_5c369548f095f631131b00557e7683a7a963c7c1013264df79cac06ea9a3c322.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol:C 6060604052341561000f57600080fd5b5b61016d8061001f6000396000f3006060604052361561004a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461006857806326121ff0146100cd575b341561005557600080fd5b6100665b600134016000819055505b565b005b341561007357600080fd5b61007b610132565b604051602081016100918160008401848661009b565b90508092506100b3565b60008490506100a9826100b8565b8452949350505050565b6100c2565b6000819050919050565b505060405180910390f35b34156100d857600080fd5b6100e0610138565b604051602081016100f681600084018486610100565b9050809250610118565b600084905061010e8261011d565b8452949350505050565b610127565b6000819050919050565b505060405180910390f35b60005481565b60003490505b905600a165627a7a723058209fd629750cb20a2f96b9c09991808c73ab8fa8e6d64cc3a283a635b7a763e03a0029
test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol":{"keccak256":"0x2e32232e2a5c8999a2c437a05e8332c7086105c8d13baedb8fb6dee9520dc011","urls":["bzzr://e41b2e0e2749bf059983cf6162ab0a41094944aa890d4a39c2fa8abda3641bea"]}},"version":1}
test_5d06921029f8e8a34a2d374af88124ab9015989dba9095e296e484f6a15d7ded.sol: ERROR
test_5d0b4898c2bc6766f0d6fed83155c9c8f7062805f3a9fe43ebe1eb7dbd1fb227.sol: ERROR
test_5d4dac7437f33758adc60175cd3e9ef38d2a05ddd23c0ecc2ccc9cfa549ea83d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Base 606060405261001f61002e64010000000002610099176401000000009004565b5b806000819055505b50610038565b6000600290505b90565b60cf806100466000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600290505b905600a165627a7a723058203e7ef07affa19e5444387b18751eaa72024334d4048c869d5d52cf0362c09fa30029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:BaseBase 6060604052341561000f57600080fd5b604051602080610113833981016040528080519060200190919050505b806000819055505b505b60cf806100446000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600290505b905600a165627a7a72305820f161009a5740ac287419fca345ce1377a35ba91c0f05964f72691d096e63ea280029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Derived 606060405261001f61002e6401000000000261011d176401000000009004565b5b806000819055505b50610038565b6000600290505b90565b610153806100476000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d46300fd14610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161011d565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b6000805490505b90565b6000600290505b905600a165627a7a7230582041cde4ebbeaa51310d1b7e3e11fe067a7b0dbaaf3fb704041c5b3e46c43533150029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol:test 6060604052341561000f57600080fd5b5b5b5b6102dc806100216000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806377bef6e1146100545780639e2bd1bd146100c7578063f5e3d9fc1461013a575b600080fd5b341561005f57600080fd5b610075600480803590602001909190505061019f565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b34156100d257600080fd5b6100e860048080359060200190919050506101f0565b604051602081016100fe81600084018486610108565b9050809250610120565b600084905061011682610125565b8452949350505050565b61012f565b6000819050919050565b505060405180910390f35b341561014557600080fd5b61014d610241565b604051602081016101638160008401848661016d565b9050809250610185565b600084905061017b8261018a565b8452949350505050565b610194565b6000819050919050565b505060405180910390f35b60008160028111156101ad57fe5b6000806101000a81548160ff021916908360028111156101c957fe5b02179055506000809054906101000a900460ff1660028111156101e857fe5b90505b919050565b60008160028111156101fe57fe5b6000806101000a81548160ff0219169083600281111561021a57fe5b02179055506000809054906101000a900460ff16600281111561023957fe5b90505b919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600281111561026f57fe5b6000806101000a81548160ff0219169083600281111561028b57fe5b02179055506000809054906101000a900460ff1660028111156102aa57fe5b90505b905600a165627a7a723058203cbca48721bada40454588ee3825544e134642f43527582a5fa632c940de92ec0029
test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"getChoiceExp","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"int256"}],"name":"getChoiceFromSigned","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getChoiceFromNegativeLiteral","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol":{"keccak256":"0x8d457cabf41d968379ac064936a8063d5ec90632ba1d815cadf93b7f6fedbfe1","urls":["bzzr://a77ef8e12b0f39f5453006569a75bb3b4cbc2f8b3aa3458bbee36583c749bc51"]}},"version":1}
test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol:C 6060604052341561000f57600080fd5b5b6101518061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bc5bbbf1461003e575b600080fd5b341561004957600080fd5b610096600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610098565b005b80600090805190602001906100ae9291906100b3565b505b50565b8280548282559060005260206000209081019282156100ef579160200282015b828111156100ee5782518255916020019190600101906100d3565b5b5090506100fc9190610100565b5090565b61012291905b8082111561011e576000816000905550600101610106565b5090565b905600a165627a7a72305820ac88cbb9cecfd8592b828cd331716ef9ecbd0bbf90548ceeef2269537d74e7c90029
test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol":{"keccak256":"0x5dee1d2283723a66891d5c6f1f106494319125abdbb4d01f1b45dfcf022c3f24","urls":["bzzr://a19a6b330313850c421aeecb9af7d886f33f4ede7987ec197812e51f46baa15a"]}},"version":1}
test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol:c 6060604052341561000f57600080fd5b5b61019e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b60016000906050610065929190610069565b505b565b8280548282559060005260206000209060070160089004810192821561012e5791601f016020900482016000805b848311156100f65784819054906101000a900460ff1684836101000a81548163ffffffff021916908360ff1602179055506001016020816000010494850194600103029060040190602082600301049384019360010382029150610097565b811561012b5783826101000a81549063ffffffff021916905590600401906020826003010493840193600103820291506100f6565b50505b50905061013b919061013f565b5090565b61016f91905b8082111561016b57600081816101000a81549063ffffffff021916905550600101610145565b5090565b905600a165627a7a723058201eb00c4b28bb1674a8858555cfc523ed53e22551714b1126a18595f89914af720029
test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol":{"keccak256":"0x4391fc9441818d4341532af0e9401549904a13295b4e2c8543df9568c2523be1","urls":["bzzr://a9e93708371abaeaa01fba3dea07dae8e790ce876e49d2a244a2e0d5b8e37a9d"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol:C 6060604052341561000f57600080fd5b5b60fc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afdb4ea14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b60008183600082121560be57fe5b9060020a900592508290505b929150505600a165627a7a7230582090684ea87de6bae247caf3c20d782e210e92a70379f61d4c724b1030151466ed0029
test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol":{"keccak256":"0x4626cb018b2a441abe3ddbf3dd5a0d4bae4184e31ac076df1e864cce37df6874","urls":["bzzr://f742f49b43567ba5008204ef848c5a7c0a8a30eea2cce7725d4c92680bb3de7f"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol:test 6060604052341561000f57600080fd5b5b6101868061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ebc2f80b14610049578063f72d0b3b1461007b575b600080fd5b341561005457600080fd5b610079600480803560ff1690602001909190803560ff169060200190919050506100f4565b005b341561008657600080fd5b61009f600480803560ff1690602001909190505061012a565b604051602081016100b5816000840184866100bf565b90508092506100d7565b60008490506100cd826100dc565b8452949350505050565b6100e9565b600060ff82169050919050565b505060405180910390f35b806000808460ff1660ff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505b5050565b60008060008360ff1660ff16815260200190815260200160002060009054906101000a900460ff1690505b9190505600a165627a7a72305820903f1546499a36d566487fb1553134ea06e8286a79fe887f4e7c75bd0a847fec0029
test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint8"},{"name":"v","type":"uint8"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint8"}],"name":"get","outputs":[{"name":"v","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol":{"keccak256":"0x308f9d5d01d1466aec94a66ae3079f56bc9b1ab786887c069a5d327d3d3c2ef5","urls":["bzzr://60fbe9319fa11d8764ab46b0796811d32c9a2894f47bcefebf231982acb6e709"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806388b7a17c14603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b60005b9190505600a165627a7a723058203fa38a734b92ed0f3361b71ddd74c280185b4328d42d03f3494fede5802984e90029
test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol":{"keccak256":"0x1bec740dc2078b45065a6b2285f5c30d66e3240059f7dd21368f326b79497e99","urls":["bzzr://f0ce710d93f9207b03251fab6a01b2738c93ea7fdc726977e7a6d644661863d7"]}},"version":1}
test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820878818390ad8d6550df3fb4001dfc90a4927915ff11e667beb51fe0e444d69ea0029
test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol":{"keccak256":"0x6d602606dd7438bfaca23d2571a3b111223a80014ab7a0093fb595d804cc13d0","urls":["bzzr://2ecb467cd29628a3a32375055a2384567e3e3141165289647bc3c068a1c6347c"]}},"version":1}
test_5fd9e166738faf9f1a6326f33a41643f65d7d10ffea1e42efe58aea5001a1e2f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol:test 6060604052341561000f57600080fd5b5b6101038061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008060019150600290505b828160ff1611151560d0578080600101915060ff168202915060b3565b5b509190505600a165627a7a7230582075cfc9f27cc8a4bbe9ef5001f193a8d843c3c6a557f04d8fbd0a1270888efa2e0029
test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol":{"keccak256":"0x5e4157d141e2da257f125b66f004a818bf58ffcc77bae64f1255cd551da78418","urls":["bzzr://b7192be9ba600e73f450cde8aaf0e837839909f211fa9ec2cf682c37ce8988be"]}},"version":1}
test_6049b5ca26689fcbac1aeb6a8d64ffc98a855a8b1f76b2c48a93113c9c8441ba.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol:test 6060604052341561000f57600080fd5b5b6102c88061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd1461005f57806396b8f0ac14610074578063b8dda9c714610112578063c2985578146101a7575b600080fd5b341561006a57600080fd5b61007261020c565b005b341561007f57600080fd5b61009e600480803590602001909190803590602001909190505061020f565b604051602081016100b4816000840184866100be565b90508092506100d6565b60008490506100cc826100db565b8452949350505050565b610107565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b341561011d57600080fd5b610133600480803590602001909190505061025a565b6040516020810161014981600084018486610153565b905080925061016b565b600084905061016182610170565b8452949350505050565b61019c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b34156101b257600080fd5b6101ba610296565b604051602081016101d0816000840184866101da565b90508092506101f2565b60008490506101e8826101f7565b8452949350505050565b610201565b6000819050919050565b505060405180910390f35b5b565b60026020528160005260406000206020528060005260406000206000915091509054906101000a90047c01000000000000000000000000000000000000000000000000000000000281565b60016020528060005260406000206000915054906101000a90047c01000000000000000000000000000000000000000000000000000000000281565b600054815600a165627a7a72305820dfda6556c77ac9752a9436d9f8fd7e560ba2ae9b66e3e31e53b43154247cb1060029
test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"multiple_map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol":{"keccak256":"0x27794d4a8c6de7a3db6e66193b75f509e9215feed740a1bf54e34bd433690887","urls":["bzzr://468227b6c312d0d0fdc2c7c3d130db6b900ac85cd0c71c80776062828497192b"]}},"version":1}
test_606db3dbaa292430622ca94cfd001818d4dc77f57641a13592505b840a7990b2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol:c 6060604052341561000f57600080fd5b5b6104e68061001f6000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630178fe3f146100865780630d18e43c1461010b57806323fef0c01461017e5780632909f638146101aa578063800bd5c8146101df578063b55e49c014610256578063cc959c7314610279575b600080fd5b341561009157600080fd5b6100a760048080359060200190919050506102a5565b604051604081016100bd816000840184876100d8565b90506100ce816020840184866100d8565b90508093506100f0565b60008490506100e6826100f5565b8452949350505050565b6100ff565b6000819050919050565b50505060405180910390f35b341561011657600080fd5b61012c60048080359060200190919050506102fc565b604051602081016101428160008401848661014c565b9050809250610164565b600084905061015a82610169565b8452949350505050565b610173565b6000819050919050565b505060405180910390f35b341561018957600080fd5b6101a86004808035906020019091908035906020019091905050610325565b005b34156101b557600080fd5b6101dd6004808035906020019091908035906020019091908035906020019091905050610348565b005b34156101ea57600080fd5b6101f26103a0565b6040516040810161020881600084018487610223565b905061021981602084018486610223565b905080935061023b565b600084905061023182610240565b8452949350505050565b61024a565b6000819050919050565b50505060405180910390f35b341561026157600080fd5b61027760048080359060200190919050506103b8565b005b341561028457600080fd5b6102a360048080359060200190919080359060200190919050506103e0565b005b6000806000838154811015156102b757fe5b906000526020600020906002020160005b506000015491506000838154811015156102de57fe5b906000526020600020906002020160005b506001015490505b915091565b600060018281548110151561030d57fe5b906000526020600020900160005b505490505b919050565b816000816103339190610408565b5080600181610342919061043a565b505b5050565b8160008481548110151561035857fe5b906000526020600020906002020160005b50600001819055508060008481548110151561038157fe5b906000526020600020906002020160005b50600101819055505b505050565b600080600080549050915060018054905090505b9091565b80600160028154811015156103c957fe5b906000526020600020900160005b50819055505b50565b806001838154811015156103f057fe5b906000526020600020900160005b50819055505b5050565b815481835581811511610435576002028160020283600052602060002091820191016104349190610466565b5b505050565b815481835581811511610461578183600052602060002091820191016104609190610495565b5b505050565b61049291905b8082111561048e5760008082016000905560018201600090555060020161046c565b5090565b90565b6104b791905b808211156104b357600081600090555060010161049b565b5090565b905600a165627a7a7230582032e93fca14e64618c3d653f43c1b3f6b359c74bfe51546efeb0e7ee93f00667b0029
test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getID","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"name":"setLengths","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLengths","outputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"setIDStatic","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"id","type":"uint256"}],"name":"setID","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol":{"keccak256":"0xd57aae63edb0f82326917112279561b01b1d957164ba7975af1acd5126084794","urls":["bzzr://4312321112d3d690d4d6e494514cd87c524bdc280314cf61ec753bddda0a8778"]}},"version":1}
test_60c9893fce254322d6b889b287f01e53386f5d842238ee182a72fb90c12e097d.sol: ERROR
test_611ace9b2f6ee0196b738ca1d207d9a6279764eadda560533645c7eb75c14be4.sol:I 
test_611ace9b2f6ee0196b738ca1d207d9a6279764eadda560533645c7eb75c14be4.sol:I 
test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol:C 60606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a7230582024a07c835cc6d55a17323bd8a45d15e9463fc43fae13b3a369b731aea15238170029
test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol":{"keccak256":"0xd2ae0b046db1a9ef03fad2bf77079a29ff7b702f2cad5d74a631ca1ed6b394e6","urls":["bzzr://6d46734cbb771418e759e3129c0853ee6c8bc91b14f28c57ddec76e503a18b5f"]}},"version":1}
test_6172db891cd30318e8701ab33dff026e0510bf1c9bd5b1e273587b3b010806a5.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol:C 6060604052341561000f57600080fd5b5b60f98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afdb4ea14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b60008183600082121560be57fe5b9060020a900590505b929150505600a165627a7a7230582047aa69c92a698aa9bed7d35ab76474c5b42c7c6f2759804a02b664b74eabe53b0029
test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol":{"keccak256":"0x6b41175b3a4debe558b1e8a4792772f75c6077676fe84810ed34971a21d098ff","urls":["bzzr://839830bccf723a871aa39cffabc75f7066da6f230dac2221b8117b517b727df3"]}},"version":1}
test_625d3de7d62ea68415765227ef0e573034cb2a1b9d481542d8c160028b2ed88a.sol: ERROR
test_626fb6b87f5c915a89b90fc49b09814c111e356aed4ac3a01f64c8043c47b560.sol: ERROR
test_630460bfbccd57d26a19287949a4b0f3d4cb391b0070d394f132523fb08f8994.sol: ERROR
test_6318d6404b954fa7cf23a12f59e1b8398a04ae8ff11418ee05d28bcae9778f88.sol: ERROR
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol:test 6060604052341561000f57600080fd5b5b6101168061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060bd565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b60b2565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60008082101560ce576067905060e4565b600082141560de576012905060e3565b607890505b5b5b9190505600a165627a7a72305820caff620de984e4a13a861744879ea352dbaeb5fafa544afea039a15df0fe9d0c0029
test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[{"name":"b","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol":{"keccak256":"0xcbe1d3cbe82d675f41a9c47e0969a68179c499e2f04f0bd683daf2b5cc4d8d67","urls":["bzzr://1ba0d43c164dbfbf006e864c76585af69f8cb8960c42b81389a96d3a4a8148ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol:test 6060604052341561000f57600080fd5b5b60f18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063e2179b8e146059575b600080fd5b3415605157600080fd5b605760b5565b005b3415606357600080fd5b606960bf565b60405160208101607d816000840184866086565b9050809250609c565b600084905060928260a0565b8452949350505050565b60aa565b6000819050919050565b505060405180910390f35b60bb60bf565b505b565b60005b905600a165627a7a72305820e103d67c02feb9e54e25a76d91c6022fdec6e36524c73706410b5472bd764a4a0029
test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol":{"keccak256":"0xff92d645d6a9b071c1afbc7bf36dd2bb7ba9983e011b14a51ca316c74e1bc8af","urls":["bzzr://b3c96cdb8514269b23288bb96bfd0aeaad95f4f68f42f756d23355486579cbbd"]}},"version":1}
test_641a57596389209d88461b4a8279efe900975b2982775b995dec9f99879f29e3.sol: ERROR
test_642fce6b19a9fc3ddbc8879acabea89b8c13153dee531fa1d8e843b257626a85.sol: ERROR
test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol:C 6060604052341561000f57600080fd5b5b6101618061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b61005b61009d565b6100636100c5565b60606040519081016040528060018152602001838152602001604080519081016040528060048152602001600581525081525090505b5050565b6060604051908101604052806003905b60008152602001906001900390816100ad5790505090565b60c060405190810160405280600081526020016100e06100f3565b81526020016100ed61011b565b81525090565b6060604051908101604052806003905b60008152602001906001900390816101035790505090565b6040805190810160405280600081526020016000815250905600a165627a7a72305820e8bbc9de581f8f64eab10f90956b793413a5cfecf0befa703c4890ef8981268c0029
test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol":{"keccak256":"0x642dce7c00404747d112e3072c41bd72f97f490e0449e6f44a120fb2ed93bfa2","urls":["bzzr://e4e9690dea04f2496cf13063e5ac3193114c729f699b8b7a3967e3456c828ea9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6103a08061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806347e7ef2414610054578063d0e30db0146100e6578063f340fa011461014b575b600080fd5b341561005f57600080fd5b610094600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506101d4565b604051602081016100aa816000840184866100b4565b90508092506100cc565b60008490506100c2826100d1565b8452949350505050565b6100db565b6000819050919050565b505060405180910390f35b34156100f157600080fd5b6100f96102a9565b6040516020810161010f81600084018486610119565b9050809250610131565b600084905061012782610136565b8452949350505050565b610140565b6000819050919050565b505060405180910390f35b341561015657600080fd5b610182600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506102df565b60405160208101610198816000840184866101a2565b90508092506101ba565b60008490506101b0826101bf565b8452949350505050565b6101c9565b6000819050919050565b505060405180910390f35b60007fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83836040516040810161020f8160008401848761022a565b905061022081602084018486610247565b9050809350610242565b600084905061023882610264565b8452949350505050565b61025f565b600084905061025582610289565b8452949350505050565b610284565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610293565b6000819050919050565b50505060405180910390a1600190505b92915050565b60007fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a1600190505b90565b60007f8ce0bd46ec50cf39f0d0ea8686a686eb226af5796dcda4231b26fb84b5ef1234826040516020810161031981600084018486610323565b905080925061033b565b600084905061033182610340565b8452949350505050565b610360565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390a1600190505b9190505600a165627a7a72305820786b3ad214850a6cd435e2acab0f72892b2cacfa2e0b76eebd0263c82e2086be0029
test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol":{"keccak256":"0xa9d681d74dffd237151b9438c8accabaf63c08841a7c7d61bc63d090f645b06e","urls":["bzzr://92740236da659a947062b08f04f6d9e3e9aa793041722d81f6cd20f21444cbb3"]}},"version":1}
test_6522802064e1bb0fb7839481a8c19759c5107c734dbd019a6ec7c0c1992d5d6d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol:c 6060604052341561000f57600080fd5b5b6106148061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b60008060016000805460018160011615610100020316600290048060010182816100cf91906104fa565b91908154600116156100f05790600052602060002090602091828204019190065b60057f01000000000000000000000000000000000000000000000000000000000000000290919091601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555014151561016057600191506104f6565b60057f01000000000000000000000000000000000000000000000000000000000000000260008081546001816001161561010002031660029004811015156101a457fe5b8154600116156101c35790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561021b57600191506104f6565b60008054600181600116156101000203166002900480600101828161024091906104fa565b91908154600116156102615790600052602060002090602091828204019190065b60047f01000000000000000000000000000000000000000000000000000000000000000290919091601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055505060047f01000000000000000000000000000000000000000000000000000000000000000260006001815460018160011615610100020316600290048110151561030757fe5b8154600116156103265790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561037e57600191506104f6565b6000805460018160011615610100020316600290048060010182816103a391906104fa565b91908154600116156103c45790600052602060002090602091828204019190065b60037f01000000000000000000000000000000000000000000000000000000000000000290919091601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550905060037f01000000000000000000000000000000000000000000000000000000000000000260006002815460018160011615610100020316600290048110151561046b57fe5b81546001161561048a5790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156104e257600191506104f6565b6003811415156104f557600191506104f6565b5b5090565b81546001816001161561010002031660029004825481601f106105555782601f1061053a575b826008026101000360020a809104028280011783556105be565b60ff19168360005260206000205581800160010183556105be565b82601f10610585575082600052602060002080549082601f016020900481019061057f91906105c3565b50610520565b508180016001018355818115116105be57601f016020900481601f016020900483600052602060002091820191016105bd91906105c3565b5b505050565b6105e591905b808211156105e15760008160009055506001016105c9565b5090565b905600a165627a7a72305820bfedd16cedea426d626a4bb939f5135e9e7968ccecb08d2ab563a15255418ca00029
test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol":{"keccak256":"0x9ab41e67b19ee6cb1c9eb223e530248f95cac0a76d5bb301e22d5b5778ea1db6","urls":["bzzr://d1c2b5080d4e01f585a12e0f3b87d61e59b3612cb341b7671150ac44e5263f67"]}},"version":1}
test_65c50cc0f764ce0d12adeb302d3058c495c919481550d9f127fac1d6dacf6210.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol:Test 6060604052341561000f57600080fd5b5b61010d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063943b40ed14603d575b600080fd5b3415604757600080fd5b608760048080359060200190919080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060d3565b60405160208101609b8160008401848660a4565b905080925060ba565b600084905060b08260be565b8452949350505050565b60c8565b6000819050919050565b505060405180910390f35b6000600590505b93925050505600a165627a7a723058205fdd058796065b01904cf7859f6257ef265763c4f46961615facbce745c69f350029
test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"address"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol":{"keccak256":"0xcf97bcbeba7d2409bc286681de3e3c9b54fd9ddc80011ef6543b88ef1e31f5c6","urls":["bzzr://f1c65f23bedcbf6c12f0663db57b72be1defb1406ef067cd49d87fe9f3a10501"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6678e8326e32b554c652b7521e4e0e631892e8b1c5a516b81360fd5ae0cdc887.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol:test 6060604052341561000f57600080fd5b5b6101ff8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14610054578063b3de648b146100d0578063e2179b8e14610143575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101a8565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b34156100db57600080fd5b6100f160048080359060200190919050506101b6565b6040516020810161010781600084018486610111565b9050809250610129565b600084905061011f8261012e565b8452949350505050565b610138565b6000819050919050565b505060405180910390f35b341561014e57600080fd5b6101566101c1565b6040516020810161016c81600084018486610176565b905080925061018e565b600084905061018482610193565b8452949350505050565b61019d565b6000819050919050565b505060405180910390f35b600081830190505b92915050565b60008190505b919050565b60006101cd60036101b6565b90505b905600a165627a7a72305820f793e7f2f8c19d47bd9613f2a4fe9810b7862cf78b550f61d864b94a675760990029
test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol":{"keccak256":"0x5e6151466ecf7d4c76b6998efb659ede6f648ed32bf9eed0a47a9adf1ec3d858","urls":["bzzr://788ae6d8d33c9d48e0a3d0c490f6bd7e9fc61a6bf053b48b73b89faa999265ee"]}},"version":1}
test_674cdd73ce0de1fa1b3cc2e8277a6d6874427281a558f2e3cb416f9a5a21e988.sol: ERROR
test_6787a838c1d0ee4c9a59431af38120123149c449092ad2f5caa4b34a554222f5.sol: ERROR
test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol:C 6060604052341561000f57600080fd5b5b60b78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b606b565b60008060008392508491506007905093509350939050565b60776003600260016053565b82600052816020528060405260606000f35b5600a165627a7a72305820a1db4d04054289ea42c5eaed7212ff34b4e9c37a36589b432c741fad7bc8064c0029
test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol":{"keccak256":"0xddb7dc59ba9cf4b63dc27bc4a240674eccffa049a96dec61d79cadaf369784ba","urls":["bzzr://5abdaed79aba3b9ebf8ceb5647ed362d6d94994b55e9c424478411ac67bacf63"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol:test 6060604052341561000f57600080fd5b5b6101668061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806348ab5e6c14610049578063f72d0b3b14610078575b600080fd5b341561005457600080fd5b610076600480803560ff169060200190919080359060200190919050506100ee565b005b341561008357600080fd5b61009c600480803560ff16906020019091905050610113565b604051602081016100b2816000840184866100bc565b90508092506100d4565b60008490506100ca826100d9565b8452949350505050565b6100e3565b6000819050919050565b505060405180910390f35b60008260ff161415610106578060008190555061010e565b806001819055505b5b5050565b6000808260ff16141561012a576000549050610135565b6001549050610135565b5b9190505600a165627a7a72305820cd6dd9eb220b3088e1e0f66b2c7dbea9badbac672446f7f23de348017a2f092e0029
test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"which","type":"uint8"},{"name":"value","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"which","type":"uint8"}],"name":"get","outputs":[{"name":"value","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol":{"keccak256":"0xb28747cbb8496779e88779c2cfa264d5ffd9000492b18947e44deecdb6b9853d","urls":["bzzr://ed872ea24a20974e079fca793a2b92633692a2d68b803e20bd51ff567ffed7b7"]}},"version":1}
test_67a89c49f0e9290185cd4d92c6706b09625c628157788a651e671fd65292bba4.sol: ERROR
test_67df6832d25a804cfa9ce78d689bff000992f34c3f3e225535c3d34a174d11da.sol: ERROR
 conv bytes32 -> bytes32
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol:Contract 6060604052341561000f57600080fd5b5b61019c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329e99f071461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100f1565b60405160408101610075816000840184876100ad565b905061008681602084018486610090565b90508093506100a8565b600084905061009e826100ca565b8452949350505050565b6100c5565b60008490506100bb826100db565b8452949350505050565b6100d6565b60008115159050919050565b6100e5565b6000819050919050565b50505060405180910390f35b6000808260039060405180807f6162630000000000000000000000000000000000000000000000000000000000815250600301905060206040518083038160008787f1151561013f57600080fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff19169150600190505b9150915600a165627a7a72305820ba45c86742b63a045067398a10fa3951a6290918ffa230115f8e0d19f5b3dd5d0029
test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol:Contract {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"uint256"}],"name":"test","outputs":[{"name":"data","type":"bytes32"},{"name":"flag","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol":"Contract"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol":{"keccak256":"0x92a58ecbcec0d8cde7ea1649b1acdc13c19cdb03a1ff32d28006b8e3a41484cf","urls":["bzzr://3de2c228d35669cd3d036b69490408c7ecd76d764b51123e59f58ef7313150b3"]}},"version":1}
test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol:C 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600190505b505600a165627a7a72305820ace3759c376e772113f2af9809041f8a1bd7df85f26371c06241809e885a02060029
test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol":{"keccak256":"0xbceef2b992b8bc3e3db4b469967dc30e0ab9170fa30fade0bfabf7e11acdce56","urls":["bzzr://3fb998fcdc07e237d8cc3c6d80c8588f059ace851195daacd377a1ba8f693258"]}},"version":1}
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820cbae64c87669876da254b59d669a77950ca23519116f95b3868ae98142cdd3a10029
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":"base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":{"keccak256":"0xcae5da88d160d3d2bf72e6b2eae20ca62c7ff013a1b80983a4cb38f112dee08a","urls":["bzzr://948416af892a1f1eef01d2cab5edf42f018dd8acc74c1d26e7bd1aac0d2346cc"]}},"version":1}
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:c 6060604052341561000f57600080fd5b5b6101258061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600115157f61626300000000000000000000000000000000000000000000000000000000007f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60026040516020810160ab8160008401848660b4565b905080925060ca565b600084905060c08260dc565b8452949350505050565b60d8565b6000819050919050565b60ec565b600060e58260ce565b9050919050565b505060405180910390a35b5600a165627a7a72305820f9bae0e3c562e2fd48ec8cbf3b10ec76993c66368674e6400e58dfda499daf240029
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":{"keccak256":"0xcae5da88d160d3d2bf72e6b2eae20ca62c7ff013a1b80983a4cb38f112dee08a","urls":["bzzr://948416af892a1f1eef01d2cab5edf42f018dd8acc74c1d26e7bd1aac0d2346cc"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol:test 6060604052341561000f57600080fd5b5b60d78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c040622614603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b60008160000b9050919050565b505060405180910390f35b60008060fa90508091505b50905600a165627a7a723058207f9643e2905569c38426cf6f078f524bda377d5eee7fef63f2dabcc649008c9d0029
test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol":{"keccak256":"0x494d0ab666d3b25ad0ccec0da1bbf387215c8df4efa6d3d8b7157c467486ec97","urls":["bzzr://4ef14659857115777302aa7f84130f77382dbb2532d9113bbfcae439e11fbd57"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol:Test 6060604052341561000f57600080fd5b5b60f68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b6000600a82111560bb57600a8201905060c5565b600080fd5b600290505b9190505600a165627a7a723058202c4699ece505d16a0d192c7ac1c8b217ddd5facd5122c29f115f4cf38ae4d84d0029
test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol":{"keccak256":"0x6856098c37fcf59915bfdff3192944b1ea0b5d8ffaef803872d74c787bdcfad1","urls":["bzzr://244e6c90e81e63fb4c377ab081ef15e54ecb7f1ddfbd2e7bfcbf6c9428a087f0"]}},"version":1}
test_68e899b09189c66e7fc5d6bd832d4e17d99bf3f6c4b33c0c981c8d38edcc2e8a.sol: ERROR
test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol:C 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600790505b505600a165627a7a723058208be324ca42fd481bb35a367f994ba4368ed67eb899723687b2153a39b71083800029
test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol":{"keccak256":"0x792fcdd8d34dc2b6f531fb1465cd3a1e997fa031ab6207cf0af42036e665168b","urls":["bzzr://d5ec931d581900ff9ff2f92f36ba50323174565a16b0e59160b443ab69741474"]}},"version":1}
test_69a930c58e299381bfc48a5953bc92472a46ff7cdf7d4504d0447f9d11398fa2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol:test 6060604052341561000f57600080fd5b5b60e88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b600181019050600a8110151560b35760b8565b5b60a0565b5b905600a165627a7a72305820e3fd74737c3ffd9ed87a4937f499c66e11e596395d8d80d03dd82104049241410029
test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol":{"keccak256":"0x042e0c60eb2665b5b6044e8379ef5357e819a4fd997b0d98a886e9c9580f864b","urls":["bzzr://d59c59705a98c464ce260c2c38a42ebb8f05f5eda2c0f634efae600d6525b7f1"]}},"version":1}
test_69fcd726c104d80bb76a7dfe20a52f1f942be7718958528e35dff7d6452c796b.sol: ERROR
test_6a19751fb1cd67824104cf82388419548d94dd67498848262ef44bfecc737761.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol:test 6060604052341561000f57600080fd5b5b6101008061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c040622614603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600063ffffffff9150600a8201905063ffffffff8163ffffffff1610151560c5576000925060cf565b8063ffffffff1692505b5050905600a165627a7a7230582063bd4cee6c0aec6af0c6061886b7d119a664c9bfacbfcff3c2de35150c0230460029
test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol":{"keccak256":"0x0642c412005f068207258dc58d703bfbf7394d5456cb7bf1b5b4f6067b21066c","urls":["bzzr://71c1c231f6fc1af342b988f1df3a780b18fa44abae76ab79740da316ac5ca0e3"]}},"version":1}
test_6ae75d008fb13d14f2a05cca2bbed825641b8d3fefa8ea9ad1aae3bb9bafb097.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol:HexEncoding 6060604052341561000f57600080fd5b5b6104b58061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063496e25d91461003e575b600080fd5b341561004957600080fd5b610075600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100c7565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b60008060008060006401000000008673ffffffffffffffffffffffffffffffffffffffff168115156100f557fe5b0493506fffffffffffffffffffffffffffffffff8416935077ffffffffffffffff0000000000000000ffffffffffffffff68010000000000000000850285171693507bffffffff00000000ffffffff00000000ffffffff00000000ffffffff640100000000850285171693507dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff62010000850285171693507eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff610100850285171693507f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f60108502851716935060087f0808080808080808080808080808080808080808080808080808080808080808851681151561020d57fe5b04925060047f0404040404040404040404040404040404040404040404040404040404040404851681151561023e57fe5b04915060027f0202020202020202020202020202020202020202020202020202020202020202851681151561026f57fe5b0490507f303030303030303030303030303030303030303030303030303030303030303060278284178516028501019350836000526c010000000000000000000000008673ffffffffffffffffffffffffffffffffffffffff160293506fffffffffffffffffffffffffffffffff8416935077ffffffffffffffff0000000000000000ffffffffffffffff68010000000000000000850285171693507bffffffff00000000ffffffff00000000ffffffff00000000ffffffff640100000000850285171693507dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff62010000850285171693507eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff610100850285171693507f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f60108502851716935060087f080808080808080808080808080808080808080808080808080808080808080885168115156103e157fe5b04925060047f0404040404040404040404040404040404040404040404040404040404040404851681151561041257fe5b04915060027f0202020202020202020202020202020202020202020202020202020202020202851681151561044357fe5b0490507f30303030303030303030303030303030303030303030303030303030303030306027828417851602850101935083602052602860002094505b505050509190505600a165627a7a72305820b8f6a0696811df0c116eabc293be09b87fcc752b4ceb01a17ef080cdd6c9286b0029
test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol:HexEncoding {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"hexEncodeTest","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol":"HexEncoding"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol":{"keccak256":"0x8e434dee1697833bbdfd06d4d203af9c827b4d6a3c17032100fa843a4cfb11e7","urls":["bzzr://7e52a810e72b6477113178b3e5d6eb1f0bdd16309202f7b490bed31a96b1b80f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol:C 6060604052341561000f57600080fd5b5b61023a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f1031ec146100495780638d688892146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610130565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600061020c61012660028263ffffffff16565b50600791505b5090565b6000806000818160026000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016101838160008401848661018d565b90508092506101a5565b600084905061019b826101b9565b8452949350505050565b6101b4565b6000819050919050565b6101cb565b60006101c4826101aa565b9050919050565b5050602060405180830381600087803b15156101e657600080fd5b6102c65a03f115156101f757600080fd5b5050506040518051905050600792505b505090565bfe00a165627a7a72305820f4a79dca57c9ba92a12edccee740fec840a06b00efbd4890866a15e591e324cf0029
test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"intern","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"extern","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol":{"keccak256":"0x9050923ce0d3bdbb81ee831659831eca636acfd565d0a15b836080e980cebd32","urls":["bzzr://5e3850ce1a7a770bf8ac1356299f7ff4a9aaa4b04eb5d935fee1f96964ccbb87"]}},"version":1}
test_6b4d56eabc922349c6029f92ce94a31c8ffde1c203e496a0bb7708772f200d90.sol: ERROR
test_6b6ab0a3d75dfdce4993f7b1b96248c4124eae0f0ac45c7c65e6b57513f8dc8e.sol: ERROR
test_6b7443cd9b1c52bfa2505a4ca9f50c33eba53ea1f0d1fee89a97012abca68f50.sol: ERROR
test_6b9d21055235cb7bceed292a6045813b80074e0d3fdf895a3baad2a65c084111.sol: ERROR
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:receiver 60606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b9265b814603d575b600080fd5b60436045565b005b5b5600a165627a7a72305820796c9363792f040f0e5425c98140de692e846ba3fb194cb3cb267e0a1286bfc50029
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"pay","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":"receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":{"keccak256":"0x4602785a3c4ed5b406fb6b8226acc25cf699ba93355f2cdd8297fd31a0a2b818","urls":["bzzr://83dc8d4e56fad3a2a5a8f74ae0b310abcdf472601a823131e77a84ab3aef30e0"]}},"version":1}
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:test 606060405261000c610071565b604051809103906000f080151561002257600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561006c57600080fd5b610080565b60405160918061030483390190565b6102758061008f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e1461005e575b600080fd5b341561005457600080fd5b61005c610073565b005b341561006957600080fd5b61007161010c565b005b61007b6101a9565b604051809103906000f080151561009157600080fd5b73ffffffffffffffffffffffffffffffffffffffff16631b9265b8600a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15156100f457600080fd5b6125ee5a03f1151561010557600080fd5b505050505b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b9265b8600a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b151561019157600080fd5b6125ee5a03f115156101a257600080fd5b505050505b565b6040516091806101b983390190560060606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b9265b814603d575b600080fd5b60436045565b005b5b5600a165627a7a72305820796c9363792f040f0e5425c98140de692e846ba3fb194cb3cb267e0a1286bfc50029a165627a7a72305820621f14f3d46aaf7c26830c0827ea9109cd221e5a65f09461c64e92b9d1c3b883002960606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b9265b814603d575b600080fd5b60436045565b005b5b5600a165627a7a72305820796c9363792f040f0e5425c98140de692e846ba3fb194cb3cb267e0a1286bfc50029
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":{"keccak256":"0x4602785a3c4ed5b406fb6b8226acc25cf699ba93355f2cdd8297fd31a0a2b818","urls":["bzzr://83dc8d4e56fad3a2a5a8f74ae0b310abcdf472601a823131e77a84ab3aef30e0"]}},"version":1}
test_6bc6687f5bd21bdc02578ee02d99e6a0fd2e01edec30bdc8ed7297a354a032de.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol:C 6060604052341561000f57600080fd5b5b6102078061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610054578063a56dfe4a146100bb578063c5d7802e14610124575b600080fd5b341561005f57600080fd5b610067610189565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce6101c1565b604051602081016100e4816000840184866100ee565b9050809250610106565b60008490506100fc8261010b565b8452949350505050565b610119565b600061ffff82169050919050565b505060405180910390f35b341561012f57600080fd5b6101376101d5565b6040516020810161014d81600084018486610157565b905080925061016f565b600084905061016582610174565b8452949350505050565b61017e565b6000819050919050565b505060405180910390f35b60008060006101a1565b600060076001556002905090565b6101a9610193565b90506002811415156101b757fe5b600192505b505090565b600060029054906101000a900461ffff1681565b600154815600a165627a7a72305820eb95d55fc447a2527524ef98c5eda6d01277ed22a2854ebd67f200be36ba5bf50029
test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint16"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"z","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol":{"keccak256":"0xafd137f1ac0767de43625ed75c621975d6e3e99679ef4192db3b37942706dbc5","urls":["bzzr://431d87152652e81df80835a72e1fbbd753f8dc64c6fd3c3664c3d0797ffa4137"]}},"version":1}
test_6c084a53736ab537c1be780084c4ae234541b7dbe2fe934b9b54b6da13edc3ad.sol: ERROR
test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ba1e2e4450c72c6782ae93a7afb8b8550a98467421c75bf987129bd42c6a4a1f0029
test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol":{"keccak256":"0x44573c76da55c2dbc0a8e4c51dfaa22f53c76a61a1770a3241556fce3229fd85","urls":["bzzr://390173cfcecc45839de17aa4e120df7ab305399909350242c1b2357814320aae"]}},"version":1}
test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol:C 6060604052341561000f57600080fd5b5b60c58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60026000819150809050600080600260008491905060008201548160000155600182015481600101555050839190506000820154816000015560018201548160010155505050505b5600a165627a7a723058206b6facb70a76c5d5e15eeb847c3c69d4bf3babd0ad3d668a232518c8d59f9b970029
test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol":{"keccak256":"0x35046a943ebaef5cf68f9a7cd0cb95a80e1187fde8d85f805caa654d60a1d380","urls":["bzzr://3c1f0758bf260e4bd3e43b8e092d3f333244a7dc96897b3de2010228e76ee030"]}},"version":1}
test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058205e3c2100ad04bee2cdcbad7c1c069cc7d0bd09940f82015eba56e37cab0d51540029
test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol":{"keccak256":"0x99d0b9a5614df5f59f8fbd289ab816cd14d5015d224c5712e43f8d03a2c58893","urls":["bzzr://0dc4f391f4a3d9a17bef4fcc155d19d12c476eb2d4fb1e87c5b1a0d621292fae"]}},"version":1}
test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol:C 6060604052341561000f57600080fd5b5b60c78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600080600080925060029150600090506002838360028393508090506000808296508398508497508591905060008201548160000155600182015481600101555050505050505b5050505600a165627a7a72305820e0aa2111014eca950e80a8e26c229c5e4644f61ebba29d2ff4a5612c317911c30029
test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol":{"keccak256":"0xc962ec4a77a150c925539c91718bd05b11a6252fdb15a784889d58c146741fa7","urls":["bzzr://4caf8f00f246ec1a03f0365e906f0fe03dd26cc00fc3d7f3fef4fd54cf192e48"]}},"version":1}
test_6ce07fc0b5c4cf2bd403cca63fee712fb823b5967379a5271c30c1c45f5f0249.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol:test 6060604052341561000f57600080fd5b5b61022f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14610054578063b3de648b146100d0578063d48092f714610143575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101b8565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b34156100db57600080fd5b6100f160048080359060200190919050506101c6565b6040516020810161010781600084018486610111565b9050809250610129565b600084905061011f8261012e565b8452949350505050565b610138565b6000819050919050565b505060405180910390f35b341561014e57600080fd5b610166600480803515159060200190919050506101d1565b6040516020810161017c81600084018486610186565b905080925061019e565b6000849050610194826101a3565b8452949350505050565b6101ad565b6000819050919050565b505060405180910390f35b600081830190505b92915050565b60008190505b919050565b600081156101ea576101e360036101c6565b90506101fe565b6101f6600360076101b8565b90506101fe565b5b9190505600a165627a7a7230582003f774480b5ff6338754433698cd0d85da504a3b810436fb23718b14b7e833770029
test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"flag","type":"bool"}],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol":{"keccak256":"0xd75051d116119fe5c869e580d82872d9d317df23c2870aaf2f64a68990bb5cc2","urls":["bzzr://27941de02710ffd0e67510373c1c748f45c23e36141550f475cfef3ad133341c"]}},"version":1}
test_6d0c455b0bc56e7a36ec1f7f8d7eb0f4050dddbcb50d7e5174637d53b7fe92c3.sol: ERROR
test_6d5dc35e493a933a4574a77d2926b1bd0e916ebb916120b2c6c9e0a439e95312.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol:C 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60005b905600a165627a7a7230582015012ad5c367a2d7aaebe3a829001c292feccf79a0f083a5e7b92e0b85da3cf30029
test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol":{"keccak256":"0xa1ace900f869abd93529802c398e733c82414c25d6d245cbed871fbd886be7e9","urls":["bzzr://47a8f4bae31fea738b65a504f033efe7b341fc2ffc6d5a2220f3c2b22076bc73"]}},"version":1}
test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol:test 6060604052341561000f57600080fd5b5b60a18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b60026001026001604051808260010260001916815260200191505060405180910390a15b5600a165627a7a72305820bbfcc800933cb64e2c305834762fe66904a480382ebd21b776046d7337e58d710029
test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol":{"keccak256":"0x32e61831915e727faf0b2f46910533ba775402c113c13134d130779071c65fb0","urls":["bzzr://40789883586acbb605c72435071301eff07c7257827892d1b3e9143eab815a71"]}},"version":1}
test_6dd2fb7814bea79c156a0e225f80a56e9889fc6d1ddb36d8c57e710fc02968ff.sol: ERROR
test_6e538601cb9b2dc962344db536d649027ac886e6c5c5baca19f54159ae36b3d6.sol: ERROR
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C1 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058203ba51feeb2b62a9ef2d0957e44cafb34e9bed23ab808775e8c5554906f57dc590029
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":"C1"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":{"keccak256":"0xb3d27729e97a71f38cc2da288bef468c9d8c2a6d69f17d2f5fcf1cedecc4aabd","urls":["bzzr://5d2bcf946c0653a299a75ef972223fc2d449d96b03937e2145a7513630170932"]}},"version":1}
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C2 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206b17e91807ad1b31af4990f68247ddbabf14d1c60f6e6c16d0e47b5f528a97c40029
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":"C2"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":{"keccak256":"0xb3d27729e97a71f38cc2da288bef468c9d8c2a6d69f17d2f5fcf1cedecc4aabd","urls":["bzzr://5d2bcf946c0653a299a75ef972223fc2d449d96b03937e2145a7513630170932"]}},"version":1}
test_6ebff97432ffbfe6b4b6b6102d2e3da7f42b7e43b8ccb65b3ca2d45aadc5d009.sol: ERROR
test_6f0c55e56e4ed325d01bddb1bfbea35b8bfd4aa9d063af8c9986537e6d00af0f.sol: ERROR
test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ff28740070a83c7059de1e040418a9616063684ccfc939c4e97ecc966cd7d4430029
test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol":{"keccak256":"0x97eeaed9ed192fdeebaa0855712a40405ac618ffc0c63280c36563102181c0b2","urls":["bzzr://81678ca22a7284aba1b079fbcd44927bcb2fe197a2948777343c09031950aa94"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol:C 6060604052341561000f57600080fd5b5b60f98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060a9565b60405160208101607181600084018486607a565b90508092506090565b60008490506086826094565b8452949350505050565b609e565b6000819050919050565b505060405180910390f35b600081801560bc576001820191508191505b5b6001820191508191505b5b509190505600a165627a7a723058208513795c5287d7fbddd8fb7c05420259622dc36dcc04ed6ff06c1b0b3b78910b0029
test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"twice","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol":{"keccak256":"0xfdf137bf5891c5e488ee75ff8d0fb2b71decabc35e6e7e39cc5b5829a0eb8016","urls":["bzzr://506c341d45d3c5f8aaad8813fa0759da965843b908b7b25293d899f1b14e9825"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol:test 6060604052341561000f57600080fd5b5b61010d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e146047578063e2179b8e1460ba575b600080fd5b3415605157600080fd5b606e600480803590602001909190803590602001909190505060cc565b60405160208101608281600084018486608b565b905080925060a1565b600084905060978260a5565b8452949350505050565b60af565b6000819050919050565b505060405180910390f35b341560c457600080fd5b60ca60d5565b005b60005b92915050565b60df60cc90505b50565bfe00a165627a7a72305820da5f6c62391269bd3ea46cc6bed770ac383862adbac5ee499bec3754f49a6a440029
test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol":{"keccak256":"0xbd7b0b35fc88f6767b79de864bc0635f1edbaa1062fa25a24ac109191fe0b493","urls":["bzzr://8d4bfec620d2e33467d3cc57a36827b4fe67450d48dd27716d007aa8625eace6"]}},"version":1}
test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol:C 6060604052341561000f57600080fd5b5b60f38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60c560c560c56000806101000a81549077ffffffffffffffffffffffffffffffffffffffffffffffff0219169055600060189054906101000a900467ffffffffffffffff16925060c59250600060186101000a81549067ffffffffffffffff0219169055604f915060c5915060c590505b505050565bfe00a165627a7a7230582050d6ed1902ccdc658c636ff642ce854b4373c146831255f91da17c8aa838f8580029
test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol":{"keccak256":"0x76c3a0d3a40563ab6f512c57a470f5f27cc6c31442e06b6f3cea949228733935","urls":["bzzr://4cd12221e4fa012755cbba658cf9b02f4a0bd3b26204c3f758fdb534deafe859"]}},"version":1}
test_6fe3582eb5c007997298e818d9525fa6e455f55f8e03e02616749b0836386705.sol: ERROR
test_703b13b5c30d168c7baa79c52d1f538fece0ab0ed60896dfe36fddb8f27f7779.sol: ERROR
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:B 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820984b5dfd5fdfa769c69810fe5b0aaa81ee71d3277665df1cc4f706a3516bb8b60029
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":{"keccak256":"0x3562d11acd5ae19fcce965ef3b6206edd7cd41aa2b2362f5115cedd7e92ded77","urls":["bzzr://96597c2082391b7797555643d5664e89ed26d7b2503b0a78dbecd5ddd52e26e0"]}},"version":1}
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:C 6060604052341561000f57600080fd5b5b60ac8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063b3de648b146059575b600080fd5b3415605157600080fd5b60576079565b005b3415606357600080fd5b60776004808035906020019091905050607c565b005b5b565b5b505600a165627a7a72305820d4272f49ad69df6275e012d21f276993d8db4dffc64eb991ef4de118655af8b40029
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":{"keccak256":"0x3562d11acd5ae19fcce965ef3b6206edd7cd41aa2b2362f5115cedd7e92ded77","urls":["bzzr://96597c2082391b7797555643d5664e89ed26d7b2503b0a78dbecd5ddd52e26e0"]}},"version":1}
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a7230582048db00908d72a692329983354a68bc59dc3067054d30c63f18b866806d0b46620029
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":{"keccak256":"0xb6a72a262dcb989934c5dbd053a967a6e322c12a9f1bb0931d2ea6a2295f6e77","urls":["bzzr://a9b7e0ccb2abc44791adb83292917220d0d42c7a2ffec748c04447211e926a33"]}},"version":1}
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test2 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820cf9322f124533028fe4c98c7d47337110b54cc99ebc3a12fd80830ac32dfead70029
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":"test2"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":{"keccak256":"0xb6a72a262dcb989934c5dbd053a967a6e322c12a9f1bb0931d2ea6a2295f6e77","urls":["bzzr://a9b7e0ccb2abc44791adb83292917220d0d42c7a2ffec748c04447211e926a33"]}},"version":1}
test_717f5d86a0ca49ca78be627d314d81f2745713254c4fb3c9a3f43f40dfeff6f3.sol: ERROR
test_71cd60d1a921dc9a16d7142bc6e8babeb8070fdf7b7ce6cb1d462167d5bcf596.sol: ERROR
test_720a0e517a806de6df93efb609ded56e8f76be7a6bc7b48dd715175d90f9491b.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol:test 6060604052341561000f57600080fd5b5b61014d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639f3fab581461003e575b600080fd5b341561004957600080fd5b6100636004808035600019169060200190919050506100b5565b6040516020810161007981600084018486610083565b905080925061009b565b6000849050610091826100a0565b8452949350505050565b6100aa565b6000819050919050565b505060405180910390f35b600060038260006040516020015260405180826000191660001916815260200191505060206040518083038160008661646e5a03f115156100f557600080fd5b5050604051516c01000000000000000000000000026bffffffffffffffffffffffff191690505b9190505600a165627a7a723058206b9f32b3fa4caffe0e9de2309f33c0f8e22bcae6f63a7e65d548fe6c1de968c60029
test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"sha256hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol":{"keccak256":"0xc76cb583fc84777c0d74ecc91eaed560ebd2e96f32ce03b6f5bd4d75f639b53b","urls":["bzzr://f021bd32081b2b75d85c099af1a10211aaab7b6ae564284dfd4bbe62dc9960e3"]}},"version":1}
test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207cf0407dc5e4e3fc4c464038ad79d23a20473582c75eb967182a786de0c5b5a40029
test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol":{"keccak256":"0xbfc20e353d86af6f9ae44ae5a9a9d0872879765e1a362f6fc547b123261ee7b1","urls":["bzzr://1674bf7814ca945ef39a7ab020d07ba5a2e1bb34e60e24c3f4086b59d7be7cf7"]}},"version":1}
test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol:test 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600290505b505600a165627a7a723058207347cda256addb95db7ecafe357c17c3ffbee6a61eb828c2fa6b0d5447a3e0900029
test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol":{"keccak256":"0xc14a079f71636d809d838fcc7976ee41612bc0302c1710208777beb15dfed244","urls":["bzzr://ed6182fa6f6b1d6c3a5cc2712303134ed32dd1f78395b60f9fc2d00d92245b09"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol:C 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820b347122a68d702530a7bd7c75daa66b2e09ef6c19091cbd351bc6357b88b81170029
test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol":{"keccak256":"0x98933ca5f8eb2b9fedea5635bf6f3d2f46077bf96d101326291e67b1f6d1c1e8","urls":["bzzr://b29bc698fd19554753dafa67b15f0bb8722fcaa15c136a61b8ab86966472b3c4"]}},"version":1}
test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol:C 60606040523415600e57600080fd5b5b60988061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000730a0bfc97e48458494ccd857e1a85dc91f7f0046e90505b505600a165627a7a7230582061ac91c9b7ad36c5a0776179bfb1ccd6e5c2b317b537a3e2c40fd1e6d3e856fd0029
test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol":{"keccak256":"0xd30ef454a521c281f09bfcdc2efed94ce5e98a1140b9c53f88f73de252423e41","urls":["bzzr://75017c4ba0bba1fc5257314bfd1e6e2079e9cbae16f2b5266120cfa796adafd8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol:test 60606040525b5b5b60e5806100156000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b905600a165627a7a723058200d4c802ff515058db4452df96679db2ee7b31a6f13f1438c8a904832508fd1510029
test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol":{"keccak256":"0x47d6fc36ed326e098dcf32dbf186e051e312bfb84b9c5a7453f6f2bd731958da","urls":["bzzr://6098fe964869ca2ed8fbf47e0d6acc5bdc6a2214ac1e42557db4c24e83e44e95"]}},"version":1}
test_73508fc7a781d22072adaa767b3e36a341df575fff13821fe9a204eb1122c56e.sol: ERROR
test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol:A 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820b10bb4b2c546e22e0b31e0652237dfc3234746594b344f29997dba4c67b4f8ef0029
test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol":{"keccak256":"0xac060b8cc7c2341271849d7d3565a8de460ca60713a86dc8c4dd8aa3156765d7","urls":["bzzr://5599b230b44b97c56099f2a3f1d590b3bc9c76a170c4dad190078f6f801d9cb3"]}},"version":1}
test_73842527d9eb3b1222a8361a1f3764499bfdc1ec047a1dcd86409cd5a9210a39.sol: ERROR
test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol:test 60606040523415600e57600080fd5b5b60938061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063e2179b8e146059575b600080fd5b3415605157600080fd5b60576061565b005b605f6064565b005b5b565b5b5600a165627a7a723058208a647fb6fe118b44da55baa100405303428b4e91963ae86bc92e81e47ea052a20029
test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol":{"keccak256":"0x941a19e9e128a1807c7a02ee73c6d1066dd4671690f6b4fad47132e2719a662b","urls":["bzzr://55cc494849cbc939eadfde901e5e1fa43b9c06f562b4ec6d286943240032e59d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol:c 6060604052341561000f57600080fd5b5b61018a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311d7dd641461003e575b600080fd5b341561004957600080fd5b610094600480806101000190919080359060200190820180359060200191909192908060a001909190803590602001909190803590602001909190803590602001909190505061010a565b604051606081016100aa816000840184886100d6565b90506100bb816020840184876100d6565b90506100cc816040840184866100d6565b90508094506100ee565b60008490506100e4826100f3565b8452949350505050565b6100fd565b6000819050919050565b5050505060405180910390f35b6000806000898660088110151561011d57fe5b60200201359250888886818110151561013257fe5b905060200201359150868460058110151561014957fe5b602002013590505b97509750979450505050505600a165627a7a72305820e942f49ff56504990cffdf1b6f1fb79d83f48188ffe33e89e7bfce2bec92fca30029
test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256[8]"},{"name":"b","type":"uint256[]"},{"name":"c","type":"uint256[5]"},{"name":"a_index","type":"uint256"},{"name":"b_index","type":"uint256"},{"name":"c_index","type":"uint256"}],"name":"test","outputs":[{"name":"av","type":"uint256"},{"name":"bv","type":"uint256"},{"name":"cv","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol":{"keccak256":"0xb09795e95190044ab3bd8e66a3491a8379094333e22db9a566f35c325436f089","urls":["bzzr://a4a4f7727dfdb7caabb9d0a4f314c806f3e8c1e65664010ddc810e721a1ad27d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Receiver 6060604052341561000f57600080fd5b5b60f68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146047578063cba2534f1460a3575b600080fd5b3415605157600080fd5b605760b9565b60405160208101606b816000840184866074565b9050809250608a565b6000849050608082608e565b8452949350505050565b6098565b6000819050919050565b505060405180910390f35b60b7600480803590602001909190505060bf565b005b60005481565b806000819055505b505600a165627a7a7230582026f7d28a93981118aabd3f65e6193a088fd4b12d3acf1688bb7abae0dcf0dccb0029
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":{"keccak256":"0xcdd280f1e9bbeb2a4f54e3995d6e72e76d58dbd2d3e11c6955ec56b4cd12186d","urls":["bzzr://84183c20836ed2874ad6f21af911e22015763053b3015ccec8c369422b9512ff"]}},"version":1}
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Sender 60606040525b5b5b6102c3806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146100495780639bfcdaa1146100ae575b600080fd5b341561005457600080fd5b61005c610137565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100e5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061013d565b604051602081016100fb81600084018486610105565b905080925061011d565b600084905061011382610122565b8452949350505050565b61012c565b6000819050919050565b505060405180910390f35b60005481565b60008060405180807f726563656976652875696e7432353629000000000000000000000000000000008152506010019050604051809103902090508273ffffffffffffffffffffffffffffffffffffffff166002827c010000000000000000000000000000000000000000000000000000000090049060176040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff16815260200191505060006040518083038185886125ee5a03f29350505050508273ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561027357600080fd5b6102c65a03f1151561028457600080fd5b5050506040518051905091505b509190505600a165627a7a723058206c65db30d9abcb7801a88baa85f426c11f9048e5f492929670e5420395dca7e00029
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":"Sender"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":{"keccak256":"0xcdd280f1e9bbeb2a4f54e3995d6e72e76d58dbd2d3e11c6955ec56b4cd12186d","urls":["bzzr://84183c20836ed2874ad6f21af911e22015763053b3015ccec8c369422b9512ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol:A 6060604052341561000f57600080fd5b5b60e98061001e6000396000f30060606040523615603d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de30146057575b3415604757600080fd5b60555b60016000819055505b565b005b3415606157600080fd5b606760b3565b60405160208101607b816000840184866084565b9050809250609a565b6000849050609082609e565b8452949350505050565b60a8565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a7230582067c5707fc6a656317098fe080f77f657eefd89e3b04bddbf611d62f8db740be20029
test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol":{"keccak256":"0x801c8ed4162a6a410d7897f5593921770869aefbbb5264ffeeaddef77b2a2984","urls":["bzzr://f6e27032b5caf26a8af785a2ad5f08571fd79947672beb756dac23e6a02f78aa"]}},"version":1}
test_74db2db87e27c8ab26e0fcdbdd7bfd09598004610ab95a1cb74ce3faf898478a.sol: ERROR
test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol:test 60606040523415600e57600080fd5b5b608a8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b605b565b600080905090565b5b5600a165627a7a723058206d7f7070ebc492a76188548f8e8118f18d7f4c8970a286cf846bf6b7c977f3660029
test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol":{"keccak256":"0xb3aa4d03d5624262a6a91d2405b544c93379ea8c63be618f90d00282f1f3eefe","urls":["bzzr://4a2164cdc5b7432df3e39410a74af71c5163e255d4119b173f1eefc5ef2271fa"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:A 6060604052341561000f57600080fd5b5b61002b61004d6401000000000261010d176401000000009004565b61004661006064010000000002610123176401000000009004565b5b5b61009a565b602060008082825417925050819055505b565b61007b61009764010000000002610120176401000000009004565b60001561009457600160008082825417925050819055505b5b5b565b5b565b610173806100a96000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de301461005f5780639942ec6f146100c4578063aaf05f3d146100d9578063c27fc305146100ee575b600080fd5b341561006a57600080fd5b610072610103565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d761010d565b005b34156100e457600080fd5b6100ec610120565b005b34156100f957600080fd5b610101610123565b005b6000805490505b90565b602060008082825417925050819055505b565b5b565b61012b610120565b60001561014457600160008082825417925050819055505b5b5b5600a165627a7a7230582022ac3c0626133b8ff03c9052541b07386d30664017d664022d86b22050fb43430029
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f1","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":{"keccak256":"0x267be9ffd86442c53b9f81d6d143523ca8d24aa8c62630584e8876c2a7225d0b","urls":["bzzr://ecaebda52f183719a7f105e9cbdb73699d6d096c680e9460cf1a861b4dd510d8"]}},"version":1}
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:C 60606040525b61002061004264010000000002610178176401000000009004565b61003b61005664010000000002610154176401000000009004565b5b5b6100a1565b61400060008082825417925050819055505b565b61007161008d64010000000002610140176401000000009004565b60001561008a57600160008082825417925050819055505b5b5b565b61030060008082825417925050819055505b565b6101b8806100b06000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de301461006a5780639942ec6f146100cf578063aaf05f3d146100e4578063c27fc305146100f9578063c3f902021461010e575b600080fd5b341561007557600080fd5b61007d610123565b604051602081016100938160008401848661009d565b90508092506100b5565b60008490506100ab826100ba565b8452949350505050565b6100c4565b6000819050919050565b505060405180910390f35b34156100da57600080fd5b6100e261012d565b005b34156100ef57600080fd5b6100f7610140565b005b341561010457600080fd5b61010c610154565b005b341561011957600080fd5b610121610178565b005b6000805490505b90565b602060008082825417925050819055505b565b61030060008082825417925050819055505b565b61015c610140565b60001561017557600160008082825417925050819055505b5b5b565b61400060008082825417925050819055505b5600a165627a7a723058204db2cef20f706ae1f93d64c5f3a514a53bb8fea3c00c70198338331ce02802030029
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f1","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f4","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":{"keccak256":"0x267be9ffd86442c53b9f81d6d143523ca8d24aa8c62630584e8876c2a7225d0b","urls":["bzzr://ecaebda52f183719a7f105e9cbdb73699d6d096c680e9460cf1a861b4dd510d8"]}},"version":1}
test_75b3338ba7ad75ef1f7b93fb8e6c34cc4a41e1d3be841b27d7970af76df8627e.sol: ERROR
test_75c8c5aa9e148c6e32d03742af682d75b0dab34d8ac53923ed6823f5a3859929.sol: ERROR
test_75e5c789160da2a41ad6571a2ed9658da799e3b2df88462bb23e5528e54eab70.sol: ERROR
test_75e7e2d9e3094de9cc1729c487b3feea5b639d9a49f6d0f5aab20736db605aa4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:C 60606040525b5b5b61038c806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14610054578063b3de648b146100b9578063dc9031c414610142575b600080fd5b341561005f57600080fd5b6100676101cb565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da60048080359060200190919050506101d1565b604051602081016100f0816000840184866100fa565b9050809250610112565b600084905061010882610117565b8452949350505050565b610137565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b341561014d57600080fd5b610163600480803590602001909190505061020c565b6040516020810161017981600084018486610183565b905080925061019b565b6000849050610191826101a0565b8452949350505050565b6101c0565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60005481565b60008060008154809291906001019190505550816101ed610307565b6040518091039082f080151561020257600080fd5b905090505b919050565b60006104008210156102f0573073ffffffffffffffffffffffffffffffffffffffff1663dc9031c4600184036000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016102828160008401848661028c565b90508092506102a4565b600084905061029a826102a9565b8452949350505050565b6102b3565b6000819050919050565b5050602060405180830381600087803b15156102ce57600080fd5b6102c65a03f115156102df57600080fd5b505050604051805190509050610302565b6102fa60006101d1565b9050610302565b5b919050565b604051604a8061031783390190560060606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a723058209a5eeae5217b90ed67c458c6225ccc8b077be97af83e0774576a6f9e3cdf054c0029a165627a7a7230582062bf00d9784b74e3d4be55858377ae63698f32c85523b4d721b5709d9d14add30029
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"depth","type":"uint256"}],"name":"stack","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":{"keccak256":"0x66ea93f4462940adec0f68ab14628d1025198728b8f6be2c7adc0de029a1bc10","urls":["bzzr://02abd28704984b45bf4eb16921dd2a27ab6e12a60eb7ca5050e0d5e155947dd2"]}},"version":1}
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:D 60606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a723058209a5eeae5217b90ed67c458c6225ccc8b077be97af83e0774576a6f9e3cdf054c0029
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":{"keccak256":"0x66ea93f4462940adec0f68ab14628d1025198728b8f6be2c7adc0de029a1bc10","urls":["bzzr://02abd28704984b45bf4eb16921dd2a27ab6e12a60eb7ca5050e0d5e155947dd2"]}},"version":1}
test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol:C 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a7230582065136c3d4159c84c7aa0d686f54da1282231603cf1ea3457edd650a68b38b01e0029
test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol":{"keccak256":"0xabc0f1073efe0ce6db260b0724a1b76a9d4401ef35e7f397ddfff1558915ba9b","urls":["bzzr://fc208e66cda473e83e5cf98bc1d5630ccb2bce26c997d0344da4c469d8c3bf50"]}},"version":1}
test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol:C 60606040523415600e57600080fd5b5b60838061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60555b50565bfe00a165627a7a72305820897dc340286fa2198e88c2e392ffbb1382f77ea6a9d448892d43b53c888fa29f0029
test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol":{"keccak256":"0x6febd3a10a9ade530246d6545e8a04772124e9f9b60768202426a4ff24abef4f","urls":["bzzr://de092c47a3a2235cd9a16851970721f57ccf60d2567f4b057c7c57f28dda0044"]}},"version":1}
test_7638cc89d82d8e3b1a5bf0a730297b26b394e3f712fa26c716de6cc67dbabe04.sol: ERROR
test_7689b2ca346d2b84730baf1fde76378cb5090fbd233f9a3b245041cb887b3ddc.sol: ERROR
test_771254df8dbe951498282fcc4a180f4e813d37eb78db61389248c2efeb80fb43.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol:test 6060604052341561000f57600080fd5b5b6102018061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14610054578063b3de648b146100d0578063e2179b8e14610143575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101a8565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b34156100db57600080fd5b6100f160048080359060200190919050506101b6565b6040516020810161010781600084018486610111565b9050809250610129565b600084905061011f8261012e565b8452949350505050565b610138565b6000819050919050565b505060405180910390f35b341561014e57600080fd5b6101566101c1565b6040516020810161016c81600084018486610176565b905080925061018e565b600084905061018482610193565b8452949350505050565b61019d565b6000819050919050565b505060405180910390f35b600081830190505b92915050565b60008190505b919050565b60006101cf600360076101a8565b90505b905600a165627a7a72305820148104461b88417ed27bcc31f0d7683c2fc3b5cac8017fb9da4ee426aa456d1b0029
test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol":{"keccak256":"0xc29642058e23aa15de30f53a1a76ac3f55df6f4ed40bb886defc828f1771e1ac","urls":["bzzr://75cc4c7b47b0e336272a82f2f0f188762decef0da2ed253f3691f06512de5540"]}},"version":1}
test_77b85f4269f81fa35010a4afd31348ab641b9ff29ad2428721f15055cd3ce6e6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol:c 6060604052341561000f57600080fd5b5b61032b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a1b9e9f1461005f5780631ab06ee5146100d25780631f7b6d32146101505780639507d39a146101b5575b600080fd5b341561006a57600080fd5b6100806004808035906020019091905050610228565b60405160208101610096816000840184866100a0565b90508092506100b8565b60008490506100ae826100bd565b8452949350505050565b6100c7565b6000819050919050565b505060405180910390f35b34156100dd57600080fd5b6100fc6004808035906020019091908035906020019091905050610249565b604051602081016101128160008401848661011c565b9050809250610134565b600084905061012a82610139565b8452949350505050565b610145565b60008115159050919050565b505060405180910390f35b341561015b57600080fd5b610163610279565b6040516020810161017981600084018486610183565b905080925061019b565b6000849050610191826101a0565b8452949350505050565b6101aa565b6000819050919050565b505060405180910390f35b34156101c057600080fd5b6101d66004808035906020019091905050610286565b604051602081016101ec816000840184866101f6565b905080925061020e565b600084905061020482610213565b8452949350505050565b61021d565b6000819050919050565b505060405180910390f35b60008160008181805490500191508161024191906102ae565b90505b919050565b60008160008481548110151561025b57fe5b906000526020600020900160005b5081905550600190505b92915050565b6000808054905090505b90565b6000808281548110151561029657fe5b906000526020600020900160005b505490505b919050565b8154818355818115116102d5578183600052602060002091820191016102d491906102da565b5b505050565b6102fc91905b808211156102f85760008160009055506001016102e0565b5090565b905600a165627a7a723058203750a33a36d2641dc96e8eab8f95d6b24e23c84446f1690e6a2ef012471599ba0029
test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"enlarge","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"length","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol":{"keccak256":"0x10d5ec99bbc7924c0f9d50262ba8eea548f29bc4455e01051d144d82b99752c3","urls":["bzzr://c6df8e1db711329704af3f1c53bedaf67b043aa7469ff12afb8e865eb19fb6fb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol:test 6060604052341561000f57600080fd5b5b61017a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146100495780634ee892c7146100b0575b600080fd5b341561005457600080fd5b61005c61012e565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100dc60048080359060200190919080351515906020019091905050610145565b604051602081016100f2816000840184866100fc565b9050809250610114565b600084905061010a82610119565b8452949350505050565b610123565b6000819050919050565b505060405180910390f35b6000600361013e600c6001610145565b1490505b90565b60005b929150505600a165627a7a7230582008b8f07745d22b0bf08b4af6ed74698336368f7f627d5f4cb6c164b7009329690029
test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol":{"keccak256":"0x832b5098163c6521101acce54fe19f83e276683799c8e367c1bf53b814e92656","urls":["bzzr://c3259e872256f4f3adc9750373c61f11cfc756271d280ec5c967f18059db4c55"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820128244c144718a8a9554d3fd410d4f2df6b2267bb047faf3dd996afca1c4debe0029
test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"author":"Lefteris","methods":{"mul(uint256,uint256)":{"author":"John Doe","details":"Mul function"}},"title":"Just a test contract"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol":{"keccak256":"0x2cd8411662ee8a9c5dd12b6002833cf78b982b26d5bd0065632ae0475a6da657","urls":["bzzr://9f258f2916e84a1c0e83d20a5422270443a2c3c5c369a721fd9ddbfebfe8be95"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol:test 6060604052341561000f57600080fd5b5b6101248061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600080829050836000808282540192505081905550838102905060005481016001600082825402925050819055506007600160008282540192505081905591505b50929150505600a165627a7a7230582045c98aa69d54f56f30836000d8a82d235ad24f1fc9f61c060405a54541d3caa60029
test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"w","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol":{"keccak256":"0xcafe3c66c739de5872b64d10c103ffaa460767643fef7700f6f404c40a89f1ee","urls":["bzzr://d2927aabaf5938286d8a0ef31a457a75fac65b49a90bc42230cddcda60d14225"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol:C 6060604052341561000f57600080fd5b5b61022b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636063214e146100545780637f5dfda4146100bb578063ffbb17b514610122575b600080fd5b341561005f57600080fd5b610067610189565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce6101b0565b604051602081016100e4816000840184866100ee565b9050809250610106565b60008490506100fc8261010b565b8452949350505050565b610117565b60008115159050919050565b505060405180910390f35b341561012d57600080fd5b6101356101d8565b6040516020810161014b81600084018486610155565b905080925061016d565b600084905061016382610172565b8452949350505050565b61017e565b60008115159050919050565b505060405180910390f35b6000806005905080600181111561019c57fe5b8160018111156101a857fe5b1491505b5090565b600080600590508060018111156101c357fe5b8160018111156101cf57fe5b141591505b5090565b600080600090508060018111156101eb57fe5b8160018111156101f757fe5b1491505b50905600a165627a7a72305820c09d7ba25e44d23a1426832a885375864507cdd2b387a18bc7195cf5c76d31400029
test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_eq","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_neq","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_eq_ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol":{"keccak256":"0x4778e3f23dc0a89986f52672791cee700ba8d277db904b349730104b8c17b560","urls":["bzzr://65b4194f5bc781174ec85b51e1f4d819e1f82e62309363cfd3247709ec398acf"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:A 60606040523415600e57600080fd5b5b5b5b603680601e6000396000f30060606040525b600080fd00a165627a7a7230582058b53738e85d775fe854a43f32feb3e1b5068a44e79c7f6b6052e1a0fe25a0330029
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":{"keccak256":"0xf829dbc91c75754cbb401ac83874fdff988d9ffaa8f98459e8f39cf6b59f3252","urls":["bzzr://b2bf12bc0dde1034d7173fd38cef5f8ba902e1af345de0b10bd4531812ea40a8"]}},"version":1}
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:B 60606040525b5b5b60ce806100156000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f446c1d014603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b600060ff82169050919050565b505060405180910390f35b60005b905600a165627a7a723058200f306324903d1ee08b2330d4e90dd1535f74d76367c4313a9aa7384e2e5845ba0029
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"A","outputs":[{"name":"r","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":{"keccak256":"0xf829dbc91c75754cbb401ac83874fdff988d9ffaa8f98459e8f39cf6b59f3252","urls":["bzzr://b2bf12bc0dde1034d7173fd38cef5f8ba902e1af345de0b10bd4531812ea40a8"]}},"version":1}
test_792029307df43a239fa224e88910e13af4873463218f0e33b6ccf4bdbaa142b9.sol: ERROR
test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c9691430666de16575fd5e0f3883b7cb5ddd05d1b0120989f6708cf386bd20840029
test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"components":[{"name":"x","type":"uint256[2]"}],"indexed":false,"name":"t","type":""},{"components":[{"name":"a","type":"uint256"},{"components":[{"name":"x","type":"uint256[2]"}],"name":"sub","type":"[]"},{"name":"b","type":"bytes"}],"indexed":false,"name":"s","type":""}],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol":{"keccak256":"0xe1803b2d3a17654cc65ac9ecfe768707458e3596641646c8f3367eada24f87fb","urls":["bzzr://dd747761ed076bb4d26cd7c6bf35ffcb7f1ae32d0aa5cddc4dba9f621fa706a8"]}},"version":1}
test_796ab0e9d5008f554b8ed5b124782adcc7013591daecea7608a22b9fa75d6783.sol: ERROR
test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol:test 60606040523415600e57600080fd5b5b60938061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60008190505b50505600a165627a7a72305820b9f25faf1f7bb8e52881bb62a18e283237437c89965a7ebe6a768eb47bb68b970029
test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol":{"keccak256":"0x7be3a74d94f52eac35e3fdc17e6091e498edb09425959ea9f867f0e4e1c91032","urls":["bzzr://a8a6b90b154a8ea9d3caae3d4e3b9583217e7712d6dd26d13f5c5cafd4e07f24"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol:test 6060604052610049640100000000026100b0176000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550341561004457600080fd5b610052565b60005b92915050565b60e5806100606000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b60005b929150505600a165627a7a723058206b3b7a5146cb5540288913af594092cb7fa50f91e2dff9d2a4f99986b526e93f0029
test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol":{"keccak256":"0xc9c70824e632dcab07ebd867ebfd5e4c86885955eff2e0b16b280052b5fa201d","urls":["bzzr://faec006d863eaedcf14da465d30f0ddc15b195d2f0c276d629dfa628a4744bf6"]}},"version":1}
test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol:Foo 60606040526112346001026000906000191690553415601d57600080fd5b5b603680602b6000396000f30060606040525b600080fd00a165627a7a72305820fda7bf609dd1ac99625a1ab897cf3093550583edf305e27706eebd62807749560029
test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol":"Foo"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol":{"keccak256":"0x63ca4a2e22c4c8c028d44ca31ae277ada92bab9ff0950677152658a3ddf0e5ff","urls":["bzzr://c5ea20eff03ff219ed98042f880b7b881eafbbd0644767a22c3524ca91d89258"]}},"version":1}
test_79e0cbf3cb31f5f08eb949b351fb33795943895ef3f7ed1574dffdda3d621601.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol:C 6060604052341561000f57600080fd5b5b6102498061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a68ff3ed14610049578063f8a8fd6d146100bf575b600080fd5b341561005457600080fd5b61006d600480803560ff16906020019091905050610124565b604051602081016100838160008401848661008d565b90508092506100a5565b600084905061009b826100aa565b8452949350505050565b6100b4565b6000819050919050565b505060405180910390f35b34156100ca57600080fd5b6100d2610130565b604051602081016100e8816000840184866100f2565b905080925061010a565b60008490506101008261010f565b8452949350505050565b610119565b6000819050919050565b505060405180910390f35b6000600190505b919050565b600080600590503073ffffffffffffffffffffffffffffffffffffffff1663a68ff3ed826000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020810161019e816000840184866101a8565b90508092506101c0565b60008490506101b6826101c5565b8452949350505050565b6101e0565b600060028210600081146101d8576101da565bfe5b50919050565b5050602060405180830381600087803b15156101fb57600080fd5b6102c65a03f1151561020c57600080fd5b5050506040518051905091505b50905600a165627a7a723058206f06c51d78a21353374c04e6e0dd0b434a2ce9ad453e585aadcd1227304f19a80029
test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint8"}],"name":"tested","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol":{"keccak256":"0xe6514a15119af790eba2d74e3d278ccc8381172823c88141e4fc0441dd9a36a1","urls":["bzzr://f0540f09fa9e5fb4e201e3a908593a7c431d96927375961858fe4ba016f59c95"]}},"version":1}
test_7a66854f1a4c4a756dc4f2e7e6d12dce162fcb6bc835e7235db6295e967c5d88.sol: ERROR
test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol:test 6060604052341561000f57600080fd5b5b60ce8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a0b2b43b14603d575b600080fd5b3415604757600080fd5b609b6004808035806c0100000000000000000000000090049068010000000000000000900463ffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff169091602001909192905050609d565b005b5b50505600a165627a7a723058206eb8aae0825d8a913a236197ad91c6bf51f68683baf2ac29f70f9916efbf11c00029
test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"function"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol":{"keccak256":"0x6fbe8bf66f6b0e60f0bc749cba74435133cb4370422d2143e7d9979a992a1fbb","urls":["bzzr://4248ee5f53fbe7762415c42657b5907945657c8d016e62492a7242ba13b8d598"]}},"version":1}
test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol:test 6060604052341561000f57600080fd5b5b60b08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b60056001026004600102600360010260026001026001604051808260010260001916815260200191505060405180910390a45b5600a165627a7a72305820d4a0634baf4f7273b54c000b1c54efec24e9f9cbb6b9d497c50bac0f845580c20029
test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol":{"keccak256":"0x4623e899586027f56b3465610ce35fbc5fd17986e08dedf2fe7945b445a81490","urls":["bzzr://87d3f790d7257a81c1cb38b6cfcbc9565b2caabe493e0b5133161958737595f0"]}},"version":1}
test_7aec2bb3b46f9a4caae14b6efb3d41bdc838301cfc6fe3b1c425e41f976f8c58.sol: ERROR
test_7b8131833f67aa9adb951de9f46f183504be5b74e95ad033c2f0d1a1c511d64f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol:C 6060604052341561000f57600080fd5b5b6101958061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806342dad49e1461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060179050600036600091906100bb9291906100c4565b50601890505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010557803560ff1916838001178555610133565b82800160010185558215610133579182015b82811115610132578235825591602001919060010190610117565b5b5090506101409190610144565b5090565b61016691905b8082111561016257600081600090555060010161014a565b5090565b905600a165627a7a723058204b2d4815a386c056d7e89f3d90c967c06f89837c146285617ec99271aaf1cace0029
test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"save","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol":{"keccak256":"0xee1996c962fdcaace6bf45a919479b8bf33d1070436bee9bdd5cd1bd10538441","urls":["bzzr://a5bf070225c81fed78aaecedf1b685a0bc4080e52e8c7971c50812d2d606de7a"]}},"version":1}
test_7bd353d620264a707009d27ac4590689c81f0a3c4f60780422ebfd4d36595954.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 192)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 192)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol:Test 6060604052341561000f57600080fd5b5b6107a28061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806386d5c4be14610049578063975057e714610108575b600080fd5b341561005457600080fd5b61005c6101c7565b60405160c081016100728160008401848b6100d1565b90506100838160208401848a6100d1565b9050610094816040840184896100d1565b90506100a5816060840184886100d1565b90506100b6816080840184876100d1565b90506100c78160a0840184866100d1565b90508097506100e9565b60008490506100df826100ee565b8452949350505050565b6100f8565b6000819050919050565b5050505050505060405180910390f35b341561011357600080fd5b61011b610420565b60405160c081016101318160008401848b610190565b90506101428160208401848a610190565b905061015381604084018489610190565b905061016481606084018488610190565b905061017581608084018487610190565b90506101868160a084018486610190565b90508097506101a8565b600084905061019e826101ad565b8452949350505050565b6101b7565b6000819050919050565b5050505050505060405180910390f35b6000806000806000806101d8610628565b60016000800160006101000a81548160ff021916908360ff1602179055506002600060010160000160006101000a81548160ff021916908360ff1602179055506003600060010160000160016101000a81548161ffff021916908361ffff160217905550600460006001016001018190555060056000600301600060028110151561025f57fe5b602091828204019190065b6101000a81548160ff021916908360ff16021790555060066000600301600160028110151561029557fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055506000606060405190810160405290816000820160009054906101000a900460ff1660ff1660ff16815260200160018201606060405190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900461ffff1661ffff1661ffff16815260200160018201548152505081526020016003820160028060200260405190810160405280929190826002801561039f576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116103685790505b5050505050815250509050806000015160ff16965080602001516000015160ff16955080602001516020015161ffff1694508060200151604001519350806040015160006002811015156103ef57fe5b602002015160ff1692508060400151600160028110151561040c57fe5b602002015160ff1691505b50909192939495565b600080600080600080610431610628565b6001816000019060ff16908160ff1681525050600281602001516000019060ff16908160ff1681525050600381602001516020019061ffff16908161ffff168152505060048160200151604001818152505060058160400151600060028110151561049857fe5b602002019060ff16908160ff16815250506006816040015160016002811015156104be57fe5b602002019060ff16908160ff1681525050806000808201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548161ffff021916908361ffff160217905550604082015181600101555050604082015181600301906002610562929190610659565b509050506000800160009054906101000a900460ff1660ff169650600060010160000160009054906101000a900460ff1660ff169550600060010160000160019054906101000a900461ffff1661ffff1694506000600101600101549350600060030160006002811015156105d357fe5b602091828204019190065b9054906101000a900460ff1660ff1692506000600301600160028110151561060257fe5b602091828204019190065b9054906101000a900460ff1660ff1691505b50909192939495565b60c060405190810160405280600060ff1681526020016106466106f3565b815260200161065361071c565b81525090565b826002601f016020900481019282156106e25791602002820160005b838211156106b357835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610675565b80156106e05782816101000a81549060ff02191690556001016020816000010492830192600103026106b3565b505b5090506106ef9190610746565b5090565b606060405190810160405280600060ff168152602001600061ffff168152602001600081525090565b60408051908101604052806002905b600060ff1681526020019060019003908161072b5790505090565b61077391905b8082111561076f57600081816101000a81549060ff02191690555060010161074c565b5090565b905600a165627a7a72305820091cd980c5c6bc9a57eecbe588dbf8bd21efb6302f6db19179586ce867aef9180029
test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"load","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"a1","type":"uint256"},{"name":"a2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"store","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"a1","type":"uint256"},{"name":"a2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol":{"keccak256":"0xd668c2f655c86afac43ba9680506e0552cdba316675d71741f07499432b85318","urls":["bzzr://7dc4e664128840dd215fde191b37fb2be02edad3ddc44b9a0f381cc14af321f0"]}},"version":1}
test_7c1fb5ce4054fd72dfecd1ed9201013689172cfea44ea29c7c137beea22b46e3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7c71e9f30851ab414e21b54a19c2a22dc846c1744fbf07fd4d3cdc03220727ed.sol: ERROR
test_7ca8cf1729a005c314f4529a53ea64fb43fe45e5793f8ad8c8f66c52ad07810b.sol: ERROR
test_7cd7d4cbb01ebeb9999dbcadad371b0505035955d14405ee65bc76e48ded9bc6.sol: ERROR
test_7d06d30023684f5b69d58f6c26e14495cc5dfa42c83a73099a5e3d9ab00ce1fd.sol: ERROR
test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol:test 60606040523415600e57600080fd5b5b608e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000691234567890123456789090505b505600a165627a7a72305820fcc8f599da30106cbaf078a789caa18f686518a721686551137f393bc3395cce0029
test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol":{"keccak256":"0x170be5c7d98e91752acea280cd62312bc37fa68941d67cd4db4195a9c8b4e71a","urls":["bzzr://e3f968841f1598cf68beb4050d86dd3da1f59cef1c49b2f7c045df0f5b3d89c2"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806388b7a17c14603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b60005b9190505600a165627a7a72305820379e114a7057a6051e5f780849cc8fbf2c90acf4576fcd59a8e34e16437e17940029
test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName(bytes32)":{"notice":"This is a test function"}}}},"settings":{"compilationTarget":{"test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol":{"keccak256":"0xce5f77dae67f923f51273ec31b5704576226998f65bb6fb45b8a5dc83855c366","urls":["bzzr://39bbcf70f48878b34121de1b0fa06a9ee39b8d03c947b405cc901d18a8940d88"]}},"version":1}
test_7d30e35844e1778766ec6bb49861dc45c243e9764af42f3ed378cf234e4410cb.sol: ERROR
test_7d79c8c3c888fcb103c1bde29c4e54bfebde4fad2d04b659304255a32deed30c.sol: ERROR
test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol:test 60606040523415600e57600080fd5b5b60968061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60008160030a90505b50505600a165627a7a72305820117ed4a004665437bd1f358d137822ce6c6940c8c0d02bddc17d02011aaa183a0029
test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol":{"keccak256":"0xe05840b06339deff14012685e3194cfe16e95ab29d8c643a8a6489720e6721a6","urls":["bzzr://8eb9efbbb7805c1105bd210388e89ce25674b44d944ace6ecbb135ee662f121d"]}},"version":1}
test_7df6f23cceb2db050dbe6d555a3a57ad9eccb93244c18704d8837fa502e4b6df.sol: ERROR
test_7e0f395f2250803f6b0236bf600c78464f26d8671f3c045b6706725dcd7d4dfb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol:c 6060604052341561000f57600080fd5b5b6105d88061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806352efea6e14610049578063f8a8fd6d146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c16101ed565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600060076001816101249190610494565b60008161013191906104c6565b5060006001600381548110151561014457fe5b906000526020600020906003020160005b50600260038110151561016457fe5b0160005b50600080815260200190815260200160002081905550600080600381548110151561018f57fe5b90600052602060002090605a020160005b506002605a811015156101af57fe5b0160005b50600080815260200190815260200160002081905550600080816101d791906104c6565b6001816101e49190610494565b50600790505b90565b600060076001816101fe9190610494565b60008161020b91906104c6565b5060026000600381548110151561021e57fe5b90600052602060002090605a020160005b506002605a8110151561023e57fe5b0160005b506000808152602001908152602001600020819055506000600381548110151561026857fe5b90600052602060002090605a020160005b506000600181548110151561028a57fe5b90600052602060002090605a020160005b5090605a6102aa9291906104f8565b506002600160038154811015156102bd57fe5b906000526020600020906003020160005b5060026003811015156102dd57fe5b0160005b506000808152602001908152602001600020819055506001600281548110151561030757fe5b906000526020600020906003020160005b5060018081548110151561032857fe5b906000526020600020906003020160005b509060036103489291906104fd565b506000600181548110151561035957fe5b90600052602060002090605a020160005b506002605a8110151561037957fe5b0160005b50600080815260200190815260200160002054610100600060038154811015156103a357fe5b90600052602060002090605a020160005b506002605a811015156103c357fe5b0160005b506000808152602001908152602001600020546101006001808154811015156103ec57fe5b906000526020600020906003020160005b50600260038110151561040c57fe5b0160005b506000808152602001908152602001600020546101006001600381548110151561043657fe5b906000526020600020906003020160005b50600260038110151561045657fe5b0160005b506000808152602001908152602001600020540217021702179050600160006104839190610502565b6000806104909190610527565b5b90565b8154818355818115116104c1576003028160030283600052602060002091820191016104c0919061054c565b5b505050565b8154818355818115116104f357605a0281605a0283600052602060002091820191016104f29190610578565b5b505050565b505090565b505090565b5080546000825560030290600052602060002090810190610523919061054c565b5b50565b50805460008255605a02906000526020600020908101906105489190610578565b5b50565b61057591905b80821115610571576000818161056891906105a4565b50600301610552565b5090565b90565b6105a191905b8082111561059d576000818161059491906105a8565b50605a0161057e565b5090565b90565b5050565b50505600a165627a7a72305820e57cc168e45b7539c5f9d8ab04dfa29138a71461b1e3a86db9b02cf5284fb7f00029
test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol":{"keccak256":"0x38fed72d5e9d4c3851f9129443e18fd2cabd2c2b68335aa927a205133d83d191","urls":["bzzr://c44ca766c4abba7f7b8ef8d8e1ec1ce9a28bca3ffe815d6d18ef567b30cf8ad3"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol:A 606060405260016000556002600155341561001957600080fd5b5b60d0806100286000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060015490505b905600a165627a7a72305820cefca8a679435f1f16b43b8dbe3d3c18f4262f7fa833c64707cb18bd5204aa3b0029
test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol":{"keccak256":"0x3c3ffe1a18ae5d8a976bd00ad88b67dee1e3fea8184861283f154aa4a96471ee","urls":["bzzr://e5784abc6aef196c567b7241846cf4dc59e4b47b86c8b46104d2b7d9c5ab3f61"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol:test 6060604052341561000f57600080fd5b5b60f48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c040622614603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060ff60000360030b905060ff8160070b12151560ba576000915060c4565b8060070b60000391505b50905600a165627a7a723058209d55dd7aa422c192f0c7c385c0818de951c562a6637a85cb3c1b169096816e670029
test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol":{"keccak256":"0x92fffc7fb7a1b719e26644ec59686231f188ce4fefc61a2d8d59b8db4809b738","urls":["bzzr://0423380c80550194f4a35cff9ee74636e32224a3e5427caa3ddc22ab1c720eab"]}},"version":1}
 conv uint256 -> uint256
test_7f365e5183f7f44816de35d13ce95c3fe5c802c4a51b166c8d5f510e710e8d6f.sol: ERROR
test_7f60a872013c48e8f73a3e4fdf5f7ab049160b563f2efb7c8d414dcf2eb1848d.sol: ERROR
test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol:test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b601273ffffffffffffffffffffffffffffffffffffffff1660405180807f6162630000000000000000000000000000000000000000000000000000000000815250602001905060006040518083038160008661646e5a03f1915050505b5600a165627a7a72305820083b967140d4e84099bc2d8c82f73079c734c0ae9f63a95715c93a5b8bff6e420029
test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol":{"keccak256":"0x85300fe8c7a6ee376d535622ebd64cf2a953e662e500a0cea1c8af01324502f3","urls":["bzzr://d194689e3b293efc9a2ecd82c8eb003cd23db3642d82fe9aa017d3acbf1ce47d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol:test 6060604052341561000f57600080fd5b5b6101778061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063e420264a146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd600480803590602001909190505061013d565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b60006007820290505b919050565b60006008820290505b9190505600a165627a7a723058201c740f7b71c34463cf9e5726eaf9f64d46bfea7065e9825eedcc08f77809715f0029
test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"b","type":"uint256"}],"name":"g","outputs":[{"name":"e","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol":{"keccak256":"0x8e5468d51445388eec651372f2ee9a14b3fdd127bc1d5fff2e5890a3d0a2fde2","urls":["bzzr://8290201243fdec5d6ea46247163c64f68621b2decd6ec4aebd17fd8efacafb03"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol:c 6060604052341561000f57600080fd5b5b6104058061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063443e52f41461005457806360726abb146100e6578063b6588ffd1461014d575b600080fd5b341561005f57600080fd5b610092600480803590602001909190803590602001908201803590602001919091929080359060200190919050506101b4565b604051602081016100a8816000840184866100b2565b90508092506100ca565b60008490506100c0826100cf565b8452949350505050565b6100db565b60008115159050919050565b505060405180910390f35b34156100f157600080fd5b6100f96101eb565b6040516020810161010f81600084018486610119565b9050809250610131565b600084905061012782610136565b8452949350505050565b610142565b60008115159050919050565b505060405180910390f35b341561015857600080fd5b610160610237565b6040516020810161017681600084018486610180565b9050809250610198565b600084905061018e8261019d565b8452949350505050565b6101a9565b60008115159050919050565b505060405180910390f35b6000846000800181905550816000600201819055508383600060010191906101dd929190610265565b50600190505b949350505050565b600060036000808201548160000155600182018160010190805460018160011615610100020316600290046102219291906102e5565b5060028201548160020155905050600190505b90565b600080600080820160009055600182016000610253919061036c565b60028201600090555050600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102a657803560ff19168380011785556102d4565b828001600101855582156102d4579182015b828111156102d35782358255916020019190600101906102b8565b5b5090506102e191906103b4565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061031e578054855561035b565b8280016001018555821561035b57600052602060002091601f016020900482015b8281111561035a57825482559160010191906001019061033f565b5b50905061036891906103b4565b5090565b50805460018160011615610100020316600290046000825580601f1061039257506103b1565b601f0160209004906000526020600020908101906103b091906103b4565b5b50565b6103d691905b808211156103d25760008160009055506001016103ba565b5090565b905600a165627a7a7230582080e76ce8fe8a012ebf30e8d2bd0899560fbbdde7624c9a9e4a6491ed79ca4bc40029
test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_a","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_b","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"del","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol":{"keccak256":"0x4634905b76b8532bb26a03a7b928a9f5c03a43968f706751eb854de5a633fdf6","urls":["bzzr://f9bbc1dc7c8a9054123f1210e3d3538201a09279bd56c0d2f1f967a235a8d6a4"]}},"version":1}
test_7fdd0bf0af005bd4f46c80212c991db1cef05c3211c02286f6d82d72d90754d3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol:Scope 6060604052602a600055341561001457600080fd5b5b60cf806100236000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639ffd5c7f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a723058202de2d8dc406cf0ccfb61a964d8734b77c704bea7bb979c7a9ed5b1b83f60d4d10029
test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol:Scope {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"getStateVar","outputs":[{"name":"stateVar","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol":"Scope"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol":{"keccak256":"0x463adb20d0be16f76404f868077db2c9bd8ee455fa770abad8ffe9e5c388de97","urls":["bzzr://b1e3e7e6ba3b7eb41cddc9ef831cbc91ce6c5ab89b336a76fe548f533d68f61e"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f44b54ca14603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b60005b9190505600a165627a7a72305820edb8ec4587cd026672d2818cf6df5f98a5311349f6632ef479d70f5ad1b64b5b0029
test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName1","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName1(bytes32)":{"notice":"This is a test function and it has 2 lines"}}}},"settings":{"compilationTarget":{"test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol":{"keccak256":"0x1b24a34e74854306e1a98a2491d8255f7b299f62b115851e9bf8c6ca385eef47","urls":["bzzr://ea1ee06e4fb7cda853deca23195130b6128f4eeaa895527f85f87833b758fac8"]}},"version":1}
test_7ff8a1dcff72f6b5a3bc4f6cce2d914f9a2a1cbb324a6e059afa1ef431b7d6a2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Base 6060604052341561000f57600080fd5b5b6101598061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610123565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600061011d610123565b90505b90565b6000600190505b905600a165627a7a7230582034bf96ad7391ebe88f9307958a4ef48309fe067d6396eb7a8818a53457ea628f0029
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":{"keccak256":"0x5f1417192c8aab6dc5c560e7d9cb7106036c58aac742c0c22699b86199a2d721","urls":["bzzr://a113ce6e9fe172fe89a751637bc7160d05aaa2a3a0446a17dac8c294804ddef4"]}},"version":1}
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Derived 6060604052341561000f57600080fd5b5b6101598061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063e2179b8e146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610123565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600061011d610123565b90505b90565b6000600290505b905600a165627a7a72305820047a21bf249695d62578b67ed776b7a2cc62622725f7b229dce8c35345a7402e0029
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":{"keccak256":"0x5f1417192c8aab6dc5c560e7d9cb7106036c58aac742c0c22699b86199a2d721","urls":["bzzr://a113ce6e9fe172fe89a751637bc7160d05aaa2a3a0446a17dac8c294804ddef4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol:C 6060604052341561000f57600080fd5b5b61019b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a391c15b14610049578063f43f523a146100c5575b600080fd5b341561005457600080fd5b6100736004808035906020019091908035906020019091905050610141565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b34156100d057600080fd5b6100ef6004808035906020019091908035906020019091905050610158565b604051602081016101058160008401848661010f565b9050809250610127565b600084905061011d8261012c565b8452949350505050565b610136565b6000819050919050565b505060405180910390f35b6000818381151561014e57fe5b0490505b92915050565b6000818381151561016557fe5b0690505b929150505600a165627a7a72305820689828340fe64851aed31ba85c8dde0bb0f8d380142841fe900076a3b38ab7430029
test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"div","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mod","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol":{"keccak256":"0x72078ef798cc0097193738c999a859010743bfc429195562511fb16cf90cfc55","urls":["bzzr://33bc26783daeca5b469d031731cf3f31ec24664e3da60a48c0712d5e945488f3"]}},"version":1}
test_80809ea185c278957fb4aa0c767b40c57dd50e740f71a7f1cdc8bca26776e99f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol:C 6060604052341561000f57600080fd5b5b61018c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114610049578063d48092f7146100be575b600080fd5b341561005457600080fd5b61006c60048080351515906020019091905050610135565b604051602081016100828160008401848661008c565b90508092506100a4565b600084905061009a826100a9565b8452949350505050565b6100b3565b6000819050919050565b505060405180910390f35b34156100c957600080fd5b6100e160048080351515906020019091905050610155565b604051602081016100f781600084018486610101565b9050809250610119565b600084905061010f8261011e565b8452949350505050565b61012a565b60008115159050919050565b505060405180910390f35b600081156101465760019050610150565b60009050610150565b5b919050565b60008190505b9190505600a165627a7a72305820c674b09684786ea7b5d0974835363fb997b22f79adbb82cd55526314644d48410029
test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_in","type":"bool"}],"name":"g","outputs":[{"name":"_out","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol":{"keccak256":"0x1380bd4f8d9b286619fd7a1d28b7c3bcd48ac3c7b5579ab8772831b37ba5df00","urls":["bzzr://68bd9e9daadbd792b5f008dcfb18931f9785399ff5498a10a9656c010ba8345b"]}},"version":1}
test_80b06307c67c7fd5a8ba3ec1e9824759a3669629245c9adeb5d3eff0d1f0394d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol:C 6060604052341561000f57600080fd5b5b6102f28061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e1c06e41461005f5780631b08d96f146100c6578063b8e010de1461012d578063ff88694814610192575b600080fd5b341561006a57600080fd5b6100726101f7565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100bb565b60008115159050919050565b505060405180910390f35b34156100d157600080fd5b6100d9610209565b604051602081016100ef816000840184866100f9565b9050809250610111565b600084905061010782610116565b8452949350505050565b610122565b60008115159050919050565b505060405180910390f35b341561013857600080fd5b610140610218565b6040516020810161015681600084018486610160565b9050809250610178565b600084905061016e8261017d565b8452949350505050565b610187565b6000819050919050565b505060405180910390f35b341561019d57600080fd5b6101a5610241565b604051602081016101bb816000840184866101c5565b90508092506101dd565b60008490506101d3826101e2565b8452949350505050565b6101ec565b6000819050919050565b505060405180910390f35b6000809054906101000a900460ff1681565b600080600590508091505b5090565b60008060059050806000806101000a81548160ff021916908315150217905550600191505b5090565b600080600590507f418875ab2e38951ea8f665d12c6b3fc169dc8250ac43e2b3b3fe3b73ffa9b6c181604051602081016102808160008401848661028a565b90508092506102a2565b6000849050610298826102a7565b8452949350505050565b6102b3565b60008115159050919050565b505060405180910390a1600191505b50905600a165627a7a72305820534950b2d5c91f88ec6f112de1be815598d757edc26f8b854737166425ba8a730029
test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"perm","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ret","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ev","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"bool"}],"name":"Ev","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol":{"keccak256":"0xc224a673a43b2cbd1f4ffd5d10229e007934fa3221297c1ab40d42cf9fe9cb80","urls":["bzzr://ebf8b8f732c73cc8ff56cdc803db5d16766b970d42cd85a900c402cd6ac4ea4c"]}},"version":1}
test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol:C 6060604052341561000f57600080fd5b5b6104d98061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461006a5780633247485e1461007f5780634753a67d146100945780639942ec6f146100a9578063aaf05f3d146100be575b600080fd5b341561007557600080fd5b61007d6100d3565b005b341561008a57600080fd5b6100926101cc565b005b341561009f57600080fd5b6100a76101cf565b005b34156100b457600080fd5b6100bc6101d2565b005b34156100c957600080fd5b6100d161034f565b005b6000806000806100e161043a565b60016100ed57836100ef565b845b92506001830192506001610104576003610107565b60015b60ff1691506001820191506001610153576040805190810160405280600581526020017f776f726c6400000000000000000000000000000000000000000000000000000081525061018a565b6040805190810160405280600581526020017f68656c6c6f0000000000000000000000000000000000000000000000000000008152505b90506040805190810160405280600481526020017f757365640000000000000000000000000000000000000000000000000000000081525090505b5050505050565b5b565b5b565b60006101dc61044e565b6101e461044e565b6101ec61044e565b6101f4610497565b6101fc610497565b610204610497565b60008060006001610216576000610219565b60015b9950898015610226575060015b995060016102345787610236565b885b965060007f01000000000000000000000000000000000000000000000000000000000000000287600060028110151561026b57fe5b60200201907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060016102c657846102c8565b855b935060007f0100000000000000000000000000000000000000000000000000000000000000028460008151811015156102fd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001610339578161033b565b825b905080811690505b50505050505050505050565b6104ab600080600080600080600161036857600161036b565b60005b60008082015481600001559050506001610387576101cc61038b565b6101cf5b96506103998763ffffffff16565b60016103a557846103a7565b855b955060016103be57600360048191508090506103c9565b600160028191508090505b935093508284809450819550505060016103e45760036103e7565b60025b915060008260008060ff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001610425576002610428565b60015b90506001810190505b50505050505050565b602060405190810160405280600081525090565b60408051908101604052806002905b60007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060019003908161045d5790505090565b602060405190810160405280600081525090565bfe00a165627a7a72305820fd25f0b49a1dfaf41484589816358054d38895f5144d197e441069a9a6c6ab8e0029
test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fun_y","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fun_x","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol":{"keccak256":"0xa6bd0cf97ff411fcc0f3ec22228956252595ed1ed5263dcba5e7f391fcc67e8a","urls":["bzzr://cc5c453d034d497abeaaba7f4182822f5f129947b196df4efff85d4354f06cf0"]}},"version":1}
test_814a9a6ac59a88cca6e539ba0542ae04c5965a1378b3f651898539dda972bb13.sol: ERROR
test_81724bbb51c212f8151ad780d1adee93c86bb362bd6a3bbbaa670acaff0d9ec4.sol: ERROR
test_81891bfe4170e45eb6370911b64a40a073cff134f46cce541276acdc637d0259.sol: ERROR
test_819507b699a0217c441ada101211a9a95e06a36021b18a65ec45a84f5a98ab3b.sol: ERROR
test_81eb77952d9ec92bc3240e8233ddde8fe3f2872f8de9876b08191a2b7cd84697.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6101a38061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806352ff8cff1461003e575b600080fd5b6100636004808035600019169060200190919080351515906020019091905050610065565b005b600081156100e1577f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f600102905082600019163373ffffffffffffffffffffffffffffffffffffffff166001026000191682600019163460010260405180826000191660001916815260200191505060405180910390a3610171565b82600019163373ffffffffffffffffffffffffffffffffffffffff167f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f34604051602081016101358160008401848661013f565b9050809250610157565b600084905061014d8261015c565b8452949350505050565b610166565b6000819050919050565b505060405180910390a35b5b5050505600a165627a7a72305820b7a5d07c65b07ae39797d910589c70395855d21695b510f48b6df2159db096420029
test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_id","type":"bytes32"},{"name":"_manually","type":"bool"}],"name":"deposit","outputs":[],"payable":true,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_id","type":"bytes32"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol":{"keccak256":"0x3a5a996a4a0990d75ffddfa18555a730a4afdec85c4300f7a1892f4f675a8c5e","urls":["bzzr://5ec36942bf69e727128fd96e0da586b304701ec7baf46b11313faeedfcf0f0f2"]}},"version":1}
 conv enum base.Choice -> enum base.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058202b0ed07e0c28cf7d5f5477579c5f3da68bfa3d36cdfe0c5a0312f7449e522ead0029
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":"base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":{"keccak256":"0x2f8154f54ec97e61d0a50948aa0b1c238633191fb381e4005d4bdcab65572e21","urls":["bzzr://073500555801e7f8f3440406622828cea0617852862903f033ba628e4ecc3e43"]}},"version":1}
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806385bb7d6914603d575b600080fd5b3415604757600080fd5b604d60a8565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b609d565b600060038210600081146095576097565bfe5b50919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820a0676206759479d9ed50c3dd2e460dca82cf8eae79fb119206c73767f680cbce0029
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":{"keccak256":"0x2f8154f54ec97e61d0a50948aa0b1c238633191fb381e4005d4bdcab65572e21","urls":["bzzr://073500555801e7f8f3440406622828cea0617852862903f033ba628e4ecc3e43"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol:A 60606040526001600055341561001457600080fd5b5b60006005905060018160038110151561002a57fe5b0160005b50546000819055506000808154600101919050819055505b505b60cb806100566000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a723058203233af345cc1b83c5305c0314377fdca11b999f82e0b71d64f6823f0f00ea3f70029
test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol":{"keccak256":"0xb53cc7f51e13d6d05a3daa932c316980feef7280d606e783863d010989da3f03","urls":["bzzr://b85b716b0a9a7df63de0a712863c3c5dfee0019c31b643d5fe1cff7a9a8d8156"]}},"version":1}
 conv contract C -> contract C
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C_$1_to_t_contract$_C_$1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C_$1_to_t_contract$_C_$1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C_$1(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C_$1(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207592159278794b74005306f80db7794234bec7b710b1ecd180ef146a586b96ba0029
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":{"keccak256":"0xf7f94de1bfda40e42bddc57b9b63411f061e4cfbd7c30f21ec4f0382220e5600","urls":["bzzr://bcb591acaf2b805907d84fc8e443da2d211a2faa5102557c771e5b15e414a5a4"]}},"version":1}
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:Test 6060604052341561000f57600080fd5b5b6101b88061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a631025714610049578063cadaacbf1461005e575b600080fd5b341561005457600080fd5b61005c610097565b005b341561006957600080fd5b610095600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610188565b005b60003073ffffffffffffffffffffffffffffffffffffffff1663cadaacbf826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016100f781600084018486610101565b9050809250610119565b600084905061010f82610143565b8452949350505050565b61013e565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610155565b600061014e8261011e565b9050919050565b5050600060405180830381600087803b151561017057600080fd5b6102c65a03f1151561018157600080fd5b5050505b50565b5b505600a165627a7a72305820134d83c417ec12b701278fb84ffa243ccbb1a14cc709e46a5813d768eed174540029
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"externalCall","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":{"keccak256":"0xf7f94de1bfda40e42bddc57b9b63411f061e4cfbd7c30f21ec4f0382220e5600","urls":["bzzr://bcb591acaf2b805907d84fc8e443da2d211a2faa5102557c771e5b15e414a5a4"]}},"version":1}
test_8305b8f2f8e68542feaec35576893842fb2c6542d38d96c9cc27e86a049df50e.sol: ERROR
test_8361d557dfaeacae2946aa24724dbe4c943419581c8227200a1dda0c73f6a78c.sol: ERROR
test_836dfd8ff4de0e4efbec792fdb3eec380f8f2b3d1fde368a252bb4dcd71032e6.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol:Test 6060604052341561000f57600080fd5b5b61014c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d7ddb5691461003e575b600080fd5b341561004957600080fd5b61008060048080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190919050506100f4565b60405160208101610096816000840184866100a0565b90508092506100b8565b60008490506100ae826100bd565b8452949350505050565b6100e9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b6000817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690505b9190505600a165627a7a723058205b46c3b9ea78bc8af4abd9381415f6953a69edfbc5f26fda44df713d2d5d83100029
test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes2"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol":{"keccak256":"0x328a61f93cbece6e7d87804f008d94b92d69046f79600f7b081a76e04dc2fbf0","urls":["bzzr://e408bc998dcc52d6f2e441787627731bbb864e449baa3e1901b0d77b720af0aa"]}},"version":1}
test_83f0aa75b311a45c431c12e757e19c7739832c9910b7cceac5a1660bb623d14d.sol: ERROR
 conv bytes17 -> bytes17
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes17_to_t_bytes17(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes17(value))

			}
		
			function cleanup_assert_t_bytes17(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000)
			}
		

test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol:c 6060604052341561000f57600080fd5b5b6104718061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b61005161010d565b60405160a081016100678160008401848a6100b5565b9050610078816020840184896100b5565b9050610089816040840184886100b5565b905061009a816060840184876100b5565b90506100ab816080840184866100b5565b90508096506100cd565b60008490506100c3826100d2565b8452949350505050565b6100fe565b60007fffffffffffffffffffffffffffffffffff00000000000000000000000000000082169050919050565b50505050505060405180910390f35b600080600080600080600090505b600981101561019f578078010000000000000000000000000000000000000000000000000260008260098110151561014f57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055505b80600101905061011b565b60026f010000000000000000000000000000000260036009600a811015156101c357fe5b0160005b6101000a81548170ffffffffffffffffffffffffffffffffff02191690836f0100000000000000000000000000000090040217905560036008600a8110151561020c57fe5b0160005b6101000a81548170ffffffffffffffffffffffffffffffffff02191690836f010000000000000000000000000000009004021790555060006003906009610258929190610356565b5060036001600a8110151561026957fe5b0160005b9054906101000a90046f0100000000000000000000000000000002955060036002600a8110151561029a57fe5b0160005b9054906101000a90046f01000000000000000000000000000000029450600380600a811015156102ca57fe5b0160005b9054906101000a90046f0100000000000000000000000000000002935060036004600a811015156102fb57fe5b0160005b9054906101000a90046f0100000000000000000000000000000002925060036009600a8110151561032c57fe5b0160005b9054906101000a90046f010000000000000000000000000000000291505b509091929394565b82600a81019282156103f4579160030160049004820160005b838211156103f25783819054906101000a90047801000000000000000000000000000000000000000000000000028360006101000a81548170ffffffffffffffffffffffffffffffffff02191690836f0100000000000000000000000000000090040217905550600801602081600701049384019360010302916001019161036f565b505b5090506104019190610405565b5090565b61044291905b8082111561043e57600081816101000a81549070ffffffffffffffffffffffffffffffffff02191690555060010161040b565b5090565b905600a165627a7a72305820e357b489a64639699819921f6b63662c57f587f542d6d5eb026051ddd9cd76b30029
test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"bytes17"},{"name":"b","type":"bytes17"},{"name":"c","type":"bytes17"},{"name":"d","type":"bytes17"},{"name":"e","type":"bytes17"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol":{"keccak256":"0x7e01bcff47f2bdd8da63539b5906abcff208ff1b6f3b47f9f57e8f3c8d9e9257","urls":["bzzr://262f6abe4c572ba70b9f93182a8029540bcebf881cf77d6cf71ff2225b9961bb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol:test 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b600060018211151560ba576001905060cd565b60c46001830360a7565b8202905060cd565b5b9190505600a165627a7a72305820c806810d5158d21c0031919c28e3246163cd12c976fff65a24f8934e12e64f6b0029
test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol":{"keccak256":"0x84a1cb6452a83f05eab69ad665cae4a04248ed704c55106d849445e59c0cf25e","urls":["bzzr://da02b51aefc9ec8c0cbc8e144a4e78f3bfa99ecba1d5fdc8adf447774d05b9c5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:B 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600a90505b905600a165627a7a7230582025a47eda0c0994f83caa7ea5182b7fc0e2757da8b4f76df0e0b7651305aa6d960029
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":{"keccak256":"0x7bf08a1ac876af8c6b1f7b0659ecc167cbae8050991c948632f0572cef792971","urls":["bzzr://1cfe23dceaaadd23fb9a9ccce94c06f25db5398a12498c1f1e724ae49f912b54"]}},"version":1}
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:C 6060604052341561000f57600080fd5b5b6101e78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610054578063b3de648b146100b9578063e2179b8e1461012c575b600080fd5b341561005f57600080fd5b610067610191565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da600480803590602001909190505061019b565b604051602081016100f0816000840184866100fa565b9050809250610112565b600084905061010882610117565b8452949350505050565b610121565b6000819050919050565b505060405180910390f35b341561013757600080fd5b61013f6101a9565b604051602081016101558160008401848661015f565b9050809250610177565b600084905061016d8261017c565b8452949350505050565b610186565b6000819050919050565b505060405180910390f35b6000600a90505b90565b60008160020290505b919050565b60006101b5600161019b565b90505b905600a165627a7a72305820e2af040689fb83c292ff5a7b843043a56e3d8c517d9f4793c462d1e36181070d0029
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":{"keccak256":"0x7bf08a1ac876af8c6b1f7b0659ecc167cbae8050991c948632f0572cef792971","urls":["bzzr://1cfe23dceaaadd23fb9a9ccce94c06f25db5398a12498c1f1e724ae49f912b54"]}},"version":1}
test_84671500d6adeb981a0d79b178728873b3403d1fb8b3ef97bf0bab550d3337e3.sol: ERROR
test_8476e0a255bc11bd7ef7a34e8b5e10129f4d05a17c69f7a1cd04653df6c22061.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol:Test 6060604052341561000f57600080fd5b5b6102bd8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad610271565b6000816000015160ff161415806100cc57506000816020015160ff1614155b156100da576001915061026d565b6004816000019060ff16908160ff16815250506005816020019060ff16908160ff1681525050806000808201518160000160006101000a81548160ff021916908360ff16021790555060208201518160020160006101000a81548160ff021916908360ff16021790555090505060046000800160009054906101000a900460ff1660ff1614158061018157506005600060020160009054906101000a900460ff1660ff1614155b1561018f576002915061026d565b6040805190810160405280600260ff168152602001600360ff1681525090506002816000015160ff161415806101cd57506003816020015160ff1614155b156101db576003915061026d565b60006040805190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016002820160009054906101000a900460ff1660ff1660ff1681525050905060046000800160009054906101000a900460ff1660ff1614158061025e57506005600060020160009054906101000a900460ff1660ff1614155b1561026c576004915061026d565b5b5090565b6040805190810160405280600060ff168152602001600060ff16815250905600a165627a7a72305820ba624c96a46afbdd42c5eb5ba61f61516a4d174d89efd091176c6123f38816430029
test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol":{"keccak256":"0x06c95f18cb9c71be57dddcba744b43c0b733415eca94419f6184218dbf0a1725","urls":["bzzr://8631f60d8a001a75c8261666a345e4971f67d05ae492047d8810f0d2f55a0031"]}},"version":1}
 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol:test 6060604052341561000f57600080fd5b5b61010f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806376bb682a14603d575b600080fd5b3415604757600080fd5b604d60d3565b604051604081016061816000840184876079565b90506070816020840184866093565b9050809350608f565b600084905060858260ad565b8452949350505050565b60a9565b6000849050609f8260bd565b8452949350505050565b60b9565b60008115159050919050565b60c7565b6000819050919050565b50505060405180910390f35b60008042421491504290505b90915600a165627a7a72305820f61c3a9daa19006192bc682a37a09952a150314e83b1e2fe14d84e1a5c85dd3d0029
test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"someInfo","outputs":[{"name":"equal","type":"bool"},{"name":"val","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol":{"keccak256":"0x5184b1488a72fe8c9542172822fd6a1638f08099a19fbe7ee71e1effaf717098","urls":["bzzr://03be07adf0430752e291fc21c7490c2147f03621b17d3560187f1b6f876c3aaf"]}},"version":1}
test_84cfd8593e603d8d8a86b83c20cd5afc3c9a50fda9e0898218cefa01f17c3309.sol: ERROR
test_84ef14001c25a13127f01723fe615c72ecd30fdd085b7873c8d674c33518524a.sol: ERROR
test_8503cd9ba6229dba70b77aabda1246a2338c34f689eb6f6152f056d3a14f3bd1.sol: ERROR
test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol:test 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a723058202d85863355bea0c569833e755a87f3fbbd231996b2a115746bb3b0f6ca099d660029
test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol":{"keccak256":"0x218cdb601b383122cfc997b1f9d7fdd94da3e8174c32899e3daeeb1c1f678f5b","urls":["bzzr://7a29c0910cc1d7524744c3a9be9fe22ecf5318d85d2a0eaba4458d3454683256"]}},"version":1}
test_85778f54865e309f7b3039563223dd12ef8ba24bfa3bad131e9683c983d4f6eb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol:C 6060604052341561000f57600080fd5b5b6101568061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad6100ff565b608060405190810160405280600160ff168152602001600260ff168152602001600360ff168152602001600560ff1681525090508060006004811015156100f057fe5b602002015160ff1691505b5090565b6080604051908101604052806004905b600060ff1681526020019060019003908161010f57905050905600a165627a7a7230582081655eb413c9aa6e2bba389f8f957b8346db217e4ad85d2498850e811a67b53f0029
test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol":{"keccak256":"0x48970f11a3ba5e95714241e09e9694c38c0fc471de51feedaf488b83066919eb","urls":["bzzr://69dcc1724a5b8f2939aed07e29c5ac9e258c35e945cef55c625d151d59419979"]}},"version":1}
test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol:test 60606040523415600e57600080fd5b5b60a08061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60005b600115606b57600190505b600990505b50505600a165627a7a723058207527dce1175000b41d6fc3d8ee09cd8a1683fca218aec725fbba3323e434ad880029
test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol":{"keccak256":"0x5a2e5dab0165e610489f1addbd30558668f6d4fa0abf85c28b7b0e32e9f522c2","urls":["bzzr://7323d1a149d1a029cd00cd7104567a826cae023c3afe43585e6a50bb2a02aed4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

test_85f3ba3981ebed2001e0f49ffb266d2ba68870203568fbe1c7a969eaf0f9ec1a.sol: ERROR
test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol:C 60606040526040805190810160405280600481526020017ff09fa684000000000000000000000000000000000000000000000000000000008152506000908051906020019061004f929190610060565b50341561005b57600080fd5b610105565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100cf565b828001600101855582156100cf579182015b828111156100ce5782518255916020019190600101906100b3565b5b5090506100dc91906100e0565b5090565b61010291905b808211156100fe5760008160009055506001016100e6565b5090565b90565b6036806101136000396000f30060606040525b600080fd00a165627a7a72305820f19c542775b1506d724002a512229c29a519109e2401601162560e1e3db13ac30029
test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol":{"keccak256":"0x15f9121078da12736434a6a3b21ee5122d878bfd76a12e22052bbebe9f0d1b8a","urls":["bzzr://446dee2d45943116ad5e73f147e52eef07f29d02b9f0cbfc123d5f6af2729f44"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol:test 6060604052341561000f57600080fd5b5b61010a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639642ccdf14603d575b600080fd5b3415604757600080fd5b608960048080356bffffffffffffffffffffffff191690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060d5565b60405160208101609d8160008401848660a6565b905080925060bc565b600084905060b28260c0565b8452949350505050565b60ca565b6000819050919050565b505060405180910390f35b60005b929150505600a165627a7a72305820eff73d750f750588bffbdee678a783222b6391b9c6918a59b1b8cba8f7db9eea0029
test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"arg1","type":"bytes20"},{"name":"addr","type":"address"}],"name":"functionName","outputs":[{"name":"id","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol":{"keccak256":"0x1ec19144f087852cd8ef0aa1ed7c5c0ff990b05c0eb23becac22c62377bc27b5","urls":["bzzr://a5fac7d935106a909d56847056dddc98f419c2ed15383e4ef519dec75d6ea691"]}},"version":1}
test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol:B 60606040523415600e57600080fd5b5b60918061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000806000811115606057600791505b5b5b50505600a165627a7a72305820c5d995e60c851562b36454a750a20513ed840c07b138cbc8bfa384fc7c6ba3e00029
test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol":{"keccak256":"0xbdf30e2df5df181e4f6fa957783c856ac3dbd5487e619f62f2186351b822aeee","urls":["bzzr://d79bfd59206466809d9d73bcecbd3147a2fdaf6b1f350a30f8a89fecb6ab61d3"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol:C 6060604052341561000f57600080fd5b5b6101fb8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063fae4f40a1461003e575b600080fd5b341561004957600080fd5b61008d60048080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190803561ffff169060200190919050506100df565b604051602081016100a3816000840184866100ad565b90508092506100c5565b60008490506100bb826100ca565b8452949350505050565b6100d4565b6000819050919050565b505060405180910390f35b60007f6162000000000000000000000000000000000000000000000000000000000000837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561013457600190506101c9565b6101028261ffff1614151561014c57600290506101c9565b6101027d010000000000000000000000000000000000000000000000000000000000028261ffff167d010000000000000000000000000000000000000000000000000000000000027cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156101c457600390506101c9565b600090505b929150505600a165627a7a723058201d503d4a90b08329ab0fb200d33a6d07e9bf6a92ec5f24985222a53b19f630340029
test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bytes2"},{"name":"x","type":"uint16"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol":{"keccak256":"0x68c87808db3a3113cc9d168d6936a4f944e77e3af59ba8a73e1bd8aad40f7845","urls":["bzzr://4f9a4d30c0bc9d432a5ac7a89381bbd72f2c0bcd35295125a4b421776554312d"]}},"version":1}
test_86d07f925f6a698475fd21a0bc310b93f2faf08c6926755e657058da25f62800.sol: ERROR
test_86dad6b1bb702dcb3d5fcaaca7c2d8a58883a3b1fd7ceabe125bdceea70b6517.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Helper 6060604052341561000f57600080fd5b60405160208061010f833981016040528080519060200190919050505b806000819055505b505b60cb806100446000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063890eba6814603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a723058207451288bb995f1043282eb25d2e16dfc2309d77439ac4bd71fa815f5e2141d0b0029
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"flag","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":"Helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":{"keccak256":"0x72fcd9e42ae00b4b1c9bc5c581dc225de5103e0e83fde375f60a3be26fd677b5","urls":["bzzr://7946aa661f5e208cd9b3b0aec76e7fff6e494003f68cf95aafba37936fb36e9e"]}},"version":1}
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Main 6060604052341561000f57600080fd5b5b61049b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063e420264a146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd6004808035906020019091905050610333565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b600081600080848152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff1663e420264a600080858152602001908152602001600020546000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016101c1816000840184866101cb565b90508092506101e3565b60008490506101d9826101e8565b8452949350505050565b6101f2565b6000819050919050565b5050602060405180830381600087803b151561020d57600080fd5b6102c65a03f1151561021e57600080fd5b5050506040518051905060405180828152602001915050604051809103902060019004610249610350565b6020810161025c81600084018486610266565b905080925061027e565b600084905061027482610283565b8452949350505050565b61028d565b6000819050919050565b5050604051809103906000f08015156102a557600080fd5b73ffffffffffffffffffffffffffffffffffffffff1663890eba686000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561031057600080fd5b6102c65a03f1151561032157600080fd5b5050506040518051905090505b919050565b60008060008381526020019081526020016000205490505b919050565b60405161010f806103618339019056006060604052341561000f57600080fd5b60405160208061010f833981016040528080519060200190919050505b806000819055505b505b60cb806100446000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063890eba6814603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a723058207451288bb995f1043282eb25d2e16dfc2309d77439ac4bd71fa815f5e2141d0b0029a165627a7a723058203d56f7bdb0858ab0937f7dccb0174630392087465735aec6e058da465f976f3f0029
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":"Main"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":{"keccak256":"0x72fcd9e42ae00b4b1c9bc5c581dc225de5103e0e83fde375f60a3be26fd677b5","urls":["bzzr://7946aa661f5e208cd9b3b0aec76e7fff6e494003f68cf95aafba37936fb36e9e"]}},"version":1}
test_874765e31e765d6b0ec7c3c025bfecd2e7d7b50f7cbd18e290ec9ebbf8db49f3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol:test 6060604052341561000f57600080fd5b5b6102508061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639adbf69114610049578063b3de648b146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd600480803590602001909190505061013c565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b600081820290505b919050565b60003073ffffffffffffffffffffffffffffffffffffffff16639adbf6916009840a6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016101a8816000840184866101b2565b90508092506101ca565b60008490506101c0826101cf565b8452949350505050565b6101d9565b6000819050919050565b5050602060405180830381600087803b15156101f457600080fd5b6102c65a03f1151561020557600080fd5b5050506040518051905061021b8360070161012f565b0390505b9190505600a165627a7a72305820786cf3c15ee2fe56c0351a6a80907ff1dcc7ccf0650722c02d508cedd4a35dde0029
test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f1","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol":{"keccak256":"0x6a6ff86be397dab06d2b614eeaa55dd3ad9746e76ca97c4d315ece86280e86b5","urls":["bzzr://c13b11fea3b4c4fa4f24e2d624223f309f17226820ad477cc9659bf3cc3aece3"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol:test 6060604052341561000f57600080fd5b5b6101198061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063834ba3d7146047578063b3de648b1460a3575b600080fd5b3415605157600080fd5b605760c3565b60405160208101606b816000840184866074565b9050809250608a565b6000849050608082608e565b8452949350505050565b6098565b6000819050919050565b505060405180910390f35b341560ad57600080fd5b60c1600480803590602001909190505060c9565b005b60005481565b80604051808281526020019150506040518091039020600081600019169055505b505600a165627a7a72305820a34a1fde8f6a665e50e4cba431d4df5e8186af3299062566b2853fa8a0b99ed10029
test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"shaValue","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol":{"keccak256":"0x3ea67da8eb236517e3e22b522f52501c21b8c9db518e29f881b468714c5ad354","urls":["bzzr://4d53f60ad77e7f96af776be0fcbf1bbcdb216397d8b3a1e31d9350ff98fbcf33"]}},"version":1}
test_87e0ffd3cfb669eb6ca87842448a9230885a8101c95a09f5f1435ce4bb065924.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_87e1b5728c10b62d511f36b4eead9e9fa399fec55e55ef3ec84ebe696d8d8665.sol: ERROR
test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol:C 6060604052341561000f57600080fd5b5b60d98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60106089565b60008060006061846067565b92506073565b60008182029050919050565b607a856067565b91506007905093509350939050565b60956003600260016055565b8260005281602052806040528360605260806000f35b5600a165627a7a723058208b7395a3f971089a2d3938820681ccb227c08699c791df959b8edd29d47ee1ae0029
test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol":{"keccak256":"0x1d8b372a307dc221fcc968f13864c6bc49891b6cd6c36f66a15eaef85be1fb13","urls":["bzzr://09c0b94eedefaaf59016a205de58a31d1b9e24bb613de571b427fe617e71124c"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol:C 6060604052341561000f57600080fd5b5b6101038061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060405180807f61626300000000000000000000000000000000000000000000000000000000008152506003019050604051809103902090505b905600a165627a7a723058200cfd18a1aafa13ba9db8f9eaa60eae9f237992d7feb677663fea69098bcebbe60029
test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol":{"keccak256":"0x7ec5e5f08104b6bdc1986eb44df210519c354e4ffac8254763701921fc1c2130","urls":["bzzr://735933c8e68e858a54198494cd4a9ecec57987e1f5e3d70f470624d7d104b3cd"]}},"version":1}
test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol:C 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600073fa0bfc97e48458494ccd857e1a85dc91f7f0046e90508073ffffffffffffffffffffffffffffffffffffffff166108fc60029081150290604051600060405180830381858888f19350505050505b505600a165627a7a72305820279ac15dc677bd9d98ab921125e3ef05ae948706bedfafb641baa21a72bb88ea0029
test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol":{"keccak256":"0xfbd80c8ed319e6925bc0e095627614d016e179830dad7b7c1560abd7f9526efd","urls":["bzzr://2260cb62cab8f746d7d8f18d9fb33596a90ad092bca9598a4b70e391af000b09"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol:C 6060604052341561000f57600080fd5b5b6101148061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000608060405190810160405280600160ff168152602001600260ff168152602001600360ff168152602001600460ff16815250600260048110151560da57fe5b602002015160ff1690505b905600a165627a7a72305820cb906953cec8a65b383b9a557716a24ea94d8d3062e120461b4fffa7cd7264670029
test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol":{"keccak256":"0xa4703d4ad2c0a95e3aa50605970317099b7f70b26623c6987fe3a31a625179a4","urls":["bzzr://a90e420a8d939f884eb94be6ba2c1eb38360e6b224498008a0c5993e97f245c9"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 conv int_const 1 -> uint8
 conv int_const 2 -> bytes32
 conv int_const 3 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_bytes32(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_rational_1_by_1_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint8(value))

			}
		
			function abi_encode_t_rational_2_by_1_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_bytes32(value))

			}
		
			function abi_encode_t_rational_3_by_1_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_rational_2_by_1(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_rational_3_by_1(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		
			function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
				converted := cleanup_assert_t_uint8(value)
			}
		
			function convert_t_rational_2_by_1_to_t_bytes32(value) -> converted {
				converted := shift_left_0(cleanup_assert_t_rational_2_by_1(value)
			}
		
			function convert_t_rational_3_by_1_to_t_bytes32(value) -> converted {
				converted := shift_left_0(cleanup_assert_t_rational_3_by_1(value)
			}
		function shift_left_0(value) -> newValue {
					newValue := mul(value, 1)
			}

test_88c7c3c33735ab216b1290ddaae60ee4d4be05e4f03aaada11e711f10b8ba194.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8912e251e081600d6043fad553258643893da558e80d6535a2f28cc70cc17a1a.sol: ERROR
test_89573a8c86cad1752d7fe7f7fddf7376e67c34a38ffef5cedf81e12303727260.sol: ERROR
test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol:test 6060604052341561000f57600080fd5b5b60b68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60008060009150600091505b600a8210156084578190506084565b81806001019250506069565b5b5050505600a165627a7a723058208de06ab0201e9ecfac4666debf958eea6bd37b2e03c35db34f16abe4fccc49770029
test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol":{"keccak256":"0xacce1a32e4d76f0e47b7f09ce56722aaa71d9abb719b2a934a9458882dafa73c","urls":["bzzr://acb1846088cce5a6f487aadd961b8501a0679633f9039d970dab32fbb56af2b1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a2779b91be013a93c3c28337b106d4781b4888f0cc7a6589bf18f98f57ccd47.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol:Inconsistency 60606040526000600255341561001457600080fd5b5b610410806100246000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063511e2f8b146100495780637fec8d381461005e575b600080fd5b341561005457600080fd5b61005c6100c3565b005b341561006957600080fd5b6100716100da565b6040516020810161008781600084018486610091565b90508092506100a9565b600084905061009f826100ae565b8452949350505050565b6100b8565b6000819050919050565b505060405180910390f35b6100cb6101ae565b6100d7600160026101fd565b5b565b600080600080548091906001016100f1919061027a565b5060008081548110151561010157fe5b906000526020600020906002020160005b50905080600101805480600101828161012b91906102ac565b916000526020600020906002020160005b6040805190810160405280612328815260200160008152509091909150600082015181600001556020820151816001015550505080600001805480919060010161018691906102de565b506001805480919060010161019b91906102de565b506101a46101ae565b60035491505b5090565b60008090505b6001805490508110156101f9576101eb6002546001838154811015156101d657fe5b906000526020600020900160005b50546101fd565b5b80806001019150506101b4565b5b50565b60008060008481548110151561020f57fe5b906000526020600020906002020160005b509150816001018381548110151561023457fe5b906000526020600020906002020160005b50905081600001816001015481548110151561025d57fe5b906000526020600020900160005b50546003819055505b50505050565b8154818355818115116102a7576002028160020283600052602060002091820191016102a6919061030a565b5b505050565b8154818355818115116102d9576002028160020283600052602060002091820191016102d89190610349565b5b505050565b815481835581811511610305578183600052602060002091820191016103049190610378565b5b505050565b61034691905b808211156103425760008082016000610329919061039d565b60018201600061033991906103bf565b50600201610310565b5090565b90565b61037591905b808211156103715760008082016000905560018201600090555060020161034f565b5090565b90565b61039a91905b8082111561039657600081600090555060010161037e565b5090565b90565b50805460008255906000526020600020908101906103bb9190610378565b5b50565b50805460008255600202906000526020600020908101906103e09190610349565b5b505600a165627a7a72305820ab76c14746c29786f7962f2599e1570e198cb61530db3c9691243da5d7d7d0990029
test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol:Inconsistency {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"DoNotCallButDoNotDelete","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"trigger","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol":"Inconsistency"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol":{"keccak256":"0xc881d6f154be29523d9f6af87fa99c06a5e51a51383d1c00078bba11b8665bbf","urls":["bzzr://f5bf50df5643ffe527384e95dbd380cedbd74531c7a7a36f3ef7c782c7172796"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:A 606060405260076000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a723058202f0a949b75435a485386cc566e47efeed742edca8cb648e978f603a8e2c230df0029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:B 606060405260096000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a72305820d3b86b27191729af2dcb88ab62fa8326d34f98747e51797c037082a31279af6f0029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:C 606060405260076000556009600155341561001957600080fd5b5b610276806100296000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461005f5780634df7e3d0146100c45780638919b82e14610129578063dc8c2f4c1461019c575b600080fd5b341561006a57600080fd5b61007261020f565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100d7610219565b604051602081016100ed816000840184866100f7565b905080925061010f565b600084905061010582610114565b8452949350505050565b61011e565b6000819050919050565b505060405180910390f35b341561013457600080fd5b61014a6004808035906020019091905050610224565b604051602081016101608160008401848661016a565b9050809250610182565b600084905061017882610187565b8452949350505050565b610191565b6000819050919050565b505060405180910390f35b34156101a757600080fd5b6101bd6004808035906020019091905050610237565b604051602081016101d3816000840184866101dd565b90508092506101f5565b60008490506101eb826101fa565b8452949350505050565b610204565b6000819050919050565b505060405180910390f35b6000805490505b90565b600060015490505b90565b600081600081905550600190505b919050565b600081600181905550600190505b9190505600a165627a7a72305820900fd4fca083298528229e5117ef7b19cbb82b4cf64933c0604755e02179d4080029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"a_set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"b_set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
 conv uint256 -> uint256
test_8acd05af9cad579d312487d031bada538878fc59e9a2422de028741231437aa6.sol: ERROR
test_8b78054e2774eb504436fe7ff45ae2b3b938a142ff4dc056083031d590f9c923.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol:C 6060604052341561000f57600080fd5b5b6101ab8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b6000806000806001809050809350506001831415156100c55760019350610179565b6002600360049091509050809050809250506004821415156100ea5760029350610179565b600560066007909150819150508091505060068114151561010e5760039350610179565b600b600c600d829250819150508093508194505050600b831415806101345750600c8214155b156101425760049350610179565b600b600c600d9091508191508090508093508194505050600c8314158061016a5750600d8214155b156101785760059350610179565b5b505050905600a165627a7a72305820362acf2becda6a8620ca55ef8e6210a96510dfb71958afe5a53bc1c7838496460029
test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol":{"keccak256":"0x716afd57ee24be5af8442a515bcb8acf17965419a8437afdb7715bed6a2e313b","urls":["bzzr://962ea99d5e4e66bc0fbc22c72af7467821505d2fa9c9bf15d606fc311a0c6180"]}},"version":1}
test_8bee95459d1441914eec5a303aa8f726a910e0ebe1ac463846116eac14a62516.sol: ERROR
test_8bf24a9a4a6fcbac7b272c50473972e6d7542e9241f52294b73cd71ec3f2b0ae.sol: ERROR
test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol:c 6060604052341561000f57600080fd5b5b60e68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008060008154600181600116156101000203166002900481101515607057fe5b815460011615608e5790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000290505b505600a165627a7a72305820ad3d797944aa69c76a4d9632b7df8df1b58a148b763254d00bcbe97f8c6765a70029
test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol":{"keccak256":"0x258b3129215b625fb758c82d966d5fc30c51b24294c4272e5fc73c70960be866","urls":["bzzr://928971424b097aeb7559c7eac8810b8d679ff1eadad0af309c464f85989609f4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol:C 6060604052341561000f57600080fd5b5b60ee8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081839060020a0290505b929150505600a165627a7a7230582094fd9b7d72797688004256d10d45373ea1ef8c7f3d5abca25e08d124eab5097e0029
test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol":{"keccak256":"0x8ea5d3e77dcba17b8a1100a3b39859e32985529a21579659becab7905e24fcc9","urls":["bzzr://44d021ac16dd62522dc7d878bcda107833cf7bfd5e23005c796bd3871ae7c38a"]}},"version":1}
test_8c29992e4977d3ed0b37a6432a72132558d4654ae2d49e30900435bba71baaea.sol: ERROR
test_8c4c74f609bbf4765bc4195a638e983a43c21bf0000f9dce8de1192a66d64b28.sol:C 
test_8c4c74f609bbf4765bc4195a638e983a43c21bf0000f9dce8de1192a66d64b28.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:D 60606040523415600e57600080fd5b5b5b5b5b5b60368060206000396000f30060606040525b600080fd00a165627a7a7230582075dbf08f78fc2b0909d2cd255cb7d8293c2185502970852e6d240cddb593f89b0029
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol":{"keccak256":"0x5f25e813e4c8df5fe7e462e306808b90ed6e92ddf149ee27d43d1b5ba22ea7ff","urls":["bzzr://f4469d5228f2d494070359494cd30a0796dd55b7ec148a781f7abaf488a70622"]}},"version":1}
test_8cf063f2816e4d1a1d31505bce0249a55a9339938ababc7472b7923684d1585e.sol: ERROR
test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol:test 6060604052341561000f57600080fd5b5b60a48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8090505b505600a165627a7a72305820dc0a6f7c205dfce775a18e3f4966d90c36c8731768d129dec7da00c445e680f40029
test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol":{"keccak256":"0xdec0d6f211a1480d8653e5fdf227d32bc77b928b71b22a1bcc355a73fb0413e7","urls":["bzzr://9a9f4e7a47a26b0a50bec089d7cab3aa35cb38d563770251f0192daa4835efe0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol:test 60606040525b5b5b610155806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a044b0701461003e575b600080fd5b341561004957600080fd5b61007e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506100d0565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b60008273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050503073ffffffffffffffffffffffffffffffffffffffff163190505b929150505600a165627a7a72305820a2a51425d3a9c2d0c07b251da6bf4f709db7a05afabd4508bf44d0e47966f8c40029
test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol":{"keccak256":"0x3c00949a51ea8fdc45b9193fdffc82434c374a54e84f2c9eb07db6ce63b8edc5","urls":["bzzr://b267e957f8767d6a2da77c3761d7c8deae908d3c55029860eb78027af0cfdbbc"]}},"version":1}
test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c120eaee5255e595cbebfd8a54df32623e569b4a1d3bc690674549976406d4f80029
test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol":{"keccak256":"0xd24c56a072acc1042c8d509585fa3bc6e76a333e65d6fa78860dc386cf087100","urls":["bzzr://39c36e2386455d6aa5399c152d2ad0a816d8c0c6819e77249f5f8d994e46d771"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:helper 6060604052341561000f57600080fd5b5b6101aa8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe01461005457806362548c7b146100ae578063f9633930146100c3575b600080fd5b61005c61012a565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161014a565b005b34156100ce57600080fd5b6100d6610167565b604051602081016100ec816000840184866100f6565b905080925061010e565b600084905061010482610113565b8452949350505050565b61011f565b60008115159050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b90565b60016000806101000a81548160ff0219169083151502179055505b565b60008060009054906101000a900460ff1690505b905600a165627a7a72305820a7cbbade0f95bbd99a59e7aaee89bf7f9a6364ed59f97d32c59c5cca67bcb8510029
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"},{"constant":false,"inputs":[],"name":"setFlag","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getFlag","outputs":[{"name":"fl","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":"helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":{"keccak256":"0x3392db80506a0f0bbd61f396c0f403e90e61fab53cd08acddff6a44813d55634","urls":["bzzr://6be4cf054e7b038331cc7f88b6de581fa44703bc5a8f880fae47f5797061a510"]}},"version":1}
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:test 60606040525b61000d610068565b604051809103906000f080151561002357600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610078565b6040516101c98061049b83390190565b610414806100876000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806331fe52e81461005457806396dfcbea146100bb578063fd72b6e914610160575b600080fd5b341561005f57600080fd5b6100676101c8565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce610269565b604051604081016100e4816000840184876100ff565b90506100f58160208401848661011c565b9050809350610117565b600084905061010d82610139565b8452949350505050565b610134565b600084905061012a8261014a565b8452949350505050565b610145565b60008115159050919050565b610154565b6000819050919050565b50505060405180910390f35b6101766004808035906020019091905050610335565b6040516020810161018c81600084018486610196565b90508092506101ae565b60008490506101a4826101b3565b8452949350505050565b6101bd565b6000819050919050565b505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362548c7b60026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600088803b151561025057600080fd5b87f1151561025d57600080fd5b50505050600190505b90565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96339306000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156102f957600080fd5b6102c65a03f1151561030a57600080fd5b5050506040518051905091503073ffffffffffffffffffffffffffffffffffffffff163190505b9091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312065fe0836000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303818588803b15156103c457600080fd5b6125ee5a03f115156103d557600080fd5b505050506040518051905090505b9190505600a165627a7a72305820c46edc5c7b1ae0e95a43ab7ab8a7a31303492b3d51c5198bac12f457c7e61bf900296060604052341561000f57600080fd5b5b6101aa8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe01461005457806362548c7b146100ae578063f9633930146100c3575b600080fd5b61005c61012a565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161014a565b005b34156100ce57600080fd5b6100d6610167565b604051602081016100ec816000840184866100f6565b905080925061010e565b600084905061010482610113565b8452949350505050565b61011f565b60008115159050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b90565b60016000806101000a81548160ff0219169083151502179055505b565b60008060009054906101000a900460ff1690505b905600a165627a7a72305820a7cbbade0f95bbd99a59e7aaee89bf7f9a6364ed59f97d32c59c5cca67bcb8510029
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"outOfGas","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"checkState","outputs":[{"name":"flagAfter","type":"bool"},{"name":"myBal","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":{"keccak256":"0x3392db80506a0f0bbd61f396c0f403e90e61fab53cd08acddff6a44813d55634","urls":["bzzr://6be4cf054e7b038331cc7f88b6de581fa44703bc5a8f880fae47f5797061a510"]}},"version":1}
test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol:C 60606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b60436045565b005b5b5600a165627a7a72305820a82a498e929bfbf725171ba247ad37c5d6d28d535a75fe1a4e0245e489e9175a0029
test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol":{"keccak256":"0x3ebb72496852666eeea51ec74b46792289ed91c42845591cff0630f150b89d31","urls":["bzzr://230739b91cd0fbb7a5cd084e73e894af3875fba3302e4db5f240f771182a50ad"]}},"version":1}
test_8de14ebf1857ba92a290125ffff0bd305a51b7a1fc05ca4184f8d44f122d48ff.sol: ERROR
test_8e8680780fdc619e3a1684d8e6f90b01be8d71c2d8d23087d754674f8ea6301f.sol: ERROR
test_8ea2251c00b5efcd8acf88ae3e622fc6995b9334e5ca345ba46ca21ea9c491a6.sol: ERROR
test_8f80a2edcbd5ed3d727ffd33bd1c7003f2ccfe7576ad3322d181b8c516100a5e.sol: ERROR
test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol:test 6060604052341561000f57600080fd5b5b60a48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b505600a165627a7a723058202203ed07a3175b27cb7c41ea30200bec64c7c1efe1295a68e7c9ecb80c171d690029
test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol":{"keccak256":"0xc660fa948470fb600e6eaacfa63ddfe4f7f0c3700ebc92782448273f0e8e45b0","urls":["bzzr://8c83cdba44aef647d22c5b881bb7f7b7f608f9253ac1e391a9ef9b8346ac0445"]}},"version":1}
test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol:C 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820b9575f8a29a2edc4e872b90f8ce4aa88302020b872fdb4ea68a12470203393b90029
test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol":{"keccak256":"0x838b93b5cf085229bcaf8d73767c1c8e48adc82a43118173e5363a8668493bef","urls":["bzzr://24153263939a6a90c679c603dba8c8988b741d18d5f17620ed00121690e289ce"]}},"version":1}
test_8ff1a5fd51838e63a1810d04e008795c86e39b52ddca0c3ce47380c8f98d34bd.sol: ERROR
test_9036a6b0126f288e6385e685edfd6821def9728256a796aafda4fc590cb19992.sol: ERROR
test_90af48599341cea294fa78bba9b3556a106c0dccd32fd8d1171d81651e66991b.sol: ERROR
test_90e85d40d23a67239a4f4dbd02b394cdd8a598e97c24d1299fb470dd53af8d20.sol: ERROR
test_90f4793b74d91ca4e07e528e8b775f8829b1cce5f2c16d7d7523e841b2244a5a.sol: ERROR
test_9131be56f5fdd5919aba5e4b2088f9f703163f47c047924e60f63c798f8cb84a.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806393245a0914603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a723058205f6f0f8122bcafcbecc03876afcf25b0bc743c15dea573a48092266e73219ec70029
test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul_and_add","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul_and_add(uint256,uint256)":{"notice":"Multiplies `a` by 7 and then adds `b`"}}}},"settings":{"compilationTarget":{"test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol":{"keccak256":"0xc6f22279a68782a863ddbe6d37f4b12a0cdf80ba612063da92dd163c1675c4a5","urls":["bzzr://5f17b4a07e9a03c6acbcf6e64bf3f24d242061945afedd5147485a7edc98a1fa"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol:c 6060604052341561000f57600080fd5b5b6102408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c298557814610049578063dd1730e2146100ae575b600080fd5b341561005457600080fd5b61005c61012e565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100dc600480803590602001909190803561ffff1690602001909190505061016c565b604051602081016100f2816000840184866100fc565b9050809250610114565b600084905061010a82610119565b8452949350505050565b610123565b6000819050919050565b505060405180910390f35b600060405180807f666f6f00000000000000000000000000000000000000000000000000000000008152506003019050604051809103902090505b90565b600082826091604051808481526020018361ffff1661ffff167e010000000000000000000000000000000000000000000000000000000000000281526002018260ff167f0100000000000000000000000000000000000000000000000000000000000000028152600101807f666f6f00000000000000000000000000000000000000000000000000000000008152506003019350505050604051809103902090505b929150505600a165627a7a72305820b766add90370cefd54f56e4d0531cd39fd45f703ae2a23a3ba1c33a5de731a490029
test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint16"}],"name":"bar","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol":{"keccak256":"0xa4e7b47fed1ce7a9fdd423539548a754b889c9f3f8375a806ca2f09fd71ac55e","urls":["bzzr://18303ab05e3513d62f9ecabeb306e6d17a7e9b4ea73f104b1b421936c395bd44"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 conv uint256 -> uint256
test_928197185d4e60d95371505de3cbc59590fadc472902456208c4693ef63c22b0.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol:C 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b600080600190506002905060028114151560b457600080fd5b600191505b5b50905600a165627a7a7230582080b29f5a2f2003e87467a9bbf4b817b8b55d14a68f6be7dccf2ed6ae1dcc0d1e0029
test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol":{"keccak256":"0xf51e0e1b6fe023a0de6d7c64cd526c46b2b69cfad3d8851efc218c5bd0bcc0d1","urls":["bzzr://f5154d0352a7b9b014f7271e4ebebb774321a3dcc7fafaa4b2620cfb3766ea5c"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix 606060405260016000806101000a81548160ff021916908315150217905550341561002957600080fd5b5b61015f806100396000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d909b40314610049578063d957dd3c146100b0575b600080fd5b341561005457600080fd5b61005c610117565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c3610129565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010c565b60008115159050919050565b505060405180910390f35b6000809054906101000a900460ff1681565b6000600190505b905600a165627a7a72305820ece9946f6f766adbe339b2e4fefaf22fc3ef3fe049a576785a93b7f26afca98b0029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"fix"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix_init 606060405260016000806101000a81548160ff02191690831515021790555060008060016101000a81548160ff021916908315150217905550341561004357600080fd5b5b6101e8806100536000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631054761c14610054578063d909b403146100bb578063d957dd3c14610122575b600080fd5b341561005f57600080fd5b610067610189565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce6101a0565b604051602081016100e4816000840184866100ee565b9050809250610106565b60008490506100fc8261010b565b8452949350505050565b610117565b60008115159050919050565b505060405180910390f35b341561012d57600080fd5b6101356101b3565b6040516020810161014b81600084018486610155565b905080925061016d565b600084905061016382610172565b8452949350505050565b61017e565b60008115159050919050565b505060405180910390f35b60008060019054906101000a900460ff1690505b90565b600060019054906101000a900460ff1681565b60008090505b905600a165627a7a723058206750ba9fda8ed9f4e31a32bb529e7bf06f970e02c524914cf49e10d3f7a830870029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix_init {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"checkOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"fix_init"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init 606060405260008060006101000a81548160ff021916908315150217905550341561002957600080fd5b5b61015e806100396000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d909b40314610049578063d957dd3c146100b0575b600080fd5b341561005457600080fd5b61005c610117565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c3610129565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010c565b60008115159050919050565b505060405180910390f35b6000809054906101000a900460ff1681565b60008090505b905600a165627a7a723058203efff6061724e54a529b8f9b55c8459adb28cbbd27e2fa7f33250823dd7f5ef70029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"init"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init_fix 606060405260008060006101000a81548160ff0219169083151502179055506001600060016101000a81548160ff021916908315150217905550341561004457600080fd5b5b6101e9806100546000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631054761c14610054578063d909b403146100bb578063d957dd3c14610122575b600080fd5b341561005f57600080fd5b610067610189565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce6101a0565b604051602081016100e4816000840184866100ee565b9050809250610106565b60008490506100fc8261010b565b8452949350505050565b610117565b60008115159050919050565b505060405180910390f35b341561012d57600080fd5b6101356101b3565b6040516020810161014b81600084018486610155565b905080925061016d565b600084905061016382610172565b8452949350505050565b61017e565b60008115159050919050565b505060405180910390f35b60008060019054906101000a900460ff1690505b90565b600060019054906101000a900460ff1681565b6000600190505b905600a165627a7a7230582061dd505a47d1cd3a8563ae0ca559be907ef3540d30b88cda290824e1879c25250029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init_fix {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"checkOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"init_fix"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b62fd43a2bd396191a0495fa25f7a9f2cfa6a8525c3c074db4ed0f381aac21.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol:C 6060604052341561000f57600080fd5b5b6101fe8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063a0b2b43b146100b0575b600080fd5b341561005457600080fd5b61005c610179565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6101116004808035806c0100000000000000000000000090049068010000000000000000900463ffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1690916020019091929050506101c6565b6040516020810161012781600084018486610131565b9050809250610149565b600084905061013f8261014e565b8452949350505050565b61016e565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490505b90565b60008290505b929150505600a165627a7a72305820d010c9ca3228a6b896590d196ebbf52f3bdba80de1a75f40fe0706d7dc70cd510029
test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"cb","type":"function"}],"name":"g","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol":{"keccak256":"0xc7888e15c352167054002e643d0a500cf4e655a118a8b991f77f2b84a89adf12","urls":["bzzr://75340ea34425b62a1693387fc3107ceef9f6f0ac069f29570cfd7b8ca81a8535"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_92c502d6ce1d103d2544d90c8fef681918bf82565e5602c5f4cb0051dda631d6.sol: ERROR
test_92cc180dd604d01708498f9cd3d31ebe7c9aff6e4522934bde6f119c2a8b4f59.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol:C 6060604052341561000f57600080fd5b5b61006f640100000000026101d217600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610063600261007d640100000000026101a5176401000000009004565b6000819055505b6100ac565b60006002820290505b919050565b60006100a482600160009054906101000a900467ffffffffffffffff166401000000009004565b90505b919050565b61020c806100bb6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063481b572614610054578063ab5b4456146100b9578063eee972061461012c575b600080fd5b341561005f57600080fd5b61006761019f565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da60048080359060200190919050506101a5565b604051602081016100f0816000840184866100fa565b9050809250610112565b600084905061010882610117565b8452949350505050565b610121565b6000819050919050565b505060405180910390f35b341561013757600080fd5b61014d60048080359060200190919050506101d2565b604051602081016101638160008401848661016d565b9050809250610185565b600084905061017b8261018a565b8452949350505050565b610194565b6000819050919050565b505060405180910390f35b60005481565b60006101ca82600160009054906101000a900467ffffffffffffffff1663ffffffff16565b90505b919050565b60006002820290505b9190505600a165627a7a72305820b66698e9d4d447c1eb4bd08dfcf995d49b3971016aa5bc43e89b095d1900566e0029
test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"result_in_constructor","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"use","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol":{"keccak256":"0xfc8b646be41b391145a52e37a705928aa9d60c8443e0126ff9a5a5f280b33cbf","urls":["bzzr://54cb42796e9bcbabbb790ce051b87e909b0650dab086d9ac32acdc60ad680d2f"]}},"version":1}
test_92e7c407ef10f78be75dcf6e8e75d9f77245b94e2ec3042efe42c18776eaa397.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol:c 6060604052341561000f57600080fd5b5b6101fe8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b600080606060405190810160405280600160ff168152602001600260ff168152602001600360ff1681525060009060036100f092919061015b565b506000600381548110151561010157fe5b906000526020600020900160005b5054606060405190810160405280600260ff168152602001600360ff168152602001600460ff16815250600060038110151561014757fe5b60200201518060ff169050915091505b9091565b82805482825590600052602060002090810192821561019c579160200282015b8281111561019b578251829060ff1690559160200191906001019061017b565b5b5090506101a991906101ad565b5090565b6101cf91905b808211156101cb5760008160009055506001016101b3565b5090565b905600a165627a7a7230582033bf8de1ca9656c190a1f44e209acd48bb0cae929c7fb9f6eb201fc9fb9a37070029
test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol":{"keccak256":"0x15b0b8e2191c57a09003f24e62d092e6451706388e3272c0db619baf4c31341c","urls":["bzzr://2fceeb91df1907ff29b322987663733c7471744a3ba16ee9d912ac55fd05887a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol:C 6060604052341561000f57600080fd5b5b61013d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b6000806000804281526020019081526020016000205414156100f85760056000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff98152602001908152602001600020819055505b6000804281526020019081526020016000205490505b905600a165627a7a72305820d16f23fe70604c578a3144bf577cdbd576bba4c3f43c136c515006c1f2a935ae0029
test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol":{"keccak256":"0xa0bdd0e75256333095a26625c1bb3294367622015b542c15ab7d456d826b2c9b","urls":["bzzr://66974b85c8011d57d4d184aceb2743631f8a05014564087c6a33d67ba68e5b64"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
test_932b5dd2ee38999135ed865eb6f331633b076b261f2ef5d094cfa1af31752132.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol:C 6060604052341561000f57600080fd5b5b61016c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14610049578063f8a8fd6d146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161011d565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b6000600790505b90565b600061013e610113905061013e90506101388163ffffffff16565b505b5090565bfe00a165627a7a723058205fe48d0730ac9ec87e621d799921e1250e4d29c4a74483013ac70ae45edebd970029
test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol":{"keccak256":"0x155c66211f17bf8646b3844f8cc5eb2d69190e6b9f2ffc3fd7486381539827a3","urls":["bzzr://f42ea623673ada831ecf767c12301f99f17f3a42b6e906711ea9d6fa93f627ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Child 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c298557814603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a723058204695811e625cdf77735efbc08d02286e11e5593b5da9e8fb80f930d057d8961b0029
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Child {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":"Child"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":{"keccak256":"0x96f6800dcc044f104be35ec501eb020edc61319363f86ae84fb515a102cd04d0","urls":["bzzr://e83796c300b44cfe14dcf8049de34d98464aabc570ee3dca179324d41532f2ab"]}},"version":1}
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Parent 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582090549b01b0cf7b6b18bad3f3f78168882fdd5e07636be8c10511712383145b190029
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Parent {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":"Parent"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":{"keccak256":"0x96f6800dcc044f104be35ec501eb020edc61319363f86ae84fb515a102cd04d0","urls":["bzzr://e83796c300b44cfe14dcf8049de34d98464aabc570ee3dca179324d41532f2ab"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol:c 6060604052341561000f57600080fd5b5b6102838061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806202293b1461005357806331955a2014610088578063b81bba791461009d575b600080fd5b341561005e57600080fd5b6100866004808035906020019091908035906020019091908035906020019091905050610122565b005b341561009357600080fd5b61009b610163565b005b34156100a857600080fd5b6100be6004808035906020019091905050610179565b604051604081016100d4816000840184876100ef565b90506100e5816020840184866100ef565b9050809350610107565b60008490506100fd8261010c565b8452949350505050565b610116565b6000819050919050565b50505060405180910390f35b8260008161013091906101b4565b508282101561015d578060008381548110151561014957fe5b906000526020600020900160005b50819055505b5b505050565b600060019080546101759291906101e0565b505b565b6000806001805490509150818310156101ae5760018381548110151561019b57fe5b906000526020600020900160005b505490505b5b915091565b8154818355818115116101db578183600052602060002091820191016101da9190610232565b5b505050565b8280548282559060005260206000209081019282156102215760005260206000209182015b82811115610220578254825591600101919060010190610205565b5b50905061022e9190610232565b5090565b61025491905b80821115610250576000816000905550600101610238565b5090565b905600a165627a7a723058205fa5e214abcfb4e39eaa1828232cc09ae3121c80ea71ab8a01e08e325273dd340029
test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"length","type":"uint256"},{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"setData1","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"copyStorageStorage","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData2","outputs":[{"name":"len","type":"uint256"},{"name":"val","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol":{"keccak256":"0xd4318f0d641cbb4668333a36b3e07fba5d641117b8e8d694482eb92988e43b5f","urls":["bzzr://4786dd00a2ba11b9d37742765deafdeb53fcc39c20ba960bd04d968879bb3148"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol:C 6060604052341561000f57600080fd5b5b61011e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b600060e3565b6000816000811460d0576001811460d85760c86001840360ad565b8302915060dd565b6001915060dd565b600191505b50919050565b60ea8260ad565b90505b9190505600a165627a7a723058208dc27488ed3f813b288ae0ecc5c4ab690afcc1e44c300ca55c1688b9239ad9c00029
test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol":{"keccak256":"0xcea57482fe15eca781d68268733f768be1faed5d86dd3b5aa5ac28712985a4bd","urls":["bzzr://6d23d49fe7ccc185455031964bf87e98e1765e112de585a6f5fb509901942eb7"]}},"version":1}
test_950faa97f622661ecab89eb5beb514c7a67f3557f2564bb8a5b2df21dfe2f6eb.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol:C 6060604052341561000f57600080fd5b5b6102038061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610054578063a56dfe4a146100bb578063c5d7802e14610124575b600080fd5b341561005f57600080fd5b610067610189565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b0565b60008115159050919050565b505060405180910390f35b34156100c657600080fd5b6100ce6101bd565b604051602081016100e4816000840184866100ee565b9050809250610106565b60008490506100fc8261010b565b8452949350505050565b610119565b600061ffff82169050919050565b505060405180910390f35b341561012f57600080fd5b6101376101d1565b6040516020810161014d81600084018486610157565b905080925061016f565b600084905061016582610174565b8452949350505050565b61017e565b6000819050919050565b505060405180910390f35b6000806000600760015560009150600290506000821415156101a757fe5b6002811415156101b357fe5b600192505b505090565b600060029054906101000a900461ffff1681565b600154815600a165627a7a7230582036b9acda9d6ff59a0e7812c67aa6c601f9e184f4ddf41e0dc845cd5f0423860e0029
test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint16"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"z","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol":{"keccak256":"0x8baed28f8a5724542a5bf9fa5014a1cef9b7ce93a90bc3941804a2d1d09818bf","urls":["bzzr://8256ea91a67a972468971c61e6353ce628b7bd1c4c27f45daf5bb7044b46603a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol:test 6060604052341561000f57600080fd5b5b60026000806101000a81548160ff0219169083600381111561002e57fe5b02179055505b5b60e6806100436000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806367cb61b614603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060009054906101000a900460ff16600381111560b457fe5b90505b905600a165627a7a72305820f2c3f1ccccdd2d5829de4fec035be1a66a4da7f01647b1412c7329a03aece7490029
test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getChoice","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol":{"keccak256":"0x17f5d8db9ab9f75813a1ff5e4e8129ce6f8bf19bc68c62c70ec79f500a539b76","urls":["bzzr://86fa0553eacce2689315a7ace4bc4f60c34c89abeeca870c51d4b03b7e245567"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582015ddaddbb15fe759748462e5469da6b56f613935a4b1209153e8523b9e4c38490029
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":{"keccak256":"0x03308c180ad5e6aff2a960dac5e73937907dc8077347f40e19fee18282ad278d","urls":["bzzr://7e410d439375d3ec18b78f97e0ab8a058f52e80d53a8263de723a3420bece33c"]}},"version":1}
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:Test 6060604052341561000f57600080fd5b5b61016e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063821cd9a71461003e575b600080fd5b341561004957600080fd5b6100dc6004808035906020019091908035151590602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190806040019091908035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019082018035906020019190919290505061012e565b604051602081016100f2816000840184866100fc565b9050809250610114565b600084905061010a82610119565b8452949350505050565b610123565b6000819050919050565b505060405180910390f35b6000600590505b99985050505050505050505600a165627a7a72305820a82cdfb616f02d7033625c63a5a008f84cf4205b8ee54e8b1bbd927ef353fba00029
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"},{"name":"","type":"bytes8"},{"name":"","type":"bool[2]"},{"name":"","type":"uint256[]"},{"name":"","type":"address"},{"name":"","type":"address[]"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":{"keccak256":"0x03308c180ad5e6aff2a960dac5e73937907dc8077347f40e19fee18282ad278d","urls":["bzzr://7e410d439375d3ec18b78f97e0ab8a058f52e80d53a8263de723a3420bece33c"]}},"version":1}
test_9574f689a972a457909962dbf85db2b324e77803035da7bf5f424bbd67223b2b.sol: ERROR
test_958db3ac1513d329da029c3955eeae176844da5e9003ce619bb2546246003d53.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol:test 6060604052341561000f57600080fd5b5b6101778061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634f8dd50d14610049578063b3de648b146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd600480803590602001909190505061013d565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b60006008820290505b919050565b60006007820290505b9190505600a165627a7a723058208b671f054019e3da6a1291af5b6b7c6b590da01eccc4c3ea730b7a1a521695710029
test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"uint256"}],"name":"c","outputs":[{"name":"e","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol":{"keccak256":"0x844197c659449e894182bf36b03506762e82cd2e6105a16bde4cf64f8910724f","urls":["bzzr://c94cd69e4e0a4d3e36f76ac95dad3d2c8bcdc231d21cbfc56ed7f2aa9e9f9353"]}},"version":1}
test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol:test 6060604052341561000f57600080fd5b5b60bb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b600060016002600360046005600660076008891816170301811515607d57fe5b06811515608657fe5b040290505b50505600a165627a7a723058207716011313c21528a572c1eee717ab7a3e908df4c415c0635916fc43f1fcd5ae0029
test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol":{"keccak256":"0xf7ad1b673d5e3290fdeef1116d971746e525706aa86c1d90fb78e7018387fea2","urls":["bzzr://c473a35e85849f5274a889e2382091ed4c3fe7d779ce39147885fc2b1c84937d"]}},"version":1}
test_95d10d87edc55d42f9ccc0922a38150c0142cf54b69384c69b6775c63fba7f32.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:c 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820cd3d5f33f6e446d9945c4d9df0a4fb6ba16c1924fef3df0a25f2de1f56c783e90029
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":{"keccak256":"0xd4a373a92ca8f479fe0ae64130bb0aac575cd9cbbb1728db91962989ff0a01c8","urls":["bzzr://161e5c198c0823a2c1571f1242cf96c461c6c7194563d980eaeacdee5435be3e"]}},"version":1}
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:d 6060604052341561000f57600080fd5b5b6101058061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d604f565b005b600073ffffffffffffffffffffffffffffffffffffffff16630dbe671f6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151560bb57600080fd5b6102c65a03f1151560cb57600080fd5b50505060405180519050505b5600a165627a7a72305820d4e9ecbdd75e23fcd4f9b23bd8c3a04c91987308e22bd5dd375959c0b02eb64c0029
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:d {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":"d"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":{"keccak256":"0xd4a373a92ca8f479fe0ae64130bb0aac575cd9cbbb1728db91962989ff0a01c8","urls":["bzzr://161e5c198c0823a2c1571f1242cf96c461c6c7194563d980eaeacdee5435be3e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol:c 6060604052341561000f57600080fd5b5b6103bd8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806352efea6e14610049578063d9c55ce11461005e575b600080fd5b341561005457600080fd5b61005c6100c3565b005b341561006957600080fd5b6100716100d3565b6040516020810161008781600084018486610091565b90508092506100a9565b600084905061009f826100ae565b8452949350505050565b6100b8565b6000819050919050565b505060405180910390f35b6000806100d09190610227565b5b565b600060036000816100e49190610249565b506004600060028154811015156100f757fe5b906000526020600020900160005b50600001816101149190610275565b5060056000600281548110151561012757fe5b906000526020600020900160005b50600001600381548110151561014757fe5b906000526020600020900160005b508161016191906102a1565b5060086000600281548110151561017457fe5b906000526020600020900160005b50600001600381548110151561019457fe5b906000526020600020900160005b5060048154811015156101b157fe5b906000526020600020900160005b5081905550600060028154811015156101d457fe5b906000526020600020900160005b5060000160038154811015156101f457fe5b906000526020600020900160005b50600481548110151561021157fe5b906000526020600020900160005b505490505b90565b508054600082559060005260206000209081019061024591906102cd565b5b50565b8154818355818115116102705781836000526020600020918201910161026f91906102cd565b5b505050565b81548183558181151161029c5781836000526020600020918201910161029b91906102fc565b5b505050565b8154818355818115116102c8578183600052602060002091820191016102c79190610328565b5b505050565b6102f991905b808211156102f557600080820160006102ec919061034d565b506001016102d3565b5090565b90565b61032591905b808211156103215760008181610318919061036f565b50600101610302565b5090565b90565b61034a91905b8082111561034657600081600090555060010161032e565b5090565b90565b508054600082559060005260206000209081019061036b91906102fc565b5b50565b508054600082559060005260206000209081019061038d9190610328565b5b505600a165627a7a72305820f88f243085e2deecdfd2f7c87eb8fb68120d84a2bbb7e3993f5993d1e32b80310029
test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol":{"keccak256":"0x7bc9a03b7e1efbd02fc09d9316eff9a52d80b8a79a885fe8fe4163a118c125d3","urls":["bzzr://584c2c9a3140212b7d54236a0d1d1a620e5fc084015e079d45d6ea224ae07c6b"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol:test 60606040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff806000806101000a81548160ff021916908360000b60ff160217905550341561004c57600080fd5b5b60da8061005b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e5aa3d5814603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b60008160000b9050919050565b505060405180910390f35b6000809054906101000a900460000b815600a165627a7a723058207daf701e3335b846efd2d6b74340af3cac3349833269dfa580554ad6e310357b0029
test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"i","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol":{"keccak256":"0x4bfd0abeda0680e2b4f79ca79da3cb7fa40b88ff30cf89d33947e396252d2e11","urls":["bzzr://269b09d56de7a408d277bb866028820addf32f3bca49dabc09a8d27516fffbf7"]}},"version":1}
test_9643829129f2a4d912ada8acc47cbe07e7372ae6f3d28a571ecbebe235f99bf8.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol:Test 6060604052341561000f57600080fd5b5b61011f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806399dbd65d14603d575b600080fd5b3415604757600080fd5b607a60048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505060e8565b60405160208101608e816000840184866097565b905080925060ad565b600084905060a38260b1565b8452949350505050565b60dd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b60008190505b9190505600a165627a7a72305820b660ad38a5e71f4ff7428ecf69978d07567c0ac730779ed18358e3df9adbacbd0029
test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes4"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol":{"keccak256":"0x917f2892be249011ed96978140e7de68716443fac401ee23edbc04fe5b1ae937","urls":["bzzr://31e752731aa728e368a276fd3536d005f8150edc6ee14de0fc08f9b62571adfb"]}},"version":1}
test_96f72ff945f87d3ab91a1075f1c42e571556097b85d742a299b9f4d1f8ecfefa.sol: ERROR
test_9726eddf145221f6487ad0a403593dccd21214e544236132de5ec2a0c292d00f.sol: ERROR
test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol:test 6060604052341561000f57600080fd5b5b60c28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b6007811115607c57600160716008830a6089565b016001819055506085565b60016000819055505b5b50565b600060015490505b9190505600a165627a7a7230582078dbeaf6ef79721ad115cff97747f23bfa9376d694c8ffb1130e5f4e481a589a0029
test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol":{"keccak256":"0x07bb877d24261c3754289074e20dc790226dee703543127ced4a28965a9fa756","urls":["bzzr://93f6be73c3cbba834d7f071b537ed5f7b28733a7363994dd46ecf016f9cf6643"]}},"version":1}
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:A 60606040523415600e57600080fd5b5b604b80601c6000396000f30060606040525b3415600f57600080fd5b601d5b60016000819055505b565b0000a165627a7a72305820960cd5821cb97ffac88e53cf0aa56550f0588cf507fbf7aaef310f8f8afa881f0029
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":{"keccak256":"0xd3fbdcb203cefe16ce95dbedd909ac6326d9080e877943e39aae8835e7eeb133","urls":["bzzr://e953e3401a7bfe2b967829437b1dd577f00e7448b2adada4beb8f85847a5e867"]}},"version":1}
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:C 60606040523415600e57600080fd5b5b604b80601c6000396000f30060606040525b3415600f57600080fd5b601d5b60026000819055505b565b0000a165627a7a723058204a69f8d0442d5bf048eaa7e0c112748672700b7bf9343ee5d0271801d49a33d70029
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":{"keccak256":"0xd3fbdcb203cefe16ce95dbedd909ac6326d9080e877943e39aae8835e7eeb133","urls":["bzzr://e953e3401a7bfe2b967829437b1dd577f00e7448b2adada4beb8f85847a5e867"]}},"version":1}
test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol:test 6060604052341561000f57600080fd5b5b60dc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b601273ffffffffffffffffffffffffffffffffffffffff16600260405180807f6162630000000000000000000000000000000000000000000000000000000000815250602001905060006040518083038185876187965a03f192505050505b5600a165627a7a723058201baf4b936e93574cb63eba4565be8d9f441b6479205c0844ccd02fb5f076468c0029
test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol":{"keccak256":"0x0dd6596ebbd7b9c3be1f6679680e64a44bec9ab3268134f26c6d3c84354cae23","urls":["bzzr://ac4e4c0d0dfa3efc2ceadabcda9d7631f51b0a94a277aaed9dcbf0331e96d90e"]}},"version":1}
test_98d2c73c973197709fd29998be82bb9b1166f5332fa2472818167c11b1f2f7ff.sol: ERROR
test_98ff12a82bf8af0b4ff8430565f9fd958c35a1a53f037c533e4ca3afa301e44e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol:test 6060604052341561000f57600080fd5b5b6101ad8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063a5850475146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610151565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b600061017f61015b905061014a61014261013a6101328463ffffffff16565b63ffffffff16565b63ffffffff16565b63ffffffff16565b91505b5090565b6000600290505b90565b61017f61016790505b90565b61017f61017390505b90565b61017f61015190505b90565bfe00a165627a7a72305820cd73bdb7310f10aa7a6f7ff6f18c7eac872dddc7bb85617636b9f144dede94e40029
test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f0","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol":{"keccak256":"0xa28f6b8e8ef10d593618488871059dc81136737b31521108bdb09a939be8e4ed","urls":["bzzr://faf61abc130f35a54449439b1369175f5f2620ce336dd6703ddc402ffad7a99f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol:C 6060604052341561000f57600080fd5b5b6102038061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100d9565b60405160808101610067816000840184896100a4565b9050610078816020840184886100a4565b9050610089816040840184876100a4565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505050505060405180910390f35b6000806000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6000806101000a81548160ff021916908360000b60ff16021790555060026000809054906101000a900460000b60000302600060016101000a81548160ff021916908360ff160217905550607960786000809054906101000a900460000b0202600060026101000a81548160ff021916908360000b60ff1602179055506000809054906101000a900460000b60000b9350600060019054906101000a900460ff1660ff169250600060029054906101000a900460000b60000b9150600060039054906101000a900460ff1660ff1690505b909192935600a165627a7a723058201e52b721fab146f6fa2db83f0c661c28bae49a50dac12f306f752101e3d554c40029
test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x1","type":"uint256"},{"name":"x2","type":"uint256"},{"name":"x3","type":"uint256"},{"name":"x4","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol":{"keccak256":"0xb2d70d3a84a6f0689d136ed6bda4d562b69e7d0e012e0f3a97e79ee22ffa658a","urls":["bzzr://dec4d1c6eeed0ec865a5470a6cf4d12d4c06f5e214a4173b8c5c0363eca76bfd"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol:C 6060604052341561000f57600080fd5b5b60fa8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d60af565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b60a4565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1690505b905600a165627a7a72305820bede1c60a4c7638230679e28c926051122be65406a0eb00e56cb61c1b82022460029
test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol":{"keccak256":"0x2f73f5cc2f4bfb1dcf8d073adc8d1fe85236f7481cdb3bb03b34955704f1d372","urls":["bzzr://09486f8f6c9a910575d18a26fc2965c60019f78a0b54c123c6faac1c437b1255"]}},"version":1}
test_998fa7ad119f89f9b72ec7bd7253fd9581e9aff7b6391bab26423c09d16fe6a2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820b191317089e7ab1e62bd2cb7ef3b7369de1ce129ab8900b97ee5c5c8a44fd8ff0029
test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Mul function"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol":{"keccak256":"0x1c4b52b3438a4a6956b0c0b69cf1c3ce5e65d4acf7211246e73e41135453ada1","urls":["bzzr://d3b46a2a4297bf2defa5803f0358a94c7243db3bdc55c42685c30cf6bf326c87"]}},"version":1}
test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol:test 60606040523415600e57600080fd5b5b600064e8d4a5100090505b505b60368060296000396000f30060606040525b600080fd00a165627a7a72305820d0306f12222b21035434000a2a285d795ef4a1f825edbac9c29be898cbdb5c050029
test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol":{"keccak256":"0xc4494f83e042e6f65841777159b55dbd8409a4346aab344737fcbebea186a4e1","urls":["bzzr://fad47c39b8b9a807c7ed42571ec7e11a1b33ceeddcf5a9ebdb069a0f18a0d3a9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol:C 6060604052341561000f57600080fd5b5b60d88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060019050600290508091505b50905600a165627a7a7230582065519e945b6b8e36b1c1cdc030cb560a15052840909627a7caeff0a26863a1af0029
test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol":{"keccak256":"0x7ff9b78f119102ae791d33038fb5e4bb7b6e22ed1398ddee9a3d70f7bce0bd34","urls":["bzzr://ad4563304212a48a8f279373091791e4d76af1f1deb14c5da332d148a2f56eb8"]}},"version":1}
test_9a1941c271bbc9c7168726b1e845a8e29164d1beca14ea669243d8401a0ccb51.sol: ERROR
test_9a72102700f174a263b424dd72e71d8e7b01a23737673cd8451a3bb01aeec2db.sol: ERROR
test_9aa997fb96961a011327c2a1f46b0814c69dff164abcdfc5b217ccf367618f10.sol: ERROR
test_9acc9ee29c0221d9e7b53b5f219b76a2b8a4a16c3715d1250736452c380f45d8.sol: ERROR
test_9affe3c7fa60e61edb13b5f669efc149128b90a18ae4b9b4a650e1dcdddff258.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol:test 6060604052341561000f57600080fd5b5b600260008001819055505b5b6101618061002b6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312ae63971461003e575b600080fd5b341561004957600080fd5b6100516100d9565b60405160808101610067816000840184896100a4565b9050610078816020840184886100a4565b9050610089816040840184876100a4565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505050505060405180910390f35b6000806000806000809050600060016000820154816000015590505080600001549450600160000154935060038160000181905550806002600082015481600001559050506002600001549250600080015491505b50909192935600a165627a7a723058204fc1cfc017a3d7c2d659fdeaf0c56943e625aa0813ebd9e76b40ae0b955716f70029
test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"assign","outputs":[{"name":"ret_local","type":"uint256"},{"name":"ret_global","type":"uint256"},{"name":"ret_global3","type":"uint256"},{"name":"ret_global1","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol":{"keccak256":"0x5d32c876288454f848e26076b22befd6d038da82294aed796cc6de2bf7bdff36","urls":["bzzr://f39081e83dfa0ebcd87b6de5d4f23b556eea554eeb3f304a0672097eabc4426f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol:c 6060604052341561000f57600080fd5b5b610a408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806354c5168914610054578063a38fc890146100db578063d1011ea714610162575b600080fd5b341561005f57600080fd5b610089600480803590602001908201803590602001919091929080359060200190919050506101c7565b6040516020810161009f816000840184866100a9565b90508092506100c1565b60008490506100b7826100c6565b8452949350505050565b6100d0565b6000819050919050565b505060405180910390f35b34156100e657600080fd5b6101106004808035906020019082018035906020019190919290803590602001909190505061026d565b6040516020810161012681600084018486610130565b9050809250610148565b600084905061013e8261014d565b8452949350505050565b610157565b6000819050919050565b505060405180910390f35b341561016d57600080fd5b610175610316565b6040516020810161018b81600084018486610195565b90508092506101ad565b60008490506101a3826101b2565b8452949350505050565b6101bc565b6000819050919050565b505060405180910390f35b60008383600091906101da9291906108a6565b5060008281546001816001161561010002031660029004811015156101fb57fe5b81546001161561021a5790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490505b9392505050565b6000838383818110151561027d57fe5b90509001357f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f0100000000000000000000000000000000000000000000000000000000000000900490505b9392505050565b600060236000816103279190610926565b5060777f0100000000000000000000000000000000000000000000000000000000000000026000601f815460018160011615610100020316600290048110151561036d57fe5b81546001161561038c5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060147f01000000000000000000000000000000000000000000000000000000000000000260006020815460018160011615610100020316600290048110151561040957fe5b8154600116156104285790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060017f0100000000000000000000000000000000000000000000000000000000000000026000601f81546001816001161561010002031660029004811015156104a557fe5b8154600116156104c45790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060087f0100000000000000000000000000000000000000000000000000000000000000026000601f815460018160011615610100020316600290048110151561054157fe5b8154600116156105605790600052602060002090602091828204019190065b8282829054901a7f010000000000000000000000000000000000000000000000000000000000000002179250601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060017f0100000000000000000000000000000000000000000000000000000000000000026000601e815460018160011615610100020316600290048110151561060957fe5b8154600116156106285790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060037f0100000000000000000000000000000000000000000000000000000000000000026000602081546001816001161561010002031660029004811015156106a557fe5b8154600116156106c45790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060006020815460018160011615610100020316600290048110151561071d57fe5b81546001161561073c5790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460106000601f81546001816001161561010002031660029004811015156107a857fe5b8154600116156107c75790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004026101006000601e815460018160011615610100020316600290048110151561083557fe5b8154600116156108545790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900402171790505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108e757803560ff1916838001178555610915565b82800160010185558215610915579182015b828111156109145782358255916020019190600101906108f9565b5b50905061092291906109ef565b5090565b81546001816001161561010002031660029004825481601f106109815782601f10610966575b826008026101000360020a809104028280011783556109ea565b60ff19168360005260206000205581800160010183556109ea565b82601f106109b1575082600052602060002080549082601f01602090048101906109ab91906109ef565b5061094c565b508180016001018355818115116109ea57601f016020900481601f016020900483600052602060002091820191016109e991906109ef565b5b505050565b610a1191905b80821115610a0d5760008160009055506001016109f5565b5090565b905600a165627a7a7230582053947272f8f2438c9bd045c201f3dc379c31904fa6540e180afc414c868315380029
test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg","type":"bytes"},{"name":"index","type":"uint256"}],"name":"storageCopyRead","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"arg","type":"bytes"},{"name":"index","type":"uint256"}],"name":"direct","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"storageWrite","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol":{"keccak256":"0xb5f250fdf2082a9953253e316d0f0966e9b9c644b107576e47aebf86b2b330f6","urls":["bzzr://12e691e26f037053b81a0d8eb3329e93facb2d83a755afcb25bc6f68c18c3fce"]}},"version":1}
test_9b4b9a7b758883d4ac7822c3b19dde789be3097275183ad69bd803dde93db547.sol: ERROR
test_9b8035ba320a5e3fa60d2dca08cb04d40ab1aed5ed0c30477b70e671fc2204ea.sol:test 
test_9b8035ba320a5e3fa60d2dca08cb04d40ab1aed5ed0c30477b70e671fc2204ea.sol:test 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:C 6060604052341561000f57600080fd5b5b6101a78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b60006100ad61014d565b60076040518059106100bc5750595b908082528060200260200182016040525b5081600001819052506008816000015160038151811015156100eb57fe5b906020019060200201818152505061010281610126565b8060000151600381518110151561011557fe5b9060200190602002015191505b5090565b60028160000151600381518110151561013b57fe5b90602001906020020181815250505b50565b602060405190810160405280610161610167565b81525090565b6020604051908101604052806000815250905600a165627a7a723058201cd53086b4ba5c72fc9b9eaa7ba578150d1f57dcd49ecbf0ab3558f8717aef840029
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":{"keccak256":"0xc0921ae77902b7abd00e02c0768d335d92babc7d739fdd69b509e205615bf12b","urls":["bzzr://86720fd237aeeeb2834d6440588cba8ae211d3ec46169469df024ada2f73521c"]}},"version":1}
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058209bfd69030ccefbb9756a9b2217477061a6b11bbc068e5036a489fbee66163d7c0029
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":{"keccak256":"0xc0921ae77902b7abd00e02c0768d335d92babc7d739fdd69b509e205615bf12b","urls":["bzzr://86720fd237aeeeb2834d6440588cba8ae211d3ec46169469df024ada2f73521c"]}},"version":1}
test_9c0239e7e77d910595c9b93ea0b073e4a84033eaed3d45c8aed31be23924bf3a.sol: ERROR
test_9cc26bc479d26d1a4073e4a523106dd40e90e7e9b2aeb120857ed6ec4029796f.sol: ERROR
test_9cd0e8a951ea943d3f339256cd1d7a9ca2c5481322f6d1f4e45aee7220d93d41.sol: ERROR
test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol:test 60606040523415600e57600080fd5b5b609b8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008073ffffffffffffffffffffffffffffffffffffffff163190505b505600a165627a7a72305820f8974c737c52aef2cf45477e488dbf9a5445eea7a3decb477ceb026092620dcc0029
test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol":{"keccak256":"0xdc02fa014144444fcdff3009926ed05ecc89c100fdb1891e37159a228622225b","urls":["bzzr://95e10050dd52d3793a5df1b0e7aeb63ae8d3b0becba942e147632e63ec0e9a5e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol:test 6060604052341561000f57600080fd5b5b6101008061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008060019150600290505b828111151560cd5780820291505b808060010191505060b3565b5b509190505600a165627a7a72305820e49dc7ca2816b74003cbc6c223ffe2515beddbec8878107df2f3bf47446edac00029
test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol":{"keccak256":"0x55f01d02c0d0537d45375687b70a7743aca9b6f7ae32d5f4d80ed110550f996e","urls":["bzzr://9098b1407f1ded3d416d3c5bd764481ad9b91f408ab02d3763266f293199926f"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:A 6060604052341561000f57600080fd5b5b6101678061001f6000396000f3006060604052361561004a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610053578063e2179b8e146100ba575b6100515b5b565b005b341561005e57600080fd5b610066610121565b6040516020810161007c81600084018486610086565b905080925061009e565b6000849050610094826100a3565b8452949350505050565b6100af565b60008115159050919050565b505060405180910390f35b34156100c557600080fd5b6100cd610131565b604051602081016100e3816000840184866100ed565b9050809250610105565b60008490506100fb8261010a565b8452949350505050565b610116565b60008115159050919050565b505060405180910390f35b600061012b610131565b90505b90565b6000600190505b905600a165627a7a72305820560f809042af7c6dad768e1ccadf27947cf2783371dcc98e73daace90b3ba1930029
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[],"name":"A","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":{"keccak256":"0xbfaee7947fb3af70ff1f2700e51680d84be00895b055af8ff47ed22404eefc24","urls":["bzzr://4a3abac3d65e769e3489f9c79590f470b8d3701b12b9290f38677b9d223bdd32"]}},"version":1}
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:C 6060604052341561000f57600080fd5b5b61018b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063fc68521a1461003e575b600080fd5b341561004957600080fd5b610075600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100c9565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100be565b60008115159050919050565b505060405180910390f35b6000808290508073ffffffffffffffffffffffffffffffffffffffff166326121ff06000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561013b57600080fd5b6102c65a03f1151561014c57600080fd5b5050506040518051905091505b509190505600a165627a7a723058205b2f52bc00e420f7e79ae952a644908d64a1f012b5e15efdf662c0972dd80a0a0029
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_interfaceAddress","type":"address"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":{"keccak256":"0xbfaee7947fb3af70ff1f2700e51680d84be00895b055af8ff47ed22404eefc24","urls":["bzzr://4a3abac3d65e769e3489f9c79590f470b8d3701b12b9290f38677b9d223bdd32"]}},"version":1}
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:I 
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:I 
test_9d4fdcd41285dd4c4f3d58d1726defef6191fa82620c72d73f5723afafa36efe.sol: ERROR
test_9df07950c11b7d3b2685d4f3a848707cb32b322fc5b63741991f7d776c0d0207.sol: ERROR
test_9e5c082e3092d0461e04042e5311929529ade5ed6bffa8b506d8a0467f87934f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol:c 6060604052341561000f57600080fd5b5b6105078061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806363e2359a1461003e575b600080fd5b341561004957600080fd5b61006a600480803590602001908201803590602001919091929050506100bc565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b60008282600091906100cf9291906101f6565b50600060019080546100e2929190610253565b50600160029080546100f59291906102b8565b506002600181548110151561010657fe5b906000526020600020900160005b50600481548110151561012357fe5b906000526020600020900160005b50546002600181548110151561014357fe5b906000526020600020900160005b50600381548110151561016057fe5b906000526020600020900160005b50546002600181548110151561018057fe5b906000526020600020900160005b50600281548110151561019d57fe5b906000526020600020900160005b5054600260018154811015156101bd57fe5b906000526020600020900160005b5060018154811015156101da57fe5b906000526020600020900160005b505417171790505b92915050565b828054828255906000526020600020906004028101928215610242579160400282015b8281111561024157828290600261023192919061031a565b5091604001919060040190610219565b5b50905061024f919061035a565b5090565b82805482825590600052602060002090600a0281019282156102a75760005260206000209160040282015b828111156102a6578282906004610296929190610386565b50916004019190600a019061027e565b5b5090506102b491906103c3565b5090565b82805482825590600052602060002090810192821561030957600052602060002091600a0282015b8281111561030857828290600a6102f89291906103ef565b5091600a019190600101906102e0565b5b5090506103169190610439565b5090565b8260048101928215610349579160200282015b8281111561034857823582559160200191906001019061032d565b5b5090506103569190610465565b5090565b61038391905b8082111561037f5760008181610376919061048a565b50600401610360565b5090565b90565b82600a81019282156103b2579182015b828111156103b1578254825591600101919060010190610396565b5b5090506103bf9190610465565b5090565b6103ec91905b808211156103e857600081816103df91906104a6565b50600a016103c9565b5090565b90565b828054828255906000526020600020908101928215610428579182015b8281111561042757825482559160010191906001019061040c565b5b5090506104359190610465565b5090565b61046291905b8082111561045e576000818161045591906104b9565b5060010161043f565b5090565b90565b61048791905b8082111561048357600081600090555060010161046b565b5090565b90565b5060008155600101600081556001016000815560010160009055565b5080600a01906104b69190610465565b50565b50805460008255906000526020600020908101906104d79190610465565b5b505600a165627a7a72305820182f2ff33d06e5367fabd32922e32a6d035d525f6c6cd3d4523ca4299c6bda1f0029
test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"d","type":"uint256[2][]"}],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol":{"keccak256":"0xf2fcedb181d6510e956503970fd0eb885027ad0d50d66c7256503bbb53ed228a","urls":["bzzr://f7ffcd8cbbd15991582fcbe17f297b600eba7e1041ab4a638e8f5559298502a3"]}},"version":1}
test_9fef6910d0cf850f405646dca5b0f40f2b849245105b1ff3a23b62c495ab9fa8.sol: ERROR
test_9ff93aa9996f9cc7eea14b5fcaa482b846f9f781d7dbf9b824e7bb30ba3e5812.sol:Interface 
test_9ff93aa9996f9cc7eea14b5fcaa482b846f9f781d7dbf9b824e7bb30ba3e5812.sol:Interface 
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:A 60606040523415600e57600080fd5b5b6101448061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6055606e565b604051809103906000f0801515606a57600080fd5b505b565b604051609b8061007e83390190560060606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820e2c7d14c0398262ff702d40125eeaf89c12d407e5256728bc696d4d177a14acd0029a165627a7a72305820618b6e7bb760cf347ff2187563ae732809a8b38f4c3843d7de469a7cde1364b30029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:B 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820e2c7d14c0398262ff702d40125eeaf89c12d407e5256728bc696d4d177a14acd0029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:C 60606040523415600e57600080fd5b5b6101448061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6055606e565b604051809103906000f0801515606a57600080fd5b505b565b604051609b8061007e83390190560060606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820e2c7d14c0398262ff702d40125eeaf89c12d407e5256728bc696d4d177a14acd0029a165627a7a723058201fb80528f420dd2d025f364c143a3f19cdc9ed6d8fdcfc47699b51aad4f007320029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol:c 6060604052341561000f57600080fd5b5b6101b08061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b6000806004600060086009811015156100ca57fe5b0160005b5081905550600060099060096100e5929190610115565b506009805490509150600960088154811015156100fe57fe5b906000526020600020900160005b505490505b9091565b82805482825590600052602060002090810192821561014e579182015b8281111561014d578254825591600101919060010190610132565b5b50905061015b919061015f565b5090565b61018191905b8082111561017d576000816000905550600101610165565b5090565b905600a165627a7a72305820d22cec4a16b36ca9c4c69da75b85d6b2679149f217aef167f253417bac2440e00029
test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol":{"keccak256":"0x078e503ae990ea90515cf2a2086a05db55e12193bca38f7b96f9c29e7b7e01c0","urls":["bzzr://614515d1231ce8b286ca60844bf5daa40840434310fc788b4f7178d22ac47094"]}},"version":1}
test_a05a3293a803db028f8d0c1778229a86a02fe367d66bdac135b35bd4da2dbdbe.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:receiver 6060604052341561000f57600080fd5b5b6101258061001f6000396000f300606060405236156047576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146061578063cba2534f1460bd575b3415605157600080fd5b605f5b60806000819055505b565b005b3415606b57600080fd5b607160dd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b341560c757600080fd5b60db600480803590602001909190505060e3565b005b60005481565b6001810160008082825401925050819055505b505600a165627a7a7230582040d2c82840c8169c645e849bc97bf94a6504a6df218e7e86f878c7145f5f3d2e0029
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":"receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":{"keccak256":"0xfb492946172c1469e2aa8a3f4142d91ae96716ed220bc0bec8b32a5492950fa0","urls":["bzzr://459dfdf201f2cba600f19a5a8bab6a55e790868e431785be444e2356cf874a24"]}},"version":1}
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:sender 6060604052341561000f57600080fd5b5b610018610073565b604051809103906000f080151561002e57600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610083565b604051610144806104e683390190565b610454806100926000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c6bb4361461007c57806352efea6e146100e1578063d264e05e14610148575b341561006057600080fd5b61007a5b6000366001919061007692919061033b565b505b565b005b341561008757600080fd5b61008f6101af565b604051602081016100a5816000840184866100af565b90508092506100c7565b60008490506100bd826100cc565b8452949350505050565b6100d6565b6000819050919050565b505060405180910390f35b34156100ec57600080fd5b6100f461025f565b6040516020810161010a81600084018486610114565b905080925061012c565b600084905061012282610131565b8452949350505050565b61013d565b60008115159050919050565b505060405180910390f35b341561015357600080fd5b61015b610277565b604051602081016101718160008401848661017b565b9050809250610193565b600084905061018982610198565b8452949350505050565b6101a4565b60008115159050919050565b505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561023e57600080fd5b6102c65a03f1151561024f57600080fd5b5050506040518051905090505b90565b60006001600061026f91906103bb565b600190505b90565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160405180828054600181600116156101000203166002900480156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b505091505060006040518083038160008661646e5a03f191505050600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061037c57803560ff19168380011785556103aa565b828001600101855582156103aa579182015b828111156103a957823582559160200191906001019061038e565b5b5090506103b79190610403565b5090565b50805460018160011615610100020316600290046000825580601f106103e15750610400565b601f0160209004906000526020600020908101906103ff9190610403565b5b50565b61042591905b80821115610421576000816000905550600101610409565b5090565b905600a165627a7a7230582082ebacc717031348b0a255ac27bed0ee7815137524a1a9498a26cdbf81d2de6a00296060604052341561000f57600080fd5b5b6101258061001f6000396000f300606060405236156047576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146061578063cba2534f1460bd575b3415605157600080fd5b605f5b60806000819055505b565b005b3415606b57600080fd5b607160dd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b341560c757600080fd5b60db600480803590602001909190505060e3565b005b60005481565b6001810160008082825401925050819055505b505600a165627a7a7230582040d2c82840c8169c645e849bc97bf94a6504a6df218e7e86f878c7145f5f3d2e0029
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"val","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"clear","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"forward","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":"sender"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":{"keccak256":"0xfb492946172c1469e2aa8a3f4142d91ae96716ed220bc0bec8b32a5492950fa0","urls":["bzzr://459dfdf201f2cba600f19a5a8bab6a55e790868e431785be444e2356cf874a24"]}},"version":1}
test_a068779a2cfdc1d27117c0425d7421d1c68a7d3d4d603fb414cb1308bfc4f132.sol: ERROR
test_a07c7d8da8638e924675f8887300aa76e5b5b0bb1e32e0cf7b5a2120fbf335c9.sol: ERROR
test_a0b712548b30efb2e4727791cc07779bcd4d9e31efbbda6c3b12f24a9f934bd4.sol: ERROR
test_a0ef0d278e4d56ca36c4abb3c594d99d52c8876b6a03aba134b775e0882baef8.sol: ERROR
test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60556074565b6040805190810160405280600181526020016001151581525090505b50565b60408051908101604052806000815260200160001515815250905600a165627a7a72305820cae0f33225ebb78cea680237e6b1bb1cc8ecd25aa57f82b914e6f2ae1505e3e20029
test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol":{"keccak256":"0xbfbeee2e066c781b82072e884dac9e357159f700f338765222d199fb1b664a7b","urls":["bzzr://982cb006088788355fea76482c81c8dcd85288dd8d9530c7a8f07f74ce5e46cc"]}},"version":1}
test_a17f098b8a60bf705f49a611efef0df25f6b940fe9b0f7cc101dc3e73a033329.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol:test 6060604052341561000f57600080fd5b5b61017d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637a9839c214610049578063e9a58c40146100bc575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610138565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100e66004808035906020019091908035906020019091905050610143565b604051602081016100fc81600084018486610106565b905080925061011e565b600084905061011482610123565b8452949350505050565b61012d565b6000819050919050565b505060405180910390f35b60008190505b919050565b600081830190505b929150505600a165627a7a72305820f2c3fe4cdcb62d84315ca75b94e4d6fc73207af69f82f814c4b19abbe8b9b5030029
test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol":{"keccak256":"0x0ca7b924c5208e9c6ace12ad79da61594e0d662d49500e8c627a5cad4eb9e7c1","urls":["bzzr://70de6236bd7632713dab4414a78119b9c956c198b387bf88386d63dd975e93a0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol:test 6060604052341561000f57600080fd5b5b60fb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d406534c14603d575b600080fd5b3415604757600080fd5b604d60a9565b604051604081016061816000840184876079565b90506070816020840184866079565b9050809350608f565b60008490506085826093565b8452949350505050565b609d565b6000819050919050565b50505060405180910390f35b6000806000806000600592506006915060079050600092508194508093505b50505090915600a165627a7a7230582037fc63618eadd1af7619af09945c5cdcb2cfd36c374ddea0e2734913ddadb69b0029
test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"delLocal","outputs":[{"name":"res1","type":"uint256"},{"name":"res2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol":{"keccak256":"0xb5fb8a4624c03afa63adb7e5184abc7bf0bfafbdcbfdecfdd9e55dfd34c78471","urls":["bzzr://f64387b5ce5d8e9244fd6ed599b1f1cd94c4071df927396367387748d6bf7f47"]}},"version":1}
test_a1e7886c6972414c41914214582e5d16af3372033464486598ba35a4d1ffd4db.sol: ERROR
test_a230f3312a66875d0b98b1f3059f2e4d4d7ff0d8b08af0909c5f040dfaa327a7.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol:C 6060604052341561000f57600080fd5b5b61004b640100000000026100c1176000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610055565b6000600790505b90565b60f7806100636000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806392d0d15314603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060bb6000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b6000600790505b905600a165627a7a723058207a691a388698ae70c0b563ec1fa036003cc59868025e161780119606ef972cf70029
test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol":{"keccak256":"0x0a9686ad10383beb5a63e6546c8ef5e5b74dad9f4f533fb7000722b9088dc489","urls":["bzzr://9cb9e3dcbe047fb4c74c3bf20b61aaef087b7bf3b16655eaecb2b872fcd5f682"]}},"version":1}
test_a292bd1b13da75cad5b25b157dcc718305188547796306e42e15fa738e5d1f4b.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol:test 6060604052341561000f57600080fd5b5b6101048061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060c0565b604051604081016078816000840184876090565b90506087816020840184866090565b905080935060a6565b6000849050609c8260aa565b8452949350505050565b60b4565b6000819050919050565b50505060405180910390f35b6000806000600890508392508091505b5092509290505600a165627a7a723058206f6497b354f2aabe3f2758f9ff2e42f2d1b2c36cca224f4f57aa2b313f15e5500029
test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"},{"name":"ret_g","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol":{"keccak256":"0x71da32b0021deb9328047c5ecd9018f3a9c6a604b06cab5460fa4c5e69d959e2","urls":["bzzr://ff1b2ded29969657f5b4876c7d8fc042b18d61f6de7be9c9e4827cbf741b65cc"]}},"version":1}
 conv enum base.Choice -> enum base.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582001680a217d0de573947f21abffa7b90dd135058d8634ced5bdf14ff9645d587a0029
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":"base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":{"keccak256":"0x2409cd125182d61050e6b0297cf4d43ef529abc7d7bc0ddd23ed2659a080b59a","urls":["bzzr://1720abf81b1f2bb9450a831738980da35524d906d21c368f13a56b0fc4615d89"]}},"version":1}
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806385bb7d6914603d575b600080fd5b3415604757600080fd5b604d60a8565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b609d565b600060038210600081146095576097565bfe5b50919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820306da2f82f9ad6b7582b5755a99c49217e32a1bb345aa51e9b4fa132b037d9a10029
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":{"keccak256":"0x2409cd125182d61050e6b0297cf4d43ef529abc7d7bc0ddd23ed2659a080b59a","urls":["bzzr://1720abf81b1f2bb9450a831738980da35524d906d21c368f13a56b0fc4615d89"]}},"version":1}
test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol:c 6060604052341561000f57600080fd5b5b6101b08061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806338b28cb8146100545780636bc5fb1914610069578063d9c55ce11461007e575b600080fd5b341561005f57600080fd5b610067610093565b005b341561007457600080fd5b61007c6100a6565b005b341561008957600080fd5b6100916100b7565b005b60056014816100a29190610111565b505b565b601460006100b4919061013d565b5b565b600060156014816100c89190610111565b50600090505b60148054905081101561010d57600181016014828154811015156100ee57fe5b906000526020600020900160005b50819055505b8060010190506100ce565b5b50565b81548183558181151161013857818360005260206000209182019101610137919061015f565b5b505050565b508054600082559060005260206000209081019061015b919061015f565b5b50565b61018191905b8082111561017d576000816000905550600101610165565b5090565b905600a165627a7a7230582081fd6344246760b71dcace93f2dfd0e6bb9e6eb59e3c020fa5c187ffb037cfc20029
test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"halfClear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fullClear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol":{"keccak256":"0xbd265582aa11155de243c9f58db084c8b2e8dadf3fd86c9add154ca4bea632fe","urls":["bzzr://b3ac8a8be8b488962911925530c22a73bdb8575a20de70cd4112c4e7217b7f9c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol:test 6060604052341561000f57600080fd5b5b61014f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b60005b600182111561011a57600a8214156100cb5761011a565b5b60058211156101025760088214156100e357610102565b81806001900392505060068214156100fa576100cc565b81905061011e565b8180600190039250506003821415610119576100b4565b5b8190505b9190505600a165627a7a72305820d4d7c266ed8a1505da3a75693920b1ddd6e10d0ac175f2c7fc9deb2208134fa00029
test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol":{"keccak256":"0xcf5ff73b6d4bbb9f2f6f8b96f0c41da0706bab4e206e917d4e92950459c82006","urls":["bzzr://1e391047567012eb22e0aba5d78c2b588676d01729b2b801596e2f785b204597"]}},"version":1}
test_a460f9701ede782f9f5d1cc0d12119591b73d39ccf2ff386d69971211f1c769d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol:c 6060604052341561000f57600080fd5b5b6102248061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ab06ee5146100545780631f7b6d32146100d25780639507d39a14610137575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101aa565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c7565b60008115159050919050565b505060405180910390f35b34156100dd57600080fd5b6100e56101d0565b604051602081016100fb81600084018486610105565b905080925061011d565b600084905061011382610122565b8452949350505050565b61012c565b6000819050919050565b505060405180910390f35b341561014257600080fd5b61015860048080359060200190919050506101da565b6040516020810161016e81600084018486610178565b9050809250610190565b600084905061018682610195565b8452949350505050565b61019f565b6000819050919050565b505060405180910390f35b6000816000846004811015156101bc57fe5b0160005b5081905550600190505b92915050565b6000600490505b90565b600080826004811015156101ea57fe5b0160005b505490505b9190505600a165627a7a7230582078f2ff53cf1eae24125e09776c35a7a5f7cc9721991d557eb7b03ad7eb22e5310029
test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"length","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol":{"keccak256":"0x954e0c43337e430af024e82ba033217cb50357227fc5abd906854468a9af5f87","urls":["bzzr://496e803876a20cbb9820a9d351c657c6e6cb10565128ebc336a8e7abe457fb3a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol:test 6060604052341561000f57600080fd5b5b60086000819055505b5b60cb806100286000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820b5cf55bddfa373cc9171e89a203e1f15f4094f0af5d5d94dadca2519091973820029
test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol":{"keccak256":"0xe0048f7edc1e07a5dfafa92a90d94a6f8420c6ccebd181fbcd7af6822b9e2360","urls":["bzzr://a72555c46d267d3e75d2c3b0cd3574aa3f70f6f04463efb2cf7d3df8cbaa6e3c"]}},"version":1}
test_a514682d88b29b64fbfffd8a00161f001d1b5d4dd599933cd6657d1bfec50e34.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol:C 6060604052341561000f57600080fd5b5b6101008061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b6000816001811460c0576002811460c8576002915060cd565b6008915060cd565b600991505b505b9190505600a165627a7a723058202f707f4af139f4213141f3eb910f069e47e459e6328e62d0b1c1f3e5baeef0bd0029
test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol":{"keccak256":"0xd26691c1f6b0e9c4ff931b1724b610239a0c0aa59b4a0f04c9ddece0d2673e37","urls":["bzzr://8475ad55829a0e9c565429c60ec8c0f8f7505c640d9d1e745b0cb39afdbd1d25"]}},"version":1}
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol:test 6060604052341561000f57600080fd5b5b61014d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302143aa91461003e575b600080fd5b341561004957600080fd5b61006a6004808035151590602001909190803590602001909190505061010e565b60405160608101610080816000840184886100c9565b9050610091816020840184876100ac565b90506100a2816040840184866100c9565b90508094506100c4565b60008490506100ba826100e6565b8452949350505050565b6100e1565b60008490506100d7826100f7565b8452949350505050565b6100f2565b60008115159050919050565b610101565b6000819050919050565b5050505060405180910390f35b60008060008392508491505b92509250925600a165627a7a723058203dd9cd5f6fa96eb2a2a8b90ca78ab0d35341b9a3afc3d3136d1839b5a3781bb30029
test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x1","type":"bool"},{"name":"x2","type":"uint256"}],"name":"run","outputs":[{"name":"y1","type":"uint256"},{"name":"y2","type":"bool"},{"name":"y3","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol":{"keccak256":"0xf6254876b67349aeab1ec45eb7326c8f65e62d2ad18f89f93163069d289c7068","urls":["bzzr://3bc8a2d7a3ef509ea9f11dbf19f4d90f9b128a37f72a71d9d858bfa811d41750"]}},"version":1}
test_a6aa8db9c3d1650ca95de6f31ba8404eb594c6cdbfbd51d3dd978a2461d81e56.sol: ERROR
test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol:test 6060604052341561000f57600080fd5b5b60b38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b600081806001019250826001019250821882806001900393501882600190039250821890505b50505600a165627a7a72305820c6de4cf36b9983e841d1f8528ee2573274a4bae3b9a48620828c08850582f0f20029
test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol":{"keccak256":"0xcea4fab0885ee60d9682b05edbfbdbfc9352147616abad3b27fee74b18539f4d","urls":["bzzr://2cf49a09157df0807477e124f2ebce95b5ba7e3747416fbb6af557dc7055dbc1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol:test 6060604052341561000f57600080fd5b5b6102a68061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b6000816000816100c1919061018c565b505b60c88210156101785760097f010000000000000000000000000000000000000000000000000000000000000002600083815460018160011615610100020316600290048110151561011057fe5b81546001161561012f5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555081820290505b8160010191506100c3565b610184600183036100b1565b90505b919050565b81546001816001161561010002031660029004825481601f106101e75782601f106101cc575b826008026101000360020a80910402828001178355610250565b60ff1916836000526020600020558180016001018355610250565b82601f10610217575082600052602060002080549082601f01602090048101906102119190610255565b506101b2565b5081800160010183558181151161025057601f016020900481601f0160209004836000526020600020918201910161024f9190610255565b5b505050565b61027791905b8082111561027357600081600090555060010161025b565b5090565b905600a165627a7a72305820d8474627a757d322767d0ee39345f6deb116940c759e96493fc1c058c9af15420029
test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol":{"keccak256":"0xc653a4c23ca5151ab22043ccd96e7b756fc65077013a1973b5cc2b977f9684e5","urls":["bzzr://5fdc705bd2956fe889dc4cb9f31d31c127dffb0622a645f0f0ba7d8996eb2bec"]}},"version":1}
test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820bc5ef23439ade8284ad5f2938cdc6064cf056a92a97e1a224dfb2f918599b96c0029
test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol":{"keccak256":"0x6967258ae7240f6d307eb2b13b2e453001976d33835bf5e9c40b98d7b1ddd21d","urls":["bzzr://6781ebdc73d2b1f6778c2911f6dadf3d9e311cc2946663f984679e4dc1d1d706"]}},"version":1}
test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820022fc92bdd562ee449c725d49d2925685da20b46313c12f049cda750d24e171f0029
test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol":{"keccak256":"0xf4d355219e15d43c51163733a33ebea9ca1632b8c9568022f10cfcb8fd02369e","urls":["bzzr://21b6313ef03a884aee29b0506064fdc77a53fa363a6bfd79b1cdc5de5b091bc2"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv int_const 1 -> uint256
 conv bool -> bool
 conv int_const 3 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_rational_1_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_rational_3_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		
			function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:First 6060604052341561000f57600080fd5b5b61024b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd1461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b600080600173ffffffffffffffffffffffffffffffffffffffff166322ecff5660018060036000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401606081016101148160008401848861015d565b905061012581602084018487610140565b90506101368160408401848661017a565b9050809450610158565b600084905061014e82610197565b8452949350505050565b610175565b600084905061016b826101b7565b8452949350505050565b610192565b6000849050610188826101ce565b8452949350505050565b6101a3565b60008115159050919050565b6101b2565b6000819050919050565b6101c9565b60006101c2826101a8565b9050919050565b6101e0565b60006101d9826101a8565b9050919050565b50505050602060405180830381600087803b15156101fd57600080fd5b6102c65a03f1151561020e57600080fd5b505050604051805190501190505b905600a165627a7a72305820472e75011fb98d9c187b0de9c7211363fb90bd7f074c38076d3e2ac61e7de4390029
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:First {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":"First"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":{"keccak256":"0x7a300144e5475fe94c4057f70c00f3bdfce163d63d9ba68e263b2caeef2d01af","urls":["bzzr://11b4c0c9062c49955f8ee822b455eabf723e375608f7179b12d5e756b882776c"]}},"version":1}
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:Second 6060604052341561000f57600080fd5b5b6101988061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806322ecff561461003e575b600080fd5b341561004957600080fd5b610073600480803590602001909190803515159060200190919080359060200190919050506100c5565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b600060011515600273ffffffffffffffffffffffffffffffffffffffff1663946644cd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561013857600080fd5b6102c65a03f1151561014957600080fd5b50505060405180519050151514156101645760019050610165565b5b93925050505600a165627a7a72305820e22a5cc2ec3527867ecf201cece42af6f4fe1230fa1ee020ef987c85e3fee7ae0029
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:Second {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"},{"name":"","type":"uint256"}],"name":"fun","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":"Second"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":{"keccak256":"0x7a300144e5475fe94c4057f70c00f3bdfce163d63d9ba68e263b2caeef2d01af","urls":["bzzr://11b4c0c9062c49955f8ee822b455eabf723e375608f7179b12d5e756b882776c"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol:c 6060604052341561000f57600080fd5b5b61017e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a6565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009b565b60008160000b9050919050565b505060405180910390f35b60006100b0610128565b60a060405190810160405280600160000b60000b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60000b81526020016000800b81526020016000800b81526020016000800b815250905080600060058110151561011c57fe5b602002015191505b5090565b60a0604051908101604052806005905b6000800b81526020019060019003908161013857905050905600a165627a7a72305820e05ceed2e24ac32e410d0cb0bd36c69b78da25d2b21666e6ff1471467bb9de490029
test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol":{"keccak256":"0x55ed12500397527fac8fab65948a2bb98ebf3fde213e790758969dd0bfeac034","urls":["bzzr://00d43610f3b0643715aa0f1703b9c9b00403e7de4f7a29ea81e2f7076e1fcfd0"]}},"version":1}
test_a83fe2302a56218b3928e24a4ce81d9a0fc9f929dfdcaa4e2d719804ac8f5766.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol:C 60606040526112346000806101000a81548161ffff021916908361ffff16021790555061ffff600060026101000a81548161ffff021916908361ffff160217905550341561004c57600080fd5b5b6101f48061005c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100d9565b60405160808101610067816000840184896100a4565b9050610078816020840184886100a4565b9050610089816040840184876100a4565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505050505060405180910390f35b600080600080600080600281819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff16021790555050600060049054906101000a900461ffff1661ffff169050600060046101000a81549061ffff02191690556002600060028282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055506000809054906101000a900461ffff1681600060049054906101000a900461ffff16600060029054906101000a900461ffff168361ffff1693508161ffff1691508061ffff16905094509450945094505b50909192935600a165627a7a72305820f51998bcce084a1a3fab7aff2a99e9d6ac149bdb9b655e7bb112eaf98b95358f0029
test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol":{"keccak256":"0x1f2b24ea6fa0b46b80ae9e14a868cf55ced5e7ac344bde96249b691f54db294a","urls":["bzzr://2d01c86a90c454ce25ab45d5937955bcae354149329ab1fc868d1134b65bf542"]}},"version":1}
test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol:C 60606040523415600e57600080fd5b5b60a18061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000806000806000600194506001935060018560020192509250600190505b50505050505600a165627a7a72305820d4d875624e94dc348a63f247b1d4189dadb1b70d67cf8a97c1e6db12bb133b6a0029
test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol":{"keccak256":"0x9703343df9474fa7bf58aef039b2c01a746559f879a6d95790599a76d43ee155","urls":["bzzr://950853b69cbb8409b830a8966082ab5fef31ea407cdd71e3a217b7ac943f9b33"]}},"version":1}
test_a975cbcedf834e5bb49a21b02461f67a97407888f6c13625077728462d7157d8.sol: ERROR
 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol:Test 6060604052341561000f57600080fd5b5b6101218061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635ad298bd14603d575b600080fd5b3415604757600080fd5b607a60048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505060ca565b60405160208101608e816000840184866097565b905080925060ad565b600084905060a38260b1565b8452949350505050565b60bf565b600061ffff82169050919050565b505060405180910390f35b6000817c0100000000000000000000000000000000000000000000000000000000900490505b9190505600a165627a7a72305820d6619516f42ea9f14d82ad7bae3ba6f1ba4fadc63f07897771cc4082330417a70029
test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes4"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol":{"keccak256":"0xbf22b3ee8fcfe1721c6ba95c590848f9b71b4cbcbf697082f1a9e49e99116444","urls":["bzzr://bf344e76467b79a350d0cc4e5a940c740e24157fa3137a297c7cd4b6b73056df"]}},"version":1}
test_aa50798e6b62563778e8cfb2b9bd78150d7f6a2ac0deb4db12bcdbce557c5c86.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol:C 6060604052341561000f57600080fd5b5b6103408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060016000806101000a81548160ff021916908360ff1602179055506002600060016101000a81548161ffff021916908361ffff1602179055506002600160000160006101000a81548160ff021916908360ff16021790555061abcd600160000160016101000a81548161ffff021916908361ffff16021790555060fa600160000160036101000a81548160ff021916908360ff16021790555060016000809054906101000a900460ff1660ff1614158061017457506002600060019054906101000a900461ffff1661ffff1614155b8061019557506002600160000160009054906101000a900460ff1660ff1614155b806101b9575061abcd600160000160019054906101000a900461ffff1661ffff1614155b806101da575060fa600160000160039054906101000a900460ff1660ff1614155b156101e85760029050610311565b600060016101000a81549061ffff0219169055600160000160016101000a81549061ffff021916905560016000809054906101000a900460ff1660ff16141580610246575060008060019054906101000a900461ffff1661ffff1614155b8061026757506002600160000160009054906101000a900460ff1660ff1614155b8061028a57506000600160000160019054906101000a900461ffff1661ffff1614155b806102ab575060fa600160000160039054906101000a900460ff1660ff1614155b156102b95760039050610311565b6000806101000a81549060ff02191690556001600080820160006101000a81549060ff02191690556000820160016101000a81549061ffff02191690556000820160036101000a81549060ff02191690555050600190505b905600a165627a7a72305820b7f90fdb5f221fd6db614e297adbe9675219c5ba485ca13612007fcec14c01c70029
test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol":{"keccak256":"0xad18fe49df893bd6198060de1629df9a03af82de0d1052113993c966a25ffc86","urls":["bzzr://c9fa81bcc96d948c15b70eb1c6f90fea6b3dc976cc4aa81a00fd86a53f98c809"]}},"version":1}
test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820caa6894fb65bc084c8df498d85da2955b68d77a0e0fad276bc2dea9694d155b30029
test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol":{"keccak256":"0xdd9e20490182808992b5adc3ad9e100f1bae9e3f046f7c9245a011c3f15be893","urls":["bzzr://2801177e82f717926e7beacc76c935e05be63a37553cb43874c0cfafd8bb97de"]}},"version":1}
test_ab37a3d71f393a84bd1693077f3b34fd79690f3a60bc5d03cb2886430e62dd74.sol: ERROR
test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol:test 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600190505b505600a165627a7a7230582026b6dbe724cbbbe6ffd443196a27e78e23652a5f220d3d02b53d93a8299387f90029
test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol":{"keccak256":"0x9cae0d74cbb392603192ec31f2c4b2015769ba6857430e0f95ba96a836fdab87","urls":["bzzr://9d32b90b45584f6e7c8ab74dde861eeb3808d168de35c8c180db6411785d1d1e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_abb71ce402873b4706c2f6b691ec9ffc632a82a0ef93c86fe3681be0c1389209.sol: ERROR
test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol:B 6060604052341561000f57600080fd5b5b60f68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60026001801560c5577f30313233343536000000000000000000000000000000000000000000000000005b7f31323334353637000000000000000000000000000000000000000000000000008178ffffffffffffffffffffffffffffffffffffffffffffffffff1916141560c2575b607a565b5b505b5b50505600a165627a7a72305820a25f7a666f82a8dfdd2219194df4915d46a67cea54cb764f3bac5f6d2621bc5e0029
test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol":{"keccak256":"0xaa8dc508dc9544b99eb04d15523b1f7fb2722026f69710e3f2b67492e387fa22","urls":["bzzr://0e8a751c40543696ac94b29d9930a66accd307a2580da3fbeea61cf790877416"]}},"version":1}
test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol:C 6060604052341561000f57600080fd5b5b6101cf8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b6000806000806000808573ffffffffffffffffffffffffffffffffffffffff163194508573ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f191505093508573ffffffffffffffffffffffffffffffffffffffff166040516000604051808303816000866102c65a03f291505092508573ffffffffffffffffffffffffffffffffffffffff16600060405160200152604051602060405180830381856102c65a03f4151561011657600080fd5b50506040518051905091508573ffffffffffffffffffffffffffffffffffffffff166108fc60019081150290604051600060405180830381858888f1935050505090508573ffffffffffffffffffffffffffffffffffffffff166108fc60019081150290604051600060405180830381858888f19350505050151561019a57600080fd5b5b5050505050505600a165627a7a72305820cce98b123fdc7a32d19a6e5822b89456efd912d50219103cdc06ab7c46d2bd5e0029
test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol":{"keccak256":"0x897e21b81fc0555296ec368b4b2d35c77d771c3dce1fde38745baf4f954dd930","urls":["bzzr://94b7ebf4d8baf013faf2e960d7de7baa03a1b8a6c0335af331de292fb8ec548b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:receiver 6060604052341561000f57600080fd5b5b60f68061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806383a6deb5146047578063cba2534f1460a3575b600080fd5b3415605157600080fd5b605760b9565b60405160208101606b816000840184866074565b9050809250608a565b6000849050608082608e565b8452949350505050565b6098565b6000819050919050565b505060405180910390f35b60b7600480803590602001909190505060bf565b005b60005481565b806000819055505b505600a165627a7a7230582089eaaeb81291aaa1bf150712b3c08755b05dada70a483d962783a44231bf0a2b0029
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":"receiver"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":{"keccak256":"0xe518ffa5857ac3009efea606cb849fce8ecead558a95b7d0193e2811f01f27ae","urls":["bzzr://605401e7c8482be4379dc078bf810fed2fcb7daf218ee67147a1b6ab0b0c5c06"]}},"version":1}
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:sender 60606040525b5b5b61024d806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639bfcdaa11461003e575b600080fd5b341561004957600080fd5b610075600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100c7565b6040516020810161008b81600084018486610095565b90508092506100ad565b60008490506100a3826100b2565b8452949350505050565b6100bc565b6000819050919050565b505060405180910390f35b60008060405180807f726563656976652875696e7432353629000000000000000000000000000000008152506010019050604051809103902090508273ffffffffffffffffffffffffffffffffffffffff166002827c010000000000000000000000000000000000000000000000000000000090049060176040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff16815260200191505060006040518083038185886187965a03f19350505050508273ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101fd57600080fd5b6102c65a03f1151561020e57600080fd5b5050506040518051905091505b509190505600a165627a7a72305820e596e94064a5881c044036ca7d1647386f76cc896751041ea05ea54d0d28d5fe0029
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":"sender"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":{"keccak256":"0xe518ffa5857ac3009efea606cb849fce8ecead558a95b7d0193e2811f01f27ae","urls":["bzzr://605401e7c8482be4379dc078bf810fed2fcb7daf218ee67147a1b6ab0b0c5c06"]}},"version":1}
test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol:C 60606040523415600e57600080fd5b5b60b08061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6055606a565b605b606a565b808280925081935050505b5050565b6040805190810160405280600081526020016000815250905600a165627a7a72305820988787c9c40a68de2853d330431fc78a387709c5289124688354ddc1b2ef19f00029
test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol":{"keccak256":"0xc96a57f9adc7b23c6f1ee8c488a42053c52b1e134a0b55bf2e590273036827f5","urls":["bzzr://867ff629bcd55189ddef42aeda578c69d1798a7de2dc564c69ea9261ff083da7"]}},"version":1}
test_ae453b4a62b8399a5e6e9802fc6c96a8ba2a1c21af6ef9f4740753175fb7eafc.sol: ERROR
test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol:test 6060604052341561000f57600080fd5b5b60a48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe90505b505600a165627a7a7230582079132ca5ecb7cf4083734b57d0c10e43f6c0adf941a49b5cce81f88aae889f2d0029
test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol":{"keccak256":"0xe083bcac2b903976cc6344c07cbf45ebd9d9b33a93bb8574ab45149177723cc8","urls":["bzzr://28c479d3de14d05f36492434022a94902f147661bfe1ea005748427bcad3010f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a7230582025977af6a3119858bdfa83ebfbe67eb8130a1020cfd8c083722ad294fd9764f50029
test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol":{"keccak256":"0xb2f0364c5e82be10e68e0929c662a1614c3302bc76d349f068c005c5f99493de","urls":["bzzr://31f168698debd0124b592926cc0d7ff79114e479b960ba647aa38fe92d5ae6b9"]}},"version":1}
test_ae8507b74c056512b5b16e8a58f86f285d0175c93b2fd63211875ecb6b7f9396.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol:C 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b600060ff82169050919050565b505060405180910390f35b600061ffff905060088160ff169060020a900490505b905600a165627a7a72305820eaaf9311b22a11b86b72296edfc237484003477027a45ddccb8b2f8194fc108b0029
test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol":{"keccak256":"0x8cf6030d9e23e0ddf51a87a0b048223b2ac96830062e9138ab2ee6479e227e46","urls":["bzzr://c411861ee4e8fb0157332b54be8a033e5128211ca9a4b070cbca4782a7c13969"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol:test 6060604052341561000f57600080fd5b5b60f08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a444f5e914603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008082148060ba575060006008925082115b508190505b9190505600a165627a7a7230582005d67cddea1d35baad38e6d18eece44260fbd5012c2167b0316de6180ddf25ad0029
test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol":{"keccak256":"0x4b93c695b8c3bd7aea353aab072a6aa112cd0c5f6a4e3279f452d8c81d818dc8","urls":["bzzr://182314c1eb8aca7a3de837b55f7e9d08653d09877291e392d8f3ecd9d4252787"]}},"version":1}
test_b034fbe9a427db603843d120c58f7a89ade6c81c42ca80f424956911196b5bf6.sol: ERROR
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Lib 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635a2ee01914603d575b600080fd5b604360a5565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b609a565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60003390505b905600a165627a7a72305820b0bd78edb6e625df1acdbd9766d5f377a3b7386aeb1d6efee7f13578fdb5defc0029
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"m","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":{"keccak256":"0x02dc154446872016c9e63fa2fdb3701f45f45cb22bd6e15621eecca4da3ccd8f","urls":["bzzr://e3317458ec4e92090af1dab968cd2756b8a970eb523e7f825061b443bc74d808"]}},"version":1}
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Test 6060604052341561000f57600080fd5b5b6101ef8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461004957806367e404ce1461005e575b600080fd5b341561005457600080fd5b61005c6100d9565b005b341561006957600080fd5b61007161019e565b6040516020810161008781600084018486610091565b90508092506100a9565b600084905061009f826100ae565b8452949350505050565b6100ce565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b73__test_b03f569d87269261675cb0bf1959dc1__635a2ee0196000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b151561014157600080fd5b6102c65a03f4151561015257600080fd5b505050604051805190506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058209727e8e7c2b2e6915cc0332543d3f2ea3a6afd77282288b6d4e2488d70c377ab0029
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":{"keccak256":"0x02dc154446872016c9e63fa2fdb3701f45f45cb22bd6e15621eecca4da3ccd8f","urls":["bzzr://e3317458ec4e92090af1dab968cd2756b8a970eb523e7f825061b443bc74d808"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:A 6060604052341561000f57600080fd5b5b60016000808282541792505081905550600260008082825417925050819055505b5b5b60cf806100416000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de3014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a723058203917d3b4261307da22d99f934db170ba9375e9a877589dea65131193622ab38c0029
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":{"keccak256":"0x589933154bee3210e7a95e89b53398ac816b8a081a7075e9cfe9fbd848fd5a40","urls":["bzzr://c02b8a1c351e550d0a4feb9ebde00b876cbe5bbaba3580df66fdf99ea2027aba"]}},"version":1}
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:C 60606040525b60046000808282541792505081905550600260008082825417925050819055505b5b5b60cf806100366000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de3014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a72305820de92d71af13409694bc6cf14eb4fe8d227be8a0a1510bbccf03ed69c18e3a4750029
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":{"keccak256":"0x589933154bee3210e7a95e89b53398ac816b8a081a7075e9cfe9fbd848fd5a40","urls":["bzzr://c02b8a1c351e550d0a4feb9ebde00b876cbe5bbaba3580df66fdf99ea2027aba"]}},"version":1}
test_b08182b9df9948da4f1451bc51c3dac3676cfd0568ab4a1f236dd234bad31c2e.sol: ERROR
test_b0b9a5aa3e059d5cc102f719d938378c872f5502e1aac8d2cd758da942a1ce0b.sol: ERROR
test_b0d410d75202e464eb463e64ef37d72093a3bad01850364a467533eb721ba361.sol: ERROR
test_b1e61aadda732b6407bd2061145fdca8fbbd165b23d1a22f15e5ca035ee8c62f.sol: ERROR
test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol:test 6060604052341561000f57600080fd5b5b60a48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff54390505b505600a165627a7a723058205cdef02cbd48ea3008ef4e835c84b291dd842ec0da00ecb0252acabdd85dccc90029
test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol":{"keccak256":"0x7983cb8080f0147be5db3e1edb2994fcdadf2bbccd1d42daee40a51f308b2f4d","urls":["bzzr://25e11ba9974cc74996e3167011b4720f425e030688f5f51fcc73996aa8ad2d79"]}},"version":1}
test_b24f2522d57cffa55653d997fc472ad545328d948dc9d71f003c2bcab514e252.sol: ERROR
test_b29e9e7fc6d774a490ff7e16a606e249c2bbd0b26364d0c6a354b6895cdb4882.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint24 -> uint24
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint24_to_t_uint24(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint24_to_t_uint24(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint24(value))

			}
		
			function cleanup_assert_t_uint24(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol:test 6060604052341561000f57600080fd5b5b600860008060088110151561002157fe5b0160005b5081905550600360088161003991906101f0565b50600880600281548110151561004b57fe5b906000526020600020900160005b5081905550608060098161006d919061021c565b5060166009600181548110151561008057fe5b90600052602060002090600a91828204019190066003025b6101000a81548162ffffff021916908362ffffff16021790555060026009607f8154811015156100c457fe5b90600052602060002090600a91828204019190066003025b6101000a81548162ffffff021916908362ffffff1602179055506003600a600060028152602001908152602001600020600060018152602001908152602001600020600260058110151561012c57fe5b6002020160005b50600001819055506004600a600060028152602001908152602001600020600060018152602001908152602001600020600260058110151561017157fe5b6002020160005b506001018161018791906101f0565b506005600a60006002815260200190815260200160002060006001815260200190815260200160002060026005811015156101be57fe5b6002020160005b5060010160038154811015156101d757fe5b906000526020600020900160005b50819055505b61027b565b815481835581811511610217578183600052602060002091820191016102169190610256565b5b505050565b81548183558181151161025157600901600a900481600901600a900483600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6103258061028a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630afb372b1461005f57806328b922ed146100d25780637def10ce1461014a578063f0ba8440146101cf575b600080fd5b341561006a57600080fd5b6100806004808035906020019091905050610242565b60405160208101610096816000840184866100a0565b90508092506100b8565b60008490506100ae826100bd565b8452949350505050565b6100c7565b6000819050919050565b505060405180910390f35b34156100dd57600080fd5b6100f36004808035906020019091905050610267565b6040516020810161010981600084018486610113565b905080925061012b565b600084905061012182610130565b8452949350505050565b61013f565b600062ffffff82169050919050565b505060405180910390f35b341561015557600080fd5b61017d60048080359060200190919080359060200190919080359060200190919050506102a0565b604051602081016101938160008401848661019d565b90508092506101b5565b60008490506101ab826101ba565b8452949350505050565b6101c4565b6000819050919050565b505060405180910390f35b34156101da57600080fd5b6101f060048080359060200190919050506102de565b6040516020810161020681600084018486610210565b9050809250610228565b600084905061021e8261022d565b8452949350505050565b610237565b6000819050919050565b505060405180910390f35b60088181548110151561025157fe5b906000526020600020900160005b915090505481565b60098181548110151561027657fe5b90600052602060002090600a91828204019190066003025b915054906101000a900462ffffff1681565b600a602052826000526040600020602052816000526040600020816005811015156102c757fe5b6002020160005b9250925050508060000154905081565b6000816008811015156102ed57fe5b0160005b9150905054815600a165627a7a72305820aa0055a46cc5ef971e4cd8a96f4ab992bab398a51c7c6d706b06b57074e2153b0029
test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"dynamicData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"smallTypeData","outputs":[{"name":"","type":"uint24"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"multiple_map","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol":{"keccak256":"0x271f760c79141f7ac6eec80f917b149512edc24f3ef17dfb3feac9bd5aa9dfbb","urls":["bzzr://35f2a3baae8ec411cdacac65ac0501a8334fadacfd60693b31568f44ac5b6159"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:A 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820f604e154d0d66c14e6556f57b21a082ee542f56ebd67280189e31ecc8f151bca0029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:B 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600260a360aa565b1790505b90565b6000600190505b905600a165627a7a72305820ade99098961e19ca4e57e45c50f65ccbb7649239f8b512ac915268c3fedc53690029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:C 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600460a360aa565b1790505b90565b6000600190505b905600a165627a7a7230582091ceaa7434cc115a9f730fad2b4a1bc97d325511558165e8ad2c0c6098cd79d20029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:D 6060604052341561000f57600080fd5b5b6101028061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600860a360aa565b1790505b90565b6000600460b460bb565b1790505b90565b6000600260c560cc565b1790505b90565b6000600190505b905600a165627a7a723058201397147afef8c7c2dd78dfa14713fb311cd6744b1d77f9b5c725af106ca8c5d00029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b316f78f3ec6d532dccfaac7cd9e77a09f5b41989d8019433c681ae2c26250e6.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol:C 6060604052341561000f57600080fd5b5b6101198061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b60008060018002905080199050600180021960001916816000191614151560c4576000915060e9565b80159050600060010260001916816000191614151560e4576000915060e9565b600191505b50905600a165627a7a723058207fd22bb4e14b1f83b1302ff4e320b2beb7f85b405220ce51d2ed99f2596309790029
test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol":{"keccak256":"0xa5291eba211622cfea4df0e7d2dd279e5bd8230e6c6c95e312a4c25445a3ca8d","urls":["bzzr://6195ff242a3bdc09622ced04212bf03c26127ced4972faf27b96cc8e10555d4b"]}},"version":1}
test_b39d0090e7490dd9915593254833c46ade257555b49d5180bbcaad980610582f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol:C 6060604052341561000f57600080fd5b5b6101058061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ea7034114603d575b600080fd5b3415604757600080fd5b606a600480803560ff1690602001909190803560ff1690602001909190505060b6565b60405160208101607e816000840184866087565b9050809250609d565b600084905060938260a1565b8452949350505050565b60ab565b6000819050919050565b505060405180910390f35b600063ffffffff92508160ff168360ff169060020a900460ff1690505b929150505600a165627a7a7230582091e47158609bc50fae4ece0fece4e6f552770d64df6e5b5fe4c3128013b018540029
test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol":{"keccak256":"0x5220beab0f5e28ce54028166310acc3152e60f790ee804c3c4ebbc93f8ee6adf","urls":["bzzr://cba71327d5b88630c652649904a85a4e8cedeeac1bd1fb68b36a7b0394b9e0fb"]}},"version":1}
test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol:test 60606040523415600e57600080fd5b5b608b8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008060039150600490505b50505600a165627a7a723058206a224ae4ca6eb49b3740ef0db6355cb45657b710224b30ae8de6ab5a0dd37d010029
test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol":{"keccak256":"0xa54fa97e913788b252c021839f5dd420a1ea42d4f12545aa7632859513754c5c","urls":["bzzr://4873b8cef6bf80e8e8a7c7da62b61ad83dce206de5fad56a8bc9ccbf844ec6b8"]}},"version":1}
 conv bytes2 -> bytes2
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes2_to_t_bytes2(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes2_to_t_bytes2(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes2(value))

			}
		
			function cleanup_assert_t_bytes2(value) -> cleaned {
				cleaned := and(value, 0xFFFF000000000000000000000000000000000000000000000000000000000000)
			}
		

test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol:Test 6060604052341561000f57600080fd5b5b6101278061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ab1956e114603d575b600080fd5b3415604757600080fd5b6061600480803563ffffffff1690602001909190505060cf565b60405160208101607581600084018486607e565b90508092506094565b6000849050608a826098565b8452949350505050565b60c4565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b6000817e010000000000000000000000000000000000000000000000000000000000000290505b9190505600a165627a7a72305820bdc053c785c99f906ad628eb8518f8c33b5a551620fea4885fa07a55ebbcc24e0029
test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint32"}],"name":"uintToBytes","outputs":[{"name":"s","type":"bytes2"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol":{"keccak256":"0xcb0c256b89bba2917bb0abd83b468936c300625f2fa0a3ffdcaaeefa0ed1f8aa","urls":["bzzr://e4de67f2c7876029e40dee96cdf45f0689753b0bc7e3350f3d796d5b0fe230c1"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:A 6060604052341561000f57600080fd5b5b60d28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b6000600190505b5b905600a165627a7a72305820bb7973611dd06cfae1f9b645732195399807c9f53e5c12da6e760cfcdc6cd2690029
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":{"keccak256":"0xfaa62ef6b09828aed1f2f380301518c911c136ff60df30aca471ea6602c9c168","urls":["bzzr://b3c49387ed4f42f8e7f5f493778b5f1e56d2bee7b1dee0239f9dfed80538c203"]}},"version":1}
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:C 6060604052341561000f57600080fd5b5b60d88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b6000801560a857600190505b5b5b905600a165627a7a72305820803ceb9e6a212aa2c113ab966b10a17309d80a54433ad3e8cf3f2cfcd8545ce50029
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":{"keccak256":"0xfaa62ef6b09828aed1f2f380301518c911c136ff60df30aca471ea6602c9c168","urls":["bzzr://b3c49387ed4f42f8e7f5f493778b5f1e56d2bee7b1dee0239f9dfed80538c203"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806388b7a17c14603d575b600080fd5b3415604757600080fd5b605f60048080356000191690602001909190505060ab565b60405160208101607381600084018486607c565b90508092506092565b60008490506088826096565b8452949350505050565b60a0565b6000819050919050565b505060405180910390f35b60005b9190505600a165627a7a72305820ec5a3e5ec6ab79045c3496bfab79d62f166dd7f6bcfe19fe16b616aab877a5db0029
test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol":{"keccak256":"0x3fee7b6d1997ca8bc6ae4038aafeb43d912155f0f1d86f084aab99275ee90f0f","urls":["bzzr://7fb7dbf158c1e72e8b86aa50ba727cae729d4d5ad4264c99f157dc9e97aa97fd"]}},"version":1}
test_b42efd822472f49f0656523c3a15d479eea4232cf4399c069a614335fda7201e.sol: ERROR
test_b42f7d031b7c9db8f5a3682c529d24f0e5a9bda0af37af8906d27336a34820e0.sol: ERROR
test_b43144db133e03cdbc4d24cf0864117f04dbea2f8af8d043ce0f7cc87abdf9ec.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol:C 6060604052341561000f57600080fd5b5b6102408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635fdf05d714610049578063901717d1146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610174565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b60008060055413156101285760079050610171565b600160058190555061016b60008060148110151561014257fe5b600491828204019190066008025b9054906101000a900467ffffffffffffffff1663ffffffff16565b50600290505b90565b600080806000906014610188929190610192565b50600391505b5090565b8260146003016004900481019282156101cc57916003016004900482015b828111156101cb5782548255916001019190600101906101b0565b5b5090506101d991906101dd565b5090565b61021191905b8082111561020d57600081816101000a81549067ffffffffffffffff0219169055506001016101e3565b5090565b905600a165627a7a7230582054cded5ef5a199048b9866399174468bea63f4bd5e36de1a0e224379522af4fc0029
test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"two","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"one","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol":{"keccak256":"0xba354961066ce0104a7e046281753ff3636e9b48c6b6ebfa2b724ed71468dd72","urls":["bzzr://77b8f3b8abd3e68689f8b4cda04d273ab63240fe9f5fd81580361d49739a9392"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:A 6060604052341561000f57600080fd5b5b61014d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd978146100545780635b4b73a9146100b95780639f68d7ca146100dc575b600080fd5b341561005f57600080fd5b6100676100ff565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da6004808035906020019091905050610109565b005b34156100e757600080fd5b6100fd6004808035906020019091905050610114565b005b6000805490505b90565b806000819055505b50565b61011d81610109565b5b505600a165627a7a72305820603a83588435449c5cde90a7ba611865cb61b2e14480020975f051f0fb45cabe0029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setViaA","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:B 6060604052341561000f57600080fd5b5b6101928061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd978146100545780635b4b73a9146100b9578063a531d066146100dc575b600080fd5b341561005f57600080fd5b610067610141565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100da600480803590602001909190505061014b565b005b34156100e757600080fd5b6100ef610156565b604051602081016101058160008401848661010f565b9050809250610127565b600084905061011d8261012c565b8452949350505050565b610136565b6000819050919050565b505060405180910390f35b6000805490505b90565b806000819055505b50565b6000610160610141565b90505b905600a165627a7a723058207415d7671bf71767eafe7a3826b85e773270ae61b1dcb5380bc1e6cf563f289a0029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaB","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Base 6060604052341561000f57600080fd5b5b6101048061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd9781460475780635b4b73a91460a3575b600080fd5b3415605157600080fd5b605760c3565b60405160208101606b816000840184866074565b9050809250608a565b6000849050608082608e565b8452949350505050565b6098565b6000819050919050565b505060405180910390f35b341560ad57600080fd5b60c1600480803590602001909190505060cd565b005b6000805490505b90565b806000819055505b505600a165627a7a72305820122c19cd18dc44e354fc33f7f2ed24bf3b74ef9a83e8e7186ce1eb2f2eb3b2c70029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Derived 6060604052341561000f57600080fd5b5b6101cd8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd9781461005f5780635b4b73a9146100c45780639f68d7ca146100e7578063a531d0661461010a575b600080fd5b341561006a57600080fd5b61007261016f565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100e56004808035906020019091905050610179565b005b34156100f257600080fd5b6101086004808035906020019091905050610184565b005b341561011557600080fd5b61011d610191565b604051602081016101338160008401848661013d565b9050809250610155565b600084905061014b8261015a565b8452949350505050565b610164565b6000819050919050565b505060405180910390f35b6000805490505b90565b806000819055505b50565b61018d81610179565b5b50565b600061019b61016f565b90505b905600a165627a7a7230582031ed6d724ec6b69a72f6d0ad7ec1fdc5830bfacf5e91869c4581b615f7fc54fe0029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setViaA","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaB","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 conv int_const 9 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_9_by_1_to_t_uint256_lib(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_9_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_9_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_9_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Lib 6060604052341561000f57600080fd5b5b60e08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632021012c14603d575b600080fd5b605a600480803590602001909190803590602001909190505060a6565b60405160208101606e816000840184866077565b9050809250608d565b60008490506083826091565b8452949350505050565b609b565b6000819050919050565b505060405180910390f35b600081830290505b929150505600a165627a7a72305820c171670cae0e9a318463e49a0a25726f70d566d029f85365e1297c85ff9b83830029
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"m","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":{"keccak256":"0x17273473e7ef73e28a6f177c3bb489545f4baa156cfad86a1da2331c4e727369","urls":["bzzr://f89fae770dd55d3e38fa13f6abc5260f40ae4939b89d11b166d266dc2b2043b9"]}},"version":1}
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Test 6060604052341561000f57600080fd5b5b6101f98061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b600073__test_b4513a1911b74c00d19d7a18e382c12__632021012c8360096000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040810161011a81600084018487610152565b905061012b81602084018486610135565b905080935061014d565b60008490506101438261017e565b8452949350505050565b61016a565b60008490506101608261016f565b8452949350505050565b610179565b6000819050919050565b610190565b60006101898261016f565b9050919050565b50505060206040518083038186803b15156101aa57600080fd5b6102c65a03f415156101bb57600080fd5b5050506040518051905090505b9190505600a165627a7a72305820adce82434a068378831535c55585bd24145822bfe7f7600a75998304c6accde10029
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":{"keccak256":"0x17273473e7ef73e28a6f177c3bb489545f4baa156cfad86a1da2331c4e727369","urls":["bzzr://f89fae770dd55d3e38fa13f6abc5260f40ae4939b89d11b166d266dc2b2043b9"]}},"version":1}
test_b4c1953756e1b1c4800f40cb0deda30f57ba55c66f8225f1f2cfe434ae11ffe0.sol:C 
test_b4c1953756e1b1c4800f40cb0deda30f57ba55c66f8225f1f2cfe434ae11ffe0.sol:C 
 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol:C 6060604052341561000f57600080fd5b5b6102368061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806358f4cea5146100495780638bf150da146100e1575b600080fd5b341561005457600080fd5b61006d600480803560ff16906020019091905050610179565b604051602081016100838160008401848661008d565b90508092506100a5565b600084905061009b826100aa565b8452949350505050565b6100d6565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b505060405180910390f35b34156100ec57600080fd5b610105600480803560ff169060200190919050506101c1565b6040516020810161011b81600084018486610125565b905080925061013d565b600084905061013382610142565b8452949350505050565b61016e565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b505060405180910390f35b6000807f313233343536373839303132333435363738393061626364650000000000000090508260ff16816bffffffffffffffffffffffff19169060020a0291505b50919050565b6000807f313233343536373839303132333435363738393061626364650000000000000090508260ff16816bffffffffffffffffffffffff19169060020a900491505b509190505600a165627a7a723058205201eed9e2dfd1d91503c67836754f272abcec546fb56eb0464eb0329196bcbf0029
test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"uint8"}],"name":"left","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"y","type":"uint8"}],"name":"right","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol":{"keccak256":"0xcd9f29548c7ec247eeb53e27de7d759052508057b2ac662435057b46b1b01388","urls":["bzzr://cd0e98d888e528a6293c2c78bae9e8d6d4b50af45629970f2087780cdb34a6e6"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b5a5a188804df6e72fe90fe4a6f7f66f4e301c0c5bc8a3ccdcb7fa7cf81d8a42.sol: ERROR
test_b5e7f6e6fdf6b99af7038ee8d4a168142ab615b09591242780d2f0d9378c4833.sol: ERROR
test_b628e1c74497f8abb1dca9a177d48376407fc61df3581c9de20c99326949289b.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol:test 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b60005b905600a165627a7a723058200ab043f091572a7abdf01175f579fa2f7b6a8c357c378f1507de5d9dbf2781200029
test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol":{"keccak256":"0xd6853bf5d239e826b7222720fa598a5594d88a859315cab0d33ee11d3118b8bd","urls":["bzzr://fce9e1d43f58a228c75c71682902e97f20732e05a47c9f183935b40e27b6c634"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 224)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value6,
				$headStart,
				add($headStart, 192),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol:c 6060604052341561000f57600080fd5b5b6105528061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec1146100495780635dfcf9841461011a575b600080fd5b341561005457600080fd5b61005c6101a3565b60405160e081016100728160008401848c6100e2565b90506100838160208401848b6100e2565b90506100948160408401848a6100e2565b90506100a5816060840184896100e2565b90506100b6816080840184886100e2565b90506100c78160a0840184876100e2565b90506100d88160c0840184866100e2565b90508098506100fa565b60008490506100f0826100ff565b8452949350505050565b610109565b6000819050919050565b505050505050505060405180910390f35b341561012557600080fd5b61014e60048080610120019091908035906020019082018035906020019190919290505061027e565b604051602081016101648160008401848661016e565b9050809250610186565b600084905061017c8261018b565b8452949350505050565b610198565b600060ff82169050919050565b505060405180910390f35b600080600080600080600060099650600060076009811015156101c257fe5b0160005b505495506009805490509450600960078154811015156101e257fe5b906000526020600020900160005b50549350600a805490509250600a600381548110151561020c57fe5b906000526020600020900160005b50805490509150600a600381548110151561023157fe5b906000526020600020900160005b50600181548110151561024e57fe5b90600052602060002090602091828204019190065b9054906101000a900460ff1660ff1690505b90919293949596565b60008360009060096102919291906102eb565b508360099060096102a392919061032b565b508282600a91906102b5929190610378565b508282600381811015156102c557fe5b90506060020160016003811015156102d957fe5b602002013560ff1690505b9392505050565b826009810192821561031a579160200282015b828111156103195782358255916020019190600101906102fe565b5b50905061032791906103d2565b5090565b828054828255906000526020600020908101928215610367579160200282015b8281111561036657823582559160200191906001019061034b565b5b50905061037491906103d2565b5090565b8280548282559060005260206000209081019282156103c1579160600282015b828111156103c05782829060036103b09291906103f7565b5091606001919060010190610398565b5b5090506103ce91906104a1565b5090565b6103f491905b808211156103f05760008160009055506001016103d8565b5090565b90565b82805482825590600052602060002090601f016020900481019282156104905791602002820160005b8382111561046157833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610420565b801561048e5782816101000a81549060ff0219169055600101602081600001049283019260010302610461565b505b50905061049d91906104cd565b5090565b6104ca91905b808211156104c657600081816104bd91906104fd565b506001016104a7565b5090565b90565b6104fa91905b808211156104f657600081816101000a81549060ff0219169055506001016104d3565b5090565b90565b50805460008255601f01602090049060005260206000209081019061052291906103d2565b5b505600a165627a7a72305820b653add8959b8aa44346bfed070f7897e73c45520637c83001464035bcf9fa320029
test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"retrieve","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"},{"name":"d","type":"uint256"},{"name":"e","type":"uint256"},{"name":"f","type":"uint256"},{"name":"g","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256[9]"},{"name":"b","type":"uint8[3][]"}],"name":"store","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol":{"keccak256":"0x5114f23e2a4aa53975a39a19c6352be2dbc6535a36789b3a587fae2e40574bfa","urls":["bzzr://763c1a69acc7965965a6c555fbbf155da2988f83f39c935d3918d536bed1b13d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol:Creator 6060604052341561000f57600080fd5b6040516080806102208339810160405280908160600180519060200190919050505b8060008190555081600260038110151561004757fe5b6020020151600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505b6101818061009f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636c8ae38c14610049578063d7e96c05146100ae575b600080fd5b341561005457600080fd5b61005c610129565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c161012f565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b61011e565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820188164a67c9abedc1bc7dbee55c9cd0bb0ea7512ec3e950efa13a6e1d03b36eb0029
test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol:Creator {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"r","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ch","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"s","type":"address[3]"},{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol":"Creator"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol":{"keccak256":"0xceb9ac1a2f6e088d1c54d3e01372cfa26fe7c9b32e041aa8521d018e167e2d1c","urls":["bzzr://ce909ac9007ae314690d78617290715ccc23f57452b0dcddb4264bc516f26686"]}},"version":1}
test_b6be75902ffaed5ee3cd3980979607b1402abddb706efdcf0fa49c8bdd9a63a2.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol:Test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806394e8767d14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008160010290505b9190505600a165627a7a7230582080aa8de5e9609af383c5be0e7c479b8daaf07895ef62ab7095fff9a30d51ae940029
test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint256"}],"name":"uintToBytes","outputs":[{"name":"s","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol":{"keccak256":"0xe1f91e1dcc62f9a84c03ef507c89e5bae0af6c352a7aa0652f322146b1d88fe4","urls":["bzzr://669abed5502f121d36a152595c62517f20b556a742f55edb9fee9456f8c1b68d"]}},"version":1}
test_b7b313c7f7e2add33bc2c0115d4c956794250e416da494dbf1b9edf4c8160cdc.sol: ERROR
test_b826b50589319431bae630a9b84696c453a33a831d7219975bfa26d0296f5b9c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol:Test 6060604052341561000f57600080fd5b5b61010a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ffdd124e14603d575b600080fd5b3415604757600080fd5b6079600480803590602001909190803567ffffffffffffffff16906020019091908035151590602001909190505060c5565b60405160208101608d816000840184866096565b905080925060ac565b600084905060a28260b0565b8452949350505050565b60ba565b6000819050919050565b505060405180910390f35b60008267ffffffffffffffff16840190505b93925050505600a165627a7a72305820b90f47585eb338e0a280fbf650921cf815db41aad73e30c3cdccc9bfd05b004b0029
test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"},{"name":"arg2","type":"uint64"},{"name":"arg3","type":"bool"}],"name":"foo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol":{"keccak256":"0x5b318564553ee00a197dcb35aedaa06cd3b99275201a21b77c58de0ebd3076fe","urls":["bzzr://24030371f75ec001fbcc5d1e75c5f6a42d1233ce87e7667f464cbf007285e6b3"]}},"version":1}
test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol:test 60606040523415600e57600080fd5b5b60026000806101000a81548160ff02191690836003811115602c57fe5b02179055505b5b60368060406000396000f30060606040525b600080fd00a165627a7a72305820b1d1adf2365961b3d9cc626fe59feb3442483d5cedf456e1040e13f49e9875360029
test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol":{"keccak256":"0x3167c7333b099e51cd5059e37affce8bf944679184a1b24b42dcbaa8c10a63d3","urls":["bzzr://c1477c4ac552bbbe623c8d9eea70f4feeaeda0da2844cb7a8e1ca2fbf822aa22"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol:test 6060604052341561000f57600080fd5b5b61045b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100c3565b6040516040810161007581600084018487610090565b905061008681602084018486610090565b90508093506100a8565b600084905061009e826100ad565b8452949350505050565b6100b7565b6000819050919050565b50505060405180910390f35b6000806000803690506000816100d99190610282565b50600090505b60003690508110156101f1576000368281811015156100fa57fe5b90509001357f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660008281548110151561019757fe5b90600052602060002090601091828204019190066002025b6101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055505b8060010190506100df565b600060019080546102039291906102bc565b50600180549050925060018481548110151561021b57fe5b90600052602060002090600691828204019190066005025b9054906101000a90047b01000000000000000000000000000000000000000000000000000000027b01000000000000000000000000000000000000000000000000000000900491505b50915091565b8154818355818115116102b757600f016010900481600f016010900483600052602060002091820191016102b691906103d6565b5b505050565b828054828255906000526020600020906005016006900481019282156103c557600052602060002091600f016010900482016000805b8483111561038c5784819054906101000a90047e010000000000000000000000000000000000000000000000000000000000000284836101000a81548164ffffffffff02191690837b010000000000000000000000000000000000000000000000000000009004021790555060020160208160010104948501946001030290600501906020826004010493840193600103820291506102f2565b81156103c25783826101000a81549064ffffffffff0219169055906005019060208260040104938401936001038202915061038c565b50505b5090506103d291906103fb565b5090565b6103f891905b808211156103f45760008160009055506001016103dc565b5090565b90565b61042c91905b8082111561042857600081816101000a81549064ffffffffff021916905550600101610401565b5090565b905600a165627a7a72305820cd727497471d476ffd80236ee32821a6b528e87819d63eb6d51e4e57764179f30029
test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"l","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol":{"keccak256":"0x9ef32120e3554810e0999d5d432857cb33e405a8686a752060012b66377e6151","urls":["bzzr://7b243ff4a249fc3a396d4dc988a4efae3415ef7d9d3e9a52cca9fb4f2abffd8e"]}},"version":1}
test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol:A 6060604052341561000f57600080fd5b5b60ae8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600080600080600393506001925082841160685782606a565b835b9150828411607757826079565b835b90505b505050505600a165627a7a72305820727758e8da4ac2a3f9013f5d2b88e3b78dd889e9553a10212aad6b4f0596f0390029
test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol":{"keccak256":"0x5ce5f6560ee966d8116f5e45f952a043cb22c22b8d33cfad3d97daa3b3bc89eb","urls":["bzzr://341d299ad7b6473b934d3cbfc834a1021502d4822533d42f0713fc50b1503f93"]}},"version":1}
test_b93af23af26c977c5d4037377f4fade251bffff033b94aa168622cbd201668be.sol: ERROR
test_b9409b68d813841d07cab2ec713027f9d5dd68fac84a3b21b2f514b10b0e5a00.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol:c 6060604052341561000f57600080fd5b5b61024a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100d9565b60405160808101610067816000840184896100a4565b9050610078816020840184886100a4565b9050610089816040840184876100a4565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505050505060405180910390f35b600080600080600080548060010182816100f391906101cd565b916000526020600020900160005b60059091909150555060008081548110151561011957fe5b906000526020600020900160005b505493506000805480600101828161013f91906101cd565b916000526020600020900160005b6004909190915055506000600181548110151561016657fe5b906000526020600020900160005b505492506000805480600101828161018c91906101cd565b916000526020600020900160005b60039091909150559050600060028154811015156101b457fe5b906000526020600020900160005b505491505b90919293565b8154818355818115116101f4578183600052602060002091820191016101f391906101f9565b5b505050565b61021b91905b808211156102175760008160009055506001016101ff565b5090565b905600a165627a7a723058206b263efc5ef088431ab6f9d7986c7cde83c67fe03b8b4d0afda793cbf14accee0029
test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"l","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol":{"keccak256":"0x5ae326c94d14a890fae0dfc600e173be76527c68bc3d68d881eefecfb699417b","urls":["bzzr://d102901ea7e99502d15a4d6a443892ed4f07c1c59ff1ae78d5f798a34a17fb24"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol:C 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d609c565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6091565b60008160000b9050919050565b505060405180910390f35b600080600060fe9150600190508160ff168160000b9060020a0292505b5050905600a165627a7a72305820c99d8876ed1bd01b03a739b02412f87ef67edf3263e2f5dec068e6735e07250a0029
test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol":{"keccak256":"0x915558e8f355bf0b0b5293d87e5346b7341a388f12a5bcfc57dd64918c963a59","urls":["bzzr://25e852bfa087a91e183eb9cc8090d3f823ef4f446e22db47c76005720b1520cc"]}},"version":1}
 conv int_const 1 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_1_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol:C 6060604052341561000f57600080fd5b5b6101818061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b6000809054906101000a900480640100000000900473ffffffffffffffffffffffffffffffffffffffff169063ffffffff16600260016000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016100d3816000840184866100dd565b90508092506100f5565b60008490506100eb82610109565b8452949350505050565b610104565b6000819050919050565b61011b565b6000610114826100fa565b9050919050565b50506020604051808303818588803b151561013557600080fd5b6125ee5a03f1151561014657600080fd5b5050505060405180519050505b5600a165627a7a72305820776b4560e4af08dcb06829b90a3403b91a71ed4c59ab7f438d3bcb9c1985797d0029
test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol":{"keccak256":"0x538ed2c3688c627beb0919aa2de18d9040c81c028b403d121634a2ac7d1965c3","urls":["bzzr://659617bdb3292e515fbf3ae1f536686b61de919ae137c9242ba9e44594ea3ac0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol:C 6060604052341561000f57600080fd5b5b61013a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b600080600080600063ffffffff92508291508190506101008261ffff168115156100db57fe5b0491506101008161ffff168115156100ef57fe5b04905081818161ffff1691508061ffff169050945094505b50505090915600a165627a7a723058205b1635f13c6ede63ff3fde571972b6049b524e4d48f56c899e6f9f5584b998930029
test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol":{"keccak256":"0x1cca93ed5bac27e5929f0f978046e697c8bf66b10785f4b34ee45584ea195692","urls":["bzzr://23197d51f9f5dba71f94d9103a11d79f1f9fd41be252e47efa41c03a750ca950"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol:C 6060604052341561000f57600080fd5b5b60f38061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff990508091505b50905600a165627a7a723058201fb706cb5acd0ca184263f3077e50bbc7f9bdf52035670106d88c877400c9e490029
test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol":{"keccak256":"0x454984b67cb1e22f2eb013be55b32f59c7e1d2fc514f55f085e4e910c5de95f9","urls":["bzzr://d51cda7e5bd4cc3066960dfed44055cb056494233b86961c9e48dbedacf6b0d8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:A 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008160020290505b9190505600a165627a7a723058206d4865643ab6f3d843a4ebf60939a15ff69fc24c0a25a811816fe826ca43ef6b0029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:B 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060a9565b60405160208101607181600084018486607a565b90508092506090565b60008490506086826094565b8452949350505050565b609e565b6000819050919050565b505060405180910390f35b6000600a90505b9190505600a165627a7a723058201858e740e844e27444f3385aec27ea68a16b22fe215fe9105eae7af4fff210b70029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:C 6060604052341561000f57600080fd5b5b61027b8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c11461005f578063b3de648b146100d4578063b8c9d36514610147578063e2179b8e146101ac575b600080fd5b341561006a57600080fd5b61008260048080351515906020019091905050610211565b60405160208101610098816000840184866100a2565b90508092506100ba565b60008490506100b0826100bf565b8452949350505050565b6100c9565b6000819050919050565b505060405180910390f35b34156100df57600080fd5b6100f5600480803590602001909190505061021d565b6040516020810161010b81600084018486610115565b905080925061012d565b600084905061012382610132565b8452949350505050565b61013c565b6000819050919050565b505060405180910390f35b341561015257600080fd5b61015a61022b565b604051602081016101708160008401848661017a565b9050809250610192565b600084905061018882610197565b8452949350505050565b6101a1565b6000819050919050565b505060405180910390f35b34156101b757600080fd5b6101bf61023d565b604051602081016101d5816000840184866101df565b90508092506101f7565b60008490506101ed826101fc565b8452949350505050565b610206565b6000819050919050565b505060405180910390f35b6000600a90505b919050565b60008160020290505b919050565b6000610237600161021d565b90505b90565b60006102496001610211565b90505b905600a165627a7a72305820953b6c073c7a41c5a5ef6ce40049c076fd5b4215b057c2ac98d24a9b2d3daa860029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol:C 6060604052341561000f57600080fd5b5b61010a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000606060405190810160405280600460ff168152602001600560ff168152602001600660ff16815250600160038110151560d057fe5b602002015160ff1690505b905600a165627a7a7230582054f6d192c0656a424a8dd8ebeace9b2917936a7e9cd6808db09021bbf9209bc50029
test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol":{"keccak256":"0xa835e93d335d62b7c64df21120c0e803e58095527e4e286ec5e5309d6e1b8dae","urls":["bzzr://13e4ab039248434c9fb8a81555b1edd4816fd7101fb95f0c199656ba073395ac"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol:C 6060604052341561000f57600080fd5b5b61010c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063491daff114603d575b600080fd5b3415604757600080fd5b6070600480803563ffffffff1690602001909190803563ffffffff1690602001909190505060bc565b60405160208101608481600084018486608d565b905080925060a3565b600084905060998260a7565b8452949350505050565b60b1565b6000819050919050565b505060405180910390f35b60008163ffffffff168363ffffffff169060020a0263ffffffff1690505b929150505600a165627a7a723058205d1e581f28cb30559124721a4de6449187297d6bb8fc879329e5306188811a6d0029
test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint32"},{"name":"b","type":"uint32"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol":{"keccak256":"0xcf0e5c74df61de44af6102dee5f2ab0c6ce94e02c508d6deaa85186f5f68b696","urls":["bzzr://002ddae28b2d040392d747138a5ee052c3456ed21ec869638d2903f104869e56"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol:Test 6060604052341561000f57600080fd5b5b60fa8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000751122334455667788990011223344556677889900112273ffffffffffffffffffffffffffffffffffffffff1690505b905600a165627a7a72305820b09bc4ad4a2715fb1ef6f188ce5184c7f487d5bda29521a6e8dc1880ff8c88030029
test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol":{"keccak256":"0x38114533a4f9b3768bba42bc0ca0da8221fd14e64f1855b41219838547f1fe7d","urls":["bzzr://fb8d239dd8c245acf932990b7730077c59f82ac7fcbc228dbc043f0dfaf96f7f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:helper 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a72305820c003797313cb411e60899744fc0fbb971b15f941e66b4cfb2996391e0b2518220029
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":"helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":{"keccak256":"0x5a016cb4fa4d58f642e668e38210cc44c7cd749e75e987fd914a8c9e3b4254e6","urls":["bzzr://ec26ae85f3565af3a43054daf8ec5851ac20eced6080257e018c892488de4b5d"]}},"version":1}
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:test 60606040525b61000d6100c0565b604051809103906000f080151561002357600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60059081150290604051600060405180830381858888f19350505050505b6100cf565b60405160558061021c83390190565b61013e806100de6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe01461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b6000803073ffffffffffffffffffffffffffffffffffffffff163191506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190505b90915600a165627a7a723058200b4fc80e2d04b2d78301e6e84ea850b624a36b7ae831f076ec6ae524d832a861002960606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a72305820c003797313cb411e60899744fc0fbb971b15f941e66b4cfb2996391e0b2518220029
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"},{"name":"helperBalance","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":{"keccak256":"0x5a016cb4fa4d58f642e668e38210cc44c7cd749e75e987fd914a8c9e3b4254e6","urls":["bzzr://ec26ae85f3565af3a43054daf8ec5851ac20eced6080257e018c892488de4b5d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820492984dee5b6dc67bacc4a1f20644fd3f747fb252fcf827f1c11cb9dfa458fab0029
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":{"keccak256":"0xc2ca9bf09c2c42141f02bfb900feb191ba2855808c3cd7ddd2081aa47e9b0a68","urls":["bzzr://db0dbe07343ea1a44ab0f4257ecb979745fd702322d7f02cc539dacfa7740e8e"]}},"version":1}
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:B 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063e2179b8e14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060a160a7565b90505b90565b6000600190505b905600a165627a7a723058205c58a404c7ce78111d37e9eb4533057b0c39ef1b42e2226631b4ba4853a8bd320029
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":{"keccak256":"0xc2ca9bf09c2c42141f02bfb900feb191ba2855808c3cd7ddd2081aa47e9b0a68","urls":["bzzr://db0dbe07343ea1a44ab0f4257ecb979745fd702322d7f02cc539dacfa7740e8e"]}},"version":1}
test_bc2c5438526d91e46a9d220753afe053cc619d2e18a53a1c3605c895450a00cb.sol: ERROR
test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol:ClientReceipt 6060604052341561000f57600080fd5b5b60aa8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d0e30db014603d575b600080fd5b3415604757600080fd5b604d604f565b005b7fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a15b5600a165627a7a72305820c7df613492baf11dd0cf4ed570b7af6564bfa334e09ebab1fe13965c8d04afd10029
test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol":{"keccak256":"0xdc5ca2f16837ad72a9863dacf1dcb6c5d9a737ffba4366c977318a8e18ef83a5","urls":["bzzr://0034576fa6fd95fabf705496638167a6038fce8df0c2da6b2273aef0c67e9563"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol:C 6060604052341561000f57600080fd5b5b6101578061001f6000396000f3006060604052361561004a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f1461005d57806326121ff0146100c2575b61005b5b600134016000819055505b565b005b341561006857600080fd5b61007061011c565b6040516020810161008681600084018486610090565b90508092506100a8565b600084905061009e826100ad565b8452949350505050565b6100b7565b6000819050919050565b505060405180910390f35b6100ca610122565b604051602081016100e0816000840184866100ea565b9050809250610102565b60008490506100f882610107565b8452949350505050565b610111565b6000819050919050565b505060405180910390f35b60005481565b60003490505b905600a165627a7a723058208fe3e3e4753f2f9ccc8172daaa27a8cf00161e71677209fbdd34e72d1b7846c90029
test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":true,"type":"function"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol":{"keccak256":"0xfa16af48145ead105be72055e3d7f874bf4554d161b3b22476f6caa57220aeba","urls":["bzzr://5a96c378bd1999fe09ccf1096bdc94bad5a794ff3ed642e5761f4b0051271afb"]}},"version":1}
test_bccd18d2661c52f039ee39184ce13bfc886628fa99379484a921dfce2a74d0ac.sol: ERROR
test_bd52527e75f7635d22859024a104e877fbea2ed8bd8df4c89b38db208e8e234f.sol: ERROR
test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol:test 60606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b60436045565b005b5b5600a165627a7a72305820900227e492d823707db6a6b45757cf9dc6ecf17a77a9bdd2ea26020ebb292ad40029
test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol":{"keccak256":"0xe146f5b404d806b24d28124285b641aabfa929a26bc6cf16ded946b6df4c6259","urls":["bzzr://0d6be5a3fa13e51104831648826abd6ea838f52b899be3f7f40a864ce74c9f34"]}},"version":1}
test_bd85b7787d7c9483b9e1d61acc5d045c58beca1450a4b4f575eca511747f1112.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol:test 60606040525b5b5b610109806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c68d81e014603d575b600080fd5b3415604757600080fd5b6071600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505060bd565b60405160208101608581600084018486608e565b905080925060a4565b6000849050609a8260a8565b8452949350505050565b60b2565b6000819050919050565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16ff5b9190505600a165627a7a723058205cda53079d97c743e0094f38a6b4bccfd83134391ea8ff8038769c051f70adda0029
test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"receiver","type":"address"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol":{"keccak256":"0xd028405086e4afbc682d5f6e65784f427acb64d6a1f276fcc2518cd91453ed6a","urls":["bzzr://a068755447c3cc62e33e8c3e449d9dc13f7db86aca43cca05c7facc2dc592050"]}},"version":1}
 conv bytes7 -> bytes7
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes7_to_t_bytes7(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes7_to_t_bytes7(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes7(value))

			}
		
			function cleanup_assert_t_bytes7(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFF00000000000000000000000000000000000000000000000000)
			}
		

test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol:B 6060604052341561000f57600080fd5b5b6101678061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633120d4341461003e575b600080fd5b341561004957600080fd5b610062600480803560ff169060200190919050506100d6565b6040516020810161007881600084018486610082565b905080925061009a565b60008490506100908261009f565b8452949350505050565b6100cb565b60007fffffffffffffff0000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b60008160ff166001801561013357825b7f31323334353637000000000000000000000000000000000000000000000000008178ffffffffffffffffffffffffffffffffffffffffffffffffff19161415610130575b6100e6565b5b505b5b50509190505600a165627a7a723058201c6753a53c7f33a7ab2765b35be4db67a93045b0d6f40e1f4cac39849b4cddf30029
test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"}],"name":"f","outputs":[{"name":"r","type":"bytes7"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol":{"keccak256":"0xe6a64db24db990c896775bac71cbebda190c130a250c26e2252ecaeae0a7cae5","urls":["bzzr://8d62006b2ef82c13866b0422735bd7b51a01e119fb62760e9455a9d19c59a7ca"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol:C 6060604052341561000f57600080fd5b5b60d98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000604290506008819060020a0290505b905600a165627a7a7230582039a57e487600abfdd90f0b55dce087e50d08ff09c5a5db4fcf6ffc50c840e1490029
test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol":{"keccak256":"0x85d401e9cea7e9e27e5b597d429f6a93da4eeab533f86b1e615b75b614b965e1","urls":["bzzr://0cc668b88a8f5a63d32876465d7e5465b1a3ba43ba0b4bc6c70c01ecdcb62601"]}},"version":1}
test_be012172ebceceb8d789b00c43e26cfebd1816d89a9c95d410b6dbbdd0f9b31d.sol: ERROR
 conv uint256 -> uint256
 conv uint8 -> uint8
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol:test 6060604052341561000f57600080fd5b5b6001600080600781526020019081526020016000206000018190555060026000806007815260200190815260200160002060010160006101000a81548160ff021916908360ff16021790555060036000806007815260200190815260200160002060020160008081526020019081526020016000208190555060016000806007815260200190815260200160002060030160006101000a81548160ff0219169083151502179055505b5b6101a2806100c96000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f0ba84401461003e575b600080fd5b341561004957600080fd5b61005f6004808035906020019091905050610132565b60405160608101610075816000840184886100be565b9050610086816020840184876100db565b9050610097816040840184866100a1565b90508094506100b9565b60008490506100af826100f8565b8452949350505050565b6100d6565b60008490506100cc82610109565b8452949350505050565b6100f3565b60008490506100e982610118565b8452949350505050565b610104565b60008115159050919050565b610113565b6000819050919050565b610125565b600060ff82169050919050565b5050505060405180910390f35b60006020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060030160009054906101000a900460ff169050835600a165627a7a72305820c3018fade3812036d7645df425447cc060037677e49c14e1cb6966b723acbce60029
test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint8"},{"name":"d","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol":{"keccak256":"0xa588745b75aee8e76b79562485d17e74ff9e4109e3504059a8750a5f2a51c0b5","urls":["bzzr://c78b0ccb8c6fbb89b3d5ac0950aed76d021843a47bc05f758970d3c275b8a91a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol:test 6060604052341561000f57600080fd5b5b600860008060078152602001908152602001600020819055505b5b60f0806100396000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639507d39a14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008060008381526020019081526020016000205490505b9190505600a165627a7a723058208bf7b9bbd1ff1355b91520a0e01e8cb8b4adea3c10573555795d7764bd543f600029
test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"get","outputs":[{"name":"value","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol":{"keccak256":"0xd274fad9768b13c632d1e7d19f0293384dff664854cd109cbb533ce1992cdf2f","urls":["bzzr://b4db2c7b08c02527a663bdd4a2c1f7b4ba22ce5db27a8da12473c2d38365c6a0"]}},"version":1}
test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820a67d17e5551cebe1bae0ad60348eb0eeaaeacd59d458b4f28ecb1dda6e2e72ca0029
test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol":{"keccak256":"0xc9f2d46fd31064ca8253a4c7648321157ab19571bab1cc112eabb7c308647105","urls":["bzzr://791459b59693dfa6a89ca506d7fee0d0bce276cfff308377231a70db50ce0bc1"]}},"version":1}
test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058203c05362704e66544594981545495e684f2d0dc6221e8a56ae310bc8a98c8a0100029
test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol":{"keccak256":"0x90ef6b7c38411ecd19b4cdf6e1cada4bb9224ea33e7a9aef9d331bcfa02393d8","urls":["bzzr://91b3a3eeed669f6eca699381425622a62ee4b22693556c419fe0b37eff017c43"]}},"version":1}
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820f4d323ad0d3388bb698ef4499461cd0cd1a00e0968c8763aa8256bd61fc3be8d0029
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":{"keccak256":"0xcbaa007cb948dcf1a0c736a55a6c4e1bfd58a034008399f5bc7b12810b4bdc0d","urls":["bzzr://899b8e723f0ac1899ca71c0dd437593480c2f2d53682afb16253ca348f31b103"]}},"version":1}
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:D 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820f5f542f9abb303e6158f9bf72ffae6e832d6cacf56f9e7fa4d97b3094b5d64d70029
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":"D"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":{"keccak256":"0xcbaa007cb948dcf1a0c736a55a6c4e1bfd58a034008399f5bc7b12810b4bdc0d","urls":["bzzr://899b8e723f0ac1899ca71c0dd437593480c2f2d53682afb16253ca348f31b103"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol:test 6060604052341561000f57600080fd5b5b60d88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d406534c14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060059050600090508091505b50905600a165627a7a7230582074163cfa65b59539b6ecc10df4951182e5709505995c955e287dd142e1bb7b3d0029
test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"delLocal","outputs":[{"name":"res","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol":{"keccak256":"0x6c83cfca492eb8bd33fb9f882747a02b27023af364355436c0766727c16e3a40","urls":["bzzr://a7696cf333418b135c308eef54c4e4ac9ca8abd8bc60bb4677c4b97fc8a30ddf"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol:C 60606040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe600055341561003357600080fd5b5b60cb806100426000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820d52e8249425a4a8da2a902a508620e50a8d9b311c04c78fc34c3fae5c38ecbc90029
test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol":{"keccak256":"0x666008c10b46ce76de7171fac62ea320f186e947a3433365ec8f019b367155aa","urls":["bzzr://ef904bee1cefe03abf54e36ee6b5891bb0db776d376de698ba8d3387faf8d01b"]}},"version":1}
test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol:C 60606040523415600e57600080fd5b5b609a8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090505b600a811015606a5780806001019150505b6055565b5b505600a165627a7a7230582029ff17bd4bb19364a0ac14487b77d41585f488e03316b0bbd74694c668a6b3b30029
test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol":{"keccak256":"0x456df14344d00e8ebc5f1d7c53251970d6603b0d9a4694d1b66ff7d615ab6823","urls":["bzzr://e45bfba950aa7195220f6b08e48e334b6e3e4713516f920b7f7641e54ca12941"]}},"version":1}
test_bf798fd980a2088d40696dd9316a40ed569f531137602b3d645d1f8961b9ecc5.sol: ERROR
 conv enum test.Choice -> enum test.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806385bb7d6914603d575b600080fd5b3415604757600080fd5b604d60a8565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b609d565b600060038210600081146095576097565bfe5b50919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820a70a957c86487f10c30187984afc165dd2edb916789fe3172d7eb29c4e3a081c0029
test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol":{"keccak256":"0x89ef320f55e63233de8e528404ef2b533a2cb09c8968a00a1a1ba7a487e0be29","urls":["bzzr://ccf8dfd46d17203604f52522d725cbae2ede7fd396dc83196858e8c69fa34550"]}},"version":1}
test_bfbb9c384603a8e4665a18d56e4fec627959780456dc5bd7136fd1239065a126.sol: ERROR
test_bfdf2d2e140616f5b9a7c6ed475c623179db9b56f8db974e0d9ce6de34b24886.sol: ERROR
test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol:test 60606040523415600e57600080fd5b5b608d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b5b505600a165627a7a723058208aa3901359497c346bcc6af277fe2e00f7f14a4d9fc9add158da8d9510a7a3cf0029
test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol":{"keccak256":"0xc7d8415981ad26b519f24bf645ffa5cf8f4615e2cf4b41e0f1271765ec5f1714","urls":["bzzr://998bb76fb71beed2f09d655d3c4f5e657d79976adb1fd5324be742431d0791a2"]}},"version":1}
test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582098b48acf7a95db0785c286b0414e391a1c33c5bb18334a2e90aa1b32674ef89d0029
test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol":{"keccak256":"0xaa12a3c29b083f91d969333efe4d5def0f496668d6fc2b8208aff94bce7dfc2b","urls":["bzzr://f49518d43cef209f340daf92b06233d8604ddc42f7533e5685b5ef8a0e13fb60"]}},"version":1}
test_c0e4874cb837080bd0c2b961c9f26bff7d4e7e4ef4ce80153e285ac100c9bdcc.sol: ERROR
test_c102b695c3fe66c6b89aa75a9d78153e154f8351a0b9f4442a84c6f8b6382201.sol: ERROR
test_c10c4b99f575f8c052694a3bdc4048c229f5fed1f714a4b2b5855dcb4fd564f2.sol: ERROR
 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol:Test 6060604052341561000f57600080fd5b5b61079f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635a61549b14610054578063b5d11e991461014e578063f4eaeb4e14610288575b600080fd5b341561005f57600080fd5b610067610382565b6040516080810161007d816000840184896100f4565b905061008e816020840184886100ba565b905061009f816040840184876100d7565b90506100b0816060840184866100f4565b90508095506100d2565b60008490506100c882610111565b8452949350505050565b6100ef565b60008490506100e582610124565b8452949350505050565b61010c565b600084905061010282610133565b8452949350505050565b61011f565b600061ffff82169050919050565b61012e565b6000819050919050565b610140565b600060ff82169050919050565b505050505060405180910390f35b341561015957600080fd5b610161610578565b60405160a081016101778160008401848a61021c565b9050610188816020840184896101e2565b9050610199816040840184886101ff565b90506101aa8160608401848761021c565b90506101bb816080840184866101c5565b90508096506101dd565b60008490506101d382610239565b8452949350505050565b6101fa565b60008490506101f08261024a565b8452949350505050565b610217565b600084905061020d8261025d565b8452949350505050565b610234565b600084905061022a8261026c565b8452949350505050565b610245565b60008115159050919050565b610258565b600061ffff82169050919050565b610267565b6000819050919050565b610279565b600060ff82169050919050565b50505050505060405180910390f35b341561029357600080fd5b61029b610610565b604051608081016102b181600084018489610328565b90506102c2816020840184886102ee565b90506102d38160408401848761030b565b90506102e481606084018486610328565b9050809550610306565b60008490506102fc82610345565b8452949350505050565b610323565b600084905061031982610358565b8452949350505050565b610340565b600084905061033682610367565b8452949350505050565b610353565b600061ffff82169050919050565b610362565b6000819050919050565b610374565b600060ff82169050919050565b505050505060405180910390f35b6000806000806103906106ae565b6001600060026005811015156103a257fe5b6003020160005b5060000160006101000a81548160ff021916908360ff1602179055506002600060026005811015156103d757fe5b6003020160005b5060000160016101000a81548161ffff021916908361ffff16021790555060036000600260058110151561040e57fe5b6003020160005b506001018190555060046000600260058110151561042f57fe5b6003020160005b50600201600160028110151561044857fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055506000600260058110151561047957fe5b6003020160005b50608060405190810160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016001820154815260200160028201600280602002604051908101604052809291908260028015610536576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116104ff5790505b50505050508152505090508060000151945080602001519350806040015192508060600151600160028110151561056957fe5b602002015191505b5090919293565b60008060008060006105886106e4565b80600060028110151561059757fe5b60200201516000015195508060006002811015156105b157fe5b60200201516020015194508060006002811015156105cb57fe5b60200201516040015193508060006002811015156105e557fe5b60200201516060015160016002811015156105fc57fe5b60200201519250600191505b509091929394565b60008060008061061e6106ae565b6001816000019060ff16908160ff16815250506002816020019061ffff16908161ffff1681525050600381604001818152505060048160600151600160028110151561066657fe5b602002019060ff16908160ff16815250508060000151945080602001519350806040015192508060600151600160028110151561069f57fe5b602002015191505b5090919293565b60a060405190810160405280600060ff168152602001600061ffff168152602001600081526020016106de610713565b81525090565b610140604051908101604052806002905b6106fd61073d565b8152602001906001900390816106f55790505090565b60408051908101604052806002905b600060ff168152602001906001900390816107225790505090565b60a060405190810160405280600060ff168152602001600061ffff1681526020016000815260200161076d610713565b815250905600a165627a7a723058203b3a4794347c7748beef8f901b14fecee34ac1ac382e0f23fcd068cc039b84ec0029
test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"testCopyRead","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testInit","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"},{"name":"flag","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testAssign","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol":{"keccak256":"0x8169d71ea63e69cb9527e25648bb4382d25cc731a57aa03a9b5702bb2ae27902","urls":["bzzr://b22d0bd8f60ec2e60f33488a0a5041561f7861017a9ff0aa4362b25ddc92d23b"]}},"version":1}
test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol:C 6060604052341561000f57600080fd5b5b6101cd8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b61005b610147565b608060405190810160405280608060405190810160405280600160ff168152602001600260ff168152602001600360ff168152602001600460ff168152508152602001608060405190810160405280600260ff168152602001600360ff168152602001600460ff168152602001600560ff168152508152602001608060405190810160405280600360ff168152602001600460ff168152602001600560ff168152602001600660ff168152508152602001608060405190810160405280600460ff168152602001600560ff168152602001600660ff168152602001600760ff1681525081525090505b50565b610200604051908101604052806004905b610160610176565b8152602001906001900390816101585790505090565b6080604051908101604052806004905b600060ff1681526020019060019003908161018657905050905600a165627a7a723058201233d8cf2f817eb8206615c33a8d57f922d8fd092dbd6afaf1986faebabfee9b0029
test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol":{"keccak256":"0xd1304f13bf778eb6660088e73ef92a4aff882a0577a320c9aa61b49098011142","urls":["bzzr://0e3bce25cbb92f680119f5cb5d1b328e7f114a07dc2bb594f29ce3cfd6b0d678"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol:A 6060604052341561000f57600080fd5b5b60d08061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060303b90505b905600a165627a7a72305820c8e110df5ab2b6f3a4afaa1209c4b887a754a98fb08cc0ff8abb766aa9f48a1e0029
test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"_s","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol":{"keccak256":"0xfd8c0df43624a92920e51c1fdf94cbc66303a4e32641122f55f251f6882e89b9","urls":["bzzr://1bfc0600a5dfb15974bd1965bbfb73c105f366f3559c02cc9effdc218adc6533"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c1f57b79ad8852a8ca40e6a06d7d8c835475399b9acdc15e8553519953860abd.sol: ERROR
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol:c 6060604052341561000f57600080fd5b5b6101258061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600115157f61626300000000000000000000000000000000000000000000000000000000007f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60026040516020810160ab8160008401848660b4565b905080925060ca565b600084905060c08260dc565b8452949350505050565b60d8565b6000819050919050565b60ec565b600060e58260ce565b9050919050565b505060405180910390a35b5600a165627a7a72305820de5dac150053884983b28b2e77722177029afa0adb45da031ddb04aa180493a70029
test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol":{"keccak256":"0x3ac192e159b6ea23946238f164909bf6ec27d94579ff335b73cd128538ab76ac","urls":["bzzr://8e5215ab91585261ff7230445e4161d3edce7f695a7cd81b2e52756238c8df3b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:helper 6060604052341561000f57600080fd5b5b60db8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b905600a165627a7a7230582027801f61c4137c89522da11a66410b75ae1b976617ab38e55dbbc3a4b1dc68fe0029
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":"helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":{"keccak256":"0x4284c863cfef5beaaf3e221a641dc1025ae08d76f8b99cbec8da58a8307d551c","urls":["bzzr://e879205a15df76f08afb8d5cca60e02ac4efd54d1e3fd906d0048c60f728fba1"]}},"version":1}
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:test 60606040525b61000d610068565b604051809103906000f080151561002357600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610077565b60405160f98061023383390190565b6101ad806100866000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063fd72b6e91461003e575b600080fd5b61005460048080359060200190919050506100a6565b6040516020810161006a81600084018486610074565b905080925061008c565b600084905061008282610091565b8452949350505050565b61009b565b6000819050919050565b505060405180910390f35b60008060008060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312065fe08b975097509750601494508787876103e890935093509350935083838360038d016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303818589803b151561015857600080fd5b88f1151561016557600080fd5b50505050506040518051905098505b50505050505050509190505600a165627a7a72305820b3726d5c8b48c7784f9819f0de4dd157429cce60381e5aa02d8adb26a341cf6300296060604052341561000f57600080fd5b5b60db8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b905600a165627a7a7230582027801f61c4137c89522da11a66410b75ae1b976617ab38e55dbbc3a4b1dc68fe0029
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":{"keccak256":"0x4284c863cfef5beaaf3e221a641dc1025ae08d76f8b99cbec8da58a8307d551c","urls":["bzzr://e879205a15df76f08afb8d5cca60e02ac4efd54d1e3fd906d0048c60f728fba1"]}},"version":1}
test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol:test 60606040523415600e57600080fd5b5b60026001026001604051808260010260001916815260200191505060405180910390a15b5b60368060416000396000f30060606040525b600080fd00a165627a7a723058207e0f76c2137a53677b59cf372f4487d89ab376ba0dfcdf30563d5df7b9e37e230029
test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol":{"keccak256":"0xe98effa0cd590902903106e2eb15c58fcc68a793d0ce7b0563fbb25e28714b8c","urls":["bzzr://bd5486171e957bfae4c072352e63f8215167010bb2f9d1357e5d9a997c869c1b"]}},"version":1}
test_c3e9738d0c612381a210b684cd39db65807246a6e39cfd7100641402cb951e13.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Base 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd97814603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a72305820ad3b5f316ab536c60465af00cc854db06ba678fdc9a34aa741ca65df8d283a920029
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":{"keccak256":"0xdd6ae81b45280e669de8c40c29c316137de15a5e41d686c721c3dce52870fd94","urls":["bzzr://1ce54022baf45f78967f6f6d00441f689808c7be8f93bd84444f878c743d4c88"]}},"version":1}
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Derived 6060604052341561000f57600080fd5b5b6102118061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063099bd97814610054578063214cd4cc146100b95780634848b1a514610130575b600080fd5b341561005f57600080fd5b6100676101ae565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100cc6101b8565b604051604081016100e2816000840184876100fd565b90506100f3816020840184866100fd565b9050809350610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b50505060405180910390f35b341561013b57600080fd5b61015a60048080359060200190919080359060200190919050506101ca565b604051602081016101708160008401848661017a565b9050809250610192565b600084905061018882610197565b8452949350505050565b6101a3565b60008115159050919050565b505060405180910390f35b6000805490505b90565b600080600054915060015490505b9091565b60008260008190555081600181905550600190505b929150505600a165627a7a7230582023b2ed41c07dab96e8ae19d51fd02100698f2d2db137fb87ab9f6c3363638f620029
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaDerived","outputs":[{"name":"base","type":"uint256"},{"name":"derived","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"base","type":"uint256"},{"name":"derived","type":"uint256"}],"name":"setData","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":{"keccak256":"0xdd6ae81b45280e669de8c40c29c316137de15a5e41d686c721c3dce52870fd94","urls":["bzzr://1ce54022baf45f78967f6f6d00441f689808c7be8f93bd84444f878c743d4c88"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol:test 6060604052341561000f57600080fd5b5b60ff8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398c3a6c114603d575b600080fd5b3415604757600080fd5b605d6004808035151590602001909190505060a9565b60405160208101607181600084018486607a565b90508092506090565b60008490506086826094565b8452949350505050565b609e565b6000819050919050565b505060405180910390f35b600080600060cd915061abab90508360c0578060c5565b8160ff165b61ffff1692505b50509190505600a165627a7a72305820bb0f49ec134b9f1b7efb3221aad0bff750efccd1bddc411d23d9d39c31c05a530029
test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol":{"keccak256":"0x60aa6a5917f23531286a7878855489cd03f59702d808a1728f0c548caa19e3f6","urls":["bzzr://b84afdfdd9e1f48f3b479aae3213f9a9ab23aeb057ba7dbcf602bcc13f48a44a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol:c 6060604052341561000f57600080fd5b5b6102a18061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b60008060096000816100c791906101a8565b506004600060088154811015156100da57fe5b906000526020600020906002020160005b506000018190555060056000600881548110151561010557fe5b906000526020600020906002020160005b5060010181905550600060019080546101309291906101da565b506001600881548110151561014157fe5b906000526020600020906002020160005b506000015491506001600881548110151561016957fe5b906000526020600020906002020160005b506001015490506000808161018f91906101a8565b50600060019080546101a29291906101da565b505b9091565b8154818355818115116101d5576002028160020283600052602060002091820191016101d49190610246565b5b505050565b8280548282559060005260206000209060020281019282156102355760005260206000209160020282015b828111156102345782826000820154816000015560018201548160010155505091600201919060020190610205565b5b5090506102429190610246565b5090565b61027291905b8082111561026e5760008082016000905560018201600090555060020161024c565b5090565b905600a165627a7a723058203a70f808781820f38cc3d867e519bf884f4f3677760fa0a91eb33265ed0ca0c30029
test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol":{"keccak256":"0x5906c74ba4ad307944d02a450a538848d103d10a612cb84b4871ff757a658dee","urls":["bzzr://9c3c942b8ff83eae40df5e10643a47c2265fbe5165b6d2fb51083c0f5d73222e"]}},"version":1}
test_c56f8ba3e97156a43695c25fefb95edeb24f22fc31ac660904516eb02daec3ea.sol: ERROR
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:C 6060604052341561000f57600080fd5b5b6101898061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f6004808035906020019091905050610061565b005b61006961010d565b610071610121565b610079610135565b600a6040518059106100885750595b9080825280602002602001820160405280156100be57816020015b6100ab610149565b8152602001906001900390816100a35790505b50925060146040518059106100d05750595b908082528060200260200182016040525b509150836040518059106100f25750595b908082528060200260200182016040525b5090505b50505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058206fef968378e548774ca1b71d17f9ca4828d8fd7ee9f6d92e8d8c355582b64ae30029
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"size","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":{"keccak256":"0x582625b40d3b77a5de2a37e1fcdd958de2748a3aac236f4308410f4b3563cf37","urls":["bzzr://c44f13dd0b0f28e1e0fb4d25ed19b778f73c760417c26257fc57b22f68e6e0e0"]}},"version":1}
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820f8a3d7f27cd1feddb804f665e4f4beb85d7a0f6bcefc0c1b905c81fa7a0fa3450029
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":{"keccak256":"0x582625b40d3b77a5de2a37e1fcdd958de2748a3aac236f4308410f4b3563cf37","urls":["bzzr://c44f13dd0b0f28e1e0fb4d25ed19b778f73c760417c26257fc57b22f68e6e0e0"]}},"version":1}
test_c63bad54c107d0b6f60b8f3319d2545bb09d21903776a034630a4f7491bb2936.sol: ERROR
test_c6808ce893159d734383920da3efb9f96c4b876bb3b033a5f73557bf4b73bac8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol:test 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060a557600a60a8565b60055b60ff1690505b905600a165627a7a723058206ad994308c3666a690fc8e292dde12a679b197cd9f3278e2c5875bc5fca174650029
test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol":{"keccak256":"0x89f66411972bc76e949eee143624da199562fb30c34073a43b450d48425b218c","urls":["bzzr://1dc5c59520ed93936c2cc8c2a3cd72dba87691c74e8bcb208bbe6084e95ee20c"]}},"version":1}
test_c69631d68bc35421f7f05e8aa1e929dfb476e4e2c34f307f35622f9f2730484c.sol: ERROR
test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582095bd7ba318f5b0e1ee2a17438116e604da486e2717e22b9d6057bfc326cb9df60029
test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol":{"keccak256":"0xcf2087f305855203588e7946ccc5a099e8e8befd4354a22168fd9af88c22e668","urls":["bzzr://329d497952a2a3caab683829a164bcc21f95e35077894cb0aa49c5eb201f237d"]}},"version":1}
test_c781a0c0a0a85155c5c8a946ed05a37df01b9cdb664d7925441b32af7309d5dd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol:Test 60606040526064600055341561001457600080fd5b5b61026f806100246000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005457806326121ff0146100b9578063f8a8fd6d1461011e575b600080fd5b341561005f57600080fd5b610067610183565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100ae565b6000819050919050565b505060405180910390f35b34156100c457600080fd5b6100cc610189565b604051602081016100e2816000840184866100ec565b9050809250610104565b60008490506100fa82610109565b8452949350505050565b610113565b6000819050919050565b505060405180910390f35b341561012957600080fd5b6101316101ab565b6040516020810161014781600084018486610151565b9050809250610169565b600084905061015f8261016e565b8452949350505050565b610178565b6000819050919050565b505060405180910390f35b60005481565b600080156101975760005490505b600a60008082825403925050819055505b90565b60006101b5610189565b503073ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561022257600080fd5b6102c65a03f1151561023357600080fd5b5050506040518051905090505b905600a165627a7a72305820dbcb0f757ced8848b1166eb940b06122ec4e6efed055683bdb0e71bef4261abf0029
test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol":{"keccak256":"0x6f85d66c337362b9eb2924ff9df929a9783ef0e51ab28c2f38a9d93ff165748a","urls":["bzzr://2c2bcf33aaa25056970bab3f2f38214cb6e3b6238d4f7e0706f5b10aa4424b92"]}},"version":1}
test_c79a5d10c1c97ed4fb713ca30564dfe3589a2a6ff9e16f2a43365875b868b12a.sol: ERROR
test_c7a88d81f06d6e1a616075bfe3ab854e5d6daa3e4a784eb88c8d9f0c058f0659.sol: ERROR
test_c7b4660768fb82780eff0d3eb258de67517b1a5b3cc519763e37ca7661538d03.sol: ERROR
test_c83a84ed18c674b35b576360d0753a0ea1c7eb8bce23f8470b2d035babd10184.sol: ERROR
test_c85cbc5cb39b530c421b26bc00b4d6a145d564d7032665c716560e31ab965cdf.sol: ERROR
test_c863ff7a131f672a5e3839286b6a37856806f65028c1100827f49dc3c2045a1f.sol: ERROR
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol:Test 6060604052341561000f57600080fd5b5b6101258061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063de3a22df14603d575b600080fd5b3415604757600080fd5b605e600480803560ff1690602001909190505060cc565b60405160208101607281600084018486607b565b90508092506091565b60008490506087826095565b8452949350505050565b60c1565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b6000817f01000000000000000000000000000000000000000000000000000000000000000290505b9190505600a165627a7a72305820b8a49348683e0cfd6f1528658595ff903f44a2234c2a7f2088355d913383256a0029
test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint8"}],"name":"UintToBytes","outputs":[{"name":"s","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol":{"keccak256":"0x88be3a4637a9b15ff03f77c9dba9c12d0500801ce74cae63083baaddb4c2193f","urls":["bzzr://93f891c0a78425bef8d67a96632ee170bc730becfabf2a7da482118fc2c37b70"]}},"version":1}
test_c95108771355062981fa5830dd8dd1bc4504a90ed9e575dd9aa12c1704b828bb.sol: ERROR
test_c9a50eae0aee126fe7cc2ec442144ebcf4e1e03225e790d5e3f09a2f03296200.sol: ERROR
test_c9b6ca50a18023082e1b022e18639236e91ef53711491273cde893cb2d1ebc7f.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol:c 6060604052341561000f57600080fd5b5b6101ba8061001f6000396000f3006060604052361561003f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b8e010de14610066575b341561004a57600080fd5b6100645b600036600091906100609291906100e9565b505b565b005b341561007157600080fd5b6100796100cd565b6040516020810161008f81600084018486610099565b90508092506100b1565b60008490506100a7826100b6565b8452949350505050565b6100c2565b60008115159050919050565b505060405180910390f35b60008036600091906100e09291906100e9565b50600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012a57803560ff1916838001178555610158565b82800160010185558215610158579182015b8281111561015757823582559160200191906001019061013c565b5b5090506101659190610169565b5090565b61018b91905b8082111561018757600081600090555060010161016f565b5090565b905600a165627a7a723058206a54d043b380db64fc85d904bbac82df6eb697dc5187d75d1904288d079c18aa0029
test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol":{"keccak256":"0x892bd8d870b70dcaab7953eed50918b09c976add0414c5ebb05ec9dd6861eb7f","urls":["bzzr://3c91e9eb1f95cce761e984ee200d520f03220f06b8c34b780642df52cc8017be"]}},"version":1}
test_ca123ddeb260ca56629f5e6d9aec10189795f5948fcad5a7d30a5f23097a833e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol:c 6060604052341561000f57600080fd5b5b6101248061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d609b565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b6090565b60008115159050919050565b505060405180910390f35b600080600160008001819055506002600060010181905550600090508060026000820154816000015560018201548160010155905050600080015460026000015414801560f15750600060010154600260010154145b91505b50905600a165627a7a72305820bab9c134082efc0e063058d5f86136b399e2bc7280accf089bb96bfbb1693c8b0029
test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol":{"keccak256":"0x39ea50f103480de6e8165f2da7c36c539251117883cbe86de7ee4cec6e07141d","urls":["bzzr://d504842e03bf9b5d33b8d2f5b5a31ee9ef7ab9870e1ba17c07cc779db23a5ab8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol:C 6060604052341561000f57600080fd5b5b6103908061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014610049578063b8c9d365146100ae575b600080fd5b341561005457600080fd5b61005c610125565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c16102dd565b604051604081016100d7816000840184876100f2565b90506100e8816020840184866100f2565b905080935061010a565b60008490506101008261010f565b8452949350505050565b610119565b6000819050919050565b50505060405180910390f35b600080600080600160008161013a9190610313565b50600360008081548110151561014c57fe5b906000526020600020900160005b50819055503073ffffffffffffffffffffffffffffffffffffffff1663b8c9d3656000604051604001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15156101ca57600080fd5b6102c65a03f115156101db57600080fd5b505050604051805190602001805190508093508194505050600583141580610204575060068214155b1561021257600193506102d7565b61021a6102f3565b809350819450829550505050600183141580610237575060028214155b806102615750600381600081548110151561024e57fe5b906000526020600020900160005b505414155b1561026f57600293506102d7565b8183809350819450505060028314158061028a575060018214155b1561029857600393506102d7565b60086009600a600b600c8494509091925082925090505080935081945050506008831415806102c85750600a8214155b156102d657600493506102d7565b5b50505090565b60008060056006819150809050915091505b9091565b60008060006001600260008292508191508090509250925092505b909192565b81548183558181151161033a57818360005260206000209182019101610339919061033f565b5b505050565b61036191905b8082111561035d576000816000905550600101610345565b5090565b905600a165627a7a72305820aed3f64070c659801340b35e29226353acf6b18468462fe228e5a28a5d794d400029
test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol":{"keccak256":"0x2e7498eb5c653b7de6d3d79c9bc9f55e37dca170496e164c7967349dec19077d","urls":["bzzr://18d84e263ac7fd1bdd1fc31cef299c609a428243315025c5411ae3d62cb2db1b"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_cb0b1234506abbcfc770d706e735d7354e8f4001417d44ceab72ccc29b5a0d3a.sol: ERROR
test_cb0d6bcddc160f1530191ecde9c3504762b58b9aac2f77cc9527d5ca4ea09ba0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol:C 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600190505b905600a165627a7a72305820b3b19b9e7c64e5e8d67161cf679f24c82958f7259f6ebd6498ea5534bfb4093a0029
test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol":{"keccak256":"0xf6213cd71a2ab316c282220bfe621d8cd6cffc510ec7f2caf134cb7e98517af9","urls":["bzzr://e184fda19567889a61e51a18d93320493bb579a0d50ebec58d333e1643476e41"]}},"version":1}
test_cb39e3821328aa47bf83778de0f86c7fdbe1146e031afeb189e5966a0a3db86b.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol:c 6060604052341561000f57600080fd5b5b6101fd8061001f6000396000f3006060604052361561003f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b6588ffd14610066575b341561004a57600080fd5b6100645b600036600091906100609291906100e4565b505b565b005b341561007157600080fd5b6100796100cd565b6040516020810161008f81600084018486610099565b90508092506100b1565b60008490506100a7826100b6565b8452949350505050565b6100c2565b60008115159050919050565b505060405180910390f35b60008060006100dc9190610164565b600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012557803560ff1916838001178555610153565b82800160010185558215610153579182015b82811115610152578235825591602001919060010190610137565b5b50905061016091906101ac565b5090565b50805460018160011615610100020316600290046000825580601f1061018a57506101a9565b601f0160209004906000526020600020908101906101a891906101ac565b5b50565b6101ce91905b808211156101ca5760008160009055506001016101b2565b5090565b905600a165627a7a72305820810c35ac246f63405bbed52447f4dfdeb9811f62b989b71ac0d9aacbd28ce9d80029
test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"del","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol":{"keccak256":"0xc4e319ee62035714d629e9be535a2e02341bbb61e72fafd96e64dfa3e56d4072","urls":["bzzr://3bf9229e833cb4dc002d650344af9bd9fe5393ccbdb4ee62a702fedadfc747df"]}},"version":1}
test_cbe18949ebd1b897a84be8466e3ea02a8ab71a1763db8627510a5d2396d5330a.sol: ERROR
test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol:C 6060604052341561000f57600080fd5b5b6102c08061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b600061005d6100fb565b610065610132565b600092506002826000018181525050600983600201600160148110151561008857fe5b610190020160005b50600260148110151561009f57fe5b6014020160005b5060036014811015156100b557fe5b0160005b5081905550600383611f42016000016002600a811015156100d657fe5b600a020160005b506002600a811015156100ec57fe5b0160005b50819055505b505050565b6203f4c060405190810160405280600081526020016000815260200161011f610162565b815260200161012c610192565b81525090565b62278f8060405190810160405280600a905b61014c6101ad565b8152602001906001900390816101445790505090565b6203e800604051908101604052806014905b61017c6101e4565b8152602001906001900390816101745790505090565b610c80604051908101604052806101a7610213565b81525090565b6203f4c06040519081016040528060008152602001600081526020016101d1610162565b81526020016101de610192565b81525090565b613200604051908101604052806014905b6101fd610242565b8152602001906001900390816101f55790505090565b610c8060405190810160405280600a905b61022c61026b565b8152602001906001900390816102245790505090565b610280604051908101604052806014905b60008152602001906001900390816102535790505090565b61014060405190810160405280600a905b600081526020019060019003908161027c57905050905600a165627a7a7230582014e0daa976d04a2ca8b4aa6a4c47bd2133a01f81c7b523daf6321df5ce4465710029
test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol":{"keccak256":"0x74893a0a80843c50636a775ff92c736c504ce29fc6d37fd86448de82ff9c7be5","urls":["bzzr://16d89ba3c8f16e66b9ae445043e0ef173f11d5ad4630c4c32854cdacdd8ca477"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv contract Fund -> contract Fund
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_Fund_$92_to_t_contract$_Fund_$92(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_Fund_$92_to_t_contract$_Fund_$92(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_Fund_$92(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_Fund_$92(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv int_const 10 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_10_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_10_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_10_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 10 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_10_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_10_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_10_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Attacker 6060604052341561000f57600080fd5b6040516020806104dc833981016040528080519060200190919050505b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b61045e8061007e6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631c02bc31146100855780639e5faafc146100aa578063b60d42881461010f575b6100835b600160008154809291906001019190505550600460015410156100805761007e6101a1565b505b5b565b005b341561009057600080fd5b6100a8600480803515159060200190919050506103d8565b005b34156100b557600080fd5b6100bd6103f6565b604051602081016100d3816000840184866100dd565b90508092506100f5565b60008490506100eb826100fa565b8452949350505050565b610104565b6000819050919050565b505060405180910390f35b341561011a57600080fd5b61012261040d565b6040516020810161013881600084018486610142565b905080925061015a565b600084905061015082610184565b8452949350505050565b61017f565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610196565b600061018f8261015f565b9050919050565b505060405180910390f35b6000600260009054906101000a900460ff16156102c6576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d600a6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602081016102418160008401848661024b565b9050809250610263565b600084905061025982610277565b8452949350505050565b610272565b6000819050919050565b610289565b600061028282610268565b9050919050565b5050602060405180830381600087803b15156102a457600080fd5b6102c65a03f115156102b557600080fd5b5050506040518051905090506103d5565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ccb11834600a6000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020810161034f81600084018486610359565b9050809250610371565b600084905061036782610385565b8452949350505050565b610380565b6000819050919050565b610397565b600061039082610376565b9050919050565b5050602060405180830381600087803b15156103b257600080fd5b6102c65a03f115156103c357600080fd5b5050506040518051905090506103d5565b5b90565b80600260006101000a81548160ff0219169083151502179055505b50565b6000806001819055506104076101a1565b90505b90565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820e5021fcb7cf66860d6dd68dde1f3491a0af8b7605d0a3938a29141337a900c5e0029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Attacker {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_protected","type":"bool"}],"name":"setProtected","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"attack","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"fund","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"_fund","type":"address"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"Attacker"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Fund 60606040525b346001819055505b5b6102778061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e1a7d4d14610049578063ccb11834146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd60048080359060200190919050506101e4565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b60008060009054906101000a900460ff161561014a57600080fd5b60016000806101000a81548160ff02191690831515021790555060015482111561017357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185876187965a03f19250505015156101ae57600080fd5b8160016000828254039250508190555060015490505b60008060006101000a81548160ff0219169083151502179055505b919050565b60006001548211156101f557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185876187965a03f192505050151561023057600080fd5b8160016000828254039250508190555060015490505b9190505600a165627a7a7230582023b3cf283cd3fdc24a66893587af5ab7a0b8578cffe25fa51876202b232492c50029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Fund {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawUnprotected","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"Fund"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:mutexed 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582038f9aa3cbe21b3d8833e9c09a0cdcb9ec0cb016452e0bd0e16b1a7e326f3a7180029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:mutexed {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"mutexed"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol:test 6060604052341561000f57600080fd5b5b61018c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304bc52f8146100495780635ddab4d4146100c5575b600080fd5b341561005457600080fd5b610073600480803590602001909190803590602001909190505061013e565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b34156100d057600080fd5b6100ec600480803563ffffffff1690602001909190505061014c565b604051602081016101028160008401848661010c565b9050809250610124565b600084905061011a82610129565b8452949350505050565b610133565b6000819050919050565b505060405180910390f35b600081830190505b92915050565b60006004820263ffffffff1690505b9190505600a165627a7a723058205bb8df0e2074b2158a5f79f4118dc5eac6a24dba17108350dbae2e47101f67070029
test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"foo","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint32"}],"name":"boo","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol":{"keccak256":"0xaa4526796eb63baf216201022f58e189a73f04947a4614340508fcf4f07ee05b","urls":["bzzr://33eff1ffe749df104041d3865c46754f8000cc4a644ce8a569437a3eb4ace5a1"]}},"version":1}
test_cd903d35787731950130a24739537691e2894ffc7ae8d0622ac322639f888fa0.sol: ERROR
test_cdabf0465c419b5182e6f5429a562f92b491a70ad5a63fa6b4f03e4208f85902.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820582a4e3cfde96660aee4fed7323f0aef75600cf6b3ebb4726f05e7526c9ed4340029
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":{"keccak256":"0x42a448953c0e6cf9281c79285f8af56434e8103f0f35804dde442fb3f618ca73","urls":["bzzr://02a9367fb30190699bc6caf9aedcb45542591705707ad6476262c721f3b6e269"]}},"version":1}
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:B 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600790505b905600a165627a7a72305820808eaae6485421195f46d37c0612ff6dbd02eb6ae3e40e331a605bd821d02fbf0029
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":{"keccak256":"0x42a448953c0e6cf9281c79285f8af56434e8103f0f35804dde442fb3f618ca73","urls":["bzzr://02a9367fb30190699bc6caf9aedcb45542591705707ad6476262c721f3b6e269"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol:C 6060604052341561000f57600080fd5b5b60ce8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ab5ed15014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b600080341115609e57600190505b5b5b905600a165627a7a7230582038dd9686d158577100b577cbe332a44806c10a1bb28ccca3d4a7cbe2b542f0830029
test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getOne","outputs":[{"name":"r","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol":{"keccak256":"0xcac44ad3d57b8ff2632a76f7c86b16f187705bb112e3bf1f5f68a428f693e3b2","urls":["bzzr://7de50acb41ebc644b4dc1c5f3bd7d7ca137b8821ab1d0c1432fd68c5fc502f4e"]}},"version":1}
 conv bytes6 -> bytes6
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes6_to_t_bytes6(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes6_to_t_bytes6(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes6(value))

			}
		
			function cleanup_assert_t_bytes6(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol:test 6060604052341561000f57600080fd5b5b60086000819055507f43656c696e610000000000000000000000000000000000000000000000000000600160006101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550607b604051808260ff167f0100000000000000000000000000000000000000000000000000000000000000028152600101915050604051809103902060028160001916905550611337600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602a6004819055505b5b6102b6806101156000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461005f578063236fa0d3146100e657806373d4a13a1461014b578063d2407f6b146101b0575b600080fd5b341561006a57600080fd5b61007261022b565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100db565b60007fffffffffffff000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b34156100f157600080fd5b6100f9610258565b6040516020810161010f81600084018486610119565b9050809250610131565b600084905061012782610136565b8452949350505050565b610140565b6000819050919050565b505060405180910390f35b341561015657600080fd5b61015e61025e565b604051602081016101748160008401848661017e565b9050809250610196565b600084905061018c8261019b565b8452949350505050565b6101a5565b6000819050919050565b505060405180910390f35b34156101bb57600080fd5b6101c3610264565b604051602081016101d9816000840184866101e3565b90508092506101fb565b60008490506101f182610200565b8452949350505050565b610220565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b600160009054906101000a90047a0100000000000000000000000000000000000000000000000000000281565b60025481565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582085e14c47a5c2782429e2592dc95464009e9d030806d8f547570f11b8f8c82e9c0029
test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"bytes6"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"a_hash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"an_address","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol":{"keccak256":"0x718c959a3ecf4ec1d0fe83099da96c3641b3126a71ee73a2794a84a8f1a8e022","urls":["bzzr://55879a15659e505272cc797505999864416aeb6f139cf688befa4c11a3ab270a"]}},"version":1}
test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058201072f0939609069608997891bd1b17268601f6158275d5ec86027cd0afefb34d0029
test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol":{"keccak256":"0xcda14e8608bdf12341111747e168568f288402bcc34bfa884d4ad6b367a6cef6","urls":["bzzr://6c822e7a49de5ae0fc53b0cd5c1490091494ab1be8cf914e731cb1cb7e5a3dbc"]}},"version":1}
test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol:test 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063946644cd14603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a723058202f23267c0b12064db2c99f2df38909d5368ecb6e28ba511390c155d87592d4490029
test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol":{"keccak256":"0x310535a8e0e82493341024dd4b94619f526290cdf0362383392e4c7f5772d39d","urls":["bzzr://224e22cc63d85386b9b61ab6d14885288c851b910c5dfa69f0468be84e0508a7"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol:test 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081830190505b929150505600a165627a7a723058202903ddf60c2daa560a7a6b6a8603ef84416ef250cc5cb289fd6636008fb7d80a0029
test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol":{"keccak256":"0x73cb65c9b742f5754ec28400d192f055f9a40e75c49e6a37f84487716f4c1461","urls":["bzzr://1777f0771f08499a1abf10e4adb6d369c6538edefda79fa833cce2caaa160cc9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:C 6060604052341561000f57600080fd5b5b61004b640100000000026100c1176000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610055565b6000600790505b90565b60f7806100636000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806392d0d15314603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060bb6000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b6000600790505b905600a165627a7a72305820d2b0a3993351a4a20dc61066cdd96e76721737eec51f8a3edb64197e8be941f50029
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":{"keccak256":"0x14be052e2d8e9eedb75bb251f34c9ed0c736812fa91a3212873c9dba19b2b7a3","urls":["bzzr://4a3da0f2c41303218bb475d88f5559c1dee7186152270b3c54c12e36b7025ccc"]}},"version":1}
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206b53630bc7d5342838fdeb5e067b836c5efc100356ca922ec77957189389addb0029
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":{"keccak256":"0x14be052e2d8e9eedb75bb251f34c9ed0c736812fa91a3212873c9dba19b2b7a3","urls":["bzzr://4a3da0f2c41303218bb475d88f5559c1dee7186152270b3c54c12e36b7025ccc"]}},"version":1}
test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol:Lib 60606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b60436045565b005b5b5600a165627a7a7230582037affcb2950ae9d4e43a25be18cba6671bdec95d7c3f1b9574af3944603b22d10029
test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol":"Lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol":{"keccak256":"0x25280e415fb0ecfbd906f8af4cd3ac82c105bcee064272340653de36c0cbabc2","urls":["bzzr://85c43aa472f6b151837c709dd91dad524795f342a8f0785a0e1eff86c3f8cd06"]}},"version":1}
test_cfd3290c5f8ee0d23d9253726e911b739b28cbfb118677a3204591cba3adf2ca.sol: ERROR
test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol:test 60606040526040805190810160405280600b81526020017f48656c6c6f203420796f750000000000000000000000000000000000000000008152506000908051906020019061004f929190610060565b50341561005b57600080fd5b610105565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a157805160ff19168380011785556100cf565b828001600101855582156100cf579182015b828111156100ce5782518255916020019190600101906100b3565b5b5090506100dc91906100e0565b5090565b61010291905b808211156100fe5760008160009055506001016100e6565b5090565b90565b60ab806101136000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60006057606b565b60006003925060059250601590505b505050565b6020604051908101604052806000815250905600a165627a7a7230582049c5731d924e30f9ca73e3e1ae78f7396f472cfc1b8f4721f4844a64335372770029
test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol":{"keccak256":"0x445bf31722f471ab130ac09fd70fd4ea22861b0a47d249379ed9ace8e8ca0c31","urls":["bzzr://e3427a956345696646cb40a09211e0e0204b91cf24ba64885138fcac3bf44c84"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol:test 6060604052341561000f57600080fd5b5b6102218061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14610054578063f88e9fbf146100d0578063fa3bd6c51461014c575b600080fd5b341561005f57600080fd5b61007e60048080359060200190919080359060200190919050506101bf565b604051602081016100948160008401848661009e565b90508092506100b6565b60008490506100ac826100bb565b8452949350505050565b6100c5565b6000819050919050565b505060405180910390f35b34156100db57600080fd5b6100fa60048080359060200190919080359060200190919050506101d0565b604051602081016101108160008401848661011a565b9050809250610132565b600084905061012882610137565b8452949350505050565b610141565b6000819050919050565b505060405180910390f35b341561015757600080fd5b61016d60048080359060200190919050506101e7565b604051602081016101838160008401848661018d565b90508092506101a5565b600084905061019b826101aa565b8452949350505050565b6101b4565b6000819050919050565b505060405180910390f35b600081600784020190505b92915050565b600081838115156101dd57fe5b0490505b92915050565b60006003820390505b9190505600a165627a7a72305820a737cd834b80e3075c0533530de396642e5afc2d21a69bdc96e1c4be5e05e5e70029
test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"uint256"},{"name":"div","type":"uint256"}],"name":"divide","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"divide(uint256,uint256)":{"details":"Divides 2 numbers","params":{"div":"Documentation for the div parameter","input":"Documentation for the input parameter"}},"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}},"sub(int256)":{"details":"Subtracts 3 from `input`","params":{"input":"Documentation for the input parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol":{"keccak256":"0x451d55d99ccbde4d0d1758d1808e8013db51b552627defa0fe2cbcb60b3f26df","urls":["bzzr://1b634a40165e80154d8e48e88ffed6ee60a0a2d8375db6e7be7e06a19869ca30"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol:c 6060604052341561000f57600080fd5b5b6101fa8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100b5565b6040516040810161006781600084018487610082565b905061007881602084018486610082565b905080935061009a565b60008490506100908261009f565b8452949350505050565b6100a9565b6000819050919050565b50505060405180910390f35b60008060046000601e6028811015156100ca57fe5b0160005b50819055506007600060026028811015156100e557fe5b0160005b508190555060096000600360288110151561010057fe5b0160005b508190555060086028600360148110151561011b57fe5b0160005b50819055506028600090601461013692919061016c565b506000600360288110151561014757fe5b0160005b505491506000601e60288110151561015f57fe5b0160005b505490505b9091565b8260288101928215610198579182015b8281111561019757825482559160010191906001019061017c565b5b5090506101a591906101a9565b5090565b6101cb91905b808211156101c75760008160009055506001016101af565b5090565b905600a165627a7a72305820d1a7d91be88053a87c9c434e5ac764966a6a12bdc5ca93fde959ff529ac943420029
test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol":{"keccak256":"0x671d5084b04160eb56a37f7d8c0c805146e9e7a7a73af045bebf0f75da74c827","urls":["bzzr://ff77d5e403c15271170ee771f67a7fd3b6520c53e3ba7b53ce86c7b4d38a336c"]}},"version":1}
test_d0567ea01ffc566140aa18712e4c539e16b5b9b0d610bbf60f9bf7d7d7759527.sol: ERROR
test_d0585813516d37ac436e224e27b05798ed8763cc3c3261895ee8bbe1adb76715.sol: ERROR
test_d06278468ea035a7c89f48f1e75ac9103c3a3dd1db78e2cbdcef61265d49a96b.sol: ERROR
test_d07ce54801f1a65d068b1a21311dcca054fcdaa2fdeff7f340f4b3238b12fc6e.sol: ERROR
test_d0938ed60736408242b64baf8e20b2e769375012e97d17a33b940380955f53a4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol:C 6060604052341561000f57600080fd5b5b61020f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d6cd497414610049578063e2179b8e146100fc575b600080fd5b341561005457600080fd5b6100aa6004808035806c0100000000000000000000000090049068010000000000000000900463ffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff169091602001909192905050610161565b604051602081016100c0816000840184866100ca565b90508092506100e2565b60008490506100d8826100e7565b8452949350505050565b6100f1565b6000819050919050565b505060405180910390f35b341561010757600080fd5b61010f6101d9565b604051602081016101258160008401848661012f565b9050809250610147565b600084905061013d8261014c565b8452949350505050565b610156565b6000819050919050565b505060405180910390f35b600082826000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101b557600080fd5b6102c65a03f115156101c657600080fd5b5050506040518051905090505b92915050565b6000600790505b905600a165627a7a723058207ca5be2af90cc3942e38c567f96a2242ac1ca507fc3df9edc11378d1509cada00029
test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"function"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol":{"keccak256":"0x340d5335679e10f374984a0377001b4edc922b1fd373355384bfe79c7b3d4953","urls":["bzzr://14a65252b776edc9f3a1dadc55d7523c5a762e34ce3c525f4a6c507c465957b9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:C 6060604052341561000f57600080fd5b5b61014f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b610046610098565b6040516020810161005c81600084018486610066565b905080925061007e565b600084905061007482610083565b8452949350505050565b61008d565b6000819050919050565b505060405180910390f35b600073__test_d0b5c1a016dfcee9cd37dc3a2bb2cf0__6326121ff06000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b151561010257600080fd5b6102c65a03f4151561011357600080fd5b5050506040518051905090505b905600a165627a7a723058201e3793860da7460b1985fa6266c02fdec0278e1788bede6d7c8724bd475608140029
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":{"keccak256":"0xf179900b53247143ae0d6bf60e6a61ef924cb39ed547a03094c87b1893b06168","urls":["bzzr://ff0f6e429cf1e74be6364b0c1f7db62e906077be5970de3bb71d81975ba326e9"]}},"version":1}
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:L 6060604052341561000f57600080fd5b5b60c58061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b6000600790505b905600a165627a7a7230582010633796d03fc4e7594a0947a64cf2ae3bb8ec56ef3adbffa8d366f24eadf18f0029
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":"L"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":{"keccak256":"0xf179900b53247143ae0d6bf60e6a61ef924cb39ed547a03094c87b1893b06168","urls":["bzzr://ff0f6e429cf1e74be6364b0c1f7db62e906077be5970de3bb71d81975ba326e9"]}},"version":1}
test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058204d6534dd69dd592dfb74ecd94fa8cd2050a2867efbf6b9f83473abee87a93dc80029
test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol":{"keccak256":"0xae5113220d8061c6843e3bbd049908ec6b86fbfa69e7bc567a59a5b493c3a80a","urls":["bzzr://142e3f9a4822ddd765668e5b37d7631653806f6d4c13df153a89f9f4815a1837"]}},"version":1}
test_d1314322f54b33dc2286aa10dbd99c61b4dc4814f55512016d776ec59a7f6591.sol: ERROR
test_d1580ef7c807f595ffce3752c183fa0ce029f9a37efc546825e433835571cca6.sol: ERROR
test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582085e71a8b64fc2eeab1e00b11ff32b876d2dd09a140d8a3db19da3c2273c9d5380029
test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol":{"keccak256":"0xe7ca804e188fac4e3bc80d7e7ce3b20882be7a2cdd4f2eca30a882983917f1b9","urls":["bzzr://24511bcb33a247b385568ca0a93d8d102e6ef339eb39efcacc668038d7a4ba26"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008190505b9190505600a165627a7a72305820652545498d60c7199cdd48a2d3fb1aacab9963c3a8789f7bf3fd882436c312440029
test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol":{"keccak256":"0x01cb8c72652a4d76067599f78a3c72199f40b4ad174b6f256ed847d9746a45b5","urls":["bzzr://4bcad9eb4fc73ea9a9b47b7fcdcb49c8429b04ae1bfc2c4a7f7f36c5b40b9f21"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol:test 6060604052341561000f57600080fd5b5b61018f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634df7e3d014610049578063bf3b9e38146100ae575b600080fd5b341561005457600080fd5b61005c610133565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100e16004808035906020019091908035906020019091908035906020019091905050610149565b604051602081016100f781600084018486610101565b9050809250610119565b600084905061010f8261011e565b8452949350505050565b610128565b6000819050919050565b505060405180910390f35b6000610143600160026003610149565b90505b90565b600060018202600a840260648602010190505b93925050505600a165627a7a7230582062253714717f0cd8f526f833ddc9ae83ce0014d9f7b1f78187a0335961a386270029
test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"a","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol":{"keccak256":"0xf2572c91aaa005f552181a740d38618ce4c6c5feceee79a2b414127f23d46a7e","urls":["bzzr://12e770a1ef30448bb90bd8c7513edcfe394b8eaac76b69f97b3650d49ddfe39c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c8a4ac9c14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081600784020190505b929150505600a165627a7a72305820f2446fea8583a6c91a55605ac32466fede527da8aec2a479a4e0ae5d5bdb24520029
test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"author":"Lefteris","methods":{"mul(uint256,uint256)":{"details":"Mul function"}},"title":"Just a test contract"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol":{"keccak256":"0x4262df9eb0dfe2d3f4245c9e7d849f57494b10d90689fd94981550eeadcf5b2b","urls":["bzzr://10e629fd878f2108bfb9689e32958094fc1218e1769dd4ccfebaff135971b4a5"]}},"version":1}
test_d33f1923bf06f7875363da79166f083986e9085dc0a750c929fa683a2586c011.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Child 6060604052341561000f57600080fd5b5b61014f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398ba71bc14610049578063c2985578146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610119565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b60005481565b6000805490505b905600a165627a7a7230582093eff6cc4a8b1185745fa4d0fe053f9d7f8e27de50136b5c347e7e6783f837050029
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Child {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"m_aMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":"Child"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":{"keccak256":"0xea7e4e84868e09e483e447ad2eaef0a426b2c43d3813e3eab40bfed091af06e0","urls":["bzzr://a560c5ab4c7929f9e007458376e8ef76f2f6b6e5649d8bf2cc9c86cabe29bb1b"]}},"version":1}
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Parent 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806398ba71bc14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600054815600a165627a7a72305820283de873371a7357300fc245441a8dba0d031b35e239b664c729c4ab7fef28000029
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Parent {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"m_aMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":"Parent"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":{"keccak256":"0xea7e4e84868e09e483e447ad2eaef0a426b2c43d3813e3eab40bfed091af06e0","urls":["bzzr://a560c5ab4c7929f9e007458376e8ef76f2f6b6e5649d8bf2cc9c86cabe29bb1b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol:test 6060604052341561000f57600080fd5b5b600260008001819055505b5b60ea8061002a6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063278be33f14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60008060009050600481600001819055508060000160009055600080015491505b50905600a165627a7a723058200aed9bc21a1d0723bd0b67b859fa5178b03423524c1c8a5e35a4ee6c164790fe0029
test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deleteMember","outputs":[{"name":"ret_value","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol":{"keccak256":"0x387cf06e53edb6507e838d9f36f5b015c2f1d9091236b1f5e7e579efba0d056e","urls":["bzzr://1a221747d94001db3612f9e6fb9deedeb36672ef8b4550a87a6ce95aa307d103"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol:Test 6060604052341561000f57600080fd5b5b60e28061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063857258e114603d575b600080fd5b3415604757600080fd5b605e600480803560ff1690602001909190505060aa565b60405160208101607281600084018486607b565b90508092506091565b60008490506087826095565b8452949350505050565b609f565b6000819050919050565b505060405180910390f35b6000600590505b9190505600a165627a7a72305820e075e05202388e5b92ad45718286513984506a13b430b428cb347e037fea80230029
test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"enumArg","type":"uint8"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol":{"keccak256":"0x58029daaadfa6d136ce8a3a53494bf59042ff09754e475571fe70797b693b429","urls":["bzzr://8d367fd3a5b705b4f0a11a176a8cb41c22d0387d1973ead46ae2b2dc7357a741"]}},"version":1}
test_d4071568b79775f3a73215ab8b629e7670d43535e1b58a97ff2335593958f687.sol: ERROR
test_d483d32c25dfe7eab973f9c8c80d011fb391584eb0402c153108ba2360bd4ebe.sol: ERROR
test_d4b2111b523335c2c5f6d2acb4eed3a1aca8f91be40a4d80d17431c1ac4c0067.sol: ERROR
test_d4b73f92cccdafde05f5376282b77b6a538be86448b78c1290c6a05db3a56b3e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol:C 6060604052341561000f57600080fd5b5b6102548061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b600060026000816100b69190610153565b507901000000000000000000000000000000000000000000000000006000808154811015156100e157fe5b906000526020600020906002020160005b50600001819055507901000000000000000000000000000000000000000000000000006000600181548110151561012557fe5b906000526020600020906002020160005b506000018190555060008061014b9190610185565b600190505b90565b8154818355818115116101805760020281600202836000526020600020918201910161017f91906101aa565b5b505050565b50805460008255600202906000526020600020908101906101a691906101aa565b5b50565b6101de91905b808211156101da576000808201600090556001820160006101d191906101e1565b506002016101b0565b5090565b90565b50805460008255906000526020600020908101906101ff9190610203565b5b50565b61022591905b80821115610221576000816000905550600101610209565b5090565b905600a165627a7a72305820a8a349ede71a6b9f9eefab3eba8ace799bfc2cc1c857719c7d3f12ee2e7875820029
test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol":{"keccak256":"0x808700fd0f1bbdbcc85b88029436aac378288056024a82df10eef38fa04c907b","urls":["bzzr://fa63a9fe9705e3916572520c23b20707d7b1d6388517a97f96febe99aab0db70"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv int16 -> int16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int16_to_t_int16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int16_to_t_int16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int16(value))

			}
		
			function cleanup_assert_t_int16(value) -> cleaned {
				cleaned := signextend(1, value)
			}
		

test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol:test 606060405260026000806101000a81548160ff021916908360000b60ff160217905550607f600060016101000a81548160ff021916908360000b60ff16021790555060fa600060026101000a81548161ffff021916908360010b61ffff160217905550341561006d57600080fd5b5b6101f08061007d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c14610054578063a56dfe4a146100bc578063fd3ab28214610124575b600080fd5b341561005f57600080fd5b61006761018c565b6040516020810161007d81600084018486610087565b905080925061009f565b6000849050610095826100a4565b8452949350505050565b6100b1565b60008160000b9050919050565b505060405180910390f35b34156100c757600080fd5b6100cf61019e565b604051602081016100e5816000840184866100ef565b9050809250610107565b60008490506100fd8261010c565b8452949350505050565b610119565b60008160000b9050919050565b505060405180910390f35b341561012f57600080fd5b6101376101b1565b6040516020810161014d81600084018486610157565b905080925061016f565b600084905061016582610174565b8452949350505050565b610181565b60008160010b9050919050565b505060405180910390f35b6000809054906101000a900460000b81565b600060019054906101000a900460000b81565b600060029054906101000a900460010b815600a165627a7a72305820037ec4970ee6a47db71d2f7bfe5b3594f0601667b1c1baf76d83b0c963830b700029
test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"q","outputs":[{"name":"","type":"int16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol":{"keccak256":"0x0fe550b67a1dc1ed4d45dabf85d87411b90535471088de51a9c14c7b3f95ff7d","urls":["bzzr://5cb47083a70ec1680302fb23fa42a1986bfe28de01f05bbd95218064c413649a"]}},"version":1}
test_d4e3dd9f031cfbc9129ba103f8b4333ecafb477e5664027f3dd650322946e1f7.sol: ERROR
test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60556074565b6040805190810160405280600181526020016001151581525090505b50565b60408051908101604052806000815260200160001515815250905600a165627a7a723058200a576ee28f7fd1a9a4b3e6e263af13ed67b2bf386977b7a763f5bf59117003990029
test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol":{"keccak256":"0x5911f13adc2f8828da64949ebc4bfda3169335b8ea00faebbd23834848709b16","urls":["bzzr://b87e20fb43b4d6f18625e516d2f8901f5f7a17dd7ff685374f6e1f27dd1e1ff9"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:c 60606040525b5b5b61013f806100166000396000f3006060604052361561003f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063fc68521a14610048575b6100465b5b565b005b341561005357600080fd5b61007f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100d3565b604051602081016100958160008401848661009f565b90508092506100b7565b60008490506100ad826100bc565b8452949350505050565b6100c8565b60008115159050919050565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff166108fc60019081150290604051600060405180830381858888f1935050505090505b9190505600a165627a7a72305820578a7aeac35746a8247a1fa04828892c5fa0b59063f5e635f39bc950a61b93a00029
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"address"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":{"keccak256":"0x4c0856dde6e220b2bd97c3071ae933e954927d8c08037c05be33873b1a81d8b8","urls":["bzzr://4b741d81637c885f50e28560fad4b41b9b446adc0fbeb71825d2231d87e0cb60"]}},"version":1}
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058208f424866cfcd9aa07aa9d9c60cf4f75ce124ccc9904d8150a78d89e96c2ac9d70029
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":"lib"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":{"keccak256":"0x4c0856dde6e220b2bd97c3071ae933e954927d8c08037c05be33873b1a81d8b8","urls":["bzzr://4b741d81637c885f50e28560fad4b41b9b446adc0fbeb71825d2231d87e0cb60"]}},"version":1}
test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol:test 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d7d1505914603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820aff551e9e20715b9139edfcb3246c5cd7b55c88595de88a2b0d717d15b7c3a0b0029
test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"functionName","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol":{"keccak256":"0xc535d0ec6c55a018cb7eeb0c44a2d753d27204b879224414bad00dcc4bbf3f61","urls":["bzzr://62166854a29746f8f70fd584b6d5e84aaeaa91426d28111bd1aee04f1966b3c0"]}},"version":1}
test_d5ee7685ef3e8968b30539153dcdf6b5791157b08d76f76e94a3d184abbc7eec.sol: ERROR
test_d6126f5aa85009e683b9fb0a92912d0daf4905e8718597f12d0725eb98d81e0f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol:c 6060604052341561000f57600080fd5b5b61023f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c1461005f5780638119c065146100d6578063a56dfe4a146100eb578063b8e010de14610162575b600080fd5b341561006a57600080fd5b610072610177565b60405160408101610088816000840184876100a3565b9050610099816020840184866100a3565b90508093506100bb565b60008490506100b1826100c0565b8452949350505050565b6100ca565b6000819050919050565b50505060405180910390f35b34156100e157600080fd5b6100e9610189565b005b34156100f657600080fd5b6100fe6101d3565b604051604081016101148160008401848761012f565b90506101258160208401848661012f565b9050809350610147565b600084905061013d8261014c565b8452949350505050565b610156565b6000819050919050565b50505060405180910390f35b341561016d57600080fd5b6101756101e5565b005b60008060000154908060010154905082565b60026000819150809050600080600260008491905060008201548160000155600182015481600101555050839190506000820154816000015560018201548160010155505050505b565b60028060000154908060010154905082565b600160008001819055506002600060010181905550600360026000018190555060046002600101819055505b5600a165627a7a72305820a284d2029c6fa3d300218a17a459a96c53292b987d1e5d731c8f67e5a11d40f20029
test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"swap","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol":{"keccak256":"0xc8bc71cc338e93c0b113ba633ddfa1d3f388793fcbf3e5b5790c871c04e8d61e","urls":["bzzr://3ae183730e623125b6966bdaab0cd198501bc270df0601514115fc4ddf5564e2"]}},"version":1}
test_d68ffcf4441ddb1e8c694dfe3a3a718de2275504963bd867a21cb86b3a1e9092.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d6d3a9200bce4b55771072d46edd6c8fcfb0845282d759c6d8ef14c4b96b7511.sol: ERROR
test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol:test 60606040523415600e57600080fd5b5b60026000819055506000546003811115602457fe5b600160006101000a81548160ff02191690836003811115604057fe5b02179055505b5b60368060546000396000f30060606040525b600080fd00a165627a7a72305820488e8d066959b034e62373081b79a68bb65f23733d186901ba210edb59f5e64b0029
test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol":{"keccak256":"0x50a094c6ad738ab49a68b3f0f84c2c7e8df8ff024ab42e47264f2ddd8166be00","urls":["bzzr://bcdc5baed01125fc3ab085a8a02ca7af442a786b382abfa41edf3550ebe91b50"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol:C 6060604052341561000f57600080fd5b5b6101978061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063e420264a146100bc575b600080fd5b341561005457600080fd5b61006a600480803590602001909190505061012f565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100dd6004808035906020019091905050610145565b604051602081016100f3816000840184866100fd565b9050809250610115565b600084905061010b8261011a565b8452949350505050565b610124565b6000819050919050565b505060405180910390f35b600061013d61014583610153565b90505b919050565b60006001820190505b919050565b6000610162828463ffffffff16565b90505b929150505600a165627a7a72305820af677bcf360cd0290d9b2141d26f81cb548db1b70d4aec9563f751889bf976580029
test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol":{"keccak256":"0x2b67e196918be53bcc26dc3f36b7d804de45807c8632a32f1e56636f57a8e3e4","urls":["bzzr://cdf0bff15a9e8d4cfbd9cb4a60f0667cadfcdfb3909db1e79d72fd39829f4f35"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol:test 6060604052341561000f57600080fd5b5b6101448061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b2550371461003e575b600080fd5b341561004957600080fd5b6100836004808035151590602001909190803563ffffffff1690602001909190803567ffffffffffffffff169060200190919050506100d5565b60405160208101610099816000840184866100a3565b90508092506100bb565b60008490506100b1826100c0565b8452949350505050565b6100ca565b6000819050919050565b505060405180910390f35b600083156100e257600190505b821963ffffffff166401000000008202179050811967ffffffffffffffff166801000000000000000082021790505b93925050505600a165627a7a723058208c135a4c52cf1717634efa19edc6aca916366a5c858bf7ffeafed0f09587d1e90029
test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bool"},{"name":"b","type":"uint32"},{"name":"c","type":"uint64"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol":{"keccak256":"0x8ea1691334ac3d565eddf54ac81ce95bada02327ca3b56c93d78e21824d9d20c","urls":["bzzr://fafbb014953b367bc4247f4eb140d6f0ba9f6653c0f899bb5f93da2723e569bb"]}},"version":1}
test_d7facf7a630417658826e9627a8451c47ba73460b30e76878a43b34e2b729a52.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063131e2f1814603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60006007820290505b9190505600a165627a7a72305820b7ac44faa78d21be24cb63d8abf41f4ec805ac2b19c22df46dc447431feef1d30029
test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256)":{"details":"Multiplies a number by 7"}}},"userdoc":{"methods":{"mul(uint256)":{"notice":"Multiplies `a` by 7"}}}},"settings":{"compilationTarget":{"test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol":{"keccak256":"0x52465e77932448b520e7a7e59b6dc623d491ccf904804a2655dd818002a2d38f","urls":["bzzr://a3b7f798a468ce5b9059a3a5ee79cd8ace5327afdbf279ffd9357b69d7a9b9ec"]}},"version":1}
test_d8c0b1137de617b022d53135b4d472c09f7e7dc1c9a2a7cf195a45f97e510000.sol: ERROR
test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol:C 6060604052341561000f57600080fd5b5b60cc8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6002600060016002839350829250905050600080600260008491905060008201548160000155600182015481600101555050839190506000820154816000015560018201548160010155505050505b5600a165627a7a72305820cd644386b1d0c7c060f0bddf5bb589a98991e41bf70c06470e501c58def703e70029
test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol":{"keccak256":"0x149e129ee5110d650fd35a37c3913f9f7b50cd2f14abd24c5b1473f7e7e68c8d","urls":["bzzr://5b13e25f09b523d11f1b5d6100fc9e7de730cf664c238b804d90d372d2102d76"]}},"version":1}
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol:Test 6060604052341561000f57600080fd5b5b6103a78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063589002fb14610049578063ece866b914610121575b600080fd5b341561005457600080fd5b6100ad600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610186565b604051602081016100c3816000840184866100cd565b90508092506100e5565b60008490506100db826100ea565b8452949350505050565b610116565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b341561012c57600080fd5b610134610231565b6040516020810161014a81600084018486610154565b905080925061016c565b600084905061016282610171565b8452949350505050565b61017b565b6000819050919050565b505060405180910390f35b6000826001908051906020019061019e92919061024f565b506001600090805460018160011615610100020316600290046101c29291906102cf565b5060008281546001816001161561010002031660029004811015156101e357fe5b8154600116156102025790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000290505b92915050565b60008080546001816001161561010002031660029004905090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029057805160ff19168380011785556102be565b828001600101855582156102be579182015b828111156102bd5782518255916020019190600101906102a2565b5b5090506102cb9190610356565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103085780548555610345565b8280016001018555821561034557600052602060002091601f016020900482015b82811115610344578254825591600101919060010190610329565b5b5090506103529190610356565b5090565b61037891905b8082111561037457600081600090555060010161035c565b5090565b905600a165627a7a723058207b91f3ea67dc581cd48652f73907bf4ca87ffcc8943de21d510d78e26f9ca2f30029
test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"},{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"bytes1"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"l","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol":{"keccak256":"0xad17e5cf10a6da67370b56aa9f5501629d0846f19957da221a27f9b3324e75d8","urls":["bzzr://7905868b5493168c11b12c0b28ad45ead13924be20a5db4ccd4b9e6c981ac81e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol:test 6060604052341561000f57600080fd5b5b6101ca8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b600081600060076028811015156100c457fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055600060026028811015156100f457fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055506000600360288110151561012557fe5b602091828204019190065b9054906101000a900460ff16600a6000600260288110151561014e57fe5b602091828204019190065b9054906101000a900460ff1602016000600460288110151561017757fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055505b9190505600a165627a7a7230582008b89b458714008e37d728583f1f3bc540606e6a1fea4a67bf4675b4a5691ef70029
test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol":{"keccak256":"0x1cf1560b51e1293d52b2ec001d46a73f07bfe792518f20b93f3276d336f3d216","urls":["bzzr://d7a8be212cdb1a47c752eef36c38e3c7466a3c0bf3db57fc4f71c71ed0f2885b"]}},"version":1}
test_d9f8d3cbd1c9f348fab5d27a4cfd2c9da6ea3630a5c00db89d2ae8a0680e893c.sol: ERROR
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:A 60606040523415600e57600080fd5b6040516020806070833981016040528080519060200190919050505b5b505b603680603a6000396000f30060606040525b600080fd00a165627a7a7230582052b38dace3d812c2d166e36cda2eeb8c5815a1e1442ae86bc708b90c20dcb2b60029
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol":{"keccak256":"0x01245aa769974bb72a76e28eef8efdc8c3d46933ef91d06ddb00823acddbd76d","urls":["bzzr://e1eb4771afaea79a4eb5888f667031a468234a6e9354c56a97123d33f4250383"]}},"version":1}
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:B 
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:B 
test_da37018c0029fcc2870353344414819f8f82a579477c57f79af04957ecc8ce8e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol:C 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ea7034114603d575b600080fd5b3415604757600080fd5b606a600480803560ff1690602001909190803560ff1690602001909190505060b6565b60405160208101607e816000840184866087565b9050809250609d565b600084905060938260a1565b8452949350505050565b60ab565b6000819050919050565b505060405180910390f35b60008160ff168360ff169060020a900460ff1690505b929150505600a165627a7a72305820dcbd44550732c332b3e70d9d9203f6a6e34b0b8e31dbf03e7138c6ad60881b1f0029
test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol":{"keccak256":"0xf624823107aa1ac0448e2220550930112cdca500f45fbfdd22b2b87ea9bcd2b3","urls":["bzzr://bff018928ee46161b8a56987804c20cf51d065b4dc5dac0efde081a756ada5be"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol:test 6060604052341561000f57600080fd5b5b6101048061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060c0565b604051604081016078816000840184876090565b90506087816020840184866090565b905080935060a6565b6000849050609c8260aa565b8452949350505050565b60b4565b6000819050919050565b50505060405180910390f35b6000806000600890508392508091505b5092509290505600a165627a7a7230582085953620fae3f98cb37408c0697b646b6a823650b545a440e092c2b9af39b3f30029
test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"},{"name":"ret_g","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol":{"keccak256":"0xaa63526a5236472f32d8dc7c899f719b41d9eff9a82b1ba08074892ad0cb99b2","urls":["bzzr://46f49f3e6ec0ba70ae173d525e581ebb3bc2bb191cc2e70ce5ae3b997732409d"]}},"version":1}
test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol:test 6060604052341561000f57600080fd5b5b60ce8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a0b2b43b14603d575b600080fd5b3415604757600080fd5b609b6004808035806c0100000000000000000000000090049068010000000000000000900463ffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff169091602001909192905050609d565b005b5b50505600a165627a7a72305820481bffb16e76120992f25161fba8126c9d53723a5a2ea5eec147ea2c0ab9cec10029
test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"function"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol":{"keccak256":"0x3b8b229ae07dcd64018a85a308f69820c5be4be73018ce4552542851067f5b85","urls":["bzzr://5d1a4c46376f41fe6cc9ab64d96a4553f504083286a927365d011be9e1c90b8a"]}},"version":1}
test_daea685c5ffa914fea616a8d39c8298f50a9ddfa9831874087b613b14a283871.sol: ERROR
test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820dcaae028cff703bd9750e82f0274c279793b93158bfb13f9f53ff9e82487934d0029
test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol":{"keccak256":"0x14f907e88c8560f486d4be0af44c602f4f1955204eab18256e914575e9dd0faf","urls":["bzzr://3bd1cd19567d0e147945cc8ce4a5a0558ef3888f38d68162003e086fa645afd3"]}},"version":1}
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:base 
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:base 
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:derived 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c298557814603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820f0f1757ed25008d236ab167a4cd9348396e38bf31d3fe208927472bc23da8e960029
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol":"derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol":{"keccak256":"0x3c3d6c4ff401b1a906ded84b2fbedfeab996c76135cc1d4c2a95c53e38b67e73","urls":["bzzr://8399dec1842010a1ba94963f1a30a94c9a9e9678be3f430591897750ab34bccb"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:derived 6060604052341561000f57600080fd5b5b60c88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146051578063e2179b8e146063578063f5df1a33146075575b600080fd5b3415605b57600080fd5b60616087565b005b3415606d57600080fd5b6073608a565b005b3415607f57600080fd5b60856099565b005b5b565b60906087565b60966099565b5b565b5b5600a165627a7a723058208161e6f8bd4d4f69da68d56c87baf124a2be223ac4b74bda3f4c7aa1fa07dfe10029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter1 60606040523415600e57600080fd5b5b609d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063f5df1a33146059575b600080fd5b3415605157600080fd5b6057606b565b005b3415606357600080fd5b6069606e565b005b5b565b5b5600a165627a7a72305820e960ce4e21ab4e272a2a79c48acf9a95c89c42b236d189ac8b5be380f19f3bd50029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"inter1"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter2 60606040523415600e57600080fd5b5b609d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff0146047578063f5df1a33146059575b600080fd5b3415605157600080fd5b6057606b565b005b3415606357600080fd5b6069606e565b005b5b565b5b5600a165627a7a72305820cc39b5b360a2e98af21805a8f9546a462ea92bb9ed5f9fadcf7aea39bd980d270029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"inter2"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:root 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f5df1a3314603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a72305820073bf72a339c4736fdad4c75b1a0c6bbb4f54a07f8586ff4f0d65e82c4ece23f0029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:root {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"root"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_dbb36bdcc2430bcb8facbc5135cb03f15cd5ab2dccd53d2ebf8697b6f6e8a726.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol:C 6060604052341561000f57600080fd5b5b6104408061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060026000800160006101000a81548160ff021916908360ff16021790555060026000800160009054906101000a900460ff1660ff161415156100ea5760029050610411565b61abcd6000800160016101000a81548161ffff021916908361ffff16021790555061abcd6000800160019054906101000a900461ffff1661ffff161415156101355760039050610411565b641234567890600060010160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550641234567890600060010160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161415156101fc5760049050610411565b60026000800160009054906101000a900460ff1660ff161415156102235760059050610411565b60086000800160006101000a81548160ff021916908360ff16021790555060086000800160009054906101000a900460ff1660ff161415156102685760069050610411565b61abcd6000800160019054906101000a900461ffff1661ffff161415156102925760079050610411565b61dcab6000800160016101000a81548161ffff021916908361ffff16021790555061dcab6000800160019054906101000a900461ffff1661ffff161415156102dd5760089050610411565b641234567890600060010160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff161415156103455760099050610411565b649876543210600060010160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550649876543210600060010160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1614151561040c57600a9050610411565b600190505b905600a165627a7a723058201c956d65ae33781fb065f0273b909431cfd6cbb91c9439e3639ebcb090109c740029
test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol":{"keccak256":"0xb2ba62142e06cf85c56e3d01267a9d853ce66f6b4b34cd2c7d6e06312c2e4ff1","urls":["bzzr://80a8b5432a58eba7b69c5475748e7ab07074bfd436c7beda10a29011ab8a21bc"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol:test 6060604052341561000f57600080fd5b5b61021f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806371ef85921461003e575b600080fd5b341561004957600080fd5b61008960048080356000191690602001909190803560ff1690602001909190803560001916906020019091908035600019169060200190919050506100f1565b6040516020810161009f816000840184866100a9565b90508092506100c1565b60008490506100b7826100c6565b8452949350505050565b6100e6565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390f35b6000600185858585604051806000526020016040526000604051602001526040516080810161012581600084018489610162565b90506101368160208401848861017f565b905061014781604084018487610162565b905061015881606084018486610162565b905080955061017a565b60008490506101708261019c565b8452949350505050565b610197565b600084905061018d826101ab565b8452949350505050565b6101a6565b6000819050919050565b6101b8565b600060ff82169050919050565b5050505050602060405160208103908084039060008661646e5a03f115156101df57600080fd5b50506020604051035190505b9493505050505600a165627a7a72305820b68443dc1494ed57d4c002f5163511e273bd14328a6277a007c3475c1b66b38d0029
test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"bytes32"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"a","outputs":[{"name":"addr","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol":{"keccak256":"0x9c226581973e27646c2e14550a2763fd8cb4c92355b34d6da97b941976b9b303","urls":["bzzr://4747eaf1e42dfcffba21d42260083362e734b4571fe645b563b7e6ee540a0ae0"]}},"version":1}
test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820aa8e524610011042c6e6d01df87905f47e84da91012511143d7224cca8d9552f0029
test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol":{"keccak256":"0x20ae1b5b15a27a5e0ba59faa55ce5bbba9a63a7cc2086cfc5144edbc210f8b43","urls":["bzzr://8b39f6d0a0b2594ce1212010a21e48831be6cf337f77eadc27b8b1fd923f2173"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Bike 6060604052341561000f57600080fd5b5b60eb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d45754f814603d575b600080fd5b3415604757600080fd5b60666004808035906020019082018035906020019190919290505060b2565b60405160208101607a816000840184866083565b90508092506099565b6000849050608f82609d565b8452949350505050565b60a7565b6000819050919050565b505060405180910390f35b6000602a90505b929150505600a165627a7a7230582010bd60402fbb3788bbec06d9db7021ab154f406eac85214908d8c9e6ba59e59e0029
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Bike {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":"Bike"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":{"keccak256":"0x55fdbd981526d341b6ee185b04d761e112171e9912b89d01635a863ca38222a1","urls":["bzzr://14c08e1e2efd71f8d60ea64038e003ceb4ce7261d11ddf9d6b01b306e6890729"]}},"version":1}
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Vehicle 6060604052341561000f57600080fd5b5b60eb8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d45754f814603d575b600080fd5b3415604757600080fd5b60666004808035906020019082018035906020019190919290505060b2565b60405160208101607a816000840184866083565b90508092506099565b6000849050608f82609d565b8452949350505050565b60a7565b6000819050919050565b505060405180910390f35b6000600190505b929150505600a165627a7a7230582032314b762980d6bf21614e48ca6a5092f2d0dd60eb9bd97ce71d72d501e128090029
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Vehicle {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":"Vehicle"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":{"keccak256":"0x55fdbd981526d341b6ee185b04d761e112171e9912b89d01635a863ca38222a1","urls":["bzzr://14c08e1e2efd71f8d60ea64038e003ceb4ce7261d11ddf9d6b01b306e6890729"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol:C 6060604052602a600055341561001457600080fd5b5b610121806100246000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14605157806326121ff01460ad578063e2179b8e1460bf575b600080fd5b3415605b57600080fd5b606160d1565b60405160208101607581600084018486607e565b90508092506094565b6000849050608a826098565b8452949350505050565b60a2565b6000819050919050565b505060405180910390f35b341560b757600080fd5b60bd60d7565b005b341560c957600080fd5b60cf60e6565b005b60005481565b6001600081905550600080fd5b565b6001600081905550600080fd5b5600a165627a7a723058200cfd36fd8dba5ea63af8b78fa9c0206e118a8562faacdbc26884154542898c180029
test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol":{"keccak256":"0x1b947ef437f2a53fc381b05d29bf06dc4633e030222840ff73638b98a465e542","urls":["bzzr://8b412ecf2c845a1576ca54979c0352af917ea02e2404118660661d4b9192ea52"]}},"version":1}
test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol:test 60606040523415600e57600080fd5b5b609d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600060126004111580606357506002600914155b151560011515141590505b505600a165627a7a7230582032592db8498223067a9872951b28203ce9e59ed9224336ff518d43e5542ec9300029
test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol":{"keccak256":"0x779c5488253957465cb34085c22b44667cce9a1edddda7882d72e0111acfb4ca","urls":["bzzr://a07225418b80d595154b99df4748a5015f7416a1e3d62a160533516cfd81c01b"]}},"version":1}
 conv address -> address
 conv bytes32 -> bytes32
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6101d38061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b214faa51461003e575b600080fd5b61005860048080356000191690602001909190505061005a565b005b7f95f016c9564e5db4b6e5851ee7934799bf3299644de9136bfadb23efaee5ada2338234600160405160808101610096816000840184896100d3565b90506100a78160208401848861010d565b90506100b88160408401848761012a565b90506100c9816060840184866100f0565b90508095506100eb565b60008490506100e182610147565b8452949350505050565b610108565b60008490506100fe8261016c565b8452949350505050565b610125565b600084905061011b8261017d565b8452949350505050565b610142565b60008490506101388261018c565b8452949350505050565b610167565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610178565b60008115159050919050565b610187565b6000819050919050565b610196565b6000819050919050565b505050505060405180910390a15b505600a165627a7a7230582022383dc682e3bd5a2c71ffa1e995ecb0181b9b715271bf1ec3f140f22300394e0029
test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"deposit","outputs":[],"payable":true,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_from","type":"address"},{"indexed":false,"name":"_id","type":"bytes32"},{"indexed":false,"name":"_value","type":"uint256"},{"indexed":false,"name":"_flag","type":"bool"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol":{"keccak256":"0xbb141f1576a03192661377bb9c07d53cb411e4b5a919d53b335aa8498cccc2c7","urls":["bzzr://3a261ae160016784cde612438e144e93f89a2de08eb01d5c4f306675dd3f764b"]}},"version":1}
test_dd77f04f230fc436669b424e113692488f3d322ef7c0590e7501e7fb5decce59.sol: ERROR
test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ad926c88a330ec8a4448df0a7c1b2455af02dae7a9855a9430ba58d8f1aa95ca0029
test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol":{"keccak256":"0x544ec358c22852273deefab7c2e5b1636887c5f35c145053e8539c486a964e1c","urls":["bzzr://456efd9fa2c3f9d81a853315ff25d2756e78965eda21d0b611c7ba88e14a15cb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c49c097f81a1030974d450d095f5bef90b70ad12e6e7a9eecb95d6495ca5542e0029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058204fb9161e335e2fc1a7afa101a70e00c43b2d480a06a5c27e2db0245a2e2d95300029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"_addr","type":"address"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6103a08061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806347e7ef2414610054578063d0e30db0146100e6578063f340fa011461014b575b600080fd5b341561005f57600080fd5b610094600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506101d4565b604051602081016100aa816000840184866100b4565b90508092506100cc565b60008490506100c2826100d1565b8452949350505050565b6100db565b6000819050919050565b505060405180910390f35b34156100f157600080fd5b6100f96102a9565b6040516020810161010f81600084018486610119565b9050809250610131565b600084905061012782610136565b8452949350505050565b610140565b6000819050919050565b505060405180910390f35b341561015657600080fd5b610182600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506102df565b60405160208101610198816000840184866101a2565b90508092506101ba565b60008490506101b0826101bf565b8452949350505050565b6101c9565b6000819050919050565b505060405180910390f35b60007fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83836040516040810161020f8160008401848761022a565b905061022081602084018486610247565b9050809350610242565b600084905061023882610264565b8452949350505050565b61025f565b600084905061025582610289565b8452949350505050565b610284565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610293565b6000819050919050565b50505060405180910390a1600190505b92915050565b60007fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a1600190505b90565b60007f8ce0bd46ec50cf39f0d0ea8686a686eb226af5796dcda4231b26fb84b5ef1234826040516020810161031981600084018486610323565b905080925061033b565b600084905061033182610340565b8452949350505050565b610360565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b505060405180910390a1600190505b9190505600a165627a7a72305820a845c9dc95d94f0574ffa06de4b33708aa73c727e869068ddfdefced6550da7e0029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_addr","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol:test 60606040523415600e57600080fd5b5b609b8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631c008df914603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b600060028260000319141590505b50505600a165627a7a72305820c05d4cb6302b51237c0522773dd5f3ebefd3cad363eab8fc3a5e6956d2954bcd0029
test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"int256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol":{"keccak256":"0x57f7058f8663e11125840c0dfb322d46652b1b9cfca20560e188557375a11086","urls":["bzzr://dc27e9c55fe0c80bffc7d077b58c4e250bb82906469a62a517b47909275a9d1d"]}},"version":1}
test_ded1de94c5ac6df46f1068027afc9f9b14c99e86be8c37faec808b5fef7993b5.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol:DCE 6060604052341561000f57600080fd5b5b61004b640100000000026100c1176000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610055565b6000600790505b90565b60f7806100636000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600060bb6000809054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b6000600790505b905600a165627a7a723058202b2a1eb83b9a012f21bfac15d776b56352ef69d9ddd87d5abb3eb542e2e2d9120029
test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol:DCE {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol":"DCE"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol":{"keccak256":"0x999986be4ab5299a7074e2403e23c835d6ab9226c94b7b46b34e736f14190443","urls":["bzzr://70903bff1e7b9878d9965408f63d7bede6ad1d07cfccc7bb773115e80646b4eb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol:test 6060604052341561000f57600080fd5b5b61028a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318159cfb1461003e575b600080fd5b341561004957600080fd5b6100dc600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610130565b604051602081016100f2816000840184866100fc565b9050809250610114565b600084905061010a82610119565b8452949350505050565b610125565b60008115159050919050565b505060405180910390f35b60006002826000604051602001526040518082805190602001908083835b60208310151561017457805182525b60208201915060208101905060208303925061014e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f115156101b657600080fd5b505060405180519050600019166002846000604051602001526040518082805190602001908083835b60208310151561020557805182525b6020820191506020810190506020830392506101df565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f1151561024757600080fd5b505060405180519050600019161490505b929150505600a165627a7a72305820f56debe3868ea7e63fb31bdf7649a89ec62ec8683fa74dbc019be0ca755502ad0029
test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"string"},{"name":"b","type":"string"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol":{"keccak256":"0xe4b6f42dbddda423139a183e70428d7ada73b03f7b7a54fc323b9e05d041c6c1","urls":["bzzr://13826e88d4303a13449119634777f7e49a1bfb82217bf21a7edcc93b92e92f9e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol:test 6060604052341561000f57600080fd5b5b6101988061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b60008160008190555060008211156100ea5760086001600080600081546001019190508190558152602001908152602001600020819055505b6001821115610106576000808154809291906001900391905055505b6002821115610134576001600080548152602001908152602001600020600081548092919060010191905055505b60016000806000815480929190600101919050558152602001908152602001600020600081546001900391905081905590505b9190505600a165627a7a72305820fafa2d2b734eec92296b6b3f2a0e635c819a5e55c4ef69a7e73f9bcb76f56dfe0029
test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol":{"keccak256":"0x6fa328c95e9d7cdfbfd97c23355f078b6f99717093dc9c35b0106729ec2528ca","urls":["bzzr://e137f6fcb6a3c3d032796be923ddec09d8c5d151759a648abfaa330d15e44134"]}},"version":1}
test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol:C 6060604052341561000f57600080fd5b5b6101988061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b610051610053565b005b61005b61010a565b60408051908101604052806040805190810160405280600181526020016040805190810160405280600481526020017f666973680000000000000000000000000000000000000000000000000000000081525081525081526020016040805190810160405280600281526020016040805190810160405280600481526020017f666973680000000000000000000000000000000000000000000000000000000081525081525081525090505b50565b6080604051908101604052806002905b610122610138565b81526020019060019003908161011a5790505090565b604080519081016040528060008152602001610152610158565b81525090565b6020604051908101604052806000815250905600a165627a7a72305820a87c611bc78760e16248e9f7e08317da40f12cd4b4ed5b64e4db9b32ea6246990029
test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol":{"keccak256":"0xc02cf166d106a205ba0b42c2750fa4e108f5f6bddb171798140279c282145d3d","urls":["bzzr://b0b1e076ae41994c313fb4326dc1d2f39a5e2b197fa78f244c1bd644a3415a10"]}},"version":1}
test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol:ClientReceipt 60606040523415600e57600080fd5b5b60898061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d0e30db014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60405160405180910390a05b5600a165627a7a72305820409971165b87f0e28f7ad471957f0e2d7177ed0188744156dfc1f856d199187d0029
test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":true,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol":{"keccak256":"0x1cecf73941feb687a879b36b5659b3eee3a87cd9ef9effa5ad3f9860fcdc4fe7","urls":["bzzr://ce8a3abd31c360e4a06b5b91026cf6ecffd8f455feb6e88f718332cc6698464d"]}},"version":1}
test_e05ed06c27762b5bf8c278f6c3652b2fb8885bbbe9457c22fd8f272c2fd26219.sol: ERROR
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:A 60606040523415600e57600080fd5b5b5b5b603680601e6000396000f30060606040525b600080fd00a165627a7a723058207aa4dad23c9761e53b42e92ff511cbafbfab72dd166a78e6552f1a49e26013490029
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":{"keccak256":"0x8cc450af09c348555e0e7e5b3d74ea5eaa987205cdc8756cefd8ca1e3014fb44","urls":["bzzr://d2abab32401241937f747048edf8f303b1d3ea16754b87036cf3217667208542"]}},"version":1}
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:B 60606040525b5b5b60848060146000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090505b505600a165627a7a72305820ebe148ea9d4f8c5137228c45434d7cf9ff6eb770b582e5bbd92b393dacfdd1fd0029
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":{"keccak256":"0x8cc450af09c348555e0e7e5b3d74ea5eaa987205cdc8756cefd8ca1e3014fb44","urls":["bzzr://d2abab32401241937f747048edf8f303b1d3ea16754b87036cf3217667208542"]}},"version":1}
test_e0b1b588b7f192c154215e87bad5a9aad4c5df5ff2c0da4dfe5e459f44c3fada.sol: ERROR
test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol:C 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600190505b505600a165627a7a72305820f356e4d97d77b26571ef2f8555f343affe3f408bc1443556193c4c316fa854020029
test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol":{"keccak256":"0xf1b4cad448cbb0592beba1e57633bb24e6e28096822a2a2098d755f122d13481","urls":["bzzr://8199c262a57db64de67071753d0fdd7a9aba7ced9ae7f0c2a9b4238964bb9164"]}},"version":1}
test_e0fe9fdc669a37a359d107cb9046f1bafc9f4fb5dc6140dda0890d279e60cd47.sol: ERROR
test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582045f39a12174e6e1191f1521a7bedbcc4aae8cdca3d18a7e78b84598f9a576c4b0029
test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol":{"keccak256":"0x9dd9548ee5d77b8e7345a98b5f140d3af1ceb3168a84592192a1af5591c3d7ac","urls":["bzzr://e670f56af6133bc1a148ec6968b1497a8e839eea1a208dc2fcf099c16ad285b5"]}},"version":1}
test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol:test 6060604052341561000f57600080fd5b5b60ab8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dbe671f14603d575b600080fd5b3415604757600080fd5b604d604f565b005b6004600102600360010260026001026001604051808260010260001916815260200191505060405180910390a35b5600a165627a7a723058206fb13e54bcda2fe99a3524022b33a02833fafc8485125b3b62fea73568d734e00029
test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol":{"keccak256":"0x36982b2c987a42bb43a6ac39363948b0b7afee7771ff9f2af9ee25a520fb8c39","urls":["bzzr://c628b210fe870ffe438e86e354675fcecca7bdfb94d404137f081b48d3f082c5"]}},"version":1}
test_e1f3db885ac258676e130e02223f5e3eefd789c6af957675bf1745ea29f16aec.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol:C 6060604052341561000f57600080fd5b5b6101598061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b1461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100d5565b60405160608101610075816000840184886100a1565b9050610086816020840184876100a1565b9050610097816040840184866100a1565b90508094506100b9565b60008490506100af826100be565b8452949350505050565b6100c8565b6000819050919050565b5050505060405180910390f35b6000806000806000819055506100f9565b6000816000540160005560019050919050565b835b61010560026100e6565b81141561011f57809350600090505b6003820191506100fb565b5060005491505b91939092505600a165627a7a723058206cb003d7023e36c8ccaab9cd369f6c96f46a91a0804543a3c49b5ddf919105430029
test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"},{"name":"c","type":"uint256"},{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol":{"keccak256":"0x095ae0876261ad63f24f09a9496c3f5efd124424618ea235f8fee78fb8d0b6b4","urls":["bzzr://5a31c23725d8cd5982286bddb78acb869f2bf9e0b70db450422aaa3b5dc65866"]}},"version":1}
test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207ece28c78d2c01a0b2b89444a59c864e5b030243c820b791e91a13bb523c77230029
test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol":{"keccak256":"0x45b2871769bc1e439b4c35515ea3ae524e634382048588031c4e4073c4361320","urls":["bzzr://8bd3e105558e5621ab001d2a0073b077a89b69cbc06a1974e9ac3a118177f127"]}},"version":1}
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol:c 6060604052341561000f57600080fd5b5b6101bd8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a481e08c1461003e575b600080fd5b341561004957600080fd5b61006c6004808035906020019091908035600019169060200190919050506100fc565b60405160408101610082816000840184876100ba565b90506100938160208401848661009d565b90508093506100b5565b60008490506100ab826100d7565b8452949350505050565b6100d2565b60008490506100c8826100e6565b8452949350505050565b6100e1565b6000819050919050565b6100f0565b6000819050919050565b50505060405180910390f35b6000806000836040518082600019166000191681526020019150506040518091039020905060088511156101565783604051808260001916600019168152602001915050604051809103902090508460018190555061017e565b8360405180826000191660001916815260200191505060405180910390209050846001819055505b600154925060005491505b5092509290505600a165627a7a7230582018facbd446bffbdfe62397488a2da69817826b09b61af6c51c2c740621b695f20029
test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"f","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol":{"keccak256":"0x0a0c5db1151974627d4036fbcd3109f4a85d05f125eaabc50da387b7d67899c3","urls":["bzzr://95e9e4a0d7fc04d05bbb35f9939a9761797edc02447f21d5b7dd204cb79e9513"]}},"version":1}
test_e26db6eaa849c25017da21d010cfc1b8543b636a4f064b3bcde1958727f5d0cc.sol: ERROR
test_e2bff6a7aacc188df31498aa8f60d60e7bf00386539e5c77a58d535e1ba173f8.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol:c 6060604052341561000f57600080fd5b5b6104768061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c29855781461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060036000816100b4919061035c565b507f780000000000000000000000000000000000000000000000000000000000000060008081546001816001161561010002031660029004811015156100f657fe5b8154600116156101155790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055507f790000000000000000000000000000000000000000000000000000000000000060006001815460018160011615610100020316600290048110151561018f57fe5b8154600116156101ae5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055507f7a0000000000000000000000000000000000000000000000000000000000000060006002815460018160011615610100020316600290048110151561022857fe5b8154600116156102475790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550600060405180828054600181600116156101000203166002900480156102dc5780601f106102ba5761010080835404028352918201916102dc565b820191906000526020600020905b8154815290600101906020018083116102c8575b5050915050604051809103902060405180807f62000000000000000000000000000000000000000000000000000000000000008152506001018260001916600019168152602001807f6100000000000000000000000000000000000000000000000000000000000000815250600101915050604051809103902090505b90565b81546001816001161561010002031660029004825481601f106103b75782601f1061039c575b826008026101000360020a80910402828001178355610420565b60ff1916836000526020600020558180016001018355610420565b82601f106103e7575082600052602060002080549082601f01602090048101906103e19190610425565b50610382565b5081800160010183558181151161042057601f016020900481601f0160209004836000526020600020918201910161041f9190610425565b5b505050565b61044791905b8082111561044357600081600090555060010161042b565b5090565b905600a165627a7a7230582044ba5f4cefd25b16348eb8af00a2cee8730bc3cadddfb61c305c07c684c61c5e0029
test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol":{"keccak256":"0x54dd2c1d3f9ca465f7b6725dc2f38a8756af00dea2662a35ff6c909f3ab93e71","urls":["bzzr://e6ae9efed4440f2a2384164fd7706f5fb4bcd6c19f0217d9f3feea8d622a6caf"]}},"version":1}
test_e3708ac73fbf9f34811b455a13bfe1de5a890cbdec9cd5b401bef2c883538124.sol: ERROR
test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol:A 6060604052341561000f57600080fd5b5b60b48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600080600310606d57600260071160665760066069565b60075b607f565b6001600211607b576001607e565b60025b5b60ff1690505b505600a165627a7a72305820fc5918095e42706bd14e7ae273f2e4267f23dc9c2ee1dd46f7d094b6fd028e0c0029
test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol":{"keccak256":"0x12789cd62ff5bae856aa9a893a5f3242745af3f31db0bfddf16721d05a2871ba","urls":["bzzr://2b57441fb5e1542e0bd93ee36ac4d8227c0fe89330f73cd7b736aa42d35e7eed"]}},"version":1}
test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582001759a14342da525daf1ab7d0a2cef205943c46cd942510c58009fc5577e6e6c0029
test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":true,"inputs":[{"indexed":true,"name":"a","type":"uint256"},{"indexed":true,"name":"b","type":"bytes3"},{"indexed":true,"name":"c","type":"bool"},{"indexed":true,"name":"d","type":"uint256"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol":{"keccak256":"0x2f255f7a70ad5e4c9adad58636730cd26778a4362ce5f434d2b5c5457312aafe","urls":["bzzr://65fe837a03e7011bc4e14bcc36bcb7b5586f03bc2f928091f5a404a1c97a9604"]}},"version":1}
test_e4518e8a8b97b0948b2be33360d9d830e1163de72033ba0bf5e821799c2d0183.sol: ERROR
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol:C 6060604052341561000f57600080fd5b5b61013c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100e1565b604051604081016100678160008401848761009f565b905061007881602084018486610082565b905080935061009a565b6000849050610090826100bc565b8452949350505050565b6100b7565b60008490506100ad826100cb565b8452949350505050565b6100c6565b6000819050919050565b6100d5565b6000819050919050565b50505060405180910390f35b600080600791507f616263646566000000000000000000000000000000000000000000000000000090505b90915600a165627a7a72305820b1a808f6c94f4c9567fbf2f4c8b1236fee935737de230c1565efbf67f9221c7f0029
test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"},{"name":"r2","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol":{"keccak256":"0x9bf6e50f07ae82177b8a92e4aa85a9a018784bd0b6094cf49788cc86bafe9ceb","urls":["bzzr://3bc346cbf1f1cab820e2363b0b744fc64854e04cc1c380dfd582121f79394fb5"]}},"version":1}
test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol:Test 6060604052341561000f57600080fd5b5b60d88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634f744b531460475780636258b270146072575b600080fd5b3415605157600080fd5b607060048080359060200190820180359060200191909192905050609d565b005b3415607c57600080fd5b609b6004808035906020019082018035906020019190919290505060a7565b005b81819050505b5050565b5b50505600a165627a7a72305820448fe8d4c8ee3242b096d90ac35224d6d37096c134ec5b17ad02096f4679091b0029
test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"}],"name":"h","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_b","type":"bytes"}],"name":"k","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol":{"keccak256":"0x3f3dd703fe7bc05b939e4e4169ebc37ee75bf28ad1e71fc812e010f6338847a4","urls":["bzzr://5cfd59b5e38bc77e9fa0c878d5db80a6b8001abefcee2d0cb3181dd2ea5c7ee1"]}},"version":1}
test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol:I 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c1f28ff31185fc4fde5bcca0c611f7fa8bc58e836460eecb710ccc5214e3f24c0029
test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol:I {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol":"I"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol":{"keccak256":"0x74667c6ca37470f10af734ce28386fc6b8c2308eed445060f1e21c9ebd3e7878","urls":["bzzr://cf2d12cf763dfd10788fae485e6112f04849ce886f9551d0153b5afaa236d5d7"]}},"version":1}
test_e4fefbd3c69dd3ff2e22565bd9497c06ffad754886205a536e7408ef269c52b1.sol: ERROR
test_e550f9aade49bdb71ef62088da2ce09e2ceb75bca85e3953922386264860fab6.sol: ERROR
test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol:C 60606040523415600e57600080fd5b5b60988061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600073fa0bfc97e48458494ccd857e1a85dc91f7f0046e90505b505600a165627a7a723058209c93db48b7a20dc5efbc4980a692c24cbafd34dc23e233e30f7f47bdafb47a500029
test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol":{"keccak256":"0x95637432bfbaa0708b8ab090af7798627ec55e254c8e615ca4ad7d8e59f7b7d3","urls":["bzzr://b3a0b8ef486d34b4c9baf46a8b1c7a4816e891c3c9ce3dee9038a621a13c07d0"]}},"version":1}
test_e55f140c8d277029a254dbcaa9c334d07cf113466c9e812c2bdcbb92380cc926.sol: ERROR
test_e583007eebec18ce43eb260c8946fe6bb6ad3068bb3e5941221f5637c826ae54.sol: ERROR
 conv int_const 10 -> uint256
test_e5a3a1358ac2725a86129940641c98cfc1dc34d41d29f11d32eb98ad96738234.sol: ERROR
test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol:c 6060604052341561000f57600080fd5b5b6101118061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806352efea6e146047578063d9c55ce1146059575b600080fd5b3415605157600080fd5b6057606b565b005b3415606357600080fd5b6069607a565b005b600260006077919060b2565b5b565b60008090505b601481101560ae5760018101600282601481101515609a57fe5b0160005b50819055505b8060010190506080565b5b50565b50806014019060c0919060c3565b50565b60e291905b8082111560de57600081600090555060010160c8565b5090565b905600a165627a7a72305820c034cc5fde6f7fed1144d9cc9ded9704339c15434af1ffd61f9e0879ddf2596b0029
test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol":{"keccak256":"0xfde7b0962f7c8a4813a948b38e1c2fa5b2eec75910b2dd0230af323e8bbdc774","urls":["bzzr://735f4a2c5f197511ded8d460c39e5bbb7942a9965931191c84cc0301592b4ae0"]}},"version":1}
test_e652194011b367d2eebb93b84f16727a535ccff3872821db3eef8de910c26f81.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol:C 6060604052341561000f57600080fd5b5b61010d8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063491daff114603d575b600080fd5b3415604757600080fd5b6070600480803563ffffffff1690602001909190803563ffffffff1690602001909190505060bc565b60405160208101608481600084018486608d565b905080925060a3565b600084905060998260a7565b8452949350505050565b60b1565b6000819050919050565b505060405180910390f35b60008163ffffffff168363ffffffff169060020a900463ffffffff1690505b929150505600a165627a7a7230582054296751760d7049c042e9ff1ae409e1accc81415855622f935ecf8cf69e93430029
test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint32"},{"name":"b","type":"uint32"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol":{"keccak256":"0x744e3b9590bcae837371a4d49f28308605938c6aa296e157bebbc8f39844a683","urls":["bzzr://dd019f102bb50f6651cb8e8a929fafa777b59b6ba5f3623b38e823d292e99b01"]}},"version":1}
test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol:C 60606040523415600e57600080fd5b5b60938061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b60078111505b5b505600a165627a7a723058207e749a11860b5643ace403b5acbdabc6e0910c033772cf1dfc26528e532aabdc0029
test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol":{"keccak256":"0x268e3f400852e8d0a62954b2d2a8b653183c0a7748416a81212edc165caa29e2","urls":["bzzr://ec09a25cd692f1e1c6c27bdae71509702a692e2a5f54f194719b6a0dacbed2a6"]}},"version":1}
test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol:c 60606040523415600e57600080fd5b5b607e8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b5b5600a165627a7a723058201b47d6a7ad4afe0802a4d69dd061516c5f136a1c243237573f9496f832e7cb340029
test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol":{"keccak256":"0xf3f73edb8fe64249334856e4dfc7592c7c5e69e7ca2c6d1913e93880ae996e68","urls":["bzzr://bf2dc0f4578fb4c5eee8e100ad1ccf5416e7d13facef7b1448bf344310005b0d"]}},"version":1}
test_e7ebb750458f0d8349fe733780cb4f2dbf086a354f596a40310e07566e06fae8.sol: ERROR
test_e85d2204d820a4857e2185a2b8eb6f197c535c65ea1f88eaa9a12e0c15d04ca0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol:C 6060604052341561000f57600080fd5b5b6103a28061001f6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461007b578063b4f40c61146100e0578063b582ec5f14610145578063b8c9d365146101aa578063e2179b8e1461020f578063e5aa3d5814610274575b600080fd5b341561008657600080fd5b61008e6102d9565b604051602081016100a4816000840184866100ae565b90508092506100c6565b60008490506100bc826100cb565b8452949350505050565b6100d5565b6000819050919050565b505060405180910390f35b34156100eb57600080fd5b6100f36102e7565b6040516020810161010981600084018486610113565b905080925061012b565b600084905061012182610130565b8452949350505050565b61013a565b6000819050919050565b505060405180910390f35b341561015057600080fd5b610158610310565b6040516020810161016e81600084018486610178565b9050809250610190565b600084905061018682610195565b8452949350505050565b61019f565b6000819050919050565b505060405180910390f35b34156101b557600080fd5b6101bd610339565b604051602081016101d3816000840184866101dd565b90508092506101f5565b60008490506101eb826101fa565b8452949350505050565b610204565b6000819050919050565b505060405180910390f35b341561021a57600080fd5b610222610343565b6040516020810161023881600084018486610242565b905080925061025a565b60008490506102508261025f565b8452949350505050565b610269565b6000819050919050565b505060405180910390f35b341561027f57600080fd5b61028761034d565b6040516020810161029d816000840184866102a7565b90508092506102bf565b60008490506102b5826102c4565b8452949350505050565b6102ce565b6000819050919050565b505060405180910390f35b60006404a817c80090505b90565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe790505b90565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe90505b90565b6000601990505b90565b6000600290505b90565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffb57e8380090505b905600a165627a7a72305820d7ae09b9458283e111ae11ea5049102307dade3510fb543d1e416ab4eda1b9180029
test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"k","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"j","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"i","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol":{"keccak256":"0x52136acec0360acb078582f4a8a820e7b69439331574fe9ffcee79504f350647","urls":["bzzr://d48268e09ed9433077a1ec1c89a2c6e1bcbde537ae5777efb98096f7e77ee64f"]}},"version":1}
test_e8e77a6bf81898712169f45beae16d889419128b45a0fecf177c94420faff096.sol: ERROR
test_e90e34c9fb16773afb1c7994c0978fe5f87a83caf38401356f7a7e56194f6044.sol: ERROR
test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol:test 6060604052341561000f57600080fd5b5b60a98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b6007811115607057600180819055506079565b60016000819055505b5b505600a165627a7a72305820c143059689acb289b3578dc7ba3a5626083454fd66ca15f9aa9a748308ffdf050029
test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol":{"keccak256":"0x05b8236c756e376998cf71f5849d4355c02370dfdc4db4d02c233712b36d5463","urls":["bzzr://2c62e8066271e1f672238d1102efbf8c600ef7dc46f8bc55c85e2035bcad91fb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol:test 6060604052341561000f57600080fd5b5b600860008060028152602001908152602001600020600260088110151561003357fe5b0160005b5081905550600360016000600281526020019081526020016000208161005d919061009b565b5060086001600060028152602001908152602001600020600281548110151561008257fe5b906000526020600020900160005b50819055505b6100ec565b8154818355818115116100c2578183600052602060002091820191016100c191906100c7565b5b505050565b6100e991905b808211156100e55760008160009055506001016100cd565b5090565b90565b6101c7806100fb6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635173bd1e14610049578063d3c5fe1e146100c5575b600080fd5b341561005457600080fd5b6100736004808035906020019091908035906020019091905050610141565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100ba565b6000819050919050565b505060405180910390f35b34156100d057600080fd5b6100ef6004808035906020019091908035906020019091905050610169565b604051602081016101058160008401848661010f565b9050809250610127565b600084905061011d8261012c565b8452949350505050565b610136565b6000819050919050565b505060405180910390f35b60006020528160005260406000208160088110151561015c57fe5b0160005b91509150505481565b60016020528160005260406000208181548110151561018457fe5b906000526020600020900160005b915091505054815600a165627a7a7230582078fbfe9f5ad35e8232024a2746910cf3ef390b55c6b406d88dc973bfce4e51a20029
test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"dynamicData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol":{"keccak256":"0x4862ea0e74023999943f02d4fa141cc1076c91bf7ce03afc6b4ba11caaab8207","urls":["bzzr://ec7831094c98860d90cc2b1ea336af80a176996f2c49d3c19e85d1972daff521"]}},"version":1}
test_e97e8c6580429a479c514f13c0cca16890a0163f1520b08b878eeb0648170a86.sol: ERROR
test_e9a3f7fce3eb1c6bf5fe30c4e6af7d946899889fb1dd5f8d59dc306c81185fd0.sol: ERROR
test_ea48c483ca4c70b2fd1a3af3414f584afd8425e0f384291d844d2e8e8c22023f.sol: ERROR
test_ea5f7b9233654b1e03d2c52f0104775866cbfb8cb3cfb7578bd9cefabe819a45.sol: ERROR
test_eaf00fab7663d9d3f86f7c113ceb1a06fb6c3e3e29da0df2255000064d5899b0.sol: ERROR
test_eb58426739c26f6c5f88e4622067968a7c16c9f6531e22028e74998822ad6f1a.sol: ERROR
test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol:C 60606040523415600e57600080fd5b5b60748061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b60436045565b005b5b5600a165627a7a7230582021118b45319a0c2ce191bc1d6a16517c137e03e23e6d16831f14ee01c15c5b630029
test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol":{"keccak256":"0x4db7f7cdbe58955987d8782d7448ae96299c179b8db9e2d0e71a92131a7c710a","urls":["bzzr://1e39041f51fb48e55601efc575f2c7d24814e79536ddd328ada68345aca61407"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol:Test 6060604052341561000f57600080fd5b5b6102788061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100d9565b60405160808101610067816000840184896100a4565b9050610078816020840184886100a4565b9050610089816040840184876100a4565b905061009a816060840184866100a4565b90508095506100bc565b60008490506100b2826100c1565b8452949350505050565b6100cb565b6000819050919050565b505050505060405180910390f35b6000806000806100e76101ff565b6100f76001600260036004610135565b9050610104816000610194565b9450610111816001610194565b935061011e816002610194565b925061012b816003610194565b91505b5090919293565b61013d6101ff565b84816000019060ff16908160ff16815250508381602001516000019060ff16908160ff16815250508281602001516020019061ffff16908161ffff168152505081816020015160400181815250505b949350505050565b6000808214156101ad57826000015160ff1690506101f9565b60018214156101c95782602001516000015160ff1690506101f9565b60028214156101e65782602001516020015161ffff1690506101f9565b82602001516040015190506101f9565b5b5b5b92915050565b608060405190810160405280600060ff16815260200161021d610223565b81525090565b606060405190810160405280600060ff168152602001600061ffff1681526020016000815250905600a165627a7a72305820f6a7ca287c10880e980b72ddce1fab20b5c0c5d7a5346d732bbdd3b4d83202e60029
test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol":{"keccak256":"0x3ab4ad02c3940bb8b58e9fe59cec329b1a4fc7a8ba3ca6e2291af830b369560a","urls":["bzzr://7cb4e30ad0148a447e40ae6e79a270c9417630adb2079f074c72d81c76aaa3a3"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c040622614603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60006014600003600a60000360030b0260070b90505b905600a165627a7a72305820b4f5c9e5ae5eeabb1e9ef3b74868f7c7d283494ab69c0f32e351d8e0ba8e07d70029
test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol":{"keccak256":"0x35fbac479595f6f8de3aa5698e2131b125a0618a6dad636fb96c36b93ebc6a6e","urls":["bzzr://80a9fb98173807466178090f9bc61e3bb88da3fee379678c229a0a42d87bfb14"]}},"version":1}
test_ec427fad860fcfb10000e70395cc2ca6503cf215b20e63d106595e59bc6a1066.sol: ERROR
test_ec91f01fd9c7364a4c49cec35580ee003f2279a92b4efdcfa84d1d432426af5b.sol: ERROR
 conv uint256 -> uint256
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol:test 60606040525b5b5b61013e806100166000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806376bb682a1461003e575b600080fd5b6100466100fe565b6040516060810161005c816000840184886100a5565b905061006d81602084018487610088565b905061007e816040840184866100a5565b90508094506100a0565b6000849050610096826100c2565b8452949350505050565b6100bd565b60008490506100b3826100e7565b8452949350505050565b6100e2565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1565b6000819050919050565b5050505060405180910390f35b60008060003492504191504390505b9091925600a165627a7a723058200d0dfbd64ca90ac446a6d35abb48d1d414c7cac50fa79b1ac1520405824616240029
test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"someInfo","outputs":[{"name":"value","type":"uint256"},{"name":"coinbase","type":"address"},{"name":"blockNumber","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol":{"keccak256":"0x9278eee4315af0e18406f987b6a10091ab5e89b57ce5626430af3eabb4b9e406","urls":["bzzr://9523d4769a1c3ec589e6ad13f2e49e1baa24339376f8cbe07ee318142eb9f340"]}},"version":1}
test_ecd11e79ae47c7cbfa8e7da14f9d4f1ef0a1f5544a987c56ae9504ba6eaf047f.sol: ERROR
test_ecde836616e740e0167926bf464f4ad41920c0808c455da8398c9f6bd968998a.sol: ERROR
test_ecef8879783d5143af5530201bbc1f41d6bdec8d3f329b804123153e23dd6653.sol: ERROR
test_ecf87ab567f9b08ebe1ac9e3ea9c8c90c6acbc95a12677ea77b57f561f9f3990.sol: ERROR
test_ed1454e3d73b8e9bd568046b592a9b37ce275bb75adb70fc453df6c3e0cba5bf.sol: ERROR
test_ed46b2829ae05c533d5fc022bb175b881c68d1a2af217af73644de565c71bc42.sol: ERROR
test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol:C 60606040523415600e57600080fd5b5b60818061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60005b505600a165627a7a72305820fe3a3177451c6c38620bb5a9377211c5d3f55e6196bad503ccafc73dc0883f520029
test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol":{"keccak256":"0x1e9315ac91e65f8b34566af563b17c608ca73d927494f6c3117e4c8f36f8a442","urls":["bzzr://ae6affd031ba00379a4baa267ed6a12a547b3503ed0aa67da76a4ea45e6bd014"]}},"version":1}
test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol:test 60606040523415600e57600080fd5b5b60928061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b6000600115156111aa6110aa101515141590505b505600a165627a7a72305820d27de3a68175bed262ed412cb3a47347df4c6c4bb962719edebdce1bf3fe95b50029
test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol":{"keccak256":"0x9b03b27fc579d3f0db2a880be6f7ba6758409273af673b8856de09768ea384ea","urls":["bzzr://2c6020946175083d69092c559351f98f4b8001e4c79eca9c31860a91506db23a"]}},"version":1}
test_ee74663549c24d355f2be5db73f1b9151ce1664b9d737b556944ca8407e2d3b4.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol:c 6060604052341561000f57600080fd5b5b6103138061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ff2af2d1461004957806360fe47b1146100c7575b600080fd5b341561005457600080fd5b610073600480803590602001909190803590602001909190505061013c565b6040516020810161008981600084018486610093565b90508092506100ab565b60008490506100a1826100b0565b8452949350505050565b6100bc565b60008115159050919050565b505060405180910390f35b34156100d257600080fd5b6100e8600480803590602001909190505061018d565b604051602081016100fe81600084018486610108565b9050809250610120565b600084905061011682610125565b8452949350505050565b610131565b60008115159050919050565b505060405180910390f35b600080600084815260200190815260200160002060008084815260200190815260200160002090805460018160011615610100020316600290046101819291906101bb565b50600190505b92915050565b6000803660008085815260200190815260200160002091906101b0929190610242565b50600190505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f45780548555610231565b8280016001018555821561023157600052602060002091601f016020900482015b82811115610230578254825591600101919060010190610215565b5b50905061023e91906102c2565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061028357803560ff19168380011785556102b1565b828001600101855582156102b1579182015b828111156102b0578235825591602001919060010190610295565b5b5090506102be91906102c2565b5090565b6102e491905b808211156102e05760008160009055506001016102c8565b5090565b905600a165627a7a72305820d0ee9c812368a116c7e78add1c52bc374ced29a8250e62e98775576cb55a59eb0029
test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"from","type":"uint256"},{"name":"to","type":"uint256"}],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol":{"keccak256":"0xd869b45239cb2a5776635e001bcfeb8d07e3a60b778fba0951898c069d4975e0","urls":["bzzr://189a8841f9120d3da974377f902acec7daa689f8083e984120c9ff2fc3d01860"]}},"version":1}
test_eeb99a9f467edccd8109f6c463095392da7e994aecb295d89359bb365c461fd4.sol: ERROR
 conv bytes3 -> bytes3
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes3_to_t_bytes3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes3_to_t_bytes3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes3(value))

			}
		
			function cleanup_assert_t_bytes3(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF0000000000000000000000000000000000000000000000000000000000)
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol:Main 6060604052341561000f57600080fd5b60405160408061024a833981016040528080519060200190919080519060200190919050505b816000806101000a81548162ffffff02191690837d0100000000000000000000000000000000000000000000000000000000009004021790555080600060036101000a81548160ff0219169083151502179055505b50505b6101ae8061009c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806317d7de7c14610049578063f9633930146100d0575b600080fd5b341561005457600080fd5b61005c610137565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100c5565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b34156100db57600080fd5b6100e361016b565b604051602081016100f981600084018486610103565b905080925061011b565b600084905061011182610120565b8452949350505050565b61012c565b60008115159050919050565b505060405180910390f35b60008060009054906101000a90047d0100000000000000000000000000000000000000000000000000000000000290505b90565b60008060039054906101000a900460ff1690505b905600a165627a7a723058201cded4f3d89af969d8313d25f6e931fe9d37c9a4da5d027ea34ff9cfbb5b35760029
test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getName","outputs":[{"name":"ret","type":"bytes3"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getFlag","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"bytes3"},{"name":"f","type":"bool"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol":"Main"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol":{"keccak256":"0x17a42f5c9c8f3cb837512ca3cdcecd8f0a0e232e095fd07f5c812ebf45f30dd6","urls":["bzzr://f6b9cc89c89ec8177d6a3864ec5d67e58424a9ea6fa12060109c36a47393c91c"]}},"version":1}
test_ef20eab0ee82598a33a4db7d89cb5f893ebc01f85aa95b026c0aaf64ff8614db.sol: ERROR
test_ef2f610fc6c9c86992bb6e28dcd279c6f67fd3c1976ac4e2b49229b0a3e268c6.sol: ERROR
test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol:C 60606040523415600e57600080fd5b5b608d8061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b6004808035906020019091905050605d565b005b5b505600a165627a7a723058202ba7e4b893a1db603943297275c104063ee0eeffa94db26b106cd2f2558078840029
test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol":{"keccak256":"0x3d69cb8b491136fcbb5e0e1d84333fab9cf5faea986256e224b0109508cfa929","urls":["bzzr://a1290bdb81b90f61fd36b6f9133eb9a1b290e67eb2b184fdf5aa67e31c61726e"]}},"version":1}
test_f0df0417210f7aa25b87f760af8488841b76dec9e9aba3de4f5356cae3837f22.sol: ERROR
test_f12d326edfa3146f6ee10563423a2d8f309d51bfa230bf149eded1dd3f5ec8bf.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol:test 6060604052341561000f57600080fd5b5b6101008061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063824a621014603d575b600080fd5b3415604757600080fd5b606a600480803590602001909190803563ffffffff1690602001909190505060b8565b60405160208101607e816000840184866087565b9050809250609d565b600084905060938260a1565b8452949350505050565b60ad565b60008115159050919050565b505060405180910390f35b60008060088363ffffffff1685011490508091505b50929150505600a165627a7a7230582023e0d1e314285a5170d7ee4ba7c612bf94fa0cb0879f5eef9ff39dc082b2bd9b0029
test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"},{"name":"arg2","type":"uint32"}],"name":"f","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol":{"keccak256":"0x894c8996ee0b97e798d7fc4aebb73408d3b83fd7119e439f50dcaed59b2e0620","urls":["bzzr://34c3ddb8279fb5297fa9ce795fa624fee1178056614236e4142282e5ad1939e3"]}},"version":1}
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:BaseBase 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:BaseBase 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:base 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:base 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:derived 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:derived 
test_f1c5a3c5898b5bdba5d48272e23ab1aeccfca509ff2f6508f80b25b0804f6111.sol: ERROR
test_f1f25723e2547b5a8cbcca70cedf7923e5277745c793e05cdffd0e2b25cf3f92.sol: ERROR
test_f21407ccaa09d80d789d8f7a97092fb42c2fd90fd6abd402ce1be83b9e94f007.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol:C 6060604052341561000f57600080fd5b5b61010e8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b600060d3565b600060019050815b600081111560cd5780820291505b60018103905060b5565b50919050565b60da8260ad565b90505b9190505600a165627a7a72305820e66a148c4d6d8f9b162d2e78e3029e1411d100cb2091217b9719df0a4dd396220029
test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol":{"keccak256":"0x6f5ff9f4d2d926169d2ac1f446c5cc85026b91baf820ab827d41fa9db1ad0ed3","urls":["bzzr://5a2c7c002c53e9f4e9d089ef0c2b2895f94e925f887c2b015cedb326bf90a308"]}},"version":1}
test_f2ef815238e9e82eb33d9dfefff3e9e0e73191e39a9d98209d2bd04f84d28efa.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Base 606060405260025b806000819055505b505b603680601e6000396000f30060606040525b600080fd00a165627a7a72305820db19b5d6afccc4bc8a50a7f6df5827ca86b1a10b12d45f163ee4f7f83da68cfb0029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"Base"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:BaseBase 60606040523415600e57600080fd5b6040516020806077833981016040528080519060200190919050505b806000819055505b505b60368060416000396000f30060606040525b600080fd00a165627a7a7230582018c934e452a73bf93819e1530af0f58a64f4f0439aedbb491b1556a6edec55620029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Derived 606060405260035b806000819055505b505b60cf8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d46300fd14603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000805490505b905600a165627a7a723058202e42b14d262803afc604de65cd3c7c3544dafd56fe709a05e64671961353ba5f0029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"Derived"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f3130849c7ad69d82f1ca2cac18fd7771ffe13d49c116d20a4f3030c08d1ffed.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol:test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000806064905080600a0a60ff1691505b50905600a165627a7a72305820914ca24668d60766aace75ad8360e89674a73f9c03b903cf6827d58aa667d12d0029
test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol":{"keccak256":"0xf42e118d83b7c1aff0abbd90846b99bf8b87b4bddaa33c6ff1c384b75a26a4e8","urls":["bzzr://9517c66e6418bda52c7b5ca0e77247a00b4131711c4847622b61c0a3f209debe"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:A 60606040523415600e57600080fd5b5b3073ffffffffffffffffffffffffffffffffffffffff1660405180807f3132330000000000000000000000000000000000000000000000000000000000815250602001905060006040518083038160008661646e5a03f1915050505b5b60368060796000396000f30060606040525b600080fd00a165627a7a723058207120912cf2741efd2004361e3d16d5d6d0cafa63d63ec6023886d8d42f49dee40029
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":{"keccak256":"0xaa40d5cde2e8cad93499910490aefc93be43805b1113889d1211635b31835c50","urls":["bzzr://35dde2522afa026a289d9f8b27a17e4fcea0c92ac136822d728e4ee1a661a651"]}},"version":1}
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:B 60606040526001600055341561001457600080fd5b5b6101e8806100246000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f7cb8e6614610049578063f8a8fd6d1461005e575b600080fd5b341561005457600080fd5b61005c6100c3565b005b341561006957600080fd5b6100716100f8565b6040516020810161008781600084018486610091565b90508092506100a9565b600084905061009f826100ae565b8452949350505050565b6100b8565b6000819050919050565b505060405180910390f35b60006100cd6100fe565b604051809103906000f08015156100e357600080fd5b90506000808154600101919050819055505b50565b60005481565b60405160af8061010e83390190560060606040523415600e57600080fd5b5b3073ffffffffffffffffffffffffffffffffffffffff1660405180807f3132330000000000000000000000000000000000000000000000000000000000815250602001905060006040518083038160008661646e5a03f1915050505b5b60368060796000396000f30060606040525b600080fd00a165627a7a723058207120912cf2741efd2004361e3d16d5d6d0cafa63d63ec6023886d8d42f49dee40029a165627a7a723058207d28678030bdf31c664e4c1f327e65246b42f737afc7c97d83c04668656745700029
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"testIt","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":{"keccak256":"0xaa40d5cde2e8cad93499910490aefc93be43805b1113889d1211635b31835c50","urls":["bzzr://35dde2522afa026a289d9f8b27a17e4fcea0c92ac136822d728e4ee1a661a651"]}},"version":1}
test_f37871936bf1c6afa11b22caf18d05c1041f24c68a493c0a8e284050a5086121.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol:c 6060604052341561000f57600080fd5b5b6106638061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636b59084d1461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b60008060646000816100b79190610549565b50600090505b600080546001816001161561010002031660029004905081101561018357807f010000000000000000000000000000000000000000000000000000000000000002600082815460018160011615610100020316600290048110151561011e57fe5b81546001161561013d5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055505b80806001019150506100bd565b6000605e81546001816001161561010002031660029004811015156101a457fe5b8154600116156101c35790600052602060002090602091828204019190065b601f036101000a81549060ff02191690556000606081546001816001161561010002031660029004811015156101f557fe5b8154600116156102145790600052602060002090602091828204019190065b601f036101000a81549060ff021916905560006062815460018160011615610100020316600290048110151561024657fe5b8154600116156102655790600052602060002090602091828204019190065b601f036101000a81549060ff021916905560007f0100000000000000000000000000000000000000000000000000000000000000026000605e81546001816001161561010002031660029004811015156102bb57fe5b8154600116156102da5790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156103d85750605f7f0100000000000000000000000000000000000000000000000000000000000000026000605f815460018160011615610100020316600290048110151561036f57fe5b81546001161561038e5790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b801561048d575060007f01000000000000000000000000000000000000000000000000000000000000000260006060815460018160011615610100020316600290048110151561042457fe5b8154600116156104435790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610542575060617f0100000000000000000000000000000000000000000000000000000000000000026000606181546001816001161561010002031660029004811015156104d957fe5b8154600116156104f85790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b91505b5090565b81546001816001161561010002031660029004825481601f106105a45782601f10610589575b826008026101000360020a8091040282800117835561060d565b60ff191683600052602060002055818001600101835561060d565b82601f106105d4575082600052602060002080549082601f01602090048101906105ce9190610612565b5061056f565b5081800160010183558181151161060d57601f016020900481601f0160209004836000526020600020918201910161060c9190610612565b5b505050565b61063491905b80821115610630576000816000905550600101610618565b5090565b905600a165627a7a72305820ffe46bb8ba4b20c6e31e526f8c9aedd244e8f2cc754e4269f392d4d725aa5c4f0029
test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test1","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol":{"keccak256":"0x413c9119883acda5355461329ed8b5abfc09a8f9550411c11ae3896a33a202a3","urls":["bzzr://19758fb62978ba541392d7a3b9cdfb8deedff924067606865eda771cb885312a"]}},"version":1}
test_f3fd9103612d3eb90f43cd25ea85615ae44c120d9d6920a07a60287755ddb485.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:A 6060604052341561000f57600080fd5b5b60e18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060a7565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b609c565b6000819050919050565b505060405180910390f35b60008160020290505b9190505600a165627a7a723058201aa3d7d0e7d7ca3d6d9515888d54d2aeca744136415f10d3bae00b3f8b3215770029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:B 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600a90505b905600a165627a7a723058208c06be105f7d36050f4230fd2d7af315d7985840b5719c1550dcc871045d60f60029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:C 6060604052341561000f57600080fd5b5b6102678061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461005f578063b3de648b146100c4578063b8c9d36514610137578063e2179b8e1461019c575b600080fd5b341561006a57600080fd5b610072610201565b6040516020810161008881600084018486610092565b90508092506100aa565b60008490506100a0826100af565b8452949350505050565b6100b9565b6000819050919050565b505060405180910390f35b34156100cf57600080fd5b6100e5600480803590602001909190505061020b565b604051602081016100fb81600084018486610105565b905080925061011d565b600084905061011382610122565b8452949350505050565b61012c565b6000819050919050565b505060405180910390f35b341561014257600080fd5b61014a610219565b604051602081016101608160008401848661016a565b9050809250610182565b600084905061017882610187565b8452949350505050565b610191565b6000819050919050565b505060405180910390f35b34156101a757600080fd5b6101af61022b565b604051602081016101c5816000840184866101cf565b90508092506101e7565b60008490506101dd826101ec565b8452949350505050565b6101f6565b6000819050919050565b505060405180910390f35b6000600a90505b90565b60008160020290505b919050565b6000610225600161020b565b90505b90565b6000610235610201565b90505b905600a165627a7a7230582068db48cb63ae128aa95f379b959dbb2be7dbbf78a249d868e64efff8c6a0c81f0029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4cefe1c53736c4e5c4cf7b998fdfa5fdaaa1611994d2514767b6c117ec4cf25.sol: ERROR
test_f5910e6344b84b5fc4e64197a9a628f45d7e88ba640415dc7c019e72943ae7ce.sol: ERROR
test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol:test 60606040523415600e57600080fd5b5b60858061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b600060bf90505b505600a165627a7a72305820338ab4104b728668d5b417a9d23d4827e1b9e00412d167f4e485bf5601cd61290029
test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol":{"keccak256":"0xf0a0d44e883b150a63676d8af087cae5255f614055c90b7deef821ed62a352f1","urls":["bzzr://09ef66fceef2776394cc2f6d72f1a903623a7e8a74ed6d2dd5ae7c7fdaa93e87"]}},"version":1}
 conv bytes2 -> bytes2
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes2_to_t_bytes2(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes2_to_t_bytes2(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes2(value))

			}
		
			function cleanup_assert_t_bytes2(value) -> cleaned {
				cleaned := and(value, 0xFFFF000000000000000000000000000000000000000000000000000000000000)
			}
		

test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol:Test 6060604052341561000f57600080fd5b5b61011f8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806399dbd65d14603d575b600080fd5b3415604757600080fd5b607a60048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909190505060e8565b60405160208101608e816000840184866097565b905080925060ad565b600084905060a38260b1565b8452949350505050565b60dd565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b60008190505b9190505600a165627a7a723058204cc69a966782b4b8ac55c079c92fadb42505a4cb6c4e7a8628c99a38a4dec7870029
test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes4"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes2"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol":"Test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol":{"keccak256":"0x205fae0e8d86ee857fec04c1b719c174287dc9a933ea0e393fc32f9c00a4fdd9","urls":["bzzr://7c8f548ab941d8cd82bf9b0ab5ace772a7b6fb449e50bc011234a4caf6ad0b7c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol:test 6060604052341561000f57600080fd5b5b60d78061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b600080600190508060ff1691505b50905600a165627a7a72305820cb1b7c9862086fe707d50a4a79320ad46483d1d99242c6e4cc70d91a87a96eea0029
test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol":{"keccak256":"0x2ebd87d980e99eb8471b630ca1c42cb1380704138c0283badce3d8f56daeff05","urls":["bzzr://5d1deeda396a5981a697784976960b19127be003bb721fa666d43f0c43aae451"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol:Flow 6060604052341561000f57600080fd5b5b6100896401000000000261019017600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b610192565b6100ff640100000000026101fb17600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b565b6101756401000000000261026617600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b565b60016000806101000a81548160ff0219169083151502179055505b565b6102af806101a16000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b93381b1461004957806326121ff0146100b0575b600080fd5b341561005457600080fd5b61005c610115565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a5565b60008115159050919050565b505060405180910390f35b34156100bb57600080fd5b6100c3610127565b604051602081016100d9816000840184866100e3565b90508092506100fb565b60008490506100f182610100565b8452949350505050565b61010a565b6000819050919050565b505060405180910390f35b6000809054906101000a900460ff1681565b6000610188600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1663ffffffff16565b600790505b90565b6101fb600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b565b610266600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b565b60016000806101000a81548160ff0219169083151502179055505b5600a165627a7a72305820220c93d662fa5a2b941a5277b67904cb02f97e5f5a19c1cd29b5b8d6a5e8b0040029
test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol:Flow {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"success","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol":"Flow"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol":{"keccak256":"0x057130dd6625afd5cc5df7675c3b0c0a6b9efb7506fbd4d0e65ecd82e8bce263","urls":["bzzr://f43d11d41f892a0d9ce90d4d89d3b762bee5d0bfd998fe0957372abe9ab9e463"]}},"version":1}
test_f6d0e65ec93c757919a71ec488c1e6200b85fcb92c0f87e921a96d2d25ac9e2e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:helper 6060604052341561000f57600080fd5b5b60db8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b905600a165627a7a723058200b23bc833de6a30b5628cf45fb9a790335cc15eb30cc817aef19b6cd74039c270029
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":"helper"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":{"keccak256":"0x034120ba0fdc54466a83dc0f42be8d8f8ef67f60d4a56359fd74d0ea04079b91","urls":["bzzr://71ce8a6dda634788a6bcc94b52d47ca4c3b04a0ed1e042e9a266725c25993697"]}},"version":1}
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:test 60606040525b61000d610068565b604051809103906000f080151561002357600080fd5b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610077565b60405160f98061024283390190565b6101bc806100866000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063fd72b6e91461003e575b600080fd5b341561004957600080fd5b61005f60048080359060200190919050506100b1565b604051602081016100758160008401848661007f565b9050809250610097565b600084905061008d8261009c565b8452949350505050565b6100a6565b6000819050919050565b505060405180910390f35b6000806000806000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312065fe09850985088888c9650965096508686866103e890935093509350935083838360038e016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303818589803b151561016657600080fd5b88f1151561017357600080fd5b50505050506040518051905099505b5050505050505050509190505600a165627a7a723058204d8049f4aaef0537695565b4e17699c974f4b9ce5416c6b8304da94373b59ea500296060604052341561000f57600080fd5b5b60db8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe014603d575b600080fd5b6043608f565b604051602081016057816000840184866060565b90508092506076565b6000849050606c82607a565b8452949350505050565b6084565b6000819050919050565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff163190505b905600a165627a7a723058200b23bc833de6a30b5628cf45fb9a790335cc15eb30cc817aef19b6cd74039c270029
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":{"keccak256":"0x034120ba0fdc54466a83dc0f42be8d8f8ef67f60d4a56359fd74d0ea04079b91","urls":["bzzr://71ce8a6dda634788a6bcc94b52d47ca4c3b04a0ed1e042e9a266725c25993697"]}},"version":1}
test_f7ceccaac3093ca0d4bdbab6daf34468411f20dbaf135f594b6784688459f6c3.sol: ERROR
test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol:C 60606040523415600e57600080fd5b5b60988061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090505b6001156068575b80806001019150506055565b5b505600a165627a7a72305820b69de0c4ff530ed6651037d5519a06f4b8d89cebf69d6167f74a18eceae284380029
test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol":{"keccak256":"0x90c8ced439eab90dc7588356532bfab1e74634ca562475589a932f78b7aff5b4","urls":["bzzr://c73e170ef842e31e4d6b056f642a17c6fc4d8988ff76122d1196ab423e04bbde"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b6000600160a657600a60a9565b60055b60ff1690505b905600a165627a7a723058204dc6044881a2e78cda7c8841f831773c6984b8f488f7da4336f63e9d339e256c0029
test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol":{"keccak256":"0xeb1645289222e741292413f3f6729a1f1576460be1d5de9dd6a160c4168749fe","urls":["bzzr://1c15ba7f0853d5f523aa4662dcccb9467f991b841c587a220d75df9374d47ca2"]}},"version":1}
test_f8594d665f125e3c69990502f2d03a76f616db15369e98122d4a71601133359d.sol: ERROR
test_f8b1795bb9c09b308719a066a1e9245094176c4a4d81148c2ce0acfb5be2151c.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol:test 6060604052341561000f57600080fd5b5b6101238061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632fbebd3814603d575b600080fd5b3415604757600080fd5b605b600480803590602001909190505060c9565b60405160208101606f816000840184866078565b9050809250608e565b60008490506084826092565b8452949350505050565b60be565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b505060405180910390f35b600080357fffffffff000000000000000000000000000000000000000000000000000000001690505b9190505600a165627a7a723058208e68f10715c70c5e377f81bffaf5ef301e78da3c5f73a33bb14d4dff7e261af30029
test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"foo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol":{"keccak256":"0xfc3f3ce5371511cca77a1d0d0960b67316faffb2b0bac2e032f5c756fbda189d","urls":["bzzr://e9d37bf43cb6c4e75bd31a7be5d617647acb263b50780aca6742846e1f5d3a31"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f90f129afab3d0d67d1e57444efd657ce4b7f045d7fc09a0c5523d5ce969efb9.sol: ERROR
test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol:test 60606040523415600e57600080fd5b5b60a08061001d6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d604f565b005b60008090505b60003690508160ff1610156070575b80806001019150506055565b5b505600a165627a7a72305820d6d9240aacac7f5c95a54e4849bec4b8aad1d660e5a2804667b370f69e0950f30029
test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol":{"keccak256":"0x1a96aa96e80ecb2b0c7da80ce9c00e931089b253f9f5887b6750fb5dca5065db","urls":["bzzr://2ffbfe719b806217970d261dd9b6a3fc12046001b5c66cb0b2198c42bde793d7"]}},"version":1}
test_f9477f76545ee95d8326c92bc9636a79ac26e756f58411674a783d15e6d79d6f.sol: ERROR
test_f9593609ddda18e90929158c630a33fca3cee055b9c5273c71d737ed7ab9b78f.sol:I 
test_f9593609ddda18e90929158c630a33fca3cee055b9c5273c71d737ed7ab9b78f.sol:I 
test_f97a204dcc58c14efe762e9343fd93ed6fda74849b74081f1d15ebbd29ef0a5e.sol: ERROR
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582060c36ac7cb5b134ac80b5fea403900b154448eeff1b48f04d26f4101dd69709b0029
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":"A"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":{"keccak256":"0x1a634596f0f3bcb152c2b6b3ee5b0994fea50761c1031649922ead3b2b57d9fc","urls":["bzzr://99d9383eaa4ec533498ceca357c443b7b5300eec563cf30960e3bfc98604a6f0"]}},"version":1}
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820601b57a76e3075993771b0030d3828334c94443db34e0a81c4c34def214630a40029
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":"B"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":{"keccak256":"0x1a634596f0f3bcb152c2b6b3ee5b0994fea50761c1031649922ead3b2b57d9fc","urls":["bzzr://99d9383eaa4ec533498ceca357c443b7b5300eec563cf30960e3bfc98604a6f0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol:C 6060604052341561000f57600080fd5b5b6101588061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c55699c1461004957806326121ff0146100ae575b600080fd5b341561005457600080fd5b61005c610113565b604051602081016100728160008401848661007c565b9050809250610094565b600084905061008a82610099565b8452949350505050565b6100a3565b6000819050919050565b505060405180910390f35b34156100b957600080fd5b6100c1610119565b604051602081016100d7816000840184866100e1565b90508092506100f9565b60008490506100ef826100fe565b8452949350505050565b610108565b6000819050919050565b505060405180910390f35b60005481565b6000600290505b60096000819055505b905600a165627a7a723058204053003b9d81b6251c442a1935df91b0d96f0feaf74ad0ee5529de134f7b72900029
test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol":{"keccak256":"0x638aa67be5f6d0a01e86f08988d5bacea387145bf3216c6a37d64a227697c3ec","urls":["bzzr://b80bcd04ebeeaa48be7cedc1ae332998c9846e2621c7e645705ded495f3c2b1d"]}},"version":1}
test_f9c4b423afa9b47cdfe95f357d6fb74e5f9d9112ba63fe905b177cf3377ab0be.sol: ERROR
 conv uint16 -> uint16
test_fa36310c8f110d204e319cf5e4cedf42ab1923010f06843c60930c07ec879a2d.sol: ERROR
test_fa6e250d66c3c318ac64ba4ddab6ff9e488dac7c85a0e746dc8876deffe28142.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol:C 6060604052341561000f57600080fd5b5b60f18061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b600081839060020a0292508290505b929150505600a165627a7a7230582079ade0f53aca751557fe39e05e361438ac502a9432c715007284ca2faa3e040b0029
test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol":{"keccak256":"0x3a947e171020a0f065d5e2900cef920b31cab3a58addf74a442025b5058d9169","urls":["bzzr://bf9589379a2ae14150eedba4542e354d3ee4bb32e49a4a089c06c0a61957da73"]}},"version":1}
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol:test 6060604052341561000f57600080fd5b5b6102d78061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e31859214610049578063a481e08c14610107575b600080fd5b341561005457600080fd5b6100776004808035906020019091908035600019169060200190919050506101c5565b6040516040810161008d816000840184876100c5565b905061009e816020840184866100a8565b90508093506100c0565b60008490506100b6826100e2565b8452949350505050565b6100dd565b60008490506100d3826100f1565b8452949350505050565b6100ec565b6000819050919050565b6100fb565b6000819050919050565b50505060405180910390f35b341561011257600080fd5b610135600480803590602001909190803560001916906020019091905050610227565b6040516040810161014b81600084018487610183565b905061015c81602084018486610166565b905080935061017e565b6000849050610174826101a0565b8452949350505050565b61019b565b6000849050610191826101af565b8452949350505050565b6101aa565b6000819050919050565b6101b9565b6000819050919050565b50505060405180910390f35b60008082604051808260001916600019168152602001915050604051809103902090506101f18361027f565b600283604051808260001916600019168152602001915050604051809103902060019004016001029050600791505b9250929050565b60008082604051808260001916600019168152602001915050604051809103902090506102538361027f565b8260405180826000191660001916815260200191505060405180910390209050600591505b9250929050565b806040518082600019166000191681526020019150506040518091039020600081600019169055505b505600a165627a7a723058209abd45471ef06cb4cb50c12f026aeff49f1bdbdbc00bbd5faa5bf4342cd86cce0029
test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"g","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"f","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol":{"keccak256":"0xa330cfd008276dabedee6d54b1de3b0725fb92a8fedf44f02e84e5de8e86b7a4","urls":["bzzr://adbf4ee90486b9ebe8a6df758ef06ced98246b6b062094403110ecc145c0f62a"]}},"version":1}
test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol:C 60606040523415600e57600080fd5b5b604b80601c6000396000f30060606040525b3415600f57600080fd5b601d5b60026000819055505b565b0000a165627a7a72305820bb297fdb2d6a0cbe44cdd649786b625ee3380b1d8f86e040beda4dffc7400b060029
test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol":{"keccak256":"0x114c878eda0416e8acea39062d9e09ff7954055fdf4b6c64c64c3941aa1a07ec","urls":["bzzr://b0c9a46f750aa726bd67a9d9dfcea20344372ab90387a209d042cc8462d0e046"]}},"version":1}
test_fa8faf7902e893064deb69745da6485a922561e17037ea14ced3a8d38e73f66d.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol:c 6060604052341561000f57600080fd5b5b61016a8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063561536c71461003e575b600080fd5b341561004957600080fd5b61006c600480803590602001909190803561ffff169060200190919050506100be565b604051602081016100828160008401848661008c565b90508092506100a4565b600084905061009a826100a9565b8452949350505050565b6100b3565b6000819050919050565b505060405180910390f35b600082826091604051808481526020018361ffff1661ffff167e010000000000000000000000000000000000000000000000000000000000000281526002018260ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019350505050604051809103902090505b929150505600a165627a7a7230582003b00aa331c60c35b1d15d7e83c598a2647bd0c16620601a377c4c2c8770a8c70029
test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint16"}],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol":"c"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol":{"keccak256":"0xa1e668887b09bc808b1c9fda187402c231548a7086f5289401e2fbb20a69225c","urls":["bzzr://d727fe47733b548e4867e9484236419e2ead7adae93bf488fca7173b87b17766"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol:test 6060604052341561000f57600080fd5b5b60d98061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff014603d575b600080fd5b3415604757600080fd5b604d6099565b60405160208101606181600084018486606a565b90508092506080565b60008490506076826084565b8452949350505050565b608e565b6000819050919050565b505060405180910390f35b60006a010000000000000000000090505b905600a165627a7a7230582079d1b0d6938846e5e4ed1a8f3791e0a75499653ef210dec3efdaeffa86e5a7060029
test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol":{"keccak256":"0xbb431c5a3b83419fd13af36f15721f05f83215a4f93a4584be9993fc72583447","urls":["bzzr://d5a04df3780ae3eab3f703772ba08e58cd13994f451f292f945ffb857e6f5693"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol:test 6060604052341561000f57600080fd5b5b61017c8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b3de648b14610049578063e2179b8e146100bc575b600080fd5b341561005457600080fd5b61006a6004808035906020019091905050610121565b604051602081016100808160008401848661008a565b90508092506100a2565b6000849050610098826100a7565b8452949350505050565b6100b1565b6000819050919050565b505060405180910390f35b34156100c757600080fd5b6100cf61012f565b604051602081016100e5816000840184866100ef565b9050809250610107565b60008490506100fd8261010c565b8452949350505050565b610116565b6000819050919050565b505060405180910390f35b60008160020290505b919050565b600061014e610121905061014760078263ffffffff16565b91505b5090565bfe00a165627a7a723058203ea4f134846f967b622e252d5867b491a77d3eb7c078f8b134cd1741b59efaa70029
test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol":{"keccak256":"0xe2c2c3eb762bdd0cfb3d662e61f6ce1baac80eba05a162da3e541bd01c5d7ead","urls":["bzzr://d1580b711bce73df4d4f406c856b291aee605e6c8aef4c42fc30b7e650df69cd"]}},"version":1}
test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820f08e12eb448e20680b4f40d4f95cf85823547d7253e2482fa0daf9635a51b0800029
test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol":{"keccak256":"0xb68b00335972d61569e9ba198ed9007e06241476214289dbc548efc058c2e349","urls":["bzzr://c1c2c761d5d486b14ccc2e8323bb4a63d91136d64e3c9555a754c3c03371186e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol:C 6060604052341561000f57600080fd5b5b6101478061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f8a8fd6d1461003e575b600080fd5b341561004957600080fd5b6100516100a3565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b610098565b6000819050919050565b505060405180910390f35b600060077f8000000000000000000000000000000000000000000000000000000000000000800860021415156100dc5760019050610118565b60077f8000000000000000000000000000000000000000000000000000000000000000800860021415156101135760029050610118565b600090505b905600a165627a7a72305820ffd4d74a19117fa352520ed453cd52b8aae63071e110a588728f4b1dca8759fc0029
test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol":{"keccak256":"0x1308d234ee0c0d7ae515e945cab47f05f21a422a5977045877c6d1f8ea0a16ad","urls":["bzzr://7725144fb016d0a5056cd22f4f66c4d1a6a68d4fd6727f27a033bd52d9753b76"]}},"version":1}
test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol:Foo 606060405260076001026000906000191690553415601c57600080fd5b5b603680602a6000396000f30060606040525b600080fd00a165627a7a723058205169fde6a6afd60a1c8f15264d8329e19b3a1d85ca1cd035f0a161b8794fb4a40029
test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol":"Foo"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol":{"keccak256":"0x5ade9f72caa39ccf90942c6d0f31c9ac303bff7cc20b6efc5c1eb7be914f5103","urls":["bzzr://d5bd69fdd8e583b65a869708aa4382843ee55b50c20e197d0998cbb7d32ec78c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol:test 6060604052341561000f57600080fd5b5b60e88061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313d1aa2e14603d575b600080fd5b3415604757600080fd5b6064600480803590602001909190803590602001909190505060b0565b604051602081016078816000840184866081565b90508092506097565b6000849050608d82609b565b8452949350505050565b60a5565b6000819050919050565b505060405180910390f35b60008190505b929150505600a165627a7a72305820bd0db37cf8fb6491b461d1667aba02b4c6d83f4ee9e630699425e64755157bd20029
test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol":{"keccak256":"0x45194a70cbfe2b4e8669f4dfdaa35b0e2246311f207c66d7ec567de18f055237","urls":["bzzr://954aa02286ac4bc6e29407888656d84beeb6468dd896034ff6ba87538f53e9d8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol:C 6060604052341561000f57600080fd5b5b6105258061001f6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634f8dd50d1461007b5780637f6b590c146100ee578063cd580ff314610161578063eb8ac921146101d4578063f0fdf83414610250578063f37cdc8e146102c3575b600080fd5b341561008657600080fd5b61009c6004808035906020019091905050610336565b604051602081016100b2816000840184866100bc565b90508092506100d4565b60008490506100ca826100d9565b8452949350505050565b6100e3565b6000819050919050565b505060405180910390f35b34156100f957600080fd5b61010f6004808035906020019091905050610344565b604051602081016101258160008401848661012f565b9050809250610147565b600084905061013d8261014c565b8452949350505050565b610156565b6000819050919050565b505060405180910390f35b341561016c57600080fd5b6101826004808035906020019091905050610352565b60405160208101610198816000840184866101a2565b90508092506101ba565b60008490506101b0826101bf565b8452949350505050565b6101c9565b6000819050919050565b505060405180910390f35b34156101df57600080fd5b6101fe6004808035906020019091908035906020019091905050610360565b604051602081016102148160008401848661021e565b9050809250610236565b600084905061022c8261023b565b8452949350505050565b610245565b6000819050919050565b505060405180910390f35b341561025b57600080fd5b61027160048080359060200190919050506104c9565b6040516020810161028781600084018486610291565b90508092506102a9565b600084905061029f826102ae565b8452949350505050565b6102b8565b6000819050919050565b505060405180910390f35b34156102ce57600080fd5b6102e460048080359060200190919050506104d7565b604051602081016102fa81600084018486610304565b905080925061031c565b600084905061031282610321565b8452949350505050565b61032b565b6000819050919050565b505060405180910390f35b60006003820190505b919050565b60006005820190505b919050565b60006002820190505b919050565b600061036a6104e5565b600a6040518059106103795750595b908082528060200260200182016040525b5090506104c981600081518110151561039f57fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff16815250506103528160018151811015156103d557fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff168152505061033681600281518110151561040b57fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff168152505061034481600381518110151561044157fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff16815250506104d781600481518110151561047757fe5b9060200190602002019067ffffffffffffffff16908167ffffffffffffffff16815250506104bf8482858151811015156104ad57fe5b9060200190602002015163ffffffff16565b91505b5092915050565b60006001820190505b919050565b60006008820190505b919050565b6020604051908101604052806000815250905600a165627a7a72305820a1b540be7a192379ada358237176b13ff29a8662bb9c98a0ce65546595558a680029
test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"c","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"d","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"i","type":"uint256"}],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"e","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol":{"keccak256":"0x8bd0b9ed679b800faee43b71f9a42d9b5fcb0314dc4e082919d3b5a6e6839f45","urls":["bzzr://986ca05426a4ef05ff46e7b4881123b76d6e1d56b19c0eceb6aeb1ff3681c5f7"]}},"version":1}
test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol:test 60606040523415600e57600080fd5b5b60026003811115601b57fe5b600081905550600380811115602c57fe5b600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b60368060636000396000f30060606040525b600080fd00a165627a7a72305820fe420876349614ccddc66ff7a51e30bff7a36a0380ecfec8d74a7f9bd43103e80029
test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol":{"keccak256":"0x3562cf9886aa8d1dd92e8f20bf3dc19c5a9cab93745afe6ebee384017a288c6b","urls":["bzzr://4785bec136c4e9721e7b44537704db7a6074560d0ff201398dbadf0a0b6cb140"]}},"version":1}
test_fc486cd829d4e77e1189052fedd226c227717735c1c71c49c7ab4d98e0fd58d4.sol: ERROR
test_fcc1614db08f5cb9d3cabe08c5dd544bff406d71f133e3eb089af47f2b37b4a0.sol: ERROR
test_fcc804381c9d07ecc445eb2edf4cce4029785b4d852c4632045320033dae44f0.sol: ERROR
test_fccc0ba1b76970e0b00a19cff04e8e7891596b9cd275b2cbe195205307c07b2c.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol:test 6060604052341561000f57600080fd5b5b6101db8061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326121ff01461003e575b600080fd5b341561004957600080fd5b6100516100a5565b6040516020810161006781600084018486610071565b9050809250610089565b600084905061007f8261008e565b8452949350505050565b61009a565b60008115159050919050565b505060405180910390f35b6000806000807f610000000000000000000000000000000000000000000000000000000000000092507f616100000000000000000000000000000000000000000000000000000000000091507f62000000000000000000000000000000000000000000000000000000000000009050817dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161080156101a65750807dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916105b93505b505050905600a165627a7a723058208bc02706e6cb14aa7544b074a3482d08fc76814466f3901c59c44741bcb3d5460029
test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol":"test"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol":{"keccak256":"0x5fd172af84ec6a0fc315d4707d056337f61b6daccf784a27a76502cb44020781","urls":["bzzr://5617bfa3e1e74bcddff81bb52d8cd2079cc94c47aae0bf04efcaa1d07663115a"]}},"version":1}
test_fd8a2cdaf57061acf281e59144b4162589a2f2fe769ae49f3c17c2b92aa8ce73.sol: ERROR
test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol:C 6060604052341561000f57600080fd5b5b60c48061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063baf7160914603d575b600080fd5b3415604757600080fd5b60926004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506094565b005b5b505600a165627a7a7230582018697e01c7e224d36badd08b89deecd5e00a8cd5f7c46b85c7dbeef57ef0e7900029
test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol":"C"},"libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol":{"keccak256":"0x80eaf1367b6a644d2f0be4eb8e9ce9b9dc0460034d18daa6390ff3e114362952","urls":["bzzr://181f6641b4b46f2b6c8b80118085a4e193f63e296ac2c422dc18d1c90ad32af9"]}},"version":1}
 conv uint256 -> uint256
test_fe9472a4282cb0bce91b95dc7abd114abc4c0f93ea6e77a0f3844df98d9eaa74.sol: ERROR
test_ff8b90917b4b02f8080d8b197a5d5d717ec22e2fa195c8c97d810d9336a40698.sol: ERROR
test_ffc3194b07f039a009aabeecf99fcd143aacbe257123fa9ed858afe8124ec480.sol: ERROR
test_0024bebcac0ade3b83dd1930ae67631a8b812c333bf2b4977fc9e6785cfd1257.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a7230582006c263a5ba179b954a6ae474f1e0801a63080916205cefc3c7b22ecd3cf574bb0029
test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0030d9bdfa27929e2d13d6242e6d054772997ca61deeb8bbb8d38221eb01043f.sol":{"keccak256":"0x3d4f259d391e13149aa0248f9c5a40d5ab7404995ed14dbcff709e68e14ff1ab","urls":["bzzr://625d9a94c8c8ea269ee82cea2758e23b4a4b3bb1eb2adda678af59c0321e11a7"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol:c 6060604052341561000f57600080fd5b5b6101f48061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b8e010de8114610048578063be1c766b146100a1575b600080fd5b341561005357600080fd5b61005b6100f8565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100b461010e565b6040516020810161006e818380866100d1565b905080925061008c565b83610082826100ea565b8452949350505050565b610096565b90565b505060405180910390f35b6000610105818036610128565b50600190505b90565b600054600260001961010060018416150201909116045b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101695782800160ff19823516178555610196565b82800160010185558215610196579182015b8281111561019657823582559160200191906001019061017b565b5b506101a39291506101a7565b5090565b6100ea91905b808211156101a357600081556001016101ad565b5090565b905600a165627a7a72305820d1dd819a667d2125ad8e1dd3be3c0e732ac043bac7ca2a5f9ee636459767a8e50029
test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0051d04353d8f28ec61f484693cdc22ea03edae60c9b8da3e4195d8c932f1805.sol":{"keccak256":"0x82d5035630d9252f433bdcb44047f1312008fe287c5d789f97abb9595edf9237","urls":["bzzr://58ba6640a3cfd13b3c1e60c32e5d63ba1ee7c48bb0c56e3f54d9cd92fab60d62"]}},"version":1}
 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol:C 6060604052341561000f57600080fd5b5b6101dc8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663db06ccd18114610053578063df9f5ccb146100c0578063f73d79ee146100c0575b600080fd5b341561005e57600080fd5b61006661019a565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100b5565b60006002821080156100ad576100af565bfe5b50919050565b505060405180910390f35b34156100cb57600080fd5b6100666101a0565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100b5565b60006002821080156100ad576100af565bfe5b50919050565b505060405180910390f35b34156100cb57600080fd5b6100666101a0565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100b5565b60006002821080156100ad576100af565bfe5b50919050565b505060405180910390f35b60055b90565b6005805b5090565b6005805b50905600a165627a7a72305820871773f505b8927d0bb83329d722ebccd17256adfde309330ab78270406646eb0029
test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_inline_assignment","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_return","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_assignment","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_00725f97c5e75d8925eb969550940d1c4ab8ac163d181ceb5630f462bed685a2.sol":{"keccak256":"0xebf7fbdb87b4443d5ea2d92b0b20c0dd06e2379f60ba1dcaf12d025101348cf6","urls":["bzzr://d137ef3549dbcae1f24c4572ec6db461fd7efe252fbd6816f99fd48a68cac670"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol:C 6060604052341561000f57600080fd5b5b6101018061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600080366040517f6162630000000000000000000000000000000000000000000000000000000000815260038101838380828437820191505092505050604051809103902090505b905600a165627a7a7230582055e1823f29a55115930f7a2d4c48ccec9eb987297f24588b4316d57957a344ca0029
test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_01494bb0a63373c1c804dabd5bb70ab10dc1f12d10ed0a2e5289a92e6cb93349.sol":{"keccak256":"0x1425581dac1fb24699251a7767e79831ecfdb7523bf3b87e18dbcc02ac300a3f","urls":["bzzr://cafb41f8cd2b26b967befd785a0be04548a56488a9370f6fd99a317968e0fee1"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol:A 6060604052341561000f57600080fd5b5b60ee8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60003073ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f1925050505b905600a165627a7a72305820291e3792eca4a386364245a4db45074034d0eedcd2c5d74100d5ee902a0b58570029
test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_01af4de8eeafe93fc5911eb60668184651d56fa9db4c178f6169dc2b9afd4b15.sol":{"keccak256":"0x1eb154e5534479391c30fe3d9143881a6d1a831bb3a1cf2e9695a00b7443b5de","urls":["bzzr://c02eb1aadf11d4596b3d31b940eb454ac942ee3d1ec268b575787b58d29baba1"]}},"version":1}
test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a723058201dea2fbde6e6ef81b8d5688eb41957b0773f0d815349376ce619b477c9b1ac5e0029
test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_01ce7ca2d232f1dca89e317152201b2eb34c70b8311dfc60e5befd90ce8cfd59.sol":{"keccak256":"0x982b2317f86535a860bcc8bf1a34d7cc76340c369e291fb98a1c5f5c8aadf923","urls":["bzzr://f6bd6627916b3e88473b47a0a739169ce009949d2e6abf15bef588f3b85e5d07"]}},"version":1}
test_01ddfdfc116b508df3a4da41929cddb51fbe1ef6b31a107cb7b9999e14d36e77.sol: ERROR
test_01e8b60d910ab1cb9aa17cbaec20e09abf847959ab3e567d629d0e3674565a76.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol:C 6060604052341561000f57600080fd5b5b6102e18061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e811461003d575b600080fd5b341561004857600080fd5b61005660043560243561009a565b6040516020810161006981838086610073565b9050809250610087565b8361007d8261008c565b8452949350505050565b61008f565b90565b505060405180910390f35b60006100a4610291565b600080856001016040518059106100b85750595b9080825280602002602001820160405280156100ee57816020015b6100db610291565b8152602001906001900390816100d35790505b509250600191505b858211610257578160405180591061010b5750595b908082528060200260200182016040525b5083838151811061012957fe5b60209081029091010152600183838151811061014157fe5b90602001906020020151600185858151811061015957fe5b9060200190602002015151038151811061016f57fe5b9060200190602002018181525083838151811061018857fe5b9060200190602002015160008151811061019e57fe5b602090810290910101525060015b6001820381101561024b578260018303815181106101c657fe5b9060200190602002015181815181106101db57fe5b906020019060200201518360018403815181106101f457fe5b90602001906020020151600183038151811061020c57fe5b906020019060200201510183838151811061022357fe5b90602001906020020151828151811061023857fe5b602090810290910101525b6001016101ac565b5b6001909101906100f6565b82868151811061026357fe5b90602001906020020151600186038151811061027b57fe5b9060200190602002015193505b50505092915050565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820a4a6904f5f10e91b01037d128cbaf320148cc4779e20a3ad803776b2e1fb5d790029
test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_01ec09e8b09fc6a51804546dae4355775c2d590c9aafef4e7d5db76e528ab20d.sol":{"keccak256":"0x701a26d491bcb85a3f93e0dc4edf129f1261df17544e0f5bece1e6ea7b0339d4","urls":["bzzr://a3dc9663391832a77f2dcd34ac7918eb877c0cbcb230b51f76607416a3a0a098"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol:test 6060604052341561000f57600080fd5b5b600080805260205260027fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5555b5b60e88061004c6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166362e1c91b8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb58190555b905600a165627a7a723058204d1a9b517b423c7c307e827aa9edf3c36e950de9e0a04790a210e78461ae485c0029
test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deleteIt","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0222eda580148dc42a8324753b03670c7f584515467f1e333b8be3066609b6a1.sol":{"keccak256":"0xae059cb17cc60f20165a5b1f513b7943ac5ef07f4fd283bfb6c842655a92e15e","urls":["bzzr://56b6980955a330bf9982f9cebd7784225efa08371faa9df9836425e362a4c964"]}},"version":1}
test_0235a434a95888bffad23e224a86ba220fe2979d094c8215f0377f0653a2c610.sol: ERROR
test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol:TestIt 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e6f711c9c79735eaff5d5a23c31beefcdf3d11bb407136385e04b1261dfedaf90029
test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol:TestIt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"A","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol":"TestIt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0268a300fdcd25a2eeb784a89d033cb9bb370dc6f85f334e63130332cf36abdf.sol":{"keccak256":"0x6a54aa58c1c3b8473aadd0c0abb03a39c7e73a4335270a2e7d6f7f0052fe7fcd","urls":["bzzr://cd0162c136ecc1e642b04d5b6dbbea950b3533d56b79512763b39a4c3ae99938"]}},"version":1}
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 3 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_3_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:D 606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f712538713658127165283173651283712658317158371235812600000000000081525060009080516100c09291602001906101a7565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805161017d9291602001906101a7565b50341561018957600080fd5b60405160208061028b833981016040528080519150505b5b50610247565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101e857805160ff1916838001178555610215565b82800160010185558215610215579182015b828111156102155782518255916020019190600101906101fa565b5b50610222929150610226565b5090565b61024491905b80821115610222576000815560010161022c565b5090565b90565b6036806102556000396000f30060606040525b600080fd00a165627a7a723058208f61ba0424277f7f118e46214a92fe630d58b68d4497ff2854306a2ea00e66ec0029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Double 6060604052341561000f57600080fd5b5b61041d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063e2179b8e1461005d575b600080fd5b341561005357600080fd5b61005b610072565b005b341561006857600080fd5b61005b6100e4565b005b600261007c610156565b6020810161008c81838086610096565b90508092506100aa565b836100a0826100b7565b8452949350505050565b6100b2565b90565b6100c8565b60006100c2826100af565b92915050565b5050604051809103906000f08015156100e057600080fd5b505b565b600361007c610156565b6020810161008c81838086610096565b90508092506100aa565b836100a0826100b7565b8452949350505050565b6100b2565b90565b6100c8565b60006100c2826100af565b92915050565b5050604051809103906000f08015156100e057600080fd5b505b565b60405161028b80610167833901905600606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f712538713658127165283173651283712658317158371235812600000000000081525060009080516100c09291602001906101a7565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805161017d9291602001906101a7565b50341561018957600080fd5b60405160208061028b833981016040528080519150505b5b50610247565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101e857805160ff1916838001178555610215565b82800160010185558215610215579182015b828111156102155782518255916020019190600101906101fa565b5b50610222929150610226565b5090565b61024491905b80821115610222576000815560010161022c565b5090565b90565b6036806102556000396000f30060606040525b600080fd00a165627a7a723058208f61ba0424277f7f118e46214a92fe630d58b68d4497ff2854306a2ea00e66ec0029a165627a7a72305820ac2ee2d3e5efeba575a1f1ac4bc92e520208ecd1d29ef9d9f8934a7f43ae08320029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Double {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"Double"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Single 6060604052341561000f57600080fd5b5b61038b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b600261005c6100c4565b6020810161006c81838086610076565b905080925061008a565b8361008082610097565b8452949350505050565b610092565b90565b6100a8565b60006100a28261008f565b92915050565b5050604051809103906000f08015156100c057600080fd5b505b565b60405161028b806100d5833901905600606060405260a060405190810160405280607a81526020017f123765123712538713658127165283173651283712658317158371235812612381526020017f765123712538713658127165283173651283712658317158371235812612376581526020017f123712538713658127165283173651283712658317158371235812612376512381526020017f712538713658127165283173651283712658317158371235812600000000000081525060009080516100c09291602001906101a7565b5060a060405190810160405280607a81526020017f123765123712532713658127125283173651283712658317138371235812612381526020017f765125712538713658127165253173651283712658357158371235812612376581526020017f12371a5387136581271652a317365128371265a317158371235812612a76512381526020017f712538a13658127165a83173651283712a58317158371235a126000000000000815250600190805161017d9291602001906101a7565b50341561018957600080fd5b60405160208061028b833981016040528080519150505b5b50610247565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101e857805160ff1916838001178555610215565b82800160010185558215610215579182015b828111156102155782518255916020019190600101906101fa565b5b50610222929150610226565b5090565b61024491905b80821115610222576000815560010161022c565b5090565b90565b6036806102556000396000f30060606040525b600080fd00a165627a7a723058208f61ba0424277f7f118e46214a92fe630d58b68d4497ff2854306a2ea00e66ec0029a165627a7a72305820c4003b818d6b2776a74a18a71de17679bfda98eaadc77e65c77e804246aa626e0029
test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol:Single {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":"Single"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_02ef49f4340d2c5e2202aaa8187288e335e3ee6723e4a2aafd84884fcdecf9f3.sol":{"keccak256":"0x5a180a9caa1ade09cb31f49a495c957b25551a49ea6473d7af7d4a4c1ac3d0c0","urls":["bzzr://8d4796a9ccb2520268c8a26f13cd55489f67ecd39745f7a0e37b6b5c718bb5e7"]}},"version":1}
test_03733faccd09b5d3028e1725f45a67b771a0f98b4e3e12b0532357472c34a62b.sol: ERROR
test_037c4e08e599bae04d1398cd6835c91a3fab20e98b81c8f9c79e03e48d96bf02.sol: ERROR
test_03a7374f038285fc39cceb59803d0d9f02e71c60374020b8e43c22d0bc0f6387.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a72305820b0152015228c5bb5b45e1de4527a6bda28753b4bd134995dcc0c9e4ca2a6ea060029
test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_042af4cdcc4df53aaa95b79581ea2f70d0897d9d4e9a1a79c87dbfd30323b3ee.sol":{"keccak256":"0x19e1f8921f7d1041f24fc977cf3ccaacb095857d2452f23beadc166f47863a48","urls":["bzzr://8a1ce40b63539126513c8e567dd3c592b05d779bfad2252c12d84dfcbeca053f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol:C 6060604052341561000f57600080fd5b5b60db8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000600a815b818160ff16101560a9576001830192505b5b6001016090565b5b5050905600a165627a7a7230582085f63054948096b1f6826ebc6ce26d851bd46ee463398cbe525e01b30f8be6290029
test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_042bd0eeb081bcaaab75461a06eadc9090893b51edaee7ed3b6217ea63157a19.sol":{"keccak256":"0xdc442aa505edacdcbc6f53b970ef1841912199502764ea14e1df91183cb0bfb3","urls":["bzzr://78839fc56b2ec6e9a33b494ebd9384560b0f1ce52aed49e1855972f8fb9bcfba"]}},"version":1}
test_0473dc2380acfd1b51138e1f0d7b1f509499b5cbabc31191ca3c0e14779dad1d.sol: ERROR
test_0526b1a83a795c83e92d8f5b7122234927fd8c57d97ca63ae8f21fad9129ef18.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a723058204a0b980de737b424ae31e49af002231aecec466f30f5a48a07a18aa9394a3c860029
test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication and cookies with nutella"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_052ecd95c66a6a15ac0bfbb2d8c28ed00d79946e8e5a09a2d4410daef5598cc0.sol":{"keccak256":"0xcbe803dc1327229ae6d686a36e4ba651cf354266d16a43e3d0849c8f9c4ed94c","urls":["bzzr://caecdbf0105a8fbf81ef1956f3daaeae96fb283b435cf6f14a0683877a559728"]}},"version":1}
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C1 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582012743ba286f8360ec51cfac40965f96d06e12fd47673f407159947a96c41aed50029
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":"C1"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":{"keccak256":"0x0fba92368e04d0b645bf82c46c3893531cbcbca766fab9b6f664b9fcf7c14124","urls":["bzzr://20d2023dce18a7e418649833d0c7ddcb14f7af30d7cb56a987b80cf22817a6e6"]}},"version":1}
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C2 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058200a4f4c05919f52031c10324843d058980089389dc3d10517cdbb7c3993a8cb500029
test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol:C2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":"C2"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0559eac8db0b0bddcba87e286c6f58c7d5240aa40ad1133241f7ae6f70177d23.sol":{"keccak256":"0x0fba92368e04d0b645bf82c46c3893531cbcbca766fab9b6f664b9fcf7c14124","urls":["bzzr://20d2023dce18a7e418649833d0c7ddcb14f7af30d7cb56a987b80cf22817a6e6"]}},"version":1}
test_056102b11846b4c70dd13ade063e4f3f48a980438654dcf57c0ff179fe565554.sol: ERROR
test_05c752251953565240eb015d5f79ef585b2f7684984285438ea93bfaa1b26c09.sol: ERROR
test_05defa08672337109fc1959c372b755fc5e540ef12960bb1c719010719a5809f.sol: ERROR
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol:test 60606040526000805460ff1916607f179055341561001c57600080fd5b5b60c28061002b6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b582ec5f8114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60000b90565b505060405180910390f35b60008054900b815600a165627a7a7230582079d5512895d45498c331e17090dc295d712172575ef587e065ac454653a0ba5f0029
test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"j","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_06a4e1952e80a2b9c7fb2b388b44d182849d77bc025e740261808d96ec83cf4b.sol":{"keccak256":"0xc1fd1825bcf617885c7d8e4acdc6b28618ece94aefe728fdc0290e60897b1103","urls":["bzzr://c6c9bbc2bec354562cfd35fe21f41b4e17461b51c603b6ed1349589485b15bf9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:C 6060604052341561000f57600080fd5b5b6101888061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b600073__test_06bdc56c19e023d03ff89762979800e__63eee972068383604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815260048101906024016100fb81838086610070565b9050809250610119565b8361007a82610089565b8452949350505050565b610121565b90565b505060206040518083038186803b151561013a57600080fd5b6102c65a03f4151561014b57600080fd5b50505060405180519150505b9190505600a165627a7a723058202253ef88314b45eba05c579b5c66a78320e8c45382399b72c0858755f4589aad0029
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":{"keccak256":"0xed6f0e35df2c9413a85dbf315ffa23fd614ee7add2205ca1d1e42091d061f606","urls":["bzzr://e1638fb278427777ab8e349f3a3a819d99e6ef56c1eb82731978037be512782f"]}},"version":1}
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:D 6060604052341561000f57600080fd5b5b60b98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663eee972068114603c575b600080fd5b60456004356083565b60405160208101605681838086605f565b90508092506071565b836067826075565b8452949350505050565b6078565b90565b505060405180910390f35b600281025b9190505600a165627a7a72305820893e1df88e6153d56c3b0f4452a5f4c54a0f0b62b2a9908b052b0eb080210a310029
test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"self","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_06bdc56c19e023d03ff89762979800ef24c770577d9138159f8b62b30650da2b.sol":{"keccak256":"0xed6f0e35df2c9413a85dbf315ffa23fd614ee7add2205ca1d1e42091d061f606","urls":["bzzr://e1638fb278427777ab8e349f3a3a819d99e6ef56c1eb82731978037be512782f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol:C 6060604052341561000f57600080fd5b5b60db8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515608f565b60405160208101606281838086606b565b9050809250607d565b836073826081565b8452949350505050565b6084565b90565b505060405180910390f35b600060016002838015609f5760a4565b600393505b5b5b505b50509190505600a165627a7a72305820a22b4d74329e6cab9a09a5d02631387ad99e17f5e0ff08c5a735a69699ad1b580029
test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_06dcde6e9b33e29b27b50fe3c3ca6099052eae5fdac7c43c1a44f0b24e371c55.sol":{"keccak256":"0xb91ea75ac470d3c396d7612cde55db4e047ceac69d017a11104dc764474e48ab","urls":["bzzr://4dde3af5f4e1e2be96377638fdcacbd729ebaa20ddddd017ed64dd67cb170df7"]}},"version":1}
test_06df34e71ed4c75a5e147ca09afeffa08da1ac86fc7805c6471acd6a05bb5990.sol: ERROR
test_06f0d525ffbacabc5fcd618a51102e3bd66b0ed52864fdd1832e22da80bf9b52.sol: ERROR
test_071f9fac32f65fa57bb364e124c7b05aeb485bc5670e90355eb10bcb828dd36d.sol: ERROR
test_07503b82a2da5dcfb642a9289a30899a410fb5391dd6c7219cac3fc926c1a8e9.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol:C 60606040526141ff19600055341561001657600080fd5b5b60bc806100256000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a723058203297f1a1861c55e890e5860e8b68e31e9f1bf18f3f0751420270cd345dc2f91a0029
test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_076b70cc05d3822f3c08f5465b58cb18ee7af2dd48e273ac0895cd5e405cc1ba.sol":{"keccak256":"0x72fccf20a4fbdb07fca76707ac2750a2c7927909e117b92e43c483ac8de36e42","urls":["bzzr://28b8ea28781ff0c65fe0af80c96643cb417f45c2781cf40e2e2e541ee0b35241"]}},"version":1}
test_079a49c6bee1a49fbc498dcae1e2fb0139cbd1e4e825197b7db549877a85e3c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60425b905600a165627a7a723058208518f51ba1b1dd792057a463b5e0fca132152d6ca738e9d79ffe08685adeaa500029
test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_07aa7fb23b35a432dd86263ca66c9cbabc53199b75b8a0f6fe4518c8917f219b.sol":{"keccak256":"0x325cf02a933153f79e2ddd1bd1cc7c7db2b79ebbc6679028aa4a4325fefce6a1","urls":["bzzr://98bede049a601064027d6ceab0af254bf323bf3bf098543291b7cafacee4f636"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Base 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309dc6fd98114603c575b600080fd5b3415604657600080fd5b604f600435607f565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b805b9190505600a165627a7a72305820cfc2b8b44ae0b26b473417bf74a62804fde44c42b63e75f15fc524a9bac79f780029
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"p","type":"uint256"}],"name":"baseFunction","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgBase","type":"bytes32"}],"name":"baseEvent","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":{"keccak256":"0x94cd4ef19f046a8f2c7ecd3f1bf8608950eb8c1043770e05b6e2091b98bf5c9b","urls":["bzzr://035be3b36b5c31efdf783cc44d613cdbd7f470d4c3f2a36046183895bb101365"]}},"version":1}
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Derived 6060604052341561000f57600080fd5b5b6101228061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309dc6fd98114604657806369ac2192146046575b600080fd5b3415605057600080fd5b60596004356089565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b3415605057600080fd5b60596004356089565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b805b919050565b805b9190505600a165627a7a723058204690967a21317b797ec9bed117575672bc15dafff55890daf5312f4c66ca17af0029
test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"p","type":"uint256"}],"name":"baseFunction","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"p","type":"bytes32"}],"name":"derivedFunction","outputs":[{"name":"i","type":"bytes32"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgDerived","type":"uint256"}],"name":"derivedEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"evtArgBase","type":"bytes32"}],"name":"baseEvent","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_07b146f980b30a32d941eaa92e92914cba63553321dfe233d4668df14dac9c02.sol":{"keccak256":"0x94cd4ef19f046a8f2c7ecd3f1bf8608950eb8c1043770e05b6e2091b98bf5c9b","urls":["bzzr://035be3b36b5c31efdf783cc44d613cdbd7f470d4c3f2a36046183895bb101365"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol:c 6060604052341561000f57600080fd5b5b6102f28061001f6000396000f300606060405236156100755763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630178fe3f811461007a5780630d18e43c146100e65780632909f63814610140578063800bd5c81461015e578063b55e49c0146101c7578063cc959c73146101df575b600080fd5b341561008557600080fd5b6100906004356101fa565b604051604081016100a3818380876100be565b90506100b4816020840184866100be565b90508093506100d2565b836100c8826100d7565b8452949350505050565b6100da565b90565b50505060405180910390f35b34156100f157600080fd5b6100fc600435610237565b6040516020810161010f818380866100be565b905080925061012d565b836100c8826100d7565b8452949350505050565b610135565b90565b505060405180910390f35b341561014b57600080fd5b61015c600435602435604435610256565b005b341561016957600080fd5b61009061028f565b604051604081016100a3818380876100be565b90506100b4816020840184866100be565b90508093506100d2565b836100c8826100d7565b8452949350505050565b6100da565b90565b50505060405180910390f35b34156101d257600080fd5b61015c60043561029a565b005b34156101ea57600080fd5b61015c6004356024356102ab565b005b6000808083610400811061020a57fe5b6002020160005b50549150600083610400811061022357fe5b6002020160005b506001015490505b915091565b600061080082610403811061024857fe5b0160005b505490505b919050565b81600084610400811061026557fe5b6002020160005b505580600084610400811061027d57fe5b6002020160005b50600101555b505050565b6104006104035b9091565b8061080060025b0160005b50555b50565b806108008361040381106102bb57fe5b0160005b50555b50505600a165627a7a7230582089f752047dda5917bd6ee623440f45c4952e03e2218bfb9abaaa517133abbbfc0029
test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getID","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLengths","outputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"setIDStatic","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"id","type":"uint256"}],"name":"setID","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_07ba3bfe17c7a6f33b7f2499686cabbeca064c7bfc7db8403ed5dd9dc66a77bc.sol":{"keccak256":"0x5e565b87ee11cc29674d78623d07870be16fd2cddac4573eafc1b93c9be9ca74","urls":["bzzr://45ca55089149b498eaf2cb440285e5c1d34f8aa9a31d6b1507a2bc0caf91fed5"]}},"version":1}
test_094d355cb79ddb9e256f6dd6e29f7db5f51f84bff7badcb5c8198d5ea6c425fe.sol: ERROR
test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol:test 60606040523415600e57600080fd5b5b609f8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b7f61626300000000000000000000000000000000000000000000000000000000005b505600a165627a7a72305820122ed4f0bc8e59fbb3d6fe3bb41d0bcecc57225e3e3480ee9eff839d250926ca0029
test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0a04a77478166a3c5d9323b5ad1cd8ebac6973bcc48cc86cb8bac3a1c75e4ac7.sol":{"keccak256":"0x970e3339831f5c96adec97b82c20cf3b106b1d538daad01811181274a9b79d04","urls":["bzzr://519255e70686e93646b16b73f96ca3fb1e26d618975578aadcaff12ea709b23e"]}},"version":1}
test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol:C 6060604052341561000f57600080fd5b5b6101138061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d6cd497481146050578063e2179b8e146089578063e98a565414609b575b600080fd5b3415605a57600080fd5b60876c010000000000000000000000006004359081049068010000000000000000900463ffffffff1660b8565b005b3415609357600080fd5b608760bd565b005b341560a557600080fd5b6087600480356024810191013560b8565b005b5b5050565b60df3073ffffffffffffffffffffffffffffffffffffffff1663e98a565460b8565b5b565b5b50505600a165627a7a7230582005ac35949042623c3dec23d0b07610423103a6f28eea94cb63ed07ecb899217c0029
test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"function"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"callback","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0a08b3216849fb12e82f64e8107020a3ee5b8ae40c8c5c40aa8a9927d945eb4a.sol":{"keccak256":"0xa099f7ddd2b40c7543db0a45a96ba6cef975953bcc69ecfb3ffee368a237d2a7","urls":["bzzr://61a7388a3ee156e3235c76c3aac5ee760dc30701e44f10fa88266a9633fec727"]}},"version":1}
test_0a527453321528b5056d298822ab3bdf305dcc8e2278f01aa0eeeda7f4713c8a.sol: ERROR
test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol:test 6060604052341561000f57600080fd5b5b60d58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60126000604051602001526040517f6162630000000000000000000000000000000000000000000000000000000000815260209081019060405180830381856102c65a03f41515609d57600080fd5b5050604051805150505b5600a165627a7a7230582051d600f17cd1a739fc70a852b31edf9b5b2e94ed18ccfa55ea34435aad93e38d0029
test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0aa76c46b36842e2443e180a18a6c775538ae258d60b10a9836743f585877f0c.sol":{"keccak256":"0xd2a118aada6ae66b921d86e7c173244fe581391ee1ecaab38a3ca1cb57522385","urls":["bzzr://2056ebac6d8d177b4084f6fd4746c428d0a6360e36274d10051f54e827f564f8"]}},"version":1}
test_0abdb269175725d6a6cc01694edbfb351bf7eb5ae74a3c797ef0b58c82d17bcb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol:C 6060604052341561000f57600080fd5b5b60e78061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d7da973a8114603c575b600080fd5b3415604657600080fd5b604f60043560ad565b604051606081016060818380886087565b9050606f816020840184876087565b9050607e816040840184866087565b90508094506099565b83608f82609d565b8452949350505050565b60a0565b90565b5050505060405180910390f35b6020601060085b91939092505600a165627a7a7230582067ce5ea6d6ed14523ed4f0ac09e305c4a011aa0c6c3de1c81a3b4a6e6db563450029
test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0acf2bb41286706e17b7a298034ae03100e5e1f6e07e18c48db89e9a0661bfaa.sol":{"keccak256":"0x747e5d02563c1c73698a51d310c31e47e6b3becb87280d41509293f1ba1d5c56","urls":["bzzr://3c75ef6dbce68a1412099fc9843e6dc6600a55878eaf65db686ca091d4e4b69e"]}},"version":1}
test_0ad18238087d8e555c3f6053366b61e4463efe37cb96fda6b0dd9e171c45298c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol:C 6060604052341561000f57600080fd5b5b60d68061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ea703418114603c575b600080fd5b3415604657600080fd5b605860ff600435811690602435166096565b604051602081016069818380866072565b90508092506084565b83607a826088565b8452949350505050565b608b565b90565b505060405180910390f35b60ff80821660020a83821602165b929150505600a165627a7a72305820a55568a3f91207daa2afd4047c9029c28ec23c77c04dc465546f8d5b7b0c4f400029
test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0aeeddec63e42893ca32850610c86736eeeda76fd853622fa642553a2ca369d3.sol":{"keccak256":"0xeb1bea90211455182dc2b0235abff78d70af22bde66014eb4fd4dbbc6fc479e4","urls":["bzzr://f299fc57689f4ac154b27fa5b786e1747aceeefc07ae349208e699ad4602ece7"]}},"version":1}
test_0b00e78d076181e856f8050aeba649b1c642d0bfab9feea10d9322e925457882.sol: ERROR
 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol:C 6060604052341561000f57600080fd5b5b6101ae8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663bb0d9b688114610048578063f1370373146100c6575b600080fd5b341561005357600080fd5b6100736bffffffffffffffffffffffff196004351660ff60243516610144565b6040516020810161008681838086610090565b90508092506100a4565b8361009a826100a9565b8452949350505050565b6100bb565b6bffffffffffffffffffffffff191690565b505060405180910390f35b34156100d157600080fd5b6100736bffffffffffffffffffffffff196004351660ff60243516610163565b6040516020810161008681838086610090565b90508092506100a4565b8361009a826100a9565b8452949350505050565b6100bb565b6bffffffffffffffffffffffff191690565b505060405180910390f35b60ff811660020a6bffffffffffffffffffffffff198316045b92915050565b60ff811660020a6bffffffffffffffffffffffff198316025b929150505600a165627a7a7230582046122ab0b7ff9c15299abb4b13e46529b36932cdb503aaa988be116e91b25cf20029
test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes20"},{"name":"y","type":"uint8"}],"name":"right","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"bytes20"},{"name":"y","type":"uint8"}],"name":"left","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0b2c4139a57ab17fa9e90e5ab37e464867b8771c8d6e0e8d1ae18423657c3342.sol":{"keccak256":"0xb5aefe600cc8e446d64a58efae871db8a9a0042e60c6c79589d6f8292d6a0d97","urls":["bzzr://259141a1e62d33b3cc7ed3b11421d1974b6e9bb58bf3086c0320c0c29044c70f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol:C 6060604052341561000f57600080fd5b5b610027600264010000000061017761003082021704565b6000555b61003a565b600281025b919050565b6101ad806100496000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166355a17aba8114610053578063bb806dc9146100ad578063eee9720614610104575b600080fd5b341561005e57600080fd5b61006960043561015e565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b34156100b857600080fd5b610069610171565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b341561010f57600080fd5b610069600435610177565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b600061016982610177565b90505b919050565b60005481565b600281025b9190505600a165627a7a723058202e5885d5a3c7679fbab7dc34f3ee2ac3b43429e8f4884067c51cfac3b9ecec8a0029
test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"runtime","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"initial","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0b8ecded891dfc947c1ea0911f681e6d4a377dbe12e41df18254c3e8004a35d6.sol":{"keccak256":"0x49ef0112abdd7df2982be6218c18d728fd7a73abdf77b61ae8b3e5551765b91d","urls":["bzzr://49812ba7972f63ed2274304fa3f51c3bced86b2ea222c10dd4ed414e36ce30ee"]}},"version":1}
test_0b9bc99b4e94c0da80943365912b2c8d05e3e3efea20056e1196f7796cca067b.sol: ERROR
test_0babb7a0c014106447c92f0d962399f9a2347690dba15a8e948fd28adff42379.sol: ERROR
test_0be7c9a49d1877a456855ef1e414aa1833397786d4022c351aced5c83ac97d68.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:BinarySearch 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820368f75a2288b35cea82d116e2dc90515ff5c19e7f5d5d82a516306be2a87a6d60029
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:BinarySearch {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":"BinarySearch"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":{"keccak256":"0x27748f0cab398926c796f8d85ee309e8ef949fe0dd7d048aa450c9fdd070959d","urls":["bzzr://74fd28829bff1134d3c678b0fc49ffb198cf010bb2cffb81c614dcd36b338d9c"]}},"version":1}
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:Store 6060604052341561000f57600080fd5b5b6102608061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631003e2d281146100485780633e530e5b14610060575b600080fd5b341561005357600080fd5b61005e6004356100ba565b005b341561006b57600080fd5b6100766004356100f6565b6040516020810161008981838086610093565b90508092506100a7565b8361009d826100ac565b8452949350505050565b6100af565b90565b505060405180910390f35b60008054906100cc90600183016101e9565b506000805482919060001981019081106100e257fe5b906000526020600020900160005b50555b50565b600061010360008361010b565b90505b919050565b600061011e836000858054905085610127565b90505b92915050565b600080808415806101605750846001148015610160575083878781548110151561014d57fe5b906000526020600020900160005b505414155b5b156101705760001992506101dd565b6002855b0491508682870181548110151561018757fe5b906000526020600020900160005b50549050808410156101b4576101ad87878487610127565b92506101dd565b808411156101d7576101ad878388016001016001850387610127565b92506101dd565b81860192505b5b5b5050949350505050565b81548183558181151161020d5760008381526020902061020d918101908301610213565b5b505050565b6100ac91905b8082111561022d5760008155600101610219565b5090565b905600a165627a7a72305820d356b1bd7fa85a5e8e42c8b91bafa424f8da0aa125c90e1d5fef57c6e45c11550029
test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol:Store {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"v","type":"uint256"}],"name":"add","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"v","type":"uint256"}],"name":"find","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":"Store"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0c29b8f4050fd081fa917a84521a9131a773eb4998fab1a67309674a4f86fbcd.sol":{"keccak256":"0x27748f0cab398926c796f8d85ee309e8ef949fe0dd7d048aa450c9fdd070959d","urls":["bzzr://74fd28829bff1134d3c678b0fc49ffb198cf010bb2cffb81c614dcd36b338d9c"]}},"version":1}
test_0c8f71dd3c077db7cddd888020aabe43efe0fd4a050a424d8af994ec299a2a14.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Main 60606040525b5b5b610180806100166000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166386b714e2811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b6000806100a16100f0565b604051809103906000f08015156100b757600080fd5b905073ffffffffffffffffffffffffffffffffffffffff81166108fc6000604051600060405180830381858888f19550505050505b5090565b60405160558061010083390190560060606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a7230582024842266392cdd4c1eebe64fe5304a1f1b8ab284acad4ab1c5d4b16112f707e60029a165627a7a723058209aa81787208c74911584d67edee934905f7408de9f2b8015f67da730cfe27c740029
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"s","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":"Main"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":{"keccak256":"0x081f1852c9922eca5a0b6a428a8b94040c9f9626aa416bdd610b7b446370c48c","urls":["bzzr://9173e983888da45e64281e6a8804185c0795faf2d8b017fd222a10d2d4ac3ac9"]}},"version":1}
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Receiver 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a7230582024842266392cdd4c1eebe64fe5304a1f1b8ab284acad4ab1c5d4b16112f707e60029
test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0cca4c7df8d1244f3aaaef1e2d1249f55b91a012e9256f48cb050f95e3a034f0.sol":{"keccak256":"0x081f1852c9922eca5a0b6a428a8b94040c9f9626aa416bdd610b7b446370c48c","urls":["bzzr://9173e983888da45e64281e6a8804185c0795faf2d8b017fd222a10d2d4ac3ac9"]}},"version":1}
test_0cea2a40862c7caa426b995644ab00e29c7bbc653d4bc8bf8cf77826c2ac9bc0.sol: ERROR
test_0d44422274e6ebca0688bfe44638ee87dffa224149b3d6dcc4d107678853d6d1.sol: ERROR
test_0d5516eb1c44c4002a9147da32799c61391511e23904891d17d4dec5d4a89a69.sol: ERROR
test_0d5b191ebd9e8645dc3ac3aa5847d1cbee8723f36763a427be2cb0781bb9b00b.sol: ERROR
test_0d877953de0d27127a0a12518487ced65314826ef530d6e8f737d7405e7cbcad.sol: ERROR
test_0d935f6cc4c58fb0c3610a68d83220e7ad6d12a74792e2e6fcec7269e2b6e8ca.sol: ERROR
test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol:I 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582061f3cead4b360e634c57baa2800842757141ae40eb69de2082c99a01d69adb240029
test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol:I {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol":"I"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0dc98ab43f6ab9338bb58a43dc1ed2fe4d63d8b64de8b34350f97159aed7e003.sol":{"keccak256":"0x6538f89d23b058d6d99683e72349a0542ab9478259d01608aef4ef920c6cc47b","urls":["bzzr://5c2239f0682c0dda1df03d9b39b7ec1d003d5d8cfbbd555c881b19bedf06cc1a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Receiver 60606040525b5b5b61021c806100166000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f245811461005e57806367e404ce146100b557806383a6deb514610122578063cba2534f14610179575b600080fd5b341561006957600080fd5b610071610186565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100c861018c565b60405160208101610084818380866100e5565b90508092506100a2565b83610098826100fe565b8452949350505050565b6100aa565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b341561012d57600080fd5b6100716101a8565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b6101846004356101ae565b005b60025481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60008190556001805473ffffffffffffffffffffffffffffffffffffffff19163373ffffffffffffffffffffffffffffffffffffffff16179055346002555b505600a165627a7a72305820116e9411693b715f5c50c7f8f36fc4ec63f2761a0092948d5eeb0792ae4ab79a0029
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":{"keccak256":"0xa239770a6128aa5b1bcfbff9cee06a4362f0d30f6e29517c2791782106761719","urls":["bzzr://93e213a4529275d004b72317183cac12f021f298d0cf9c8a276dcd62b7e3ece5"]}},"version":1}
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Sender 60606040525b5b5b610280806100166000396000f300606060405263ffffffff60e060020a6000350416633fa4f245811461004557806367e404ce1461009c57806383a6deb5146101095780639bfcdaa114610160575b600080fd5b341561005057600080fd5b610058610183565b6040516020810161006b81838086610075565b9050809250610089565b8361007f8261008e565b8452949350505050565b610091565b90565b505060405180910390f35b34156100a757600080fd5b6100af610189565b6040516020810161006b818380866100cc565b9050809250610089565b8361007f826100e5565b8452949350505050565b610091565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b341561011457600080fd5b6100586101a5565b6040516020810161006b81838086610075565b9050809250610089565b8361007f8261008e565b8452949350505050565b610091565b90565b505060405180910390f35b61018173ffffffffffffffffffffffffffffffffffffffff600435166101ab565b005b60025481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b60006040517f726563656976652875696e7432353629000000000000000000000000000000008152601001604051809103902090508173ffffffffffffffffffffffffffffffffffffffff168160e060020a9004601760006040516020015260405160e060020a63ffffffff841602815260ff9091166004820152602401602060405180830381866102c65a03f4151561024457600080fd5b505050604051805150505b5b50505600a165627a7a72305820875c347d2eb3c929ac09ca3a7d1fa4ef06cda9914e4c6b7e97ae160b0c3720e80029
test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol:Sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":"Sender"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0dd4840dc4f76299a4dd0eb6ac8bb576fda0cfeaaa657702f2fcee428ef0f1d0.sol":{"keccak256":"0xa239770a6128aa5b1bcfbff9cee06a4362f0d30f6e29517c2791782106761719","urls":["bzzr://93e213a4529275d004b72317183cac12f021f298d0cf9c8a276dcd62b7e3ece5"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol:C 6060604052341561000f57600080fd5b5b6101788061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f53ec0fe8114610048578063fb678c75146100b0575b600080fd5b341561005357600080fd5b610069600435600090810b90602435900b610116565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a5565b60000b90565b505060405180910390f35b34156100bb57600080fd5b6100cf60ff60043581169060243516610139565b6040516020810161007c818380866100ec565b905080925061009a565b8361009082610105565b8452949350505050565b6100a5565b60ff1690565b505060405180910390f35b60008160000b8360000b600082121561012b57fe5b9060020a0290505b92915050565b60ff80821660020a908316025b929150505600a165627a7a72305820cbcc4ac264e2d50eab2672f42382149b130eb722e31f8a52f14cf3421d5c72310029
test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"int8"},{"name":"y","type":"int8"}],"name":"leftS","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint8"}],"name":"leftU","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0dd7a268631da26433ed6c78e5431f1cbca7c35c88729e88c5038bc1ceeb266f.sol":{"keccak256":"0xea8c1d7f77fd3b49c1f324064a2a0a203d0dc06439d5f77f26db7099a2b47344","urls":["bzzr://f336387ada53fe1c198138b9bd495550f7d4d8a14992d30166dc28186c9da2b6"]}},"version":1}
test_0e4b3d57cd6cf64d9626a66fec121e4b423c79b0fe200de79f766c78d5c40767.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:receiver 6060604052341561000f57600080fd5b5b6101018061001f6000396000f3006060604052361560465763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb58114605d578063cba2534f1460ab575b3415605057600080fd5b605b5b60806000555b565b005b3415606757600080fd5b606d60c0565b60405160208101607e818380866087565b90508092506099565b83608f82609d565b8452949350505050565b60a0565b90565b505060405180910390f35b341560b557600080fd5b605b60043560c6565b005b60005481565b60008054820160010190555b505600a165627a7a723058200137a033a8cd549b32a5fd96aeb8ec4d23710fbb887308e1797a354678fdbe240029
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":"receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":{"keccak256":"0x875bf99f575782ec8d642e29b966f40c6a2efa0eec9af75aebf6dc42bbb935c9","urls":["bzzr://00b3ca14273e803dec1dbb99547ffda2c944b0f29424cdfb07521c5b3fb99c05"]}},"version":1}
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:sender 6060604052341561000f57600080fd5b5b610018610054565b604051809103906000f080151561002e57600080fd5b60008054600160a060020a031916600160a060020a03929092169190911790555b610064565b6040516101208061054283390190565b6104cf806100736000396000f300606060405236156100495763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c042f66811461008b5780633c6bb436146100e9575b341561005457600080fd5b6100895b6100656002600036610335565b8054610085916001916002600019610100838616150201909116046103b4565b505b565b005b341561009657600080fd5b6100a36004351515610140565b604051602081016100b6818380866100c0565b90508092506100d4565b836100ca826100d9565b8452949350505050565b6100de565b151590565b505060405180910390f35b34156100f457600080fd5b6100fc6102a7565b604051602081016100b681838086610119565b90508092506100d4565b836100ca82610132565b8452949350505050565b6100de565b90565b505060405180910390f35b600081156101f55760005473ffffffffffffffffffffffffffffffffffffffff16600160405180828054600181600116156101000203166002900480156101c85780601f1061019d576101008083540402835291602001916101c8565b820191906000526020600020905b8154815290600101906020018083116101ab57829003601f168201915b505091505060006040518083038160008661646e5a03f1506101f0915060019050600061043a565b61029d565b60005473ffffffffffffffffffffffffffffffffffffffff16600260405180828054600181600116156101000203166002900480156102755780601f1061024a57610100808354040283529160200191610275565b820191906000526020600020905b81548152906001019060200180831161025857829003601f168201915b505091505060006040518083038160008661646e5a03f15061029d915060029050600061043a565b5b5060015b919050565b6000805473ffffffffffffffffffffffffffffffffffffffff166383a6deb582604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561031557600080fd5b6102c65a03f1151561032657600080fd5b50505060405180519150505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103765782800160ff198235161785556103a3565b828001600101855582156103a3579182015b828111156103a3578235825591602001919060010190610388565b5b506103b0929150610482565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103ed57805485556103a3565b828001600101855582156103a357600052602060002091601f016020900482015b828111156103a357825482559160010191906001019061040e565b5b506103b0929150610482565b5090565b50805460018160011615610100020316600290046000825580601f106104605750610085565b601f0160209004906000526020600020908101906100859190610482565b5b50565b61013291905b808211156103b05760008155600101610488565b5090565b905600a165627a7a723058201f44d0f91d28e5aacef1ab9455ae577a1032d4d08b9c2674a1ca321632de266e00296060604052341561000f57600080fd5b5b6101018061001f6000396000f3006060604052361560465763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb58114605d578063cba2534f1460ab575b3415605057600080fd5b605b5b60806000555b565b005b3415606757600080fd5b606d60c0565b60405160208101607e818380866087565b90508092506099565b83608f82609d565b8452949350505050565b60a0565b90565b505060405180910390f35b341560b557600080fd5b605b60043560c6565b005b60005481565b60008054820160010190555b505600a165627a7a723058200137a033a8cd549b32a5fd96aeb8ec4d23710fbb887308e1797a354678fdbe240029
test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"selector","type":"bool"}],"name":"forward","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"val","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":"sender"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0e4db9d1b21cd0ee3a8467fc400c0bb7b233234e7c38d099e726d4e8a6b2cbce.sol":{"keccak256":"0x875bf99f575782ec8d642e29b966f40c6a2efa0eec9af75aebf6dc42bbb935c9","urls":["bzzr://00b3ca14273e803dec1dbb99547ffda2c944b0f29424cdfb07521c5b3fb99c05"]}},"version":1}
test_0e91197d66899175949e8c2de8000e48827731a1a0b11dd900f3732443e59295.sol: ERROR
test_0e979cb3c1a681255784ecd555b0dfbf5b75438ba8dac911a780bf4e1717e0b3.sol: ERROR
test_0ea9ef978871fbdc2d0534268297c1d438b2d8b66f1b93929de2f23780ad5825.sol: ERROR
test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol:Foo 606060405260076000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a72305820218d0d4ca14c69d607c70ef21eac3a031b19be5e27490bf276a76cbc50f84ee80029
test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol":"Foo"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0edaadef67b3e06cca481c52f93e96893c348be22d48715003cf5f609af6e25d.sol":{"keccak256":"0x29c3be2ddb02d46441be3df5d756dcff057e4e5300cb42306802529189b2daff","urls":["bzzr://16a092e7de651adce012b6e0caa3e01837846d1a9ac57b616a88ddb30bb72d2e"]}},"version":1}
test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820aaecc9701a347a94377710e4941f59c8c3ce7127217b0f0aabce928f207024f20029
test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0efefae3dbd0b14088de3c97295e31d705fb5958e750f11a298b1b01482b9844.sol":{"keccak256":"0xee757ecab16ae30db2aea5503718f3c077b39c2c2dec43eec435d95e3a80cc4a","urls":["bzzr://7554aac7a36cd651d38135358eba7eef4f9589e23513bdde4e53e5549c80dbf3"]}},"version":1}
test_0fa8f6ee4047e3c94eb78834580861a8a5029013340004581fd4b1ea98085def.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol:C 6060604052341561000f57600080fd5b5b60d38061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805b600a81101560a257908101905b600101608e565b5b50905600a165627a7a723058209e67f51e5d1beefd19e480795d4e30e4d4f0f91707559694b8d427d5c8943e270029
test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_0fe4f9c3253ad68ca0dc5cbac0680fe4b92febe2042144d29266d25908892e7e.sol":{"keccak256":"0xf9dd3233e669c48527d20d253c2a12e01704c17304b612f8d03732d5be4b79e6","urls":["bzzr://47ec974007c479370c86c5d088626c2cca6e8680e55a3e2e3ce91c39de15cf8a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol:test 6060604052341561000f57600080fd5b5b60db8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c04062268114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600062ffffff65fffffe00000161010063fe0000015b0463ffffffff1692505b5050905600a165627a7a723058203fcbddeb28464e222d7cbf2b547a93b4f17016e54ed6a88bb0c7b33a23b863930029
test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_100bbcabef80d8c3d03686e98ac3bc29158c6e59d8913343b844004d864538f8.sol":{"keccak256":"0x4248cafffd8568941a659e10bb7d165814557ecdeef418b1cfeba7f00e5986b8","urls":["bzzr://2c5c5cdc920ff08b4347b9659db8280d6b7fcd01ab8505aed9ff018aed688147"]}},"version":1}
test_106baa67eeec8a88ab1ff3ddd9286b77f451c3f1134d07d8f5c3e046a9183d51.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol:test 60606040525b5b5b60ef806100156000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c68d81e08114603c575b600080fd5b3415604657600080fd5b606573ffffffffffffffffffffffffffffffffffffffff6004351660a3565b60405160208101607681838086607f565b90508092506091565b836087826095565b8452949350505050565b6098565b90565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16ff5b9190505600a165627a7a72305820df30f682587dc36aa3c3cadcd6e368e9995bbc8e84b1b1ba5164b8c5b00112b00029
test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"receiver","type":"address"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_10a2f0543418572ba0fe6fcef58a0b4236ad92f55576fef0af09e860faf83a06.sol":{"keccak256":"0xee908b0558263ff725f54e0a7cefb38949e60ec0453841b3cacb6b7b640602bb","urls":["bzzr://3f71ec504f3e92dc0d3901d60ed577bf48216ce0a661a279171f574656d726eb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol:test 6060604052341561000f57600080fd5b5b6101098061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663bf06dbf18114603c575b600080fd5b3415604657600080fd5b60556004356024356044356093565b60405160208101606681838086606f565b90508092506081565b836077826085565b8452949350505050565b6088565b90565b505060405180910390f35b600081151560b8575060008381526020818152604080832085845290915290205460d5565b506000838152602081815260408083208584529091529020819055805b5b93925050505600a165627a7a72305820e8cb6f990d9cefb1aeecb8604fe6e1fc049895b37fc7d6814c06b6ed734aefd30029
test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"name":"f","outputs":[{"name":"w","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_10de025fe486760bf59d59a19e500c465b196e7f5be0bc33c29fa5a581e2b404.sol":{"keccak256":"0xbd575db46d96723664c2f4430601d6bbc04b741c6f94cd7eccdffa6f765897e3","urls":["bzzr://30c35cf5d39178cc15b2062c96c1415e28d67d54a315912386d19c1de31c1435"]}},"version":1}
test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol:C 60606040523415600e57600080fd5b5b60938061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b73fa0bfc97e48458494ccd857e1a85dc91f7f0046e5b505600a165627a7a72305820624e2eaa297ca5cf81d11b764e562e0d7aa0f7d4c142fc9344053a5393e13e3d0029
test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_112cc08e4e07c44da0449bbcde4537e1b77428ab6b142a2777b8092cfb3853b8.sol":{"keccak256":"0xb4b5da6720e236685ef421770abad0dbdaa395f9c73064d91bb2936955365336","urls":["bzzr://394aa12e17910b734acdc7e307c535f95e7013c7baf9f39dcec8eaac374a092a"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol:C 6060604052341561000f57600080fd5b5b61016f8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630afdb4ea8114610048578063cb217d34146100a5575b600080fd5b341561005357600080fd5b610061600435602435610102565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b610061600435602435610122565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b60008183600082121561011157fe5b9060020a0292508290505b92915050565b60008183600082121561013157fe5b9060020a900592508290505b929150505600a165627a7a72305820db4ea13b16721887252448e3266b03eb69d3871833ebbc5dd28f10cc1ea918cc0029
test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"g","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1132785d6923701fb8cfd24b6e749adfe2b53fdfed9febfc71019b81969724a6.sol":{"keccak256":"0xfe1448a5d07b1d013e581b035c83cb7594189e36506c1b95284d9cfbd88d35fa","urls":["bzzr://21c4aef2edab85e1d11357db6cb7d58d21be896652019b22bd31399e53e79bc2"]}},"version":1}
test_116e2289af9a0b710542caa1099c8838ce272517d389c6dac32852fbf655a246.sol: ERROR
test_11bd0a304a4696825a6d6e0ec3c86c2345986e92b59dffbad31f0e874fe2f1cb.sol: ERROR
test_11be07f1b9d0ade7f28819d9af9c17f16b3712a1a401b68b593e641844673319.sol: ERROR
test_12027e9ef618c12e325c2a53f5ebd2a601c5c46e9910898db47b25a487f04b05.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60005b905600a165627a7a72305820bf126aa8ebc1ab871f4cc963f694716f9e144e7f6acb166e2433fbbbbf0bb6a40029
test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_123a4ebf6831550cc881d5da01a6f7163b8f45816138be2d30096e09e88fdbb0.sol":{"keccak256":"0xa008b6ad4efdb56141bf781188c09c4a58e42de81d5e1db01c1eeb317e0d0eb4","urls":["bzzr://189f51c5052eaf1f53166a67caa816b9f9b71a13dabcd73fef18438cdbbb1a17"]}},"version":1}
test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol:Foo 6060604052341561000f57600080fd5b5b6101868061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b61005a610148565b610062610148565b60a060405190810160405280606581526020017f303132333435363738393031323334353637383930313233343536373839303181526020017f323334353637383930313233343536373839303132333435363738393031323381526020017f343536373839303132333435363738393031323334353637383930313233343581526020017f3637383930000000000000000000000000000000000000000000000000000000815250915060408051908101604052600381527f3132330000000000000000000000000000000000000000000000000000000000602082015290505b5050565b602060405190810160405260008152905600a165627a7a723058208a47c3e021469b1188fe3efa6a1cf3730b1d6c17f528b68f9a414cb4e1cd0ddc0029
test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol":"Foo"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_126b9199a6d3eaef747ce494ce770e25be4680655f038dfd83ccf4078bb2a46f.sol":{"keccak256":"0x14bd3f75710025760707f7cc08d626789d37c9a35cd6bc60aade84b0d510e2d8","urls":["bzzr://cf65b0f6c8205f87ce34bb8e45f15a134d06426ca78dac1dce9a9b08dcd362cb"]}},"version":1}
 conv uint256 -> uint256
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol:Test 6060604052341561000f57600080fd5b5b6101bc8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636f713284811461003d575b600080fd5b341561004857600080fd5b61009060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061012992505050565b604051604081016100a3818380876100d7565b90506100b4816020840184866100be565b90508093506100d2565b836100c8826100f0565b8452949350505050565b6100eb565b836100c88261011a565b8452949350505050565b610115565b7fff000000000000000000000000000000000000000000000000000000000000001690565b61011d565b90565b50505060405180910390f35b6000808351915083838151811061013c57fe5b01602001517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000290505b92509290505600a165627a7a723058208b64a5a962b207ac4ffd1e41749f411ee74b338236817679e10436979b02a4e10029
test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"i","type":"uint256"}],"name":"set","outputs":[{"name":"l","type":"uint256"},{"name":"c","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_12e924a4c5c43c21e5886a5b93c76ddbf0a1f4e40c26fb6b4f3fe3850766bf79.sol":{"keccak256":"0x8e7ca81bcc73e954dc413ec961e62323a54d1ca7ab4f6d196eecb22830db6dc3","urls":["bzzr://54e4ad0a761037fa80314d8058f0671f5f565b2c26824ae2e4e2613aad68f98a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol:C 6060604052341561000f57600080fd5b5b6102318061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c65c00c8114610048578063f88004561461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b61017d565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b6000807fac0db69d4d0cab623c90654fc37dc538d2855e4d313b044f0446b487c34777a6816040516020810161012e81838086610138565b905080925061014c565b8361008282610151565b8452949350505050565b61016a565b600060028210801561016257610164565bfe5b50919050565b505060405180910390a1600191505b5090565b600060057fac0db69d4d0cab623c90654fc37dc538d2855e4d313b044f0446b487c34777a6816040516020810161012e81838086610138565b905080925061014c565b8361008282610151565b8452949350505050565b61016a565b600060028210801561016257610164565bfe5b50919050565b505060405180910390a1600191505b50905600a165627a7a723058200369fbc72287f8767e9f207959e01820d0e7bfae89dc73bf498e51123abfdf130029
test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_log_ok","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_log","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"uint8"}],"name":"Log","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_12eb7a33625553513dd5fe33bc946727cf07262b5ff73ee5069c8588486481ec.sol":{"keccak256":"0x290fc543ce334e20b2e65dbeacfc70793afe254589a829eaa5c75db77c4fa078","urls":["bzzr://c97f8b852491777d767046c7be7795c23f9a7c104ae4f0b50b56bd25d6227f46"]}},"version":1}
test_1318882da9d66fdd45a26ea4ad6c8029f3846484693015621855b7f605c460da.sol: ERROR
test_1373c91ad369a3e8f814242e12f4ec9de6a7e5dc3162d379cd31e3dc22104f37.sol: ERROR
test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663cd580ff38114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b505600a165627a7a72305820445807df75493635ce4fd90cf8d430fbbc2ac3359b46ce08281e4e70d690a9ab0029
test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"b","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_13aef0ca9469412dc101cb1056194811b8b9737748e0302dcd394741481a2289.sol":{"keccak256":"0x4dfc6ac1c94c11a4d68e15e05a04d5aefc16d66348fe80ac58b772b4789d4b5b","urls":["bzzr://1ad4f83fa2d7fe5123c32305eb9b15122bfbfdb6310718a189463e9f15d4804d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol:C 6060604052341561000f57600080fd5b5b60fc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c8114604657806326121ff0146094575b600080fd5b3415605057600080fd5b605660a6565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b60a460ac565b005b60005481565b60005b600a81101560cc576000805460010190555b60cc565b60010160af565b5b505600a165627a7a72305820d18428c3c34ec632f3fa1c6796b44a62551283aa1f0a0d17da70f0567f0d2f7c0029
test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_13ca286abcdadb676da843e1c65e74289589251cb12b45577b2030910168e2c4.sol":{"keccak256":"0x350ecd40a96cb9b5db08a05b49273cd5d6751d075890c5ef550829facaab6923","urls":["bzzr://e00f6d0bc6ca95ea5b5ecb250e95ccdd08884796c8e76892f500fae0ba522a1d"]}},"version":1}
test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol:test 6060604052341561000f57600080fd5b5b60a28061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146058575b600080fd5b3415605057600080fd5b6056606a565b005b3415606257600080fd5b6056606d565b005b5b565b606a606a565b5b5600a165627a7a72305820e0a34602468787a89c63989598d517075e761ab2b31a07368c97991f7f3322250029
test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_13dc572a637a8671130ad837f8b6486b0889e687dc1d7a78534cd57ade6f66d2.sol":{"keccak256":"0x77d82817e4cff7e90e12166b7d361301ad015ac7bf9c4e21689ff6de4ac8d528","urls":["bzzr://d8863bf132f8927f162fbf86c137e281eb66a7c0258beeb0eb316fb7f4f63612"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13f5259191a3b595d381543050a1f30780c8b27ac02f02959077123c87321b74.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol:c 6060604052341561000f57600080fd5b5b6101608061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114610048578063eb8ac921146100a2575b600080fd5b341561005357600080fd5b61005e600435610094565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b6100bb600435602435610118565b604051604081016100ce8183808761007b565b90506100df8160208401848661007b565b90508093506100fd565b8361008582610094565b8452949350505050565b610105565b90565b50505060405180910390f35b805b919050565b60008061012784600701610094565b91508290505b92509290505600a165627a7a723058206625c59ed0c49e831c0d96d150350c80c5673d5308fd6956ceb8051d4927712a0029
test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"test","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_13fd7cb9cb9f6b6118614eca04ab18bafc9a3a9ba720fff2750d999f55f49482.sol":{"keccak256":"0xc4eb34fe8b10d59cdabad5e70951a58ab4a70e5726a95b224e77e695b0ea5791","urls":["bzzr://3e522bccf3c3e8783223092e838fb65c32a6078adf34d4e47080d38178c1b732"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Arst 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820aee09d1661ac555728ca332352e64e6097379d434724c6ee2621c232e9efd4c90029
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Arst {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":"Arst"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":{"keccak256":"0x8516a29fd86ad07611e72513b8f3acccac9686e32ea337e8486a0e88118f76eb","urls":["bzzr://15e26ff7308612fe1b36277a5a045e2cb68d1a5e546c91de47eb92d71fb9ebd9"]}},"version":1}
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Tsra 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a72305820fa3d983355ff549f0d44607cf6dab032c1d4089699ff8a26d89441a59dbda67f0029
test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol:Tsra {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":"Tsra"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_145eda10c6c7c837001b079ac22c08c97ae5710fb4803795c74e5513408c2fb2.sol":{"keccak256":"0x8516a29fd86ad07611e72513b8f3acccac9686e32ea337e8486a0e88118f76eb","urls":["bzzr://15e26ff7308612fe1b36277a5a045e2cb68d1a5e546c91de47eb92d71fb9ebd9"]}},"version":1}
test_14a7c8c4203967e2390286d58b196ae9e400c1dcd1901f4054fdaab8dca60c6f.sol: ERROR
test_15066c8903eb613a9d2cb6c176a365cd1b56ae360d801e24a74a38b79c91f054.sol: ERROR
test_151d3f3cb6be70f3fd13c47b4bd7b12a214b1b1e5fe12a57af3ef2bc1e5a7b02.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol:test 6060604052341561000f57600080fd5b5b60e28061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600160025b8080600101915060ff1682029150828160ff1611151560af576092565b5b509190505600a165627a7a72305820c5f07c633ebe3fde304ab1898f3d87db20b9549d2eee4b963a9b228f38034b200029
test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_15582deb6331750fadecbd661770b2609f5810bafad153b46036491862fa4de8.sol":{"keccak256":"0x59eb4c13a919378c96ebe10c4170edbea7acdade544497300397ef1117fe38e9","urls":["bzzr://4f55490b6c8e49171fcadeeb1807a9e44bf728e9bffc331c027d55276900dae4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol:Test 6060604052341561000f57600080fd5b5b6101b48061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100b8565b604051606081016100638183808861008f565b90506100748160208401848761008f565b90506100858160408401848661008f565b90508094506100a3565b83610099826100a8565b8452949350505050565b6100ab565b90565b5050505060405180910390f35b60008060006100c5610168565b6100d3600160026003610103565b90506100e081600061012a565b93506100ed81600161012a565b92506100fa81600261012a565b91505b50909192565b61010b610168565b60ff8416815261ffff83166020820152604081018290525b9392505050565b600081151561013f57825160ff169050610160565b816001141561015857826020015161ffff169050610160565b826040015190505b5b5b92915050565b6060604051908101604090815260008083526020830181905290820152905600a165627a7a7230582021fac6e055030ff0c861bf36959199cc0d46f868dc5244fc696a7cc73209aff70029
test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_159704cda7765f28aa2d149c3260f000b9873acd3c903af9460fcb3b6d6be9de.sol":{"keccak256":"0xcfc4d9f7eac76e5ac984bc118f98ee6590142b22eae556da1569f82082663ed5","urls":["bzzr://59add2486bedf8828e6b1fd91d72d2939150386e8467ec3e04ac56c73e72ef71"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Arst 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058203c519d53d7ea5bdd9c8ead07a9bbde98b9da69cbf1319ca111eaad5a573f974b0029
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Arst {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":"Arst"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":{"keccak256":"0x3311b50549efd537816579544dd07d0954f32c990070d6aae29afa03a80f1ab7","urls":["bzzr://df4fd053a4013d2114467c13ae04412f3ce9da909018255b52db086abca85242"]}},"version":1}
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Tsra 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a72305820c097083bd5a943da732e786fbd534a386f4e4f0978eb63077ec04d094a5ce5760029
test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol:Tsra {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":"Tsra"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_15b786ba959f939386a011828d71a91e40cf67f5aaebc4429713b0d3938b2459.sol":{"keccak256":"0x3311b50549efd537816579544dd07d0954f32c990070d6aae29afa03a80f1ab7","urls":["bzzr://df4fd053a4013d2114467c13ae04412f3ce9da909018255b52db086abca85242"]}},"version":1}
test_15e8accd1add8b2622d379a257b3e7e0cebd9409aa9e361ffdd3c64dc9b0447d.sol: ERROR
 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Helper 60606040523415600e57600080fd5b5b606180601c6000396000f30060606040525b3415600f57600080fd5b60335b600080546009908110602057fe5b906000526020600020900160005b50505b565b0000a165627a7a72305820138d031b2d7512ebf92dbd9329eae33121135a0b26925985b445c09ed80ff59e0029
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":"Helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":{"keccak256":"0x4d052e67f75fe5d6db1ea1486c7445c80f4ca937619b424c8f1e5b46d48499d0","urls":["bzzr://1b684d06c2d060bddc2f12d6b18f90dd8ff2f2507f404d8e87e1d185d7bfe537"]}},"version":1}
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Main 60606040525b5b5b610162806100166000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663723939ce811461003d575b600080fd5b341561004857600080fd5b61006973ffffffffffffffffffffffffffffffffffffffff600435166100e2565b6040516040810161007c81838087610097565b905061008d816020840184866100b0565b90508093506100ab565b836100a1826100c9565b8452949350505050565b6100c4565b836100a1826100d3565b8452949350505050565b6100ce565b151590565b6100d6565b90565b50505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff8316816005604051600060405180830381858888f1159550505073ffffffffffffffffffffffffffffffffffffffff301631925050505b9150915600a165627a7a723058204dd5ce8ae08b0c2eca7e836817849ef03a256a1a16a5d8bc3b5f37ab0d01da560029
test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_a","type":"address"}],"name":"callHelper","outputs":[{"name":"r","type":"bool"},{"name":"bal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":"Main"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1650ddf5a7190fe737353d0703d57e14b450f1a4b19f6539679f7024d5a61c3a.sol":{"keccak256":"0x4d052e67f75fe5d6db1ea1486c7445c80f4ca937619b424c8f1e5b46d48499d0","urls":["bzzr://1b684d06c2d060bddc2f12d6b18f90dd8ff2f2507f404d8e87e1d185d7bfe537"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol:First 6060604052341561000f57600080fd5b5b60c28061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b6000805b90505b905600a165627a7a7230582070174b66784189a09779285430316e27f27a615f6c0857751843958fb3a17d8f0029
test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol:First {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol":"First"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_168992e874eb0424da7422650ddc69cb766cad69e0572c0b9083cfcd36925af6.sol":{"keccak256":"0x0810ebee6c415fe02137726707fa7ef1ba689cdc54de63d955856f25476022ee","urls":["bzzr://7753a2f1bd25fca2243a6d5392a0a62217a39b1e71d871e7f4ce36e5bcdd247f"]}},"version":1}
test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol:c 60606040523415600e57600080fd5b5b7812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f226000555b5b603680603b6000396000f30060606040525b600080fd00a165627a7a723058205763ec308461ebac27acd1b78f8a983522d7785fed10a1f1e4e9ec5f6ecdae800029
test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_169816b0c5f7444470afcf62184553a2ad2b0a42aff62de9d44399c3127438ac.sol":{"keccak256":"0x96ad13eb6521f2cc06b6f8835820c67bd7545b19000274742bcd93281f8b1853","urls":["bzzr://85e0471cfc82d925c0527a403b0abd077e4a0ccc59cf2fc582324c5661bf041f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv int_const 5 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_5_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_5_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_5_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_5_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol:A 60606040526003805460ff19169055341561001957600080fd5b5b6102a3806100296000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633a7d22bc8114610053578063f7cb8e66146100ad578063f8a8fd6d14610106575b600080fd5b341561005e57600080fd5b61006960043561015f565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b34156100b857600080fd5b6100c061017b565b6040516020810161007c818380866100dd565b905080925061009a565b83610090826100f6565b8452949350505050565b6100a2565b151590565b505060405180910390f35b341561011157600080fd5b6100c061026e565b6040516020810161007c818380866100dd565b905080925061009a565b83610090826100f6565b8452949350505050565b6100a2565b151590565b505060405180910390f35b600080826003811061016d57fe5b0160005b505490505b919050565b6000803073ffffffffffffffffffffffffffffffffffffffff16633a7d22bc60056000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815260048101906024016101e4818380866101ee565b9050809250610202565b836100908261020f565b8452949350505050565b61020a565b90565b610220565b600061021a8261009f565b92915050565b5050602060405180830381600087803b151561023b57600080fd5b6102c65a03f1151561024c57600080fd5b50505060405180516003805460ff1916600190811790915593509150505b5090565b60035460ff16815600a165627a7a72305820ee49e5deb3ed5654de9348b3cd89292a3e270633313a154588ef187e383e68420029
test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"getElement","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testIt","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_16cc68bb6e3c28f8f8433bec50b659dadfa89b80d8cd3cdcaf65d5db7a983661.sol":{"keccak256":"0x197fdb6a5457c9909045dd167eb604d698ed6ee02127cdbe935dd8f6c16c44f0","urls":["bzzr://738b57b5da8b556f29a89b241525bf59a06f82590d40a651cf78284373d7a0cd"]}},"version":1}
test_173595f8ea0dbc8e1cd082b6e75ebf69be2d91f108433211edcd7353fd21e14e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol:test 6060604052341561000f57600080fd5b5b60f88061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60006064821160ad576032821160a357600a60a6565b60325b60ff1660bf565b6103e8821160bb57606460bf565b6103e85b5b61ffff1690505b9190505600a165627a7a72305820d3cb84e60d1caf7909c9535f202be1f9c71ea5c84e239c7ad818d4d5f885fad40029
test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_177a9381c5b75f617749ec7a8bcb8fb6362fce0b712cff2d07fe0cd67be198fd.sol":{"keccak256":"0x0ffb4e4f77d5782353ee626f56ec49e3891894744086888181f324c27933a185","urls":["bzzr://9bb68c012ccb60e3157d609afd830907f820d3a9b9ef6d644a43d4cb00b81391"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol:c 6060604052341561000f57600080fd5b5b6102908061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b8e010de8114610048578063d826f88f146100a1575b600080fd5b341561005357600080fd5b61005b6100fa565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b61005b610110565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b600061010781803661013e565b50600190505b90565b60006001600090805460018160011615610100020316600290046101079291906101bd565b50600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017f5782800160ff198235161785556101ac565b828001600101855582156101ac579182015b828111156101ac578235825591602001919060010190610191565b5b506101b9929150610243565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f657805485556101ac565b828001600101855582156101ac57600052602060002091601f016020900482015b828111156101ac578254825591600101919060010190610217565b5b506101b9929150610243565b5090565b61010d91905b808211156101b95760008155600101610249565b5090565b905600a165627a7a72305820ffd0f98e7751d8b67722d5f156ed5ee26cf668f5063b8e108cad422198567bb20029
test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"reset","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_177c935a9d89fa8ddd3773343f362219cdd34d7f5d2915a79d34fdd39153d04b.sol":{"keccak256":"0xb2321c3a7f98c709e8b9755b430d9cd99cd82dc235732549dda78cf1d7fc98b1","urls":["bzzr://ee5da8cb4fa96b1c8d31c3c17c1fd7acc99614581bfa2888760cf7cd2d6f0435"]}},"version":1}
test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol:test 60606040526404a817c8006000556404a817c800600155600280556404a817c8006003556405d21dba006004553415603657600080fd5b5b60368060446000396000f30060606040525b600080fd00a165627a7a723058206879590a43dbf02f2faeb07ac228d367c67ea66020799418fee9f292dd20b4240029
test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_17831567a445b9161a56ee47a9d182771cb2f6a76d3aeab81126c5e8823b95bd.sol":{"keccak256":"0xf80c1e41f0cc56f981064dbaa8c51bfde36d9bceb554909f95e0dabf39cdb4b0","urls":["bzzr://c75426f730507f9fb8c31e790cd7dde5375da3e8dc2acb05857dd949ed557ce5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol:test 6060604052341561000f57600080fd5b5b6101088061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b81146046578063e420264a14605b575b600080fd5b3415605057600080fd5b605960043560ac565b005b3415606557600080fd5b606e60043560d3565b60405160208101607f818380866088565b9050809250609a565b83609082609e565b8452949350505050565b60a1565b90565b505060405180910390f35b600781111560c95760be6008820a60d3565b6001908101905560cf565b60016000555b5b50565b6001545b9190505600a165627a7a723058202a54a8c85496c25b5e965b10b6f5db5167941a636f95e5eca756ecf1296739c20029
test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_17921e1d1ec89741ca84ac79266675a6e3afb8a468111859ace1e73eaf606c30.sol":{"keccak256":"0x81fea17f68454010673fe0d6f9c27eef7aa54d5d168080429ed6597f97b6effe","urls":["bzzr://f1b9ea7c24507d6ba881da3c083a113d8ab686adcc0a66b5f08251b79b15fc52"]}},"version":1}
test_17b3609d8a5330966eb0b8cbad1e409627a3767c5dc6679977844c9a46229615.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol:Test 6060604052341561000f57600080fd5b5b6101438061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b6000600260006040517f6162630000000000000000000000000000000000000000000000000000000000815260038101919091526023016040519081900390205560006040517f61626300000000000000000000000000000000000000000000000000000000008152600381019190915260230160405180910390205490505b905600a165627a7a72305820471f953df7c43b4b2fef725d4a19e8d24b4d89f370770e11015c4a82e270c4570029
test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_17bd3533fce683534efc3a45698efd40bf85b17f64c326e7cd2bcc74c63a44c0.sol":{"keccak256":"0xe4296170234df1a72b46e77e7cee241400dc7588a17bf16c509a5b618c4ef312","urls":["bzzr://71d84480466857ae85d12ac4c23bb82202dcc36b06f9bcc63eda3d037faeed99"]}},"version":1}
 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol:C 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6083565b61ffff1690565b505060405180910390f35b60005b905600a165627a7a7230582036ec26cd0efaa3698c6b88a04d57d3ce2bda8a68ed9b68512b79b44d95fdbe370029
test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_17dc63975cf171705c62c52d8a50e67f172a5cb6b8c9dc49c681cbc956b40313.sol":{"keccak256":"0xc96c1b2b8cf5ee0a8238680e6fbf0036c89af58300435abdd4194326cbdafaea","urls":["bzzr://3e9b4985f199208fdd91b5789dbfd8e659a257fb7864257d7e14a8b61e3f1ae6"]}},"version":1}
test_182d623947218542e8b63a4c65488e274805a45bb2fe4bb210a186bdc05e1cb7.sol: ERROR
test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820110e94749a2aa376d2ca2fab96c77c3aeab7a708a7611f2d66539994bfa951350029
test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_188e5656a0f88f7cde748476cf1eb2fbc42c4bab661f96e0f9d551c17fd87364.sol":{"keccak256":"0x9d73c6dec9f647cec4949cfec204f5c82b25634b55b5d2c58f6d86c8c96cb8a5","urls":["bzzr://bab92a28332b7dc543451d961b316cbc78244e0930d820d25c4a6f514c18dfd8"]}},"version":1}
test_18d68acbf3ab7a993251f9e9244102a75d1266d1a9248e8530812bd4ee6ff3e1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol:test 6060604052341561000f57600080fd5b5b60c68061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60056001556205386660085b50905600a165627a7a72305820b2e6504542b3394a1122f7db1c60d8ddf2bd3afb57eb54fe2bc07410c0c037380029
test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_19e0b3ce5d28e289f20dfb2275d03a136a129657e3bae4f79307a35d5f50caac.sol":{"keccak256":"0x858d10b1378c1843db38aefc3e21ad1f4274c2df3838cc9326d0b8b257372aff","urls":["bzzr://4b2178aa54bffabe7d4c53f68edf3eb005856986052f15d008e16ea57264d029"]}},"version":1}
test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol:test 60606040523415600e57600080fd5b5b60988061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b601260006001604051600060405180830381858888f150505050505b5600a165627a7a72305820191044aaa1045b8e34299de36ce3b540a59f836a22e003323784e7b059d1d4770029
test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_19f8ce4507ec94e2826174dc94d0a20c1f2f7916867267e8a99e3c6fa17c0c06.sol":{"keccak256":"0xe1251836a0053fb06230fb96e0fe4b3422cce731bb7ee3c81dc4f5935157cb8f","urls":["bzzr://d307b6c91979ed49dd486250da8012c4d4bb34270349e2dc3c746f8b0382c57e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol:C 6060604052341561000f57600080fd5b5b6000805467ffffffffffffffff1916610040640100000000026100fb1767ffffffffffffffff161790555b61004a565b600281025b919050565b610145806100596000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663eee972068114610048578063f8a8fd6d146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fb565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b6100b5610105565b60405160208101610071818380866100d2565b905080925061008f565b83610085826100eb565b8452949350505050565b610097565b151590565b505060405180910390f35b600281025b919050565b60005463ffffffff6100fb81169116145b905600a165627a7a72305820ea5a391d64f06a700096954afec5e37c9f3c32c5b48e035432ce418668840a520029
test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1a1e5775d3fac1697219067c18c90522b3e115fe8a8b0a5a6169d978d6620ffe.sol":{"keccak256":"0xd99fb58464027bedb734139ad6c0cd95722e128186e2069422bd63e00d55399c","urls":["bzzr://af6d2bba6e168c0ad96ab73d095c91142ce90a97261851d86ba2993358e662b4"]}},"version":1}
test_1a3364f8f5e6365127c7a457918b47e6b282018556e9da1676bac8638994e914.sol: ERROR
test_1a3c9b304083fe3a04e2c8c1c834f7bbfc7daae72691331061fd50f8deb007fd.sol: ERROR
test_1ab12d94e657fe07023f378e761f037c98a45ebd9ed7998c19f72cfe661974fd.sol: ERROR
test_1b05943fcc40f3431a5ce865a3bd21976f4d02ed8aa72ede33d3e7a54396d434.sol: ERROR
test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol:test 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820999a9dcc0eb0d6fc777638086cf1e15c10fb6c2ef219c512b155b75fc596d3420029
test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1b5d8fc93c326b58b331658c62322a8bff074812715301aabc873d2b3d019a68.sol":{"keccak256":"0x270da1c6518ac8337d93990eedc61a4548dc3fec9db09dda3a8cd7f17932950f","urls":["bzzr://76cef41b26e642f89c4716d4f3d602ea6015205f5ec0809df36590801d85ee8a"]}},"version":1}
test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol:test 60606040523415600e57600080fd5b5b60908061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600160405190815260200160405180910390a05b5600a165627a7a72305820b50d3eadda54ad0559f0fa7603520ffcb5efec079e0b49cd27a851daf9e4d9620029
test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1b700d4086f6e1b1dcfe97827945e9f998735ad0d22aad00730ab718555dcdef.sol":{"keccak256":"0x2430222b7e050fc07c7dd46a49cb1b904167f8e6fe3b8eb8f9e043da77d8cdfe","urls":["bzzr://53a1feb41205c0f76b1522beab205acdc657713a0eba78aad6a565f349c1cce2"]}},"version":1}
test_1b7570f731b7d428d43dea2dc89acfabf7a73c022087aab0ef28ae10c5e3cf6b.sol: ERROR
test_1bb9b11107cce524699c7a283841a1d15a4e293518a2b149a005e061c9dd63b1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol:Test 6060604052341561000f57600080fd5b5b6101868061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166351627d1d811461003d575b600080fd5b341561004857600080fd5b6100c760046024813581810190830135806020818102016040519081016040528181529291906000602085015b828210156100b1576060808302860190600390604051908101604052919082826060808284375050509183525050600190910190602001610075565b509395505083359360200135925061011d915050565b604051604081016100da818380876100f5565b90506100eb816020840184866100f5565b9050809350610109565b836100ff8261010e565b8452949350505050565b610111565b90565b50505060405180910390f35b6000808451915084848151811061013057fe5b90602001906020020151836003811061014557fe5b602002015162ffffff1690505b9350939150505600a165627a7a72305820cd2726adb9ec4864aff7fc909bd208f9f727e96ddc808baa173e80890a785cfa0029
test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_data","type":"uint24[3][]"},{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"set","outputs":[{"name":"l","type":"uint256"},{"name":"e","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1beffae1d668caa7a81ba2e1b7e40394e92306fcdc755c68e0e4c98394185b16.sol":{"keccak256":"0x89811138569df64ae7ebc941c4753e8a13a865dd999bef526e2dcc38676da8ec","urls":["bzzr://8c581a69d2c47a789bd909fadf0bdbd377c870260b15cdb8819c251fbf9ee199"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:C 6060604052341561000f57600080fd5b5b61015c8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e61011e565b60076040518059106100ad5750595b908082528060200260200182016040525b5090506008816003815181106100d057fe5b602090810290910101526100e381610101565b806003815181106100f057fe5b9060200190602002015191505b5090565b60028160038151811061011057fe5b602090810290910101525b50565b602060405190810160405260008152905600a165627a7a72305820625c034abbdfb8ba3a8d6188c9994d5267836ecf4019f4f3e3bac952ef807ea00029
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":{"keccak256":"0xa5f3991b71a98634df282a99991ca81f8ac865059b9edf73de26718878740bf2","urls":["bzzr://a979d9d0249a5fbaa12452c75b9061d482d91e24d58415f5c43d104633bae267"]}},"version":1}
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582044f80feeed3d7826634b1c1d7a03e604f3138b2b3c5a10e06a32f9c1bda67f450029
test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1c2a91aced599209ade512dcb2f064637f73cabb2b67326c4c5fc27a8bb08080.sol":{"keccak256":"0xa5f3991b71a98634df282a99991ca81f8ac865059b9edf73de26718878740bf2","urls":["bzzr://a979d9d0249a5fbaa12452c75b9061d482d91e24d58415f5c43d104633bae267"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a72305820fe4e22cfe60606bdcbc0ce215ca70e8be8e83221c3231caf981b9be8f28e2fc20029
test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1c2f38d5ffaee8b6de6972f1fbf8f11697c2cccf50af05fe76b62a70f82a8dbc.sol":{"keccak256":"0xda53fdb4990b373a85bc4094637267f84a5274f37aba6dc0c35816aa1e738047","urls":["bzzr://e9967ec0c9597f1a398d43b77c38fdd8f2a1ef57e546ef66de0ea95f7f5c5f46"]}},"version":1}
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:C 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:C 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:I 
test_1c4d0024847429cdf8eb6b42ada2975b708de590a1d1f302941e2b1e2aa1d145.sol:I 
test_1cfc3e978441bcc1766ee71be7c15e99eda259b5a695e652608901018de9f2fa.sol: ERROR
test_1d6c1464594e42a5f6c19a29004b7de6017ec20b4a3e25fac85c22e2365a637b.sol: ERROR
test_1d772c2f7af039466d2bdb8aed1bc4bbfb31d0d2b2c965a7acf703aeea9b02e7.sol: ERROR
test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol:from 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206a26f963c8bb6781c7cf12d2217761d06348b2886aebf4021c02244379652d4c0029
test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol:from {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol":"from"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1dc49aaf264d1fa8fd6439dc9a72eb61affdea8e380e4576d748566747c42115.sol":{"keccak256":"0xf1dd1b82e2f655e55559020b98436cb1efa4350c4a3896962a0b1cf9b82b332d","urls":["bzzr://43d78b8ce00932d07e249d325e5fc3f819d5d2b3f5c2103090ec362b9d99885a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol:C 6060604052614200600055341561001557600080fd5b5b60bc806100246000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a72305820b780e47296a3fab4b55856be04e06e595825b3c38ad6e85175e98b92d8ffd21d0029
test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1ddd1a880b782f8ff85fc0f4ebbbbac33de9ba2507e8b59332f748da80be74b6.sol":{"keccak256":"0xb393cc3b7760705cde7046e9ad1f5c1e07fdbf3a76a976ef92c2bf617d04c8aa","urls":["bzzr://8e56d50ab0495f17c7a7afc704560a59bbfaea67b2e90d4f243cafa095c79d5d"]}},"version":1}
test_1de8de24f1dfad11335512b1cc46c2129dc04edae243593efc506b6e0844f545.sol: ERROR
test_1e246bccab57cf7e4947977c7f2673dd5037b99bf621e3fb68da6eafdecd0690.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a7230582008e3ebbff584c57cfba3e2a7abed3a3105c83402d7a883bc046adce46a8112290029
test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1e2909cc4f322ea591a0acedfe4fb349431927c7a80768ca9940be30b5c40ad0.sol":{"keccak256":"0x2fc5c32c2a7ace0133340e18e394aefa81f088206d10547ab01ca2ff9524d7fa","urls":["bzzr://80a30d4036d72bdfb0c01d7798743bfc04a2f0a2e23cbfdd46afc655cd80fe87"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol:collatz 6060604052341561000f57600080fd5b5b6101e98061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166391ad5c8f8114610053578063a444f5e9146100ad578063a5f7af1914610107575b600080fd5b341561005e57600080fd5b610069600435610161565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b34156100b857600080fd5b610069600435610170565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b341561011257600080fd5b6100696004356101b0565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b60006002825b0490505b919050565b60005b5080600181111561016b576002825b0615156101995761019282610161565b91506101a5565b6101a2826101b0565b91505b610173565b5b919050565b600160038202015b9190505600a165627a7a72305820ad197efc75afcf0c281cefc23474d90816cd27706efe38f27ebd217763c9bd690029
test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol:collatz {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"evenStep","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"oddStep","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol":"collatz"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1e82b406305beb5fa037ddfdee2b9d5cc1103154ddaabef116cedb68b9eb0555.sol":{"keccak256":"0xec19d494b24418f5d12684b3b44fe7b4d9aaf4d4e8213785992ce37dcc573750","urls":["bzzr://d1a432a28ddbcb61ef8e2451e839de6e9f9d1591645a19c9850855537d3e0f99"]}},"version":1}
test_1e973c802266487455e19f0182d49f41024fe12a673cf9d22685997391e5db2a.sol: ERROR
test_1ec89a1f59667dbcfd24a63d4f332cd1148b840cb4bc28e8d01cebe41e7e0ccc.sol: ERROR
test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol:test 60606040523415600e57600080fd5b5b600260009081556001555b5b60368060286000396000f30060606040525b600080fd00a165627a7a72305820dbfa14c47ccae4acee9d74a6b6d1f76d620f0aed7affd6e01f0d9ff2330a28b40029
test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1f1ff3223afc87a0643b6034987c037763351852c8748e236e39c9881f386aeb.sol":{"keccak256":"0xb32034ae7a749f055cc48b09a14246ff57f551f0c1854d5996f7f0974f75934b","urls":["bzzr://73d0892c3e5816cb8cfad374645c0d78d136f9dbd8c1e96c2baf784b0666a2c0"]}},"version":1}
 conv enum Interface.MyEnum -> enum Interface.MyEnum
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_MyEnum_$3_to_t_enum$_MyEnum_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_MyEnum_$3_to_t_enum$_MyEnum_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_MyEnum_$3(value))

			}
		
			function cleanup_assert_t_enum$_MyEnum_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Impl 6060604052341561000f57600080fd5b5b60d08061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c609e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6093565b6000600282108015608b57608d565bfe5b50919050565b505060405180910390f35b60005b905600a165627a7a7230582091b06752c7db6eb3a3c3239073b1c0a8ad2e34e594344b684ec4402a7c74e26a0029
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Impl {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":"Impl"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":{"keccak256":"0xe3ab70bc3c2d13faecc8de09534fc41d647394476f62eabb2f3c21c14273fe3b","urls":["bzzr://9d7524a83f9cf965926a7863ce36e3f4071ccc5357861bb4fa6b6153a6144c87"]}},"version":1}
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Interface 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058202df0b49711baa40960e390d7cc116645e46210ae87ed5bbb7aa069be398a5e610029
test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol:Interface {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":"Interface"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1feee14dabf0be28ef5d6be04e89bcee8d863a56a6c0803b0699c3bd2ff7f802.sol":{"keccak256":"0xe3ab70bc3c2d13faecc8de09534fc41d647394476f62eabb2f3c21c14273fe3b","urls":["bzzr://9d7524a83f9cf965926a7863ce36e3f4071ccc5357861bb4fa6b6153a6144c87"]}},"version":1}
test_1ff2e190719816b0d1a397f5c1e63278c7d398676be9ac9f8bae7b93dae667c3.sol: ERROR
test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol:C 6060604052341561000f57600080fd5b5b60ad8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6010605d565b92909150600790565b60696003600260016054565b8260005281602052806040528360605260806000f35b5600a165627a7a723058207646e84485bfe0d2372db3e9bc5d4af156eee7547002d3d29fb218927671ca890029
test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_1ff69f8e39d4a33ec77f1d4eced55dd045b6551f31bdec75a7035ad29935eddb.sol":{"keccak256":"0x53bd61e49733823b725225623e8a1980184c0d8eea9b546b4b4d0db81a8727c6","urls":["bzzr://98c88d122bf0b851d31c9f1ac4ee707b323c0d45a0a5f845ff0724ec0dd3aa8a"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol:test 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6002805b50905600a165627a7a723058208e847bdc68aad172e508f9ea32ba9b419b0585109a3c68a90c0f9492a97939740029
test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_200330c394904342287d30a656c52da30aade581e43638597bb02bb1a25bd4f8.sol":{"keccak256":"0xeaea66b3c9a1e1fd21b73cd3c57abec44952185c53685936a9af85d95fa2e8e7","urls":["bzzr://5c7300a0ca411829edd183e385b0800ef13a4028a85c997ba4c639945bab8548"]}},"version":1}
test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol:test 60606040523415600e57600080fd5b5b670de0b6b3a76400005b505b60368060286000396000f30060606040525b600080fd00a165627a7a7230582062613dfc2531f64f214d3cdfef73b77dfc5c4eeefed71207287591e9aef23aa10029
test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_20181c6da59a97066571a2bbdcba68eb1c18adc430845c070d730b5f00491a52.sol":{"keccak256":"0x3d4bb3519559cdfe0dd9609bc04357a451b634368b40cc065c6500f4fe9bc5a7","urls":["bzzr://97a2ab775d67df1404e426ff7d2f35bd87f010941b8cde78a3a7e45c2d3b9db7"]}},"version":1}
test_2071a85683003fd083d9d7e879d030123a92d2da6fffff0dc5384ebae5cc335c.sol: ERROR
test_209d8b8a4bc427fe528c2b3328ae1a64ae97baf034b8f41ce9c6aba3999ef8d0.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_20f3feb9bfb8ab4076d1eef19e91f2e785eb515bc1955307d751e93458abed70.sol: ERROR
test_219335afc9c6f317a73f846bb4822dbedfcb5598b806fb4938055886e2b04d29.sol: ERROR
test_21c270ed6334d3e6637ee5cb09ef763f56f9a253eb66d5db1bc514f0348b677d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600160025b60ff811683901160ac578060ff16820291505b6001016092565b5b509190505600a165627a7a723058204cd6ee83c1ee9e274d4538ef6b227370b932fb72943fe1265c7361705effddf80029
test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_21ce8f183d4777bf2a60965e31d4a4f042462144eda9575cee81c5c89289fbe2.sol":{"keccak256":"0xb6096362f09f4c58d673e192b30ac76788ad407a662f037d1c94cb2fef460cba","urls":["bzzr://965cdfa81b7f634c3a4e7d2d1e22ee8f61b3ac7656d6f1ea6f3498170189ca33"]}},"version":1}
test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol:test 60606040523415600e57600080fd5b5b60015b505b60368060216000396000f30060606040525b600080fd00a165627a7a72305820dfe3de6c4c671a1f215cbffce1c111878c47851affbe4405955e5fa3b2defbef0029
test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_22009a70fe99611f6265af25feea3df0e4442183cbd43d5deee71b7da02abb57.sol":{"keccak256":"0x1b4f635f08a60596759b7249ba216cc1042da7269ebc289d0767b7ff8881d4a5","urls":["bzzr://67f732aa9a0c2cb6b120160cbbae37835715731db20cf180184173b80ded244d"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol:test 6060604052341561000f57600080fd5b5b60d58061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639f3fab588114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600081604051908152602001604051809103902090505b9190505600a165627a7a7230582016e7855b362caee0356b75f8b22b5c16d845ffb64e8deba7dcbf1954508134ab0029
test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2227dc580d5bf18fe318a0c29cb40e3dcd39d65578d9956d1391ab95dabfcea0.sol":{"keccak256":"0x1fc57a11d7f1427f9df46959305d7ba33bdacfada2662774588c2d5c553fd91f","urls":["bzzr://35dc68d7b12510f87ebfa7d989c22b50d1e2f427db0883e25eb5498c097f97fe"]}},"version":1}
test_22b61b7105e85eb943c6510b8ec9bc081125001beef26b7ba0a544dfec8c0812.sol: ERROR
test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol:A 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058202eb190027b15fbd7612effea4ec9fa0c0eff626d6658a598e3044a8c528f51170029
test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_22b65e5effdf42fbbf7212273a22f7439334f82d4cda33e462aa1fdc87da6c28.sol":{"keccak256":"0x55901eb689106bbd50448559d47f8a16724fd661c199522e7c847df483e170a9","urls":["bzzr://21bc0f3be6e4ac8fb2ea399bb2082bb6686607d53de192404007f0a4fe034f31"]}},"version":1}
test_2317424bd51e7c080d7111067f25e30c5d169d04f81975aa1c0f509bc2ea7588.sol: ERROR
 conv bytes10 -> bytes10
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes10_to_t_bytes10(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes10(value))

			}
		
			function cleanup_assert_t_bytes10(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000)
			}
		

test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol:c 6060604052341561000f57600080fd5b5b6103fd8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100d1565b604051606081016100638183808861008f565b90506100748160208401848761008f565b90506100858160408401848661008f565b90508094506100a3565b83610099826100a8565b8452949350505050565b6100c4565b75ffffffffffffffffffffffffffffffffffffffffffff191690565b5050505060405180910390f35b600080808060c060020a81805b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908360c060020a90040217905550600260c060020a026000600160048110151561012557fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908360c060020a90040217905550600360c060020a026000600260048110151561016c57fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908360c060020a90040217905550600460c060020a02600060036004811015156101b357fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff021916908360c060020a90040217905550600090505b6006811015610248578060010162ffff001760b060020a0260018260068110151561020e57fe5b60039182820401919006600a025b6101000a81548169ffffffffffffffffffff021916908360b060020a900402179055505b6001016101e7565b6102566001600060046102ce565b50600160035b60039182820401919006600a025b905460b060020a6101009290920a9004029350600160045b60039182820401919006600a025b905460b060020a6101009290920a9004029250600160055b60039182820401919006600a025b9054906101000a900460b060020a0291505b50909192565b60028301918390821561039357916003016004900482016000805b848311156103555784819054906101000a900460c060020a0284836101000a81548169ffffffffffffffffffff021916908360b060020a9004021790555060080160208160070104948501946001030290600a01906020826009010493840193600103820291506102e9565b81156103905783826101000a81549069ffffffffffffffffffff021916905590600a0190602082600901049384019360010382029150610355565b50505b5061039f9291506103a3565b5090565b6103ce91905b8082111561039f57805469ffffffffffffffffffff191681556001016103a9565b5090565b905600a165627a7a72305820b79699796cafe8ee5a106f13cab1b959e9e3f14b627af89824c3543e46ee7b4d0029
test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"r1","type":"bytes10"},{"name":"r2","type":"bytes10"},{"name":"r3","type":"bytes10"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_231ced441fc51e446afc3b48b6176734f149d082f480bf0ba086bc108d74c81b.sol":{"keccak256":"0x22825ff21d0bf326408b8725e0902ad02f3e9c19f913ac5d3e35a43103ac9d9d","urls":["bzzr://d32f7ce842ace70b17cae4bdddc6213197e7218a7be67ee2a1ab68d17eb63170"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol:Ballot 6060604052341561000f57600080fd5b5b6102448061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631afa74e581146100535780632bb9cb3f146100be578063e652f4cc146100df575b600080fd5b341561005e57600080fd5b610078600160a060020a0360043581169060243516610142565b6040516020810161008b81838086610095565b90508092506100a9565b8361009f826100ae565b8452949350505050565b6100b3565b151590565b505060405180910390f35b34156100c957600080fd5b6100dd600160a060020a03600435166101d2565b005b34156100ea57600080fd5b6100fe600160a060020a03600435166101f9565b6040516020810161008b8183808661011b565b90508092506100a9565b8361009f82610134565b8452949350505050565b6100b3565b90565b505060405180910390f35b600160a060020a03821660009081526020819052604081205460ff1615806101825750600160a060020a03831660009081526002602052604090205460ff165b1561018f575060006101cc565b50600160a060020a038083166000908152600260209081526040808320805460ff1916600190811790915593851683529083905290208054820190555b92915050565b600160a060020a0381166000908152602081905260409020805460ff191660011790555b50565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a72305820e0eb9367c248451cc18d31b576db4e9fff6b439bcc27acc954dc574072f953600029
test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol:Ballot {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"voter","type":"address"},{"name":"vote","type":"address"}],"name":"vote","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"grantVoteRight","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getVoteCount","outputs":[{"name":"retVoteCount","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol":"Ballot"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_231f453c1596e3c08b6f484a585a802bf980a4698e6d5a5e56826fac698256d6.sol":{"keccak256":"0x7e9c2dabf902c4fa4c0e1eb9cdf33fd12c307bcb5fc0b7025cffa6a202c56644","urls":["bzzr://0053c554dfedcc8505393aac2eca1382591d0ea1033a7ccd04f56737c13da3fc"]}},"version":1}
test_23adc429588449a205bb463266ac5229603bd8c3873bf1c1c49d62eeefb256a8.sol: ERROR
test_23ba8bdc2eb43c4c490e42f3b2c25fcb93edeb929ea6b6d3f289e07d2c9f243d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol:C 6060604052341561000f57600080fd5b5b61010e8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c81146050578063b3de648b14609e578063e420264a1460b3575b600080fd5b3415605a57600080fd5b606060c8565b60405160208101607181838086607a565b9050809250608c565b836082826090565b8452949350505050565b6093565b90565b505060405180910390f35b341560a857600080fd5b60b160043560ce565b005b341560bd57600080fd5b60b160043560d6565b005b60005481565b8060d6565b50565b60028102600055005b505600a165627a7a7230582055e3d3adce4fd000b80aa1d8436f3eb2f0f3541c606a100950ebe5b3ffa866820029
test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"y","type":"uint256"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_23db3e43201e65cdf6830045df0a4b4a2392fa3bf0f077a6fdd5d8074f31b512.sol":{"keccak256":"0xe29b2672432fcccb6f820b005e5e4f864b0e4cbe8d13eccb61a4079c9142d801","urls":["bzzr://52c9b327a0de26c254c864b6ff731382fc79bc5e03eb08c324950c4dba2464a8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol:A 6060604052341561000f57600080fd5b5b61013f8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663cb97492a8114610048578063e420264a146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fc565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b61005e600435610108565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b62010000810a5b919050565b610100810a5b9190505600a165627a7a723058206055c8a1bd0807270b73c55e496b9b29619aaa256c184edc5639165241dd67470029
test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_23db86bc922320610dadae4866269ce947edcd1d7f5e9635f77a76cc2e52821f.sol":{"keccak256":"0xaaea39484ac7573c38b00e0d181db53044a7d038ce0b9522b63323e28b945019","urls":["bzzr://874d6295633d4f0a11867b149c5e5c9dd863649219d0a61e9c40c7b73893c162"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol:C 6060604052341561000f57600080fd5b5b6102108061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461005e57806326121ff0146100b55780634e69e7d81461010e578063509d19e514610165575b600080fd5b341561006957600080fd5b6100716101bc565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100c86101c2565b60405160208101610084818380866100e5565b90508092506100a2565b83610098826100fe565b8452949350505050565b6100aa565b151590565b505060405180910390f35b341561011957600080fd5b6100716101d8565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561017057600080fd5b6100716101de565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b60015481565b60076001908155600090815b600192505b505090565b60025481565b600054815600a165627a7a72305820139aadd1c0c8d3573602b37b753ad802ab03f898ed5b9344b838a04a66291b080029
test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"contents","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"separator2","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"separator","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_240df07a48012b8d02e45e341a1a8401028f5d2039094eadeb3461d41f0b1ec4.sol":{"keccak256":"0x74552441bfd9dbe3bd3cfd711ef5c650af264e8fac747fe62abc51adb7c365fa","urls":["bzzr://260fa7c6fb1ad39312c0738f3a842435baeb50d77669c32ce68e66544baea9a8"]}},"version":1}
test_2427beb71d3d0de91002d8585eb3978ca34349e23b1e89685aa6d728d7a8c3eb.sol: ERROR
test_24520dc1be54f0553bda1644967824af5b635eb19dc814b668d9b80f2e4a4f25.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058203718443c45d191b80e61340e0663064b8e749180a71a2d3240c044ab5d404c330029
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":{"keccak256":"0x5a4cf7a8be2984f7307aa801002c6f783348f4f2483efc771e1be17c0fb2dfce","urls":["bzzr://791eda40788a4f715db8fe518e2f5b5b1ac5ac8b797dbf0bba74e29742373077"]}},"version":1}
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:B 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060926098565b90505b90565b60015b905600a165627a7a72305820d46e38ecb424753e305e4ff6e0a92be7669062ab6e41165ce6c381ce54f695af0029
test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2453fd7529797f2027623bbca8f9055f4b3eed2e42f7eb5fd5f7540ffe6157a4.sol":{"keccak256":"0x5a4cf7a8be2984f7307aa801002c6f783348f4f2483efc771e1be17c0fb2dfce","urls":["bzzr://791eda40788a4f715db8fe518e2f5b5b1ac5ac8b797dbf0bba74e29742373077"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol:c 6060604052341561000f57600080fd5b5b60f18061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b94e4f78114603c575b600080fd5b3415604657600080fd5b60556004356024356044356093565b60405160208101606681838086606f565b90508092506081565b836077826085565b8452949350505050565b6088565b90565b505060405180910390f35b6000838383604051808481526020018381526020018281526020019350505050604051809103902090505b93925050505600a165627a7a723058209cbe39480e986bdd971e6a67ae90d5089f96fcc5777c0a10932ae6896f8e15ae0029
test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_245e03965d0c84883b69adad3ab3215268612ff4d258a9bba26057da7c95d28e.sol":{"keccak256":"0x94fd345fea0183e43c205d3f6cf5863b4da25e94ae4d30f73a97b2e22c09d985","urls":["bzzr://3b291708b5b895071337c937d002baa3b62101db6a2caeab501d445eebd434e6"]}},"version":1}
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:BaseBase 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:BaseBase 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:base 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:base 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:derived 
test_2473f0039c59654870bc727029e73587c609520634ed64fd88727ff629fb5ab6.sol:derived 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol:c 6060604052341561000f57600080fd5b5b6103a88061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100b8565b604051606081016100638183808861008f565b90506100748160208401848761008f565b90506100858160408401848661008f565b90508094506100a3565b83610099826100a8565b8452949350505050565b6100ab565b90565b5050505060405180910390f35b60008080805b6020811015610127577fffff000000000000000000000000000000000000000000000000000000000000600182602081106100f557fe5b601091828204019190066002025b6101000a81548161ffff021916908360f060020a900402179055505b6001016100be565b6001600e5b601091828204019190066002025b905460f060020a6101009290920a90048102046001601f5b601091828204019190066002025b9054906101000a900460f060020a0260f060020a90046201000002179350600090505b600a8110156101d15760f860020a6001820102600082600a81106101a357fe5b602091828204019190065b6101000a81548160ff021916908360f860020a900402179055505b600101610183565b6101df60016000600a610291565b50600090505b6010811015610234576201000081900a6001826020811061020257fe5b601091828204019190066002025b9054906101000a900460f060020a0260f060020a900402831792505b6001016101e5565b5060005b601081101561028a576201000081900a6001601083016020811061025857fe5b601091828204019190066002025b9054906101000a900460f060020a0260f060020a900402821791505b600101610238565b5b50909192565b6002830191839082156103465791601f016020900482016000805b848311156103105784819054906101000a900460f860020a0284836101000a81548161ffff021916908360f060020a9004021790555060010160208160000104948501946001030290600201906020826001010493840193600103820291506102ac565b81156103435783826101000a81549061ffff02191690559060020190602082600101049384019360010382029150610310565b50505b50610352929150610356565b5090565b6100a891905b8082111561035257805461ffff1916815560010161035c565b5090565b905600a165627a7a723058207c5fac2453e900c5ed8ff087f0af2b3c0cc8eb9ea49f121815f34c926c9e56310029
test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"check","type":"uint256"},{"name":"res1","type":"uint256"},{"name":"res2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2502f572916279ddff7b6cf322f905c7aa2cc63c82022bfdc415f54126bb38ef.sol":{"keccak256":"0x6e7491d5e02d692739c3df1cff23e6843ce40400959f8ee9822a8a13cdf28497","urls":["bzzr://ee04ffc385b1f08666933d72c57563cdd7fed317dec32c315894c2978c01c2c2"]}},"version":1}
test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol:test 60606040523415600e57600080fd5b5b604380601c6000396000f30060606040525b3415600f57600080fd5b60155b5b565b0000a165627a7a723058202a8c77b68c3e7413e8b16fbaa4b7bf8d86e2051a1e34402950f49973201e58c90029
test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_257dd2560c38d952cbfb3f4a68afaadbceffdf2d27dae4f2a25e1446bfe5786b.sol":{"keccak256":"0x58d0ad6b9c3c6b05358e9f45f7086fea74d6af5ae84385f66db842bae0901841","urls":["bzzr://257311fd8ad76f65907fddb9cf365d2db85e615e13ebbda4636d96a853f84c6e"]}},"version":1}
test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol:test 60606040523415600e57600080fd5b5b60958061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b60005b600a8110156064575b6001016054565b5b50505600a165627a7a723058207ca9ef0805382bbbd5a663e35e00369dfa7ef72c2b241892540dc8fb5be18a6b0029
test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_25aaf83efc4cb5452e1bbf80b2404914f4d28a318e16b46313bae843b83a05e4.sol":{"keccak256":"0x23f7ed96dd02fe041551a92d3edf465d61d3cccc11f1b1cdda642d3047e00674","urls":["bzzr://6bfa10bac52cab9f620e45cfbda3a10896c12a947f7797f7c68e054b7e72e31e"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol:test 6060604052341561000f57600080fd5b5b6102128061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633a518b95811461005e5780633a71386f1461005e578063e43bc1e91461005e578063f44b54ca1461005e575b600080fd5b341561006957600080fd5b6100746004356101c6565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b341561006957600080fd5b6100746004356101c6565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b341561006957600080fd5b6100746004356101c6565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b341561006957600080fd5b6100746004356101c6565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b60005b919050565b60005b919050565b60005b919050565b60005b9190505600a165627a7a72305820b0f0e3f721e14d94ff0752dd0df8814d48ac2c6707f1314614e54b8dec880ada0029
test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName4","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName2","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName3","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName1","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName1(bytes32)":{"notice":"This is test function 1"},"functionName2(bytes32)":{"notice":"This is test function 2"},"functionName4(bytes32)":{"notice":"This is test function 4"}}}},"settings":{"compilationTarget":{"test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_25bfd77a6880b629cc039410c92e81e183c3f864be9ce382f0b01def026f1308.sol":{"keccak256":"0xbecdbf670d5f2afa67a3c334d15707c485ccf10e6a473a3f963a47435704f5f0","urls":["bzzr://b84c0b4e68c537462822afab26542b00c3b550255abe794096d9da6651156e87"]}},"version":1}
test_25c8232e20cb98f900c00bd561d7bfbdb84e1ed5e6c7751a97a339658e242fcd.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol:Test 6060604052341561000f57600080fd5b5b6101078061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166332df0e828114603c575b600080fd5b3415604657600080fd5b60717fff000000000000000000000000000000000000000000000000000000000000006004351660b2565b60405160208101608281838086608b565b9050809250609d565b8360938260a1565b8452949350505050565b60a7565b60ff1690565b505060405180910390f35b7f010000000000000000000000000000000000000000000000000000000000000081045b9190505600a165627a7a72305820dbaf09fd5397ec7548ea08d6eb3714d95cfda3f3270f5a97c9720759a24828990029
test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes1"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_25f1e45611f9af4ed9a250ee8c904204f1029798dc9c8d06afd5865d8adedbb1.sol":{"keccak256":"0x91ed01117a4a048b83b8ea03bab360acd992dd41d3b30c5549b34eb5f8a7d1d9","urls":["bzzr://9a79e711deb19a6670e7985bcce45eae75823840a624fb26dd82cbf77280772c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol:test 6060604052341561000f57600080fd5b5b6101c48061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c811461005357806398c3a6c1146100aa578063a56dfe4a14610106575b600080fd5b341561005e57600080fd5b61006661015d565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b6100666004351515610163565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b341561011157600080fd5b610066610190565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b60015b90565b60006101968261017557610190610179565b61015d5b90506101878163ffffffff16565b91505b50919050565b60025b90565bfe00a165627a7a72305820153f09a0752d194ed950552607703da8183b385ec9edf356ee6d4ff3022f47270029
test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_26372299b8ee13f3bd317593a0ff3d1daa3a7f9e684591e1709bee0280ab363e.sol":{"keccak256":"0xa3f3aca34ffb14fe74d8e5d8ae6055680532f313d4560964cadfcfc508fd5c93","urls":["bzzr://91e93e2370451f9fbbc7b987f8ee25ecb8419d25e6d98b92e3e183c872ba4ac2"]}},"version":1}
test_266288371c359e298af6d2c47b378f6432c5355aea779d43e4e92b3b0725d793.sol: ERROR
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820675acb9f5a67f5238cfc3d0ea522b7e16387e515f46e0fc666d148eed9d789090029
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":{"keccak256":"0x91e135540ecc6bd3a24a80de7778151bd48dfec6364e31740c37493c62e26a42","urls":["bzzr://efd0d92f98aad1683ebf2fc8d6ed0cb5cfe99a0fc63beabb8f10fe2f8accc878"]}},"version":1}
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:B 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60015b505600a165627a7a7230582096ccdfbb7628a22e934ad7b15903f269fb7b5b8fcc7e91c70672ec4c6a883a040029
test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_27224fde6747525968ffbf2333e84e7a8ad4fe3aa5315090876e291367da12c6.sol":{"keccak256":"0x91e135540ecc6bd3a24a80de7778151bd48dfec6364e31740c37493c62e26a42","urls":["bzzr://efd0d92f98aad1683ebf2fc8d6ed0cb5cfe99a0fc63beabb8f10fe2f8accc878"]}},"version":1}
test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol:C 6060604052341561000f57600080fd5b5b61013b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166391e145ef811461003d575b600080fd5b341561004857600080fd5b61005b600480356024810191013561005d565b005b6100696000838361006f565b505b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b05782800160ff198235161785556100dd565b828001600101855582156100dd579182015b828111156100dd5782358255916020019190600101906100c2565b5b506100ea9291506100ee565b5090565b61010c91905b808211156100ea57600081556001016100f4565b5090565b905600a165627a7a723058208235aea133ee84834977ab7056a70f42baef57624986a7b9ac601953bf00dab00029
test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"string"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_285c0d388233090544c52f31863bce50a4100d2d28d075787f2e2226df9dd922.sol":{"keccak256":"0x8bea9e588bbcfef88163cc8c6ca3f17dff6fea53639f3813bc08776c8fb4caed","urls":["bzzr://d76219cb9463b4ec0b4d705d56b20b37a74163cc049f1422d21ab1cfb9e588ca"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820a83a6033abfa2e55875f99b69f053496a0c0483c8669c712853d2c14ba0bed250029
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":{"keccak256":"0x9fd284c5f77803bd2e753fd84695ec847d1f6897bbf70c9b156ff8e8b184ceab","urls":["bzzr://bbdf9303f76da4a5b0613b23e276cbab32a8bc61a2253f07c8f62d4f9e8fe0f8"]}},"version":1}
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Test 6060604052341561000f57600080fd5b5b60f78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000609260b4565b60408051908101604052600281526003602082019081529091505191505b5090565b6040805190810160405260008082526020820152905600a165627a7a72305820a3fdc4ef53ae295eae54801f070198477ee2ad191561af2dfa011d67f62f560c0029
test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_28a20f4f2e4f4fd2dd90edd91c34819258b76d51ff46e016d49547c601a68850.sol":{"keccak256":"0x9fd284c5f77803bd2e753fd84695ec847d1f6897bbf70c9b156ff8e8b184ceab","urls":["bzzr://bbdf9303f76da4a5b0613b23e276cbab32a8bc61a2253f07c8f62d4f9e8fe0f8"]}},"version":1}
test_28d1a7bfe6fd49dedc183722e1a34835bd5527ef39f3224e97bcebba685dbb36.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:C 606060405260008054600160a060020a031916611212179055341561002357600080fd5b5b610276806100336000396000f300606060405263ffffffff60e060020a60003504166326121ff0811461003a578063b8c9d36514610091578063e2179b8e146100e8575b600080fd5b341561004557600080fd5b61004d61013f565b604051602081016100608183808661006a565b905080925061007e565b8361007482610083565b8452949350505050565b610086565b90565b505060405180910390f35b341561009c57600080fd5b61004d6101a8565b604051602081016100608183808661006a565b905080925061007e565b8361007482610083565b8452949350505050565b610086565b90565b505060405180910390f35b34156100f357600080fd5b61004d6101e2565b604051602081016100608183808661006a565b905080925061007e565b8361007482610083565b8452949350505050565b610086565b90565b505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff1663e2179b8e6040518163ffffffff1660e060020a028152600401600060405180830381600087803b151561018c57600080fd5b6102c65a03f1151561019d57600080fd5b505050600790505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff1660405160006040518083038160008661646e5a03f1506007925050505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff1663e2179b8e60c86040518263ffffffff1660e060020a028152600401600060405180830381600088803b151561023157600080fd5b87f1151561023e57600080fd5b50505050600790505b905600a165627a7a723058206e48608bcf5d23897250cc59daf4aaae97b248e71bfa770ae4fdb382fd8774c80029
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol":{"keccak256":"0x670ff3047592ccf3fd30a7fb13c3a2d1217b5c6824e86527628dbddeaa7b2f4e","urls":["bzzr://6e7328babe5a56285d582d23f91612eed06d53465400d3406a8db75a2142fd1e"]}},"version":1}
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:D 
test_2910a9ac133f6a580a6b53ad9bc1dfa6d66e28b3c8f812e62048c4ca247bf196.sol:D 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:C 6060604052341561000f57600080fd5b5b6101698061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e61012b565b60076040518059106100ad5750595b908082528060200260200182016040525b5090506008816003815181106100d057fe5b602090810290910101526100e381610101565b806003815181106100f057fe5b9060200190602002015191505b5090565b61010a8161010e565b5b50565b60028160038151811061011d57fe5b602090810290910101525b50565b602060405190810160405260008152905600a165627a7a72305820bc4848e176fdf83411cb912c0417fa0a4032ff4be873a98518c732a55878e8be0029
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":{"keccak256":"0xcf737dd686ccf8076ddf21e167cd5ea739a2d12a435b5d467e1e64cb0ef1ceb7","urls":["bzzr://1b52745462423b3f234201fbc188b4088d52ab92206f3e2965cf15b2c727be30"]}},"version":1}
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582044a8230d9120c08bf98030724c37156b39debd1d002337186e19f0f0378923600029
test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2952e80a3c364c576e1f3b5db793902412f8a84a7388474572c4f5fe5bd9d926.sol":{"keccak256":"0xcf737dd686ccf8076ddf21e167cd5ea739a2d12a435b5d467e1e64cb0ef1ceb7","urls":["bzzr://1b52745462423b3f234201fbc188b4088d52ab92206f3e2965cf15b2c727be30"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:A 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a72305820756ff8a3238bf01a9b3a783c34ae85491f1765b2f72de0b783f728a76466b55e0029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:B 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006092609b565b60021790505b90565b60015b905600a165627a7a72305820b3ee5b24f34163abbc25679e87e54c4ef1f0541969b621fcdb4af2ca24157fab0029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:C 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006092609b565b60041790505b90565b60015b905600a165627a7a72305820afc62c4bbe2e6770008014e399da9350894106fe9c44ad637df72008e65b97b10029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:D 6060604052341561000f57600080fd5b5b61002564010000000061009161003182021704565b6008176000555b610077565b60006100486401000000006100a261005182021704565b60041790505b90565b60006100686401000000006100b361007182021704565b60021790505b90565b60015b90565b60e5806100856000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b90565b6000609960a2565b60041790505b90565b600060aa60b3565b60021790505b90565b60015b905600a165627a7a723058203a7d5a75e21e10930a511689ebe9013dfa120623cf4be96bca5a167b8312ec550029
test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_297bd4e1a074aa4bbd917ec28fd68facae4641e2a956f42f43b3a371443e3f98.sol":{"keccak256":"0x8079302466f5ce4518d23cf60e9d4338c7f2a96d4f3e9b215430ff40e66c38ce","urls":["bzzr://1e32adafddcf113f2a674495d5d72ee6571d6263f0f55568e6d9098c5cb6cb77"]}},"version":1}
test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol:Lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e1497ad2927c768f4f0ec253d75ef65a675cb959136361acd88e223458713dc40029
test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_29ddab281a53be7e5f2c4efaac72f651c69c2e97611e91e89bf07b5c418656ba.sol":{"keccak256":"0xeb8237657a02e7a99574be39e790288faea2dd3e5939cc216446dde04fdeedfe","urls":["bzzr://cedde538663e15454917121607b6024263f255a7746e16b8bfee092a36813822"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol:test 6060604052341561000f57600080fd5b5b6101548061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634df7e3d08114610048578063bf3b9e381461009f575b600080fd5b341561005357600080fd5b61005b6100ff565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b600435602435604435610115565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b600061010f600160026003610115565b90505b90565b60648302600a83020181015b93925050505600a165627a7a72305820db8c431b3d2cabf17793a0aaf869eba0d894b35e6c3266321cc15b1a0df7ce870029
test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"a","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2a7336e5695f47fb5c6f8d031c18cdfeca947c0e5fcc13e32b27d0417b838ea9.sol":{"keccak256":"0x60f4ce96740ed633706eff6e30a82787db8eb5f5ffea535b676e73c6653642a0","urls":["bzzr://63d1efa57b1f60ebe1a7316693df7680fa8d6fe46735315f86c9bc7c24ed0731"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol:test 6060604052341561000f57600080fd5b5b7f64d962e4eec2a0d2e4053fc69d3b480f61c5923c09e4bad52cdeec343ff95073805463ffffffff191663323400001790557fd9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40805460ff19169055600c7f2a41d6eb867ddcfeac667c3fe429f7b1dc4c811189b3ece5135425064920a1b75560176000527ffbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150602052601f7f367030a1042156fff1d8679820e85951b0be7f9554b0d46f2bd5fe58251ca826555b5b61028e806100ed6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308f08e11811461005e57806313cf2545146100ba5780634939dcc014610117578063cb9b5f3f14610193575b600080fd5b341561006957600080fd5b6100746004356101ed565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100af565b151590565b505060405180910390f35b34156100c557600080fd5b6100d3600435602435610202565b60405160208101610087818380866100f0565b90508092506100a5565b8361009b82610109565b8452949350505050565b6100af565b90565b505060405180910390f35b341561012257600080fd5b61012d60043561021f565b604051602081016100878183808661014a565b90508092506100a5565b8361009b82610163565b8452949350505050565b6100af565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b341561019e57600080fd5b6100d3600435610250565b60405160208101610087818380866100f0565b90508092506100a5565b8361009b82610109565b8452949350505050565b6100af565b90565b505060405180910390f35b60016020526000908152604090205460ff1681565b600360209081526000928352604080842090915290825290205481565b6000602081905290815260409020547c01000000000000000000000000000000000000000000000000000000000281565b600260205260009081526040902054815600a165627a7a72305820bc3c44c04420c9fa582a68f5efeab454df91085f3d04a8deadeed0c2a69f8dac0029
test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_bool_map","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"to_multiple_map","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_string_map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"to_uint_map","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2ac2e28d376158edd024f2ea574552b74d3f0764585d1abd332a25afbc64b725.sol":{"keccak256":"0x0c3ec1f82656c8acb098901f63286348afe7420948656487ae803908bc2be8d5","urls":["bzzr://1a0cf24ccd218476bf497513e61cba8630b9a3cf3b8abb92a2c4632b4786c68a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol:test 6060604052341561000f57600080fd5b5b61010f8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60006005815b8381101560d857600491909101906001016003845b06151560b25760d8565b600991909101906002845b06151560c75760ce565b6013820191505b6007820291506093565b8192505b50509190505600a165627a7a72305820987c8af6689942cdc7036398ed1818a59dfd8e11bc553140d552c77edd78e6900029
test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2ad1bcf17305566e954e80cd2da104063d44954feaaafacb07dfed858e27216a.sol":{"keccak256":"0xc5dfe3366d2e50d83c1d305bd0531ac77d5cf072eab72c127bdc459f74921995","urls":["bzzr://bd9cb18a29d1a062f05e025651e4be8314b950dfd506ae7d97fb09af52c7098a"]}},"version":1}
test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol:C 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a72305820b88a6848852cc69ed60af1714c29ec7b56d3ea2a4096347542d495a4883e3d860029
test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2ad740e6d990253b53c4e2b48c5e7c8fdcd9c63ced5be5363a0050766bdd267f.sol":{"keccak256":"0x1e055de7753197aa6caef28e40714eb0d0300647dcdc3e9901fd6359d3e75c9b","urls":["bzzr://ee11cb1c7d0cf7f2a2e582098f0bd278297c11d517e6375f59a647da435020d0"]}},"version":1}
test_2ad7fdc96bcffc9b8b3418756a788e45e3c6b61c79208dc4e880015db6d71cf8.sol: ERROR
test_2ae60d6a0895f115b7fa888469933ac3c88be554f0938bbf013c32ad979604d7.sol: ERROR
test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582095cc99b558f34162988975aadf52c88f4072d3c33e82ae8e1a4a13aa42047c260029
test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":false,"name":"e1","type":"uint256"},{"indexed":false,"name":"e2","type":"uint256"}],"name":"e1","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":false,"name":"e1","type":"uint256"},{"indexed":false,"name":"e2","type":"uint256"}],"name":"e2","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2b58076bce1decfeab2ed2e368ee5ff71e89f62293b64e7692314da36bf3f817.sol":{"keccak256":"0xb999be5cb5f7184920f79b76a9d970455abee77bd52295c1526517bb49113f9e","urls":["bzzr://f36e8dae978c22fb46676ac40538a4d8be21bff4f8074fbf0095d8f783d78878"]}},"version":1}
test_2b585c06a537d28df25ea6ebc47bb62cae423aa3c4fea5fb5c4d29c8813b0f9a.sol:M 
test_2b585c06a537d28df25ea6ebc47bb62cae423aa3c4fea5fb5c4d29c8813b0f9a.sol:M 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol:test 6060604052341561000f57600080fd5b5b6101298061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663131e2f1881146046578063fa3bd6c5146097575b600080fd5b3415605057600080fd5b605960043560e8565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b341560a157600080fd5b605960043560f2565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b600781025b919050565b60021981015b9190505600a165627a7a7230582006ce50c93824fd6f67e93773d025387c515b4c5f0216374b8aa45020f19766c00029
test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2b92dd3e7c6712dee23b39d0ab8d70f61660225c10e0e20e1ef3786c5048d738.sol":{"keccak256":"0x32345209e70f28eda2aa11363c30708bc0e6792c7ff937e7fefcb516d62866cb","urls":["bzzr://d95232aee8148ed6143a6ad57a74895ca1da66ba2eff3912cd2340271fe429b8"]}},"version":1}
test_2bbdaedea9fa90ddc4c04e4d676b490c2456392a0c83b1b2d89fc243f08458f1.sol: ERROR
test_2bdcc8bfb761d26576f8874d34645da6df2be8650e9074c16ffa339b6f432db3.sol: ERROR
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582028f1b1f3bbcb76464b3b85d4c9c16acfe67013f4afaa74eb1498d0f326b68d300029
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":{"keccak256":"0xbb860d220d3a6b9fd0532ef1c1d7fcd7683fde9d94ae020004ba65c85594f865","urls":["bzzr://fc00cf803a5cdde01f232bccd57f8fd70110c3a7c0035e76aa5aff53f4c00ccb"]}},"version":1}
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:Test 6060604052341561000f57600080fd5b5b60d68061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631427a69381146046578063cadaacbf146058575b600080fd5b3415605057600080fd5b60566083565b005b3415606257600080fd5b605673ffffffffffffffffffffffffffffffffffffffff6004351660a6565b005b60005460a39073ffffffffffffffffffffffffffffffffffffffff1660a6565b5b565b5b505600a165627a7a7230582002744b1cc65157533e59eccdef0f1f807efdaf05329de4c5899054f0dd93bf0d0029
test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"internalCall","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2be2ac812059e3f55e21f9d1c376638ec0efb2072ff4c1cb2bc2d913414ee27e.sol":{"keccak256":"0xbb860d220d3a6b9fd0532ef1c1d7fcd7683fde9d94ae020004ba65c85594f865","urls":["bzzr://fc00cf803a5cdde01f232bccd57f8fd70110c3a7c0035e76aa5aff53f4c00ccb"]}},"version":1}
test_2c19ddc5d13b5f0f581ec94d2493c8ff10492c8464bf691e6f757ff59c933420.sol: ERROR
test_2c1a59969ca02ca9d2e50f4c7eb7b02696fbfbd5035cecfd44366fca4eb3c2f5.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2c95d7c2c9478cdf7030cdc7c543dfa905b262b3fea0cfb05eac9cd801942e02.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2cd1fa33d46dde7da4cf3ab9bf7879f3190a627a4fcf8081e8e5fabb197e5f7e.sol: ERROR
test_2dca21b55b2cc7638f34edb2e7539a2dfd0f9a8a7d37b10ddbf455965633048e.sol: ERROR
 conv uint256 -> uint256
test_2e33b6af212d5061d7bae5cd85461d3fad525e5727539d0ccc82c620774d5654.sol: ERROR
test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol:c 60606040523415600e57600080fd5b5b604380601c6000396000f30060606040525b3415600f57600080fd5b60155b5b565b0000a165627a7a7230582030188e39ddfdec2f957398d6127f38fd644bac1917c6614bf26c1b6912a32b7a0029
test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2e5eab9a56644ce913afb7952a671d8c7600079a084705d23d7b3e86e770f29c.sol":{"keccak256":"0x32069e251a9a1bd3499641f8c9eba13402b529378e8e863ea197fa67f30d150a","urls":["bzzr://8706fb4b89fa12c8344ffa1ba13c194abc3778a832507e49101289b152ef1e67"]}},"version":1}
test_2e67b197242ff144a22953286a60e3c80e47124d7251a5b3fd1f51b8e03003f0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663131e2f188114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a723058209512450554cb53694150d601f3542c451bb8e61ef4d8d4f96a6ef81901a8fabb0029
test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"Multiplies `a` by 7"}}}},"settings":{"compilationTarget":{"test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2e736a07d49ed225e4e43f2732d16fa39113935727a501fd40f0349571699161.sol":{"keccak256":"0xa22d17bbc30d7f304ef9332e5e7a020846475329db10636c53488d798d8005f3","urls":["bzzr://2ba8b4288e297f078a805b67345de4aeb47819809b3b9e04203bae96094a9f6e"]}},"version":1}
test_2e81cff8bf1f02c463318a907770cac0ca269d59b18d24f259f29adb27485e1b.sol: ERROR
test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol:test 6060604052341561000f57600080fd5b5b60a68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663544aa3b38114603c575b600080fd5b3415604657600080fd5b606f60246004803582810192908201359181358083019290820135916044359182019101356071565b005b5b5050505050505600a165627a7a72305820026c99d2d453003fd3b55c3d0a4feab14efbeaa8f1d3d456121cb78490a54c030029
test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"string"},{"name":"b","type":"bytes"},{"name":"c","type":"uint256[]"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2e95362c5ae87d2a35462322a9074a54ee87260c8aca4f47e776a0564e017ddc.sol":{"keccak256":"0xcd22b0144b1ef4a6d44fff61d8214a6c60e6cb5b1aa48d9329121c93587c6190","urls":["bzzr://845796776b21b47b4626b5af8ade0a88b7f83263e08ab3f379c49744269e0381"]}},"version":1}
test_2e9c1616ce7f9ca9397503924749c6fe5e2a42bec6a584eca226f980f349099b.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol:test 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6007195b905600a165627a7a72305820fb010a67524c1ea24bc177278747e8d786c5b0cd9f1da05662133538483b27b00029
test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2ede840380f55307e1fd03da58ffcfc787699552d2aa881ce2465747ddb3990b.sol":{"keccak256":"0xedbcf6ee7b196d7d6c4e8d287ecafa9448ddcbf7a6b425e763367729af11d7cf","urls":["bzzr://073ca2a8392c901528de2685dae18e28b11964705fb5d1ebafa17cb0fc5b4243"]}},"version":1}
test_2f1d5f25a076f2a69c5b0573598bbd142b8d02e40e3cefae798e0e518c29d1c6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol:C 6060604052341561000f57600080fd5b5b6102cb8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114610048578063f8a8fd6d1461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b6100fc565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60075b90565b6000600a61010a82826101b9565b506100f66000600981548110151561011e57fe5b90600052602060002090600491828204019190066008025b6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600190805461016c9291906101f3565b506101b36001600981548110151561018057fe5b90600052602060002090600491828204019190066008025b9054906101000a900467ffffffffffffffff1663ffffffff16565b90505b90565b8154818355818115116101ed5760030160049004816003016004900483600052602060002091820191016101ed9190610252565b5b505050565b82805482825590600052602060002090600301600490048101928215610241576000526020600020916003016004900482015b82811115610241578254825591600101919060010190610226565b5b5061024e929150610273565b5090565b61009191905b8082111561024e5760008155600101610258565b5090565b90565b61009191905b8082111561024e57805467ffffffffffffffff19168155600101610279565b5090565b905600a165627a7a72305820a4a003d4176cf4a9c4736b0f3344f892356ab6a35d37aa15db84c6de77cb8ada0029
test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2f2475ccbf0fb73e2ff30e34d0fe4c91f6ee45eba14a70775cf19950e86c7e35.sol":{"keccak256":"0x18d9029ccdd56a80a09b3076aade10e461c1b87b052b4bdcdbca8b2b94afae9c","urls":["bzzr://bd61cc8b2dc00561b324e898b2dd149791b009d3f601704d6885809beee5c9f1"]}},"version":1}
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:C 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820b5a40dff59e4077fd8a3703e8295a3e3457704131b39c6fa015f32b91a97bb5a0029
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol":{"keccak256":"0xe447f9d208858b03796b24c5279555ed414bff07299355e073704e60a114949e","urls":["bzzr://d2317ea5e6bda80982c09ad474dc857b0901795a1115c7d2e65acf6892aeab85"]}},"version":1}
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:I 
test_2f91f964446d241a6c6c4aadc2c98f5c18a388ed98f3af84915ea1110f0cfa50.sol:I 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:base 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:base 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:foo 
test_2fe113c7347366822aa8924c3e54f33190d18eeeae61ff31db8b9f2034396c8f.sol:foo 
test_2fe7776b656c9116693c06122c8d1b26f1e87f6a058d58a410dbfa0b8f69735c.sol: ERROR
test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600360018082815b50505050505600a165627a7a72305820af164377ec2ba68b0357ad479b101a07d1c712c8efefacca91bfb4eebcb828270029
test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_30027258e2d43db7e752bcc90c199bd8af09e7ec01bfa4c2dcf823641b77716a.sol":{"keccak256":"0xe236ad556b65c5070dc653c0fd5546aa99be03fae183018ea79bbae5c6854ef6","urls":["bzzr://7bf8972a6697d01d2c5a766c0fd12662efe5500ec3161efc528c7d2d5bc73ec9"]}},"version":1}
test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol:c 60606040523415600e57600080fd5b5b60858061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600260009081555b505600a165627a7a72305820a89ddd9ff0e326faa6fa701ac15f9aa464aaa261f82557ea1add6f4bc8163fa10029
test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_303047b49a57ab91e2f3b40b2d21a4ef63ce14ff304ee99e991d51ff8538ec28.sol":{"keccak256":"0xc4869342ba4dae1fd52ee3783522b5a1628e628e5f16c2bcfb5c997d24c912c3","urls":["bzzr://eacfc44e05719cda49c973c97b26ba3dd0e16f83a41c6bf60b46ab7f758baa45"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol:test 6060604052341561000f57600080fd5b5b61016d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166368898b5e81146100485780639f3fab58146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fe565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b6100b860043561011a565b60405160208101610071818380866100d5565b905080925061008f565b83610085826100ee565b8452949350505050565b610097565b151590565b505060405180910390f35b600081604051908152602001604051809103902090505b919050565b6000610125826100fe565b826040519081526020016040519081900390201490505b9190505600a165627a7a72305820b2e8281494190d94f1ed1b801378f6959ac3136e7484dc31172d35ac69104a190029
test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"b","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_30e87df16b8e132b56220340341d20c6c97cd907bd10f9e197785db5094b8e8e.sol":{"keccak256":"0xd868b449256edf783251232ae8e9ad43971f812417c715bc5a357a6a663fa867","urls":["bzzr://00ce13968d06d5d7dbcea0c1f2ca5cf5d3949c20d15912195c3ffd2681cb98c4"]}},"version":1}
test_30fba7e835bc9fe59bdf2cd6a8d8439886aea56fd1b7357d56452d5e0ec9d89e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol:test 6060604052341561000f57600080fd5b5b6101fe8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461005e57806326121ff0146100b55780634df7e3d01461010c578063c3da42b814610163575b600080fd5b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100716101c0565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561011757600080fd5b6100716101c6565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561016e57600080fd5b6100716101cc565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b60005b90565b60035b90565b60015b90565b60025b905600a165627a7a72305820bcc94ab6a90f0511df4e199a96287f337b5cee57b7de562db367b1cfc42104870029
test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"c","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3101bd2f49340f4bd363ccd5162f1eda15c3b70e3c8c8d12cf4e2e4dd8c55944.sol":{"keccak256":"0x1705c7872495911cf09db3d80c1cf0e4a0bbcd9a83bd7479b9bedd9e4c41b38a","urls":["bzzr://5b9ebf61e744f4b12c23385fd40736323281e48e0ab25cf0d86ace50975e2d2d"]}},"version":1}
test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol:c 6060604052341561000f57600080fd5b5b6101978061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b6001805461006291600091610066565b505b565b8280548282559060005260206000209060070160089004810192821561013357600052602060002091601f016020900482016000805b848311156100fb5784819054906101000a900460ff1684836101000a81548163ffffffff021916908360ff160217905550600101602081600001049485019460010302906004019060208260030104938401936001038202915061009c565b81156101305783826101000a81549063ffffffff021916905590600401906020826003010493840193600103820291506100fb565b50505b5061013f929150610143565b5090565b61016891905b8082111561013f57805463ffffffff19168155600101610149565b5090565b905600a165627a7a72305820aa74a5c0eb4eaa33e95ef95ec864673ec4326dc8468e5abb0c9b76aacd997af20029
test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3123179911537535cfa5d4f04e4d00e0180ee2db2a842857e5c30f34488ee233.sol":{"keccak256":"0xf89a93771e5d4eee7d434d0886e9adc024fff9deea9c9ad04f6537756b82d883","urls":["bzzr://46fa629f2af0e501c9a4423ffb5d4d1ed30b4c0e20de95a795cc4e9bdaac24e4"]}},"version":1}
test_313170ced34ab41ee17a281af7b38a943a4806b469e2660420b9888b6c0d133e.sol: ERROR
test_315255d5969e9c19086df9370ca472744ac6acbea3ba0fae1d006bcddba7447a.sol: ERROR
test_315cb308a840dd1210b9b918dfd0101c7772aaf4acbb69b948fdd755879ac62c.sol: ERROR
test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol:A 60606040523415600e57600080fd5b5b60998061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000805b60015b60ff16915060016063565b60005b60ff1690505b50505600a165627a7a72305820a582a79c20abd3459e97a464791a3688c0fd858007fad56d35e22ed45ffc73430029
test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_31fe3ec03a2a72c2443b2e8e222a18a26e68da6aa989d19442afd242df75d521.sol":{"keccak256":"0xe948f34ace725ee930087f36e82997b3a3dc069050afe0ec811b80d87fc89cba","urls":["bzzr://8278b967a9f0dc4379fcac1f0c60fe352f8ea3ca943626e7073044b39700eb50"]}},"version":1}
test_32497a70dbc22d549d17702560ebfc5d450449c45c978a471f35f5fe044409b7.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol:test 6060604052341561000f57600080fd5b5b60e38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6000805460015b83840281101560af57600080549082905592505b6001016094565b5b50509190505600a165627a7a72305820617aa052567d2cce9377c1be8562bcae9d8b55af322f473bc242ef1722306a1a0029
test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_324ec88d8ef1790234186e3c8e3f09e577fe217891fc2477fcdd0a26bd7126dc.sol":{"keccak256":"0xe5d85352882d157c9d9bb5e1ecdb9e8e370a7a91c1169541874800ed20740276","urls":["bzzr://bc0729e585d948db3a0a1f4422e11e6a0362003e977a3daed4e79d2a38262735"]}},"version":1}
test_32535df9c37fbc1561f69fc3000f212cc16b35e71cc3a053e69dc1b2221913b3.sol: ERROR
test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol:A 60606040523415600e57600080fd5b5b60978061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600160006006605d565b506003805b90505b506003805b505b50505600a165627a7a72305820286794ae8ef8eb24d1808fb17b6e7bd189adfa536400aa53dae5709b636ed25f0029
test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_326fd67a0d2954f7c0671320010228cdd6fbc6b23d797a655dc17e633e27ce88.sol":{"keccak256":"0x0368835aae8e395fac1854be8dcbcc0500d0127d3b281ae7ccc710ff4f99cdd6","urls":["bzzr://ef623467b4bf18fef189db6c7668b2f5adc8c98b23d9d7e1c06ad844ccfaba50"]}},"version":1}
test_32840422b0a0137319f022ed1ae16f00b45d85b00f908ef569d6bc4061b8055e.sol: ERROR
test_32a8c0e116377699148f8688a6dac55c17ee2b012e72c70f8ac43ae8b17f94d4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol:A 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634773e0858114603c575b600080fd5b3415604657600080fd5b606573ffffffffffffffffffffffffffffffffffffffff6004351660a3565b60405160208101607681838086607f565b90508092506091565b836087826095565b8452949350505050565b6098565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff8116315b9190505600a165627a7a723058205dde79746a523687e28e213e60e4bd3b9aaa44a55cee57003466b4da101aacf50029
test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"address"}],"name":"lookup_balance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_32cd6bf4b3260db04422b56a31d1d0eab695be7343f275ee951650069e7e7384.sol":{"keccak256":"0xf7887aa6215326ff4b9a35a52a97c3e22781b6ce23565abfd63accb207c5c801","urls":["bzzr://9240467964fd5233781fc5e2aef3e5e2140d7933cff7e7562b2bde7fd6aca702"]}},"version":1}
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol:C 6060604052341561000f57600080fd5b5b60408051908101604052600180825260208201526000815181556020820151600191909101805460ff1916911515919091179055505b5b60f1806100556000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166386b714e28114603c575b600080fd5b3415604657600080fd5b604c60b9565b60405160408101605d81838087608b565b9050606c816020840184866075565b90508093506087565b83607d8260a1565b8452949350505050565b609d565b83607d8260aa565b8452949350505050565b60a6565b151590565b60ad565b90565b50505060405180910390f35b60005460015460ff16825600a165627a7a72305820f17bd91c988dedf63f440860544f40c195e451216e17605cfc5d9d90ffae4f050029
test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"s","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_32f859129a9596f7c2b02fc3af5fe610e17fc65fba4f10674cd0403138c575e6.sol":{"keccak256":"0x19fd732beeb6f4d596f593ecca0684881900a50877a51e743a2a53e89ec41e8d","urls":["bzzr://0981498556c202868dbf435d3240105add9c9b08b99956048f95e321ca8534a6"]}},"version":1}
test_334c9de02a0b2e65dc57e059735923aac21f05f99930b42aa88c93b89d8d0858.sol: ERROR
test_3372262e5a40a66443c5d01a05573bde692f0207115afcdae6053404e37db4cf.sol: ERROR
test_33869ca79496600f2f42f36d9632270889d356571832756a6316bbd408a3b3cd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Base 60606040526100196401000000006100e861002682021704565b5b60008190555b50610049565b600061003d6401000000006100e261004382021704565b90505b90565b60015b90565b610122806100586000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663275a4dcc81146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660e8565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b60015b90565b600060f060e2565b90505b905600a165627a7a72305820562e9eca049aa0961f89a2b4c5252a762b6173379a9d532ede5326bdfdad08490029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:BaseBase 6060604052341561000f57600080fd5b60405160208061015f833981016040528080519150505b60008190555b505b6101228061003d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663275a4dcc81146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660e8565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b60015b90565b600060f060e2565b90505b905600a165627a7a72305820ff9e3a14de35b486ee835b82655f45cdcfbef4eecacce6016f26a40dc7dbb9a20029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Derived 606060405261001964010000000061016561002682021704565b5b60008190555b50610049565b600061003d64010000000061015861004382021704565b90505b90565b60025b90565b6101a1806100586000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663275a4dcc8114610053578063d46300fd146100aa578063e2179b8e14610101575b600080fd5b341561005e57600080fd5b610066610158565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b341561010c57600080fd5b610066610165565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b60025b90565b6000545b90565b600061016f610158565b90505b905600a165627a7a723058201e17c2eeb43136ce4d7cae6fd89057ac6b582b43876cb574537606c1ec4bcd0a0029
test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"overridden","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_339c3d5bfb41b20bd2e22e59e4f867a93e2da5f416cb7587e51e87e08b5670da.sol":{"keccak256":"0xbd173a5d78a807a3a9cba278f54b1a352b855c8d6204bc30dbebbf0758e9464e","urls":["bzzr://9b8b0243272c66df4a6bc6a49c33676f001213cea0cb07571c9964c2472f698b"]}},"version":1}
test_33a06d97652e53ef2551f939b41aa48c5e914950fc245e0970645653e9e72bf5.sol: ERROR
test_33ae280f7aa68d69447fdc4573cd1cb2d6b75247c45519d27cee0763fa86c640.sol: ERROR
test_33dda9001ab85d0e7dba349e8fc3b49520da93418b5396d981284b629a837f6c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol:C 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b61057a5b905600a165627a7a72305820e2e3435a91101e97ae87c92d26bebc352636a4bbc747c5a14a57b3ad1c5ace2a0029
test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3432344f88be915cec8a19908ca07a0fa71f198aa1d6809eacba1a4e8f77980c.sol":{"keccak256":"0x746e12e00d70ebcbc7f3adfe0f6688e68f40d8f8c1b6c30b3f91276dcc3c3824","urls":["bzzr://4e2df7bf5e924949156b2571c83d3079142ebfd7c47444341f49dbd503a58dfe"]}},"version":1}
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:base 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:base 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:derived 
test_34577efa4fb6cdb05026b57d86a81b6e61832adab580d1d700cc862767f076ff.sol:derived 
 conv enum test.ActionChoices -> enum test.ActionChoices
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_ActionChoices_$5_to_t_enum$_ActionChoices_$5(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_ActionChoices_$5_to_t_enum$_ActionChoices_$5(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_ActionChoices_$5(value))

			}
		
			function cleanup_assert_t_enum$_ActionChoices_$5(value) -> cleaned {
				switch lt(value, 4) case 0 { invalid() }
			}
		

test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol:test 6060604052341561000f57600080fd5b604051602080610109833981016040528080519150505b5b505b60d2806100376000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631b08d96f8114603c575b600080fd5b3415604657600080fd5b604c609e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6093565b6000600482108015608b57608d565bfe5b50919050565b505060405180910390f35b6000805b50905600a165627a7a72305820b6bdf0e4178f0018bfae283282c39ff7757b6bc198e28a315f95ee0bd1df29fd0029
test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"ret","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"inputs":[{"name":"param","type":"uint8"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_345fc625e3eb79cdaf00ffe955512df386c7eff31780047b95932458efcee403.sol":{"keccak256":"0x4927fcdc682ced2516f6c177a0c1b51c9aafc4fbb1581d48d63df53c892fd5b1","urls":["bzzr://a66b53b8cf17044ec4a4aeb8cf1dc51f82cd02a1969d11cc93b71047783a9a68"]}},"version":1}
test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820fb79ef4929463d2ebaaf62438a6674a59af0a2ad4293f4b8d4535ddc211b63550029
test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3460dcdd6f0622478f71b4ae5d197b5c0d1d911ef8bedce7e32f143435e9e91d.sol":{"keccak256":"0xf1c86fa9a57c46007b81172ed0adceda6a716344435b80991c53283b3dd241b2","urls":["bzzr://ff8ef708d8095f167909f539e94b32a2066a901e4aa92f29c8a711ac2fd2974c"]}},"version":1}
test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol:C 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166347dd98d48114603c575b600080fd5b3415604657600080fd5b60626fffffffffffffffffffffffffffffffff19600435166064565b005b60005481906c010000000000000000000000000260025b7f010000000000000000000000000000000000000000000000000000000000000091901a8102046010811060ab57fe5b50505b505600a165627a7a723058200dd0a3be3a90d5e155b00384ae735ee30fe0532260689267de37ecb2b1b87dbb0029
test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bytes16"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_34e954d68388590cfb45b820a23923bac19747104ec22933b5c7891ef89f887e.sol":{"keccak256":"0xd045228bebfbe3942f1e46b22403745953acbeaf6a832cc44cb99a5767cd12e3","urls":["bzzr://e23becc0c6c08ebf153374af89bab90cd3d2b44e0859ded9e0561e217c87ab0e"]}},"version":1}
test_35323de751f76d90eb0036c6719cfe26a581fae1ca5db8afd7c7a45eb5a88ce0.sol: ERROR
test_3555e13fc62712204e476ff052a5bde423f5cfa40210b910ddaa657ffafd0265.sol: ERROR
test_35b0ce195d847966ec628baee8ee81ce28ebbfe3f447366d3163b249c4840f01.sol: ERROR
test_35c731462dacc9179d48fe224362bf3a6fbc44027c74404780d5b4d810dfa6a8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol:C 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60005b5b5b905600a165627a7a72305820b9cdf649fa69cf7263401fd2adf78b03bfde3ff68e7c02e7c7b23af931db99b90029
test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_35e0dcbd17e4f64655a67d0984046ee1dac214fe7a6129eaad4162e83408ed92.sol":{"keccak256":"0xdacf3bb9ff368aef3ed81023987637acfcc4381ee926cdd02372a1504dc81297","urls":["bzzr://8047ff1dbded633da2ecb8a94766ddaa1ba32e5b2b6255dd66ab27ede6b0c600"]}},"version":1}
test_3608d37527c73407d71d722e1f5d718129745d2259de923de815f1e42ecd9470.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol:C 6060604052341561000f57600080fd5b5b60c68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6001818101905b509190505600a165627a7a72305820b44e5304949727234be559513558f3555bbedb63d0ccef01ed2b74f66e374b030029
test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_360f0d1c9bf5e7132c1638408295c4d9f340c20ecfd2689193e8e2ccdbca8ff2.sol":{"keccak256":"0x2021b3f140ec4eb27a695456ee79f5c9710e4aa6351bc1a82505160ec1dd02ca","urls":["bzzr://76c80f73caf6a7966b590a7f3fde34266662b970f0feb18550d8eb4866e2cfa8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol:test 6060604052341561000f57600080fd5b5b6103658061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c1811461003d575b600080fd5b341561004857600080fd5b6100556004351515610099565b6040516020810161006881838086610072565b9050809250610086565b8361007c8261008b565b8452949350505050565b61008e565b90565b505060405180910390f35b60006100a3610253565b6100ab610253565b60007f616100000000000000000000000000000000000000000000000000000000000083825b7fffff00000000000000000000000000000000000000000000000000000000000090921660209290920201527f62620000000000000000000000000000000000000000000000000000000000008260005b7fffff000000000000000000000000000000000000000000000000000000000000909216602092909202015284610159578161015b565b825b61016990600090600261027a565b506000905080805b601091828204019190066002025b9054906101000a900460f060020a027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f616100000000000000000000000000000000000000000000000000000000000014156101da575060015b6000805b601091828204019190066002025b9054906101000a900460f060020a027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f62620000000000000000000000000000000000000000000000000000000000001415610247575060025b8093505b505050919050565b604080519081016040526002815b6000815260001990910190602001816102615790505090565b6001830191839082156103035791602002820160005b838211156102d357835183826101000a81548161ffff021916908360f060020a900402179055509260200192600201602081600101049283019260010302610290565b80156103015782816101000a81549061ffff02191690556002016020816001010492830192600103026102d3565b505b5061030f929150610313565b5090565b61008b91905b8082111561030f57805461ffff19168155600101610319565b5090565b905600a165627a7a72305820112530f5cfa6669b999665d402583d87934cae2bf79cdbca5a92ca64b6973e820029
test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_36196c4bc89446a884eb4634be4b1b7a64cf9363fd513f4dcb510ed7c5bf6940.sol":{"keccak256":"0xc4b75b9a572c08a3ae94a02d307289b3499c948ef1ae5c77907f6e17b790b658","urls":["bzzr://1048eaf67bd20f35662198e97d52f4c09ad348a0075e5863ef551c7765c99298"]}},"version":1}
test_361c90056554b0ca52c70143ba596bee04704a63d08080e90df9b1e80444224e.sol: ERROR
test_3624bb96451337b724d28b6c4af49eedde1e564cddb1de06e3d290275434c5f0.sol: ERROR
test_3628ae674223c9480c514e7816b6d40820db83d7ef641b9b413e75a6b087ee67.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol:test 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435607f565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b805b9190505600a165627a7a72305820f9b8133c46bb60d48c146f51ae591be1396c5d5a43ed709b8c0036dca312a9990029
test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_36495d020540436c44e8e155c6b166ec6cb4440bc28e4211e815dca727b6bc42.sol":{"keccak256":"0x83e0a87cd91a4f3d08b675c13db7b4aa1db9ea20671db385cff0b721e831f3e7","urls":["bzzr://4c2adaa3e2045d267aa890accfa5399305f50e121e937dea26d796d6002f7a48"]}},"version":1}
test_364ce4727a6fec9093069498848b7bdbc36574d650669bd200da2282e035f723.sol: ERROR
 conv bytes10 -> bytes10
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes10_to_t_bytes10(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes10_to_t_bytes10(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes10(value))

			}
		
			function cleanup_assert_t_bytes10(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000000000000000)
			}
		

test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol:c 6060604052341561000f57600080fd5b5b6104898061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100f5565b60405160a081016100638183808a6100b1565b9050610074816020840184896100b1565b9050610085816040840184886100b1565b9050610096816060840184876100b1565b90506100a7816080840184866100b1565b90508096506100c5565b836100bb826100ca565b8452949350505050565b6100e6565b75ffffffffffffffffffffffffffffffffffffffffffff191690565b50505050505060405180910390f35b60008080808080600961010882826102cf565b50600090505b60005481101561019a578078010000000000000000000000000000000000000000000000000260008281548110151561014357fe5b90600052602060002090600491828204019190066008025b6101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055505b60010161010e565b600080546101aa91600191610309565b5060018054819081106101b957fe5b9060005260206000209060039182820401919006600a025b9054906101000a900460b060020a029550600160028154811015156101f257fe5b9060005260206000209060039182820401919006600a025b9054906101000a900460b060020a0294506001600381548110151561022b57fe5b9060005260206000209060039182820401919006600a025b9054906101000a900460b060020a0293506001600481548110151561026457fe5b9060005260206000209060039182820401919006600a025b9054906101000a900460b060020a0292506001600581548110151561029d57fe5b9060005260206000209060039182820401919006600a025b9054906101000a900460b060020a0291505b509091929394565b815481835581811511610303576003016004900481600301600490048360005260206000209182019101610303919061040e565b5b505050565b828054828255906000526020600020906002016003900481019282156103fe576000526020600020916003016004900482016000805b848311156103c05784819054906101000a900478010000000000000000000000000000000000000000000000000284836101000a81548169ffffffffffffffffffff021916908360b060020a9004021790555060080160208160070104948501946001030290600a019060208260090104938401936001038202915061033f565b81156103fb5783826101000a81549069ffffffffffffffffffff021916905590600a01906020826009010493840193600103820291506103c0565b50505b5061040a92915061042f565b5090565b61042c91905b8082111561040a5760008155600101610414565b5090565b90565b61042c91905b8082111561040a57805469ffffffffffffffffffff19168155600101610435565b5090565b905600a165627a7a72305820148a5de72b483b2253fd958343df1133c61130ca6683a3e48004705b899ec7a10029
test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"bytes10"},{"name":"b","type":"bytes10"},{"name":"c","type":"bytes10"},{"name":"d","type":"bytes10"},{"name":"e","type":"bytes10"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3659e7b1a3adf68340db379507a4d5516b156c8d96fa4fd5ad03ce9352720a15.sol":{"keccak256":"0xa3c295cedf370196ac12e041f448897098519f167af2d111b7dcd669030b1ced","urls":["bzzr://5459def2ac00d664074629e46ee4aa21273b763c71d443ff01073de21311e39f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol:C 6060604052341561000f57600080fd5b5b61013d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b6100506100a6565b604051604081016100638183808761007e565b90506100748160208401848661007e565b9050809350610092565b8361008882610097565b8452949350505050565b61009a565b90565b50505060405180910390f35b6000806100b16100eb565b6003925060069150604080519081016040528381526020810183905290508060005b60200201518160015b6020020151925092505b509091565b604080519081016040526002815b60008152602001906001900390816100f957905050905600a165627a7a72305820e97c253c9aba143fb5f0d078d0af7fabb7bfb15bd3f7e300c9ef6ee85eeeb5210029
test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3688ae2067a702523ed8289d4bae4c8ebb82163978ef301ce40e4bfd566e1836.sol":{"keccak256":"0x03fc1e195443e8dbd7f4883643d206a061ea90b4468b0ef07521dfe2b6d3868f","urls":["bzzr://aa8799788254702d298b765e3eecd9b660372ca00b61ff77dd0d2f975d31b602"]}},"version":1}
test_36a894e45d0923b0e138ed87cdb84c532c83823e16354824c59674d90caf2edd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol:test 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060645b50905600a165627a7a72305820c8e4ac8c6f287111f11854c29b93796732676c2e08957aa32730ee8c5ebb8e5d0029
test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_370929cc475ddff813fde241ca12ff57e1fc3edd759aa44fb0bf6d98cb860767.sol":{"keccak256":"0x61fe012273883e397038eace69a62d33c1cfbf1bdefdcbbd08ca1c9e99ac3e75","urls":["bzzr://42a74244925141085daa9a4a037b49bcdc6ffd1bda79cd58d14b7fb240a83b9d"]}},"version":1}
test_371880fccafff454a9c48355e45574cd25382972820f2e003afd2d600b652fb2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol:C 6060604052341561000f57600080fd5b5b60d28061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d2bf3cc28114603c575b600080fd5b3415604657600080fd5b605560043560ff602435166093565b60405160208101606681838086606f565b90508092506081565b836077826085565b8452949350505050565b6088565b90565b505060405180910390f35b60ff811660020a90910290815b929150505600a165627a7a723058203d13e1671c1f84ce3d68e690117a91d204b58a6675a60ce5e5fd504fb542f0260029
test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_379ba4313c8fc6187573f75d15ee1de401d67c3d0ead1823ef38b3d91743a51f.sol":{"keccak256":"0x4187563202f8482288fa5663d85a04ee701a2f586cb0fa78c7af59c12204ec1e","urls":["bzzr://2e3d4444cc80ec5263ec4b8ac021a1017bf77211f95b6faeb17eb143e5fd6f77"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Base 60606040523415600e57600080fd5b5b60075b60008190555b5060008054800290555b5b60368060306000396000f30060606040525b600080fd00a165627a7a72305820d49bbb07f28dcbd0b5b4cdc9ffc4955f8ff3385409c231d0b5f0bbc9f3bada170029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:BaseBase 60606040523415600e57600080fd5b604051602080606f833981016040528080519150505b60008190555b505b60368060396000396000f30060606040525b600080fd00a165627a7a72305820c2f7a22a2d1b64ef18b45d74dfccfc44e9c9657e87e350e01a3c019a057b865b0029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Derived 60606040525b60075b60008190555b5060008054800290555b5b60bd806100276000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d46300fd8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820677b7ff64ead884f30236426e51f1f0703767b19dcb632978c2fa1b99ebb3b910029
test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3829c8c457173eb7762e007df31c03cfd2498b577a5bcfaf62e2207ff1c9dffa.sol":{"keccak256":"0xef26b6d820e470dc3bd4c37fa4b7b3fa27d648967d20023154cfe2e980ebc094","urls":["bzzr://d2e4319d93777bc59a7d78ea67323b637a819519c45bfc3e77bf441e8403caba"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol:C 6060604052341561000f57600080fd5b5b6100256401000000006101a661002c82021704565b505b6100d6565b7f077abc000000000000000000000000000000000000000000000000000000000160009081556000805160206103448339815191526001556100796401000000006101ff61008082021704565b5060015b90565b60008051602061034483398151915260018190556002556100ac64010000000061017f6100af82021704565b5b565b7fff056949000000000000000000000000000000000000000000000000000000006003555b565b61025f806100e56000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636d4ce63c811461005e578063b8c9d365146100eb578063b8e010de14610100578063e2179b8e14610157575b600080fd5b341561006957600080fd5b61007161016c565b60405160808101610084818380896100c1565b9050610095816020840184886100c1565b90506100a6816040840184876100c1565b90506100b7816060840184866100c1565b90508095506100d5565b836100cb826100da565b8452949350505050565b6100dd565b90565b505050505060405180910390f35b34156100f657600080fd5b6100fe61017f565b005b341561010b57600080fd5b6101136101a6565b60405160208101610126818380866100c1565b9050809250610144565b836100cb826100da565b8452949350505050565b61014c565b90565b505060405180910390f35b341561016257600080fd5b6100fe6101ff565b005b6000546001546002546003545b90919293565b7fff056949000000000000000000000000000000000000000000000000000000006003555b565b7f077abc000000000000000000000000000000000000000000000000000000000160009081557f08174169278462394871234691872312987341629348712639412341275182766001556101f86101ff565b5060015b90565b7f081741692784623948712346918723129873416293487126394123412751827660018190556002556101a461017f565b5b5600a165627a7a72305820ccfe9557335af9b98d575e35f7ee7d0358e32af5b77c9e61e58a933545c09de800290817416927846239487123469187231298734162934871263941234127518276
test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"get","outputs":[{"name":"ra","type":"uint256"},{"name":"rb","type":"uint256"},{"name":"rc","type":"uint256"},{"name":"rd","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_38628780589285c3afad8508afc5bbe96b4b29fb0538c65203ef26c6f42da2aa.sol":{"keccak256":"0xb92bfc33aae4ae162b4a1df27bfb7c229ffba78b1fc70144b37a5a5e24c9a988","urls":["bzzr://7cb0104a3738c144b49c20cf5732890756cc0ddebaee3b9684898b3bd0b518d7"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol:c 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060015b6001811115609957fe5b90505b905600a165627a7a723058209a050c0a91bf1be3ace425b34406b0d8ee1437e3bad7c3cabce5852dcb2280d90029
test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_388f47baf71c91b49d55a6604a9ba412c43dfbd0a172935871dd99f70a830b9e.sol":{"keccak256":"0xd29621ffec639324b436bc43a3f74626b32debcb4716bd8bd0fc51d4d1c0b8dd","urls":["bzzr://afb392ea29da66239f06a094f5431fd6109dfc5080ff638484cd114616bb18b1"]}},"version":1}
test_397a81d1e23f02bff001ea4d883673dc40eb27e21515d10b2f6a00b001fc13f8.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol:test 6060604052341561000f57600080fd5b604051602080610109833981016040528080519150505b806040519081526020016040519081900390206000555b505b60bc8061004d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663834ba3d78114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a7230582006cfee8c3ff9eb7299389e5b1e73a757ee4c7d27ae44b93a83c2453dd37af9980029
test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"shaValue","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_39a4fa2e1e03652cbde8bacae69f86be642fd77926ed004a12af2af7806f8962.sol":{"keccak256":"0xde0f948c27274cb5caeef05d57a71abba1f00b87a3b2a28bd95b91033f3217d9","urls":["bzzr://e5bca0bb1e421f8e2d79f00dce5314a2d4ef5e65676595035ac0d695e3fb18ba"]}},"version":1}
test_39ad2b9205c1d900c885cbe4352175ed45edc58dbfdb08ed06fa5dec9fa557d1.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol:test 6060604052341561000f57600080fd5b5b6102ab8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663919840ad8114610048578063b8e010de146100a1575b600080fd5b341561005357600080fd5b61005b6100b6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100b46101ba565b005b6000805463ffffffff1660021480156100ff57506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495463ffffffff166003145b8015610159575060016000527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a6020527f91f75f60643f90c6ad153de10eeb8432cdb9d89ae13eb38614c9b358ed2b40b25463ffffffff16155b80156101b45750600080527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a6020527f191bfa3afb3fa2e8a90334078db11826baadb9255b796044578cfe3f1ae8509a5463ffffffff166001145b90505b90565b60008054600263ffffffff199182161782557fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49805460039083161781557fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a6020527f91f75f60643f90c6ad153de10eeb8432cdb9d89ae13eb38614c9b358ed2b40b2549280527f191bfa3afb3fa2e8a90334078db11826baadb9255b796044578cfe3f1ae8509a805490921663ffffffff9384166001908101909416179091555b50505600a165627a7a72305820851d95f801a36979fdd1d5b307a918256763a0e7b147ec6000d107002e295d250029
test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"check","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_39ad871058ec77c305c78d7307ba10fcf03c2f9a27f419fcd44f9b84d3f4e5f5.sol":{"keccak256":"0x6020bdd012d661a1e0ac74fa19c2aafc8b7b83726f66d605620f77261138a908","urls":["bzzr://40d131d8b6c335d44836fb142300438c5e267ed8c420ae8380ac13e72e319c53"]}},"version":1}
test_39cd8d48ea73d9a6b9ad1539e836551925ffca2bc309ffe0a4046814aef62e2e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol:test 6060604052341561000f57600080fd5b5b6103318061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663919840ad8114610048578063b8e010de146100a1575b600080fd5b341561005357600080fd5b61005b6100b6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100b4610222565b005b6000805463ffffffff1660011480156100d4575060015460ff166002145b80156100eb575060018054610100900460ff161515145b8015610147575060046000527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c56020527f492bc2e23d4d70f2fd16a9c2821137d2dd48a0adad00c992021a83bb8754f9545463ffffffff166005145b80156101a3575060036000527fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a691916020527f4abc8d7710dee0b6f0bcd995858dc9d6d0c1928a1cb5ee8305a5f490d566d1df5463ffffffff166006145b80156101df57506000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077c54610100900460ff16155b801561021c5750600460005260026020527fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f5463ffffffff166009145b90505b90565b6000805463ffffffff1990811660019081178355805461ff001960ff1990911660029081178216610100179092557f492bc2e23d4d70f2fd16a9c2821137d2dd48a0adad00c992021a83bb8754f9548054841660051790557f4abc8d7710dee0b6f0bcd995858dc9d6d0c1928a1cb5ee8305a5f490d566d1df8054841660061790556020919091527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077c8054909116905560049091527fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f805490911660091790555b5600a165627a7a723058204ce7adbcde9ef42b5d218d5056b72643dbea85ba6440f3a8157d16da586583080029
test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"check","outputs":[{"name":"ok","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3a4e1a71c2b7157d0b2309cd7cb92c00c7181939b17c8d384e1a8a55b77881ba.sol":{"keccak256":"0x35cf550c4a319608c1f5c111846fef991f7a5e61f4b115006be5f9f187fd2f27","urls":["bzzr://96e9840eb9ca2d074341374b2830dd2a517a9848b50e6218ac059c81920dd2a2"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:FixedFeeRegistrar 6060604052341561000f57600080fd5b5b610db18061001f6000396000f300606060405236156100ac5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663213b9eb881146100b1578063511b1df91461010f5780637f445c24146101ad578063ae999ece1461024b578063b575404514610293578063ccf4f413146102f1578063dd54a62f1461034f578063df55b41a146103e4578063e51ace1614610482578063fbf58b3e14610577578063fd6f5430146105d5575b600080fd5b34156100bc57600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a0316925061062a915050565b005b341561011a57600080fd5b61016060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061070595505050505050565b604051602081016101738183808661017d565b9050809250610191565b8361018782610196565b8452949350505050565b6101a2565b600160a060020a031690565b505060405180910390f35b34156101b857600080fd5b61016060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061072295505050505050565b604051602081016101738183808661017d565b9050809250610191565b8361018782610196565b8452949350505050565b6101a2565b600160a060020a031690565b505060405180910390f35b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061074295505050505050565b005b341561029e57600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250610820915050565b005b34156102fc57600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506109d4915050565b005b341561035a57600080fd5b6103a060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ab295505050505050565b60405160208101610173818380866103bd565b9050809250610191565b83610187826103d6565b8452949350505050565b6101a2565b90565b505060405180910390f35b34156103ef57600080fd5b61016060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ac995505050505050565b604051602081016101738183808661017d565b9050809250610191565b8361018782610196565b8452949350505050565b6101a2565b600160a060020a031690565b505060405180910390f35b341561048d57600080fd5b6104d360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610ae995505050505050565b604051608081016104e68183808961017d565b90506104f78160208401848861017d565b9050610508816040840184876103bd565b90506105198160608401848661017d565b9050809550610537565b8361018782610196565b8452949350505050565b610550565b83610187826103d6565b8452949350505050565b610561565b600160a060020a031690565b610569565b90565b505050505060405180910390f35b341561058257600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250610b2d915050565b005b34156105e057600080fd5b61010d60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350610c0b92505050565b005b8133600160a060020a031661063e82610cbf565b60030154600160a060020a031614156106fe578161065b84610cbf565b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055826040518082805190602001908083835b602083106106b757805182525b601f199092019160209182019101610697565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5b505050565b600061071082610cbf565b54600160a060020a031690505b919050565b600061072d82610cbf565b60010154600160a060020a031690505b919050565b600061074d82610cbf565b6003810154909150600160a060020a031615801561077457506803bd913e6c1df400003410155b1561081b5760038101805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316179055816040518082805190602001908083835b602083106107d457805182525b601f1990920191602091820191016107b4565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5050565b8133600160a060020a031661083482610cbf565b60030154600160a060020a031614156106fe5760006008846040518082805190602001908083835b6020831061087c57805182525b601f19909201916020918201910161085c565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208115156108b257fe5b047f200000000000000000000000000000000000000000000000000000000000000081106108dc57fe5b6004020160005b50805473ffffffffffffffffffffffffffffffffffffffff19908116825560018201805482169055600060028301819055600390920180549091169055600160a060020a038316906803bd913e6c1df40000604051600060405180830381858888f19350505050151561095557600080fd5b826040518082805190602001908083835b602083106106b757805182525b601f199092019160209182019101610697565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5b505050565b8133600160a060020a03166109e882610cbf565b60030154600160a060020a031614156106fe5781610a0584610cbf565b600101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055826040518082805190602001908083835b602083106106b757805182525b601f199092019160209182019101610697565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5b505050565b6000610abd82610cbf565b6002015490505b919050565b6000610ad482610cbf565b60030154600160a060020a031690505b919050565b6000806000806000610afa86610cbf565b8054600182015460028301546003840154600160a060020a0393841699509183169750955016925090505b509193509193565b8133600160a060020a0316610b4182610cbf565b60030154600160a060020a031614156106fe5781610b5e84610cbf565b600301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055826040518082805190602001908083835b602083106106b757805182525b601f199092019160209182019101610697565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5b505050565b8133600160a060020a0316610c1f82610cbf565b60030154600160a060020a031614156106fe5781610c3c84610cbf565b60020155826040518082805190602001908083835b602083106106b757805182525b601f199092019160209182019101610697565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600080516020610d6683398151915260405160405180910390a25b5b5b505050565b6000806008836040518082805190602001908083835b60208310610cf557805182525b601f199092019160209182019101610cd5565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020811515610d2b57fe5b047f20000000000000000000000000000000000000000000000000000000000000008110610d5557fe5b6004020160005b5090505b91905056001cf7652f1f9289dc41763c5bd36534c9772d48aa26021274d212f227d4b69765a165627a7a72305820475586bf1f812b8a097205a2ab021894bfd6e1d55a6914a63508fce2300880020029
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:FixedFeeRegistrar {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_a","type":"address"}],"name":"setAddr","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"addr","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"subRegistrar","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"reserve","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_refund","type":"address"}],"name":"disown","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"record","outputs":[{"name":"o_addr","type":"address"},{"name":"o_subRegistrar","type":"address"},{"name":"o_content","type":"bytes32"},{"name":"o_owner","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_newOwner","type":"address"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"string"}],"name":"Changed","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol":"FixedFeeRegistrar"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol":{"keccak256":"0x3c579d6b94979889a75cf5291b1b5877e3160f11bdb0fd5c3961292a42395d86","urls":["bzzr://63f4900accfc457b4b4e7db6efa14571ccc7cdf1cf5e9366c6dd897c3b8030a3"]}},"version":1}
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:Registrar 
test_3ae1b06e3277033c0620d26f5b0f449114aa3c7258c1d2258adce813b1534d67.sol:Registrar 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol:C 6060604052341561000f57600080fd5b5b6102018061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e61011b565b600a6040518059106100ad5750595b9080825280602002602001820160405280156100e357816020015b6100d061011b565b8152602001906001900390816100c85790505b5081526100ee61011b565b60008054919250610102906001830161014d565b506000806101108180610177565b5050600191505b5090565b60206040519081016040528061012f610199565b905290565b60206040519081016040528061012f610199565b905290565b815481835581811511610171576000838152602090206101719181019083016101ab565b5b505050565b508054600082559060005260206000209081019061019591906101ab565b5b50565b60206040519081016040526000815290565b61008691905b808211156101175760006101c58282610177565b506001016101b1565b5090565b905600a165627a7a723058208eb2687a7178e1fbd57b642fca24434303792a13f35f80810ba5ff255590882a0029
test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3b1cfccd0e2fff55430e0745efed4aa1abcc336636edb08455c71cec8ee76617.sol":{"keccak256":"0x5a74f801e15a9a6af3df6aa9a522ebf1d071095f24360e21c9b347a6f9406c3a","urls":["bzzr://e9b3c6e31cc47c89d2f7f37c62c9ce7c9b96f19f8f3ef489f64aa9a083862a83"]}},"version":1}
test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60125b505600a165627a7a723058201ae6f9d59a44136e1fb13b2185ef8b74d1b3e4f53ac00b4e1992a903fae93ccd0029
test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3b2b3f30ca3c13a5570b594eb4dd2ed660bc8a90e28d698491eb89d3b89144ac.sol":{"keccak256":"0xba87569db18676e152cc3514b58a3a9256273d3acda6fb2a824e9dbaf5cee4d0","urls":["bzzr://7cfbf8f2a0967c06bf29f74f219c3e00af367b121180557f04b6927b20f1c883"]}},"version":1}
test_3b9fff478528bd8f7bc9a4e1faf3de72ebee8920589bba0685cabddabe5fe832.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol:test 6060604052341561000f57600080fd5b5b60017f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc81905560027f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b8190556020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b805460ff19908116831790915560008281527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805490921690915590819055600481905580555b5b610292806100d76000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316178e1c81146100695780635ff76c8a146100c057806379e44a3814610117578063e2943ff71461016e578063fc694689146101ca575b600080fd5b341561007457600080fd5b61007c610224565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b34156100cb57600080fd5b61007c61022b565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b341561012257600080fd5b61007c610232565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b341561017957600080fd5b610184600435610239565b6040516020810161008f818380866101a1565b90508092506100ad565b836100a3826101ba565b8452949350505050565b6100b5565b151590565b505060405180910390f35b34156101d557600080fd5b61007c600435610251565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b6000545b90565b6001545b90565b6004545b90565b60008181526002602052604090205460ff165b919050565b6000818152600560205260409020545b9190505600a165627a7a72305820876ab678e5699593594aee3b1e4dbf15b828a59cc9ef635837d5c7d44b8bdad70029
test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getToDelete","outputs":[{"name":"res","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getNestedValue","outputs":[{"name":"nestedValue","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getTopValue","outputs":[{"name":"topValue","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getNestedMapping","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getTopMapping","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3be7268d8ca5f18cdd045968b85e6e5da55053801c359c4875928492844a3ef4.sol":{"keccak256":"0x2ed1ef1d5df3dbf6816ab4ffbc1f04430bd3a612c89f3ad7b74605d60ec772fa","urls":["bzzr://4ddf08d4484f06e0b9f8ed96b6ac7d04a639d9f1f1f71a9dffc35645149befb2"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol:c 6060604052341561000f57600080fd5b5b6102658061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ff2af2d811461005357806360fe47b1146100b25780638f88708b1461010e575b600080fd5b341561005e57600080fd5b61006c60043560243561019e565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a7565b151590565b505060405180910390f35b34156100bd57600080fd5b61006c6004356101dc565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a7565b151590565b505060405180910390f35b341561011957600080fd5b61012460043561020d565b6040516080810161013781838089610174565b905061014881602084018488610174565b905061015981604084018487610174565b905061016a81606084018486610174565b9050809550610188565b836100938261018d565b8452949350505050565b610190565b90565b505050505060405180910390f35b600082815260208190526040808220838352912081548155600280830154908201556003808301549082015560049182015491015560015b92915050565b600081815260208190526040902060018082556003600280840182905560049184018290559201919091555b919050565b6000818152602081905260409020805460028201546003830154600490930154919290915b91935091935600a165627a7a72305820927338c0870d9cca799c8a9d4f3c65636837c2dfad224a23e345847ec500bd500029
test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"from","type":"uint256"},{"name":"to","type":"uint256"}],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"retrieve","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"c","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3bf0273cd9f6789117ec5b157f087230359a75bd933803d1e24a66e431133367.sol":{"keccak256":"0x25692ca6c8885b5343adf3cf6d8afc75fc448a88acf410a0b0d00fe887c60216","urls":["bzzr://f4fd198024ae92ed0bc98e282daafc6e1f2439c506567358127ebfb27fe80932"]}},"version":1}
 conv bytes16 -> bytes16
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bytes16_to_t_bytes16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes16_to_t_bytes16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes16(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes16(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol:test 6060604052341561000f57600080fd5b5b6101e58061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166323c450b28114610048578063cef7e0de14610111575b600080fd5b341561005357600080fd5b6100857fffff000000000000000000000000000000000000000000000000000000000000600435166024351515610168565b60405160408101610098818380876100cc565b90506100a9816020840184866100b3565b90508093506100c7565b836100bd826100e5565b8452949350505050565b6100e0565b836100bd826100ef565b8452949350505050565b6100ea565b151590565b610105565b6fffffffffffffffffffffffffffffffff191690565b50505060405180910390f35b341561011c57600080fd5b610124610194565b6040516020810161013781838086610141565b9050809250610155565b836100bd8261015a565b8452949350505050565b61015d565b90565b505060405180910390f35b7fffff0000000000000000000000000000000000000000000000000000000000008216815b9250929050565b7f61626300ff5f5f000000000000000000000000000000000000000000000000005b905600a165627a7a72305820a3412c5f67c7493ffe6140c2fb63d44f3a43415ef7ea79660cf2112e4503734a0029
test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"small","type":"bytes2"},{"name":"one","type":"bool"}],"name":"pipeThrough","outputs":[{"name":"large","type":"bytes16"},{"name":"oneRet","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fixedBytes","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3c037eecfba7419af9574160d6f6aa75d31b4ea83583a2ec5a7190b88813a64b.sol":{"keccak256":"0xb83b3de1c34997282b1b1c158d68b9de857a2974f2f0a32529c4cca972219e8c","urls":["bzzr://654d2e0e26d05576f9b7c1e8837017a6700fb63c2a93a0b32903ce3bf1d5f498"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol:test 6060604052341561000f57600080fd5b5b61031e8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c1811461003d575b600080fd5b341561004857600080fd5b6100556004351515610099565b6040516020810161006881838086610072565b9050809250610086565b8361007c8261008b565b8452949350505050565b61008e565b90565b505060405180910390f35b60006100a36102cb565b6100ab6102cb565b60007f636300000000000000000000000000000000000000000000000000000000000081805b601091828204019190066002025b6101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055507f626200000000000000000000000000000000000000000000000000000000000082600060028110151561014557fe5b7fffff00000000000000000000000000000000000000000000000000000000000090921660209290920201528461020e5760006002604080519081016040908152909291908301826000855b82829054906101000a90047e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600201906020826001010492830192600103820291508084116101915790505b5050505050610210565b815b92506000905082815b60200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f6262000000000000000000000000000000000000000000000000000000000000141561026a575060015b8260005b60200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f636300000000000000000000000000000000000000000000000000000000000014156102bf575060025b8093505b505050919050565b604080519081016040526002815b6000815260001990910190602001816102d957905050905600a165627a7a723058201d2d0e93344090e66774f98e20ecc50490c496a9d3fdc95ac314c36fdf7dd2cd0029
test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3c0a1cb713bf2b54e142982baf30d2aea07ce826e14101181464cd4f18cf916e.sol":{"keccak256":"0xfa252dbb69a4f596a074cb189fcc3ff7f40de4e1d6407c43b9f8c8a7e5f44c86","urls":["bzzr://2c3ea6fa5d848c59dff0e8260753e307d1b637b461de9f80cd2dc08c636174ee"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:C 6060604052341561000f57600080fd5b5b6101658061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637bc5bbbf811461003d575b600080fd5b341561004857600080fd5b61008c60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506100d095505050505050565b6040516020810161009f818380866100a9565b90508092506100bd565b836100b3826100c2565b8452949350505050565b6100c5565b90565b505060405180910390f35b60006100e0826100e860006100f2565b90505b919050565b8181015b92915050565b6000805b845181101561012d5761012285828151811061010e57fe5b90602001906020020151848663ffffffff16565b92505b6001016100f6565b8291505b5093925050505600a165627a7a7230582045375969e2c5f5b1f54b938d74514d9bcbe2ac6ffee2196d5a81f315d2b502b10029
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":{"keccak256":"0xcaca2da3843b5ced0ccaa40fc9d9f18d3262e03977000a92490e15e2a04d525a","urls":["bzzr://5cd71f46d5c7f4f895a12627cc15bea6585af29a976720194860a6ca207fa117"]}},"version":1}
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:Utils 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582066a21359f32023c79a624ccee1c1e6ee93193ff46ad68802545adde87775cece0029
test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol:Utils {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":"Utils"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3c11557c151b9f2ec9cd6482c7af69d1b2248464206ae5a8deb4a9e97e98e464.sol":{"keccak256":"0xcaca2da3843b5ced0ccaa40fc9d9f18d3262e03977000a92490e15e2a04d525a","urls":["bzzr://5cd71f46d5c7f4f895a12627cc15bea6585af29a976720194860a6ca207fa117"]}},"version":1}
test_3cfe7caa18e4cbc9ce58139dc1f4104785fc5dfdea1a6f904f50e32bbad8a8f1.sol: ERROR
test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol:test 60606040523415600e57600080fd5b5b609f8061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b6000805b600a821015606d575080606d565b6001909101906055565b5b5050505600a165627a7a72305820b059913f74383971041c6efd64b77b6e794cf267d4ce716fc17c60fa9379a8480029
test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3d3718d8959a099fea8847455e998cc4d774dc146cf227deb27362aa6ddecb7c.sol":{"keccak256":"0x6e97efcc923914dcb4f3080718602a70508aa0f31d4219867fefb4f9c7e0be82","urls":["bzzr://9b6e06ff677128e123f6955d84cf2072ccaa0235f268550fc2b08904596a84d6"]}},"version":1}
test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60025b5b505600a165627a7a72305820a00c54240f24296d4175ee1e770ebf4691fae8ea1f53d0fd929821ca2b1b64d40029
test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3d51e323d62c7f5266f4bb2df3a6bf1d4a398a057c4a4ebabc565752c859630c.sol":{"keccak256":"0x3102077a666a689d2fe6dfaa1bbf2c7236b406be478192b2b673fa7e2a0f7728","urls":["bzzr://5448d8f1f54132a74a052dbe38dde953a52dd8a0e05233387aaba2e6da6f511a"]}},"version":1}
test_3da9bb63ed2853c9a5d38de0cd5af73df0b74c5502d993bdc8775369766817d9.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Base 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60025b905600a165627a7a72305820c7235bdab6d05a1bef795388823e9470b3b2b8f3aee8f79ac80b8f150153ffdc0029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:BaseBase 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a723058203a887236e5869acd560f8e0f0df77e34fbdd47c3e9f19023526d23e05e01ca220029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Derived 6060604052341561000f57600080fd5b5b6101288061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660f0565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b600060ea60f6565b90505b90565b60035b90565b60015b905600a165627a7a72305820aaf43033addaa0cf2a12d54f947c95963808c7a29e8b89126172bf82607e609c0029
test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3ddca499779dae8a4e84db01cd1f0153301ad202f8d5276783002e7267973b27.sol":{"keccak256":"0x4f29915c696ec6a79945f672c3209ed75b6ce6c72a94a1b8b63ecd2175e724d9","urls":["bzzr://305e48b5c0b7c5015f73e3663b12271f88916b8d47de5f864c399bc38194c086"]}},"version":1}
test_3e2e7f1813f202e9957fffebfe3d1820fa7228bcb5e4736f945311066fa3e294.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3ebfdfacb1f75c8f29fa98c56fc649f43ab8dc81daf6a41e50f19b164bd223eb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol:C 6060604052341561000f57600080fd5b5b61029b8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b60008054600190829060ff191682805b021790555060015b60005460ff1660038111156100bd57fe5b146100ca57506002610086565b600080546002919061ff001916610100835b021790555060025b600054610100900460ff1660038111156100fa57fe5b1461010757506003610086565b600080546003919062ff0000191662010000835b021790555060035b60005462010000900460ff16600481111561013a57fe5b1461014757506004610086565b60015b60005460ff16600381111561015b57fe5b1461016857506005610086565b600080546002919060ff19166001835b021790555060025b60005460ff16600381111561019157fe5b1461019e57506006610086565b60025b600054610100900460ff1660038111156101b757fe5b146101c457506007610086565b600080546003919061ff001916610100835b021790555060035b600054610100900460ff1660038111156101f457fe5b1461020157506008610086565b60035b60005462010000900460ff16600481111561021b57fe5b1461022857506009610086565b600080546001919062ff0000191662010000835b021790555060015b60005462010000900460ff16600481111561025b57fe5b146102685750600a610086565b5060015b905600a165627a7a72305820b06bf5d7210c1c8c018764cdb489bd523e2a3f136937cbc05a2487546417a5df0029
test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3f3f22d9425645424f02947b619144491242e68ba52f0328d784e7681cea3d71.sol":{"keccak256":"0x025bc40c3591112f2f8d4ae46fa9a3086b899270df09dc277b96f8152b0bc14f","urls":["bzzr://27699d1e46197cfbfe6c48382ea0864a48fbfc1e83b37ded1f89db2554f2daa3"]}},"version":1}
test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a7230582044c880c81a3abb3881eec902e3865d1f854acd1b16657c41c5b0d6c0eea2e2400029
test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3f505df3bad61b118f7cb2080d40deb87c1c73b0e06225ab20a3a94b9a70bf11.sol":{"keccak256":"0x26e12cfc3db630672864e52381d6ed6417d9f2af4d18b86a72d189407f9ef55f","urls":["bzzr://6f673694716940dce0ac369d33872383b2b0ef29eb432dee04192ef46e8aa678"]}},"version":1}
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol:test 6060604052341561000f57600080fd5b5b61019b8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632fbebd3881146100485780634b3df200146100c1575b600080fd5b341561005357600080fd5b61005e600435610137565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b6100b6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b34156100cc57600080fd5b61005e610149565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b6100b6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b6000610141610149565b90505b919050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035165b905600a165627a7a723058204e9b7262327882e1abee9e655f0b9d6c503c7197f74305ee916d6a53fc7920c90029
test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"foo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"boo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3f7fe27bc8eb71f8093ea29ab332cc8a94c5b280a44097c61d1c4aaa2e1e7230.sol":{"keccak256":"0x9ab487cca172ad8dd6ae9db9f68a29985fea611cd299d17da413df804e601ffa","urls":["bzzr://4ed55a650c9a5afc59b3f62e63739298ea58ef2033835ec4910168e384ab59a7"]}},"version":1}
test_3fa7a4d7582402a0e167324c22698ac8c32ad0fc9143fb19cff41a74c8721685.sol: ERROR
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:A 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b505600a165627a7a7230582081dd7d16273e8c6f1516c525ef41c810d008626759e9f28f7c78bfc7779aa1660029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:B 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a7230582092b14f3b1fd42e36682917a6b632e747bb4c080d77cd8e58fb051cd9ea618d390029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:C 60606040523415600e57600080fd5b5b60a08061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063b3de648b146058575b600080fd5b3415605057600080fd5b6056606d565b005b3415606257600080fd5b60566004356070565b005b5b565b5b505600a165627a7a7230582028568943ba2d70e540f96e0dfa8ce1450ae0e313ef98035253405f018e19d7c70029
test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3fe6afce5df32cf4a3b5e4620aeb429f9b24baa0806a106f58af66dfb2b5f799.sol":{"keccak256":"0xec3307d1d5056900844c80b4a651628e5fd1375d93ecc66594d4f7eb9ca25d88","urls":["bzzr://a70c1d0336fcc573334eaa42f9060b72227586fd3e268199b8b6aef9a27dc4a1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol:test 6060604052341561000f57600080fd5b5b60c48061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600281900a5b9190505600a165627a7a72305820e0575bb4db476c78db99bb6844c1db19148f607235e93b14aa01fe6648c0cbed0029
test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_3fe832880835e1833307d43d141005fe20e59e2ffda7c468c273121df01916fe.sol":{"keccak256":"0xe20882db9cc891bf7f7530097711ae470ef3067637ea512c855efbc1ff8b11dc","urls":["bzzr://fdab382c12fe2a04ac104a229667511dc7fafe9e2b2e9ed344ddb6c0c881623c"]}},"version":1}
test_4000d35769057d71d9d5250199319a17234b751109e6bb8c624c9c7a311bb2df.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol:C 6060604052341561000f57600080fd5b5b60d88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060206040519081016040526004815260005b602002015160ff1690505b905600a165627a7a72305820917224675eaa1c580b6020b9c0feba23cfebc3a004bcf783b57808e18c6169200029
test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_40052c83b0583bcfeb4c40f80df11099054849b4760483f27a3049e4eae478d1.sol":{"keccak256":"0xebf3dd4f6f9ecd3b4329e2f8e691f5713d0ef785b1e57cb43df45ee1cb03bae0","urls":["bzzr://f4f74e98a058153af628ba83fb207c5ccf4f97d881eb1d4347e5ecb2a4b38e6d"]}},"version":1}
test_4020d5dfb40327ce841a087748de6aefad09a2af721bdbcf090be27cdeb34e51.sol: ERROR
 conv uint64 -> uint64
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint64_to_t_uint64(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint64_to_t_uint64(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint64(value))

			}
		
			function cleanup_assert_t_uint64(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFF)
			}
		

test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol:Test 6060604052341561000f57600080fd5b5b61010b8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635ad298bd8114603c575b600080fd5b3415604657600080fd5b60717fffffffff000000000000000000000000000000000000000000000000000000006004351660b9565b60405160208101608281838086608b565b9050809250609d565b8360938260a1565b8452949350505050565b60ae565b67ffffffffffffffff1690565b505060405180910390f35b7c010000000000000000000000000000000000000000000000000000000081045b9190505600a165627a7a72305820229638042e737bd3e1feed07189f957f68267c28aee9538abe1f4c5515a4d8b80029
test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes4"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint64"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_40793b7a643ace8f3ac7036050f892050e602fc831d425e6eed8833a753613bf.sol":{"keccak256":"0xe297e64f19052e44ff990b5f50ca3dee35ad285b59125534bf3443fadb6a6a83","urls":["bzzr://32eeeab9310e2d0e49b5db3cd53daf965e1de36dfcdd03d215d0c71e70ec4247"]}},"version":1}
test_4088ccbaadfece1fd1750e45f21e43c45aab4d83853af0a1bd41e7bfd87855b5.sol: ERROR
test_408a7dfb9c2807e8783322ef026e76f8da7a861e660e4719273f1012723baefb.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol:C 6060604052341561000f57600080fd5b5b6101698061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630afdb4ea8114610048578063cb217d34146100a5575b600080fd5b341561005357600080fd5b610061600435602435610102565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b61006160043560243561011f565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b60008183600082121561011157fe5b9060020a0290505b92915050565b60008183600082121561012e57fe5b9060020a900590505b929150505600a165627a7a72305820b5dd59d5f07bb5cd9701bba76e3dcb057a9b650f3e6c110c9a0be5ea5d4c0b600029
test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"g","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_40b573c7a4b8b8b7a04206b06c14158c713811f54484d130c995e6f659777da7.sol":{"keccak256":"0x8e5bf97d60d16e50db68988d7db122915d52484e2a5a696ab19ee81ea7fee1b3","urls":["bzzr://465875b751f4a9c8e53192407bc402c2c7f5bae477c28bf81a323d21065df3eb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a723058204303a18acb66d9b6176f5326895ca067e5198a4e8bd318156482ce5231a011390029
test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_40c102a94d7b2afc7d6d8b06058281a5c5bf705f847993ad4050a1f351ee4d30.sol":{"keccak256":"0x45d66598f92988be5e20a9308213fee7c6df7f71998f3d4f364dbb23bc1f2d72","urls":["bzzr://8d38535fd4e23aa23294f2a1a9d19491ab0f2ec721b6eb7e95c217748ace850f"]}},"version":1}
test_40edd44acbebf06a263c823589e2d61f2d4271c2c423963e531f7c40ad06d601.sol: ERROR
test_41034629d082183d076fbee744cac00918928775df47f80908a6b67e5a4c75bd.sol: ERROR
test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol:C 60606040523415600e57600080fd5b5b607e8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005bfe5b5600a165627a7a7230582012a754113629df4e2b33944f668bb4d4a421d0e62752799c550cf4a5137e85130029
test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_410906e66988fca16d273979e963c18cca882d16a75e2d864f9f502f4595e524.sol":{"keccak256":"0xef45ba97027569417c6134192cf122cd0e6aa099c86baff7b6bb0d5d42c7478d","urls":["bzzr://947d48816af184c680ce46ff75cf9861d18bf4bb2aed732b0640fd8c34d3d0b6"]}},"version":1}
test_411b766bb3045158a00a4f88620c93bdf6182933f213d44233ac6fb7cb028450.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol:Test 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663cfc5a9698114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b805b9190505600a165627a7a72305820b5540db3085e5aa9517e61456a39736822a8674d2b4ed2cbd94b3c30ab829ccd0029
test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes32"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_41d5b95499e50458b6da5f9e635a01a2fa2c7af342ab4d67d9a22e473dd5028a.sol":{"keccak256":"0xd2383d01c61c33b2db6eebaf73b2213d846804ab99a255798dd0b1f26f7ee0bc","urls":["bzzr://8110217be654bc22ce8c1e2ff58c7cd03bbf386a10bc03953d3307b2b78da2ba"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_420e60156c351653443e1177e5d8169cffa2d8752f523f964d28b26566517a6d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol:test 6060604052341561000f57600080fd5b5b60cb8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60006098600054608d565b505b9190505600a165627a7a723058205f7102c9c8da73a14ea8f10935c77fc752de3f2ee583d849d58e99f2d89b131a0029
test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"f","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_42798e6779afdfd136c45dcfbc774a19f815abac05020ba27cb49f342a5da67d.sol":{"keccak256":"0xae7f1116a32849b58c560f2e8600c05e9c4b8acd1d4beea8b362ead833e2469f","urls":["bzzr://56afe1b120313f31f7bc01529f06865357ec2d64e6e0fdc5e78ed8d31cfab8c5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol:C 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600281900a90910490815b929150505600a165627a7a723058207ce4208f441425bff0ba3f5b5d265e2ea84f84adcf9ef4a3403a750c17e721820029
test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4358a09f4927106eefe784b80657b03a906550d03e60134040f06e9aef5097c7.sol":{"keccak256":"0x6f1b6d67966df6e5d8223d0da977e67ff2be7f470b3e42f6d68c56cefa3cb1d9","urls":["bzzr://f499eea7949eac196e58ddd64825a5cf4cc71eae5a2ac399d2db7ee95ec9f7af"]}},"version":1}
test_437709f3c9d281d9b8871d26dcebf1467185afaec8a463e145419bceda1f7dd3.sol: ERROR
test_437e82f39a87ebd45d958c626a4c098a3dc2947fac02a0487506d4675781229d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663131e2f188114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a72305820c40972f27829907eff48190640047476f4e52c293404fb1532a6a1c170d8171e0029
test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"I do something awesome which requires two lines to explain"}}}},"settings":{"compilationTarget":{"test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4398d086c11d8d9f51e5db0eb730c1d40efaf57c3c4b10e16348f4088f20f472.sol":{"keccak256":"0x7a12d68d0530c37d9dfeb382dcfce9c54015a85bbc767c7a6a9c214477f77776","urls":["bzzr://29742b15c67dd1f3ac7599071e2245522502942f4b6044623502b7db5ddf7220"]}},"version":1}
test_43acab6cab6300ff5b61a4abe8c251b70f6511177b4befc38ac92b1d3b0c107c.sol: ERROR
test_43e244475ef247286b61f30fdcfdb5ded21cf5fe4338dc86c3599aeb189101dc.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol:test 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60085b905600a165627a7a7230582075f86fcb24d8c297b9019239a54de0aa45be2bc99058e4d227cd9f66a1f683d50029
test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4431f1c46e477ea977c8ac3a5e72065e6485c848b259c456d453c2ea3739b578.sol":{"keccak256":"0x397d83058b179e452152511e8919de23fcbb957c9c27f4dbf987d80f46e1eaac","urls":["bzzr://7b26b88f4cf7154e25a9534b4b49358f5a2450efd07f44345a0577def542dbcc"]}},"version":1}
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820255af92a93506556b98512cb89acce654332406527ac374c6cc36f096962c0100029
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":"base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":{"keccak256":"0xe5ebc649b52f89f71ab60d4e8a52a68a1f43b3470f448c80f85884cc97cf9990","urls":["bzzr://9e67bcd99342790ab0136337d072c91117cf113d56bf38781957910d6382ff15"]}},"version":1}
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:derived 60606040523415600e57600080fd5b5b60828061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60076000555b5600a165627a7a72305820d826fb6153acb161292c24b08a2d9ecaa215999130649bc9978969be239851440029
test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":"derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4557db9ebf64e60dfdc258b61188f6f11e4335dd3c2cd88323c1a2d664df9089.sol":{"keccak256":"0xe5ebc649b52f89f71ab60d4e8a52a68a1f43b3470f448c80f85884cc97cf9990","urls":["bzzr://9e67bcd99342790ab0136337d072c91117cf113d56bf38781957910d6382ff15"]}},"version":1}
test_4584425ac67874e1f10f489e65c19ee73215aa0c50c06a5f1600e2f267fd1690.sol: ERROR
test_45cc7c92261d2a18ed7ecd711a0f9889cc741e0b85bdef17d64a2911c649bf3a.sol: ERROR
test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol:test 60606040523415600e57600080fd5b5b60918061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b6000805b5080605f565b6055565b5b5050505600a165627a7a723058203e7474324eeb26b998bc2096ae8607ec96bc04b807348e9558770984a45d64ed0029
test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_45e72bb8cd2415f230873ade8ec6cb533af6e3fc694731a3c8cc38c33ac67879.sol":{"keccak256":"0xfb6dd5741cffe4689fdaf4be1072532199ec8385af766ad8f2b95ed62afb4c1e","urls":["bzzr://24cb3d1c123c1b4a13c1ceffdce877b1e1d7dbe3a7f02ecd618c46a956b5af1e"]}},"version":1}
test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol:test 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60126040517f616263000000000000000000000000000000000000000000000000000000000081526020016000604051808303816000866102c65a03f25050505b5600a165627a7a72305820243aa196597d3279de0f84909190f98429190808a0c887f2c86c30073a68256b0029
test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_45f1cd52787f3b3f8d2aaa55b36cfcf40f9e60fee8ed1e5ecb28697f07ecfae2.sol":{"keccak256":"0xd845b1cf767d1ace7272fe9db9ebfc620a0086d80c2a792a9f8a440f0f354be6","urls":["bzzr://8e68fa48c840141fb3ed74c5f1d6886fd5af44325a576126765c45ec42a133b3"]}},"version":1}
test_4648e4a17673d62d57e7b3cca2248ba14038fef39701c4fa39f4a505577d01d6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a723058201e6106409948effa63daf5314ff85520fab6d8c86cab52085e5b556a62c5579a0029
test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"},"return":"The result of the multiplication and cookies with nutella"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_464abad259ee11f8940a384eb43603595ca9d03df0fe1da16d83fd8692890b8e.sol":{"keccak256":"0x970139ac3ee3299a92cde3bcb6a8b851b11cf101e5dfea619a9ec50c59047874","urls":["bzzr://5c0d3c4d22753664fce5494ae524d98942d5d012ac0fae50be63b4351b4d7db2"]}},"version":1}
test_464b678525c437ff14b525d9a65d4b52bdfbcfb59c93d33e04e94dcc31e41470.sol: ERROR
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:c 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820d3730396f25fab52ec5152ddd193a4456ada4573fdc018cf4dbbe3ee4fd954e80029
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":{"keccak256":"0x7ebfc4781e709980233d80a19a4f411a3ec31b4b1002d5298cccdef16e33ae0c","urls":["bzzr://fade1f2b85e96bc2d3aab2b4df4bb9cfb879472e8099a6954f8d8cb687462a54"]}},"version":1}
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:d 6060604052341561000f57600080fd5b5b60dd8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60006326121ff06040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1515609b57600080fd5b6102c65a03f1151560ab57600080fd5b5050505b5600a165627a7a723058206322ebd8d5f9ce348a9c5039708158ec930d4f3550c98484761366955b07f4100029
test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol:d {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":"d"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_466f086fbd5ee48e7937db64d625efa01875d97e090305095cfb7c0026a150b9.sol":{"keccak256":"0x7ebfc4781e709980233d80a19a4f411a3ec31b4b1002d5298cccdef16e33ae0c","urls":["bzzr://fade1f2b85e96bc2d3aab2b4df4bb9cfb879472e8099a6954f8d8cb687462a54"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Lib 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632021012c8114603c575b600080fd5b60486004356024356086565b604051602081016059818380866062565b90508092506074565b83606a826078565b8452949350505050565b607b565b90565b505060405180910390f35b8181025b929150505600a165627a7a72305820cf282569164eb24132cff4cd85bd7b45ae7e3797b5c26d230d2cf01ac812fe930029
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"m","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":{"keccak256":"0x17dcfe16552f0edbcf90a10945aa118954d1b881bcf317f1531e13dc386d64d2","urls":["bzzr://0a1af6ff8e0348d443b5820e4ef002364c4d374204e5b2eb018b93cec3ad5069"]}},"version":1}
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600981015b9190505600a165627a7a72305820928804a815843cbf2df30964cf0113100393f175f7c42676843b5fa2c18df1d00029
test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_46d6cc9ef06cf53fc09da9e32df6d8f70ffa8d80081559df9990fd8e4f7a7541.sol":{"keccak256":"0x17dcfe16552f0edbcf90a10945aa118954d1b881bcf317f1531e13dc386d64d2","urls":["bzzr://0a1af6ff8e0348d443b5820e4ef002364c4d374204e5b2eb018b93cec3ad5069"]}},"version":1}
test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol:Foo 60606040523415600e57600080fd5b5b60998061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60006056605b565b5b5050565b602060405190810160405260008152905600a165627a7a723058200b822247cbcbd326231b6797ba3212d26c7c87b43dcd906b75d6f4a3599222410029
test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol":"Foo"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_472307782012fdf60400c07d51e2320036ae12d791617f5bbb657b997230b56e.sol":{"keccak256":"0x030bc65db602c7d3762e86395bef32e5a92fbff312b2c257db36079bb7d8fce5","urls":["bzzr://9ee43aad9d16b76c1539e9bcebe22e45f229e04c6df36cd6aceee72c72359ac9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol:c 6060604052341561000f57600080fd5b5b6102198061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e81146100535780636b9e8bb01461006e578063e420264a14610119575b600080fd5b341561005e57600080fd5b61006c600435602435610131565b005b341561007957600080fd5b61009f600480359060248035808201929081013591604435908101910135606435610140565b604051608081016100b2818380896100ef565b90506100c3816020840184886100ef565b90506100d4816040840184876100ef565b90506100e5816060840184866100ef565b9050809550610103565b836100f982610108565b8452949350505050565b61010b565b90565b505050505060405180910390f35b341561012457600080fd5b61006c6004356101e1565b005b600080548383010190555b5050565b856000808073ffffffffffffffffffffffffffffffffffffffff301689896040518083838082843782019150509250505060006040518083038160008661646e5a03f1915050503073ffffffffffffffffffffffffffffffffffffffff1687876040518083838082843782019150509250505060006040518083038160008661646e5a03f150506000549350859250889150505b9650965096509692505050565b60008054820290555b505600a165627a7a7230582031e831aaeacc6059399ebd36d5392b483337d2bd12ee056420571ccfbe3a37ea0029
test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"data1","type":"bytes"},{"name":"data2","type":"bytes"},{"name":"b","type":"uint256"}],"name":"test","outputs":[{"name":"r_a","type":"uint256"},{"name":"r","type":"uint256"},{"name":"r_b","type":"uint256"},{"name":"l","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4788cf9bb02a7d10b5a21513f76d2696af8f5020eeb1bc3fe9c69398b7d59099.sol":{"keccak256":"0x8329268f6c5f48083e00de75d6a04d7b399ebf7562661407c75c9c28068fd9af","urls":["bzzr://79380c8bc412073581897cb74df8cdcb857cc8667a38e21611fc60f45ab5adaf"]}},"version":1}
test_479cafd957f24a975ea176db376d038b5061b4f0cb35e4891966ba696f45a3c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:A 60606040525b5b5b6101bb806100166000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a044b0708114610048578063d85e2d20146100bb575b600080fd5b341561005357600080fd5b61007773ffffffffffffffffffffffffffffffffffffffff600435166024356100ec565b6040516020810161008a81838086610094565b90508092506100a8565b8361009e826100ad565b8452949350505050565b6100b0565b90565b505060405180910390f35b34156100c657600080fd5b6100ea73ffffffffffffffffffffffffffffffffffffffff6004351660243561014c565b005b600073ffffffffffffffffffffffffffffffffffffffff831682156108fc0283604051600060405180830381858888f19350505050151561012c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff3016315b92915050565b73ffffffffffffffffffffffffffffffffffffffff821681156108fc0282604051600060405180830381858888f19350505050151561018a57600080fd5b5b50505600a165627a7a72305820f542683b627c30a9c93771cf3254e1c0bf47da4cd19df519e3454608799c82a70029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"b","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c26c25a130f9e2da108e0f7e867f7f546f31f259ca7e635f03a628df7fc544860029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:C 60606040523415600e57600080fd5b5b603d80601c6000396000f30060606040525b600f5b600080fd5b565b0000a165627a7a723058201078830d5565142ac4351c24b94d1d0a601c221903a16636f5fedc299cd998f80029
test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_47bc361a55a3337a04a8adcdd1eaad5d5589f1c3fa8dbe89efd086a45bb7828d.sol":{"keccak256":"0x7e9a40a4bf5f98592db4b6c85991af2a343f6faa63a3e4b0ad59530a05112a41","urls":["bzzr://d8e21c67c779a22f89a7ba60763946be0c23717456a70ef24a16f32ce6b86b8a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol:test 6060604052341561000f57600080fd5b5b6101c28061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166393245a098114610053578063f88e9fbf146100b0578063fa3bd6c51461010d575b600080fd5b341561005e57600080fd5b61006c600435602435610167565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b34156100bb57600080fd5b61006c600435602435610174565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b341561011857600080fd5b61006c60043561018b565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b6007820281015b92915050565b6000818381151561018157fe5b0490505b92915050565b60021981015b9190505600a165627a7a723058202fe3a4d879826ff580017953bf058abb52e2e6a5ba71fccf875497e6cf7f7ee30029
test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul_and_add","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"uint256"},{"name":"div","type":"uint256"}],"name":"divide","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"divide(uint256,uint256)":{"notice":"Divides `input` by `div`"},"mul_and_add(uint256,uint256)":{"notice":"Multiplies `a` by 7 and then adds `b`"},"sub(int256)":{"notice":"Subtracts 3 from `input`"}}}},"settings":{"compilationTarget":{"test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_481f8ea203a8c965a0317e0769892d28c020e9ad51408a254f03d7fbb257d008.sol":{"keccak256":"0x7130751238f95ca020ae48e32d4d8356dab4a0da630fb641fe20e795b399626c","urls":["bzzr://df7158547b87a1259cd0e68778d2b5b1d81867ac022867075f791c8325f7de4e"]}},"version":1}
test_489b6c50e9ea7c794fc2704c479a4de1bed1fdb0f4d52017a8cd526a22d6f1f8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol:Test 6060604052341561000f57600080fd5b5b61023c8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663693ec85e81146100485780638a42ebe9146100dd575b600080fd5b341561005357600080fd5b61009960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061013295505050505050565b604051602081016100ac818380866100b6565b90508092506100ca565b836100c0826100cf565b8452949350505050565b6100d2565b90565b505060405180910390f35b34156100e857600080fd5b61013060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050933593506101a292505050565b005b600080826040518082805190602001908083835b6020831061016657805182525b601f199092019160209182019101610146565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490505b919050565b806000836040518082805190602001908083835b602083106101d657805182525b601f1990920191602091820191016101b6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020555b50505600a165627a7a72305820f7ca1f5e32cac8799cedc1e8c36ff35117c96a0d9a64b9a72a8541c420f8f1c10029
test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_s","type":"string"},{"name":"_v","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_48a520ad98d55d379bcc417353e186fe98fafff00749cdd165da678070293a51.sol":{"keccak256":"0x4d10c70752aa0aeebedb7e0f595cd54aa14c504bf7856cf8bf6c0ac01f112661","urls":["bzzr://d2c4af0dd5571c02135d750477105a04d47505c11efc36f037430c800be49d77"]}},"version":1}
test_48ba5f656955c320a034d07dfc201b98f362feade19b006fbfcc268c081da1ba.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol:c 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600960085b50905600a165627a7a723058209cce51f88b2eef6316b78769851ad0cd45058fb38a7b0067f7ecc367b7ef590a0029
test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4940eab60797b5b818708ae4577f62c5d1cc57db713a6a70b151389ca8f7a4d9.sol":{"keccak256":"0x17aed5fe2a10fc59b59e9826f066b0b0727a90195d8dc96986c1b5de993946a1","urls":["bzzr://28936fb98bf6ae058eeb21ecdab08a9e6a594c560ed38f03a07ce7cb21799cf6"]}},"version":1}
test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol:test 60606040523415600e57600080fd5b5b60838061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b805b50505600a165627a7a723058200544799c296087706b4bb9360c94df7b925286e8ba3ec545337f5f6b223c40790029
test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_49462aede440cc73f4c06eb88a06174ddaef24c7814bf3e34505125a38d51eab.sol":{"keccak256":"0xe673eb0ff8c328aaafaac4513a9b6fe33c3b12f828929d596791ad8133e722d7","urls":["bzzr://1b6f8050bb86c8f50148be9ed4c1d7710dbbbe0e7fdcbe3ea372ee5dc152c308"]}},"version":1}
test_494b5a0205a789914b6ea9a2c283d15b652a54bf52194976f1608ea50d7f60af.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol:C 6060604052341561000f57600080fd5b5b6101458061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063e2179b8e146100a1575b600080fd5b341561005357600080fd5b61005b6100fa565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b61005b610109565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b6100fa63ffffffff8116145b90565b6100fa63ffffffff811614155b905600a165627a7a723058203bd1480b7398d440868cde893fbdfd5f1ecd3f917ee1fad3c6d2d1703224dd7b0029
test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_49bd2fd9f06c52b050a2d66482fd6294f67dc48fc0709ad316d375c1da3c4b83.sol":{"keccak256":"0x485de98e0d4b8b7eb7fa3985fffe009cafb51ead331a07f2af21348a85a176d6","urls":["bzzr://0e7cbe405433e325e3c21ddf4a062e8b98a2ac25555c3ea0b959e1fef7bfe381"]}},"version":1}
test_49c5e459a3500e05dc2302b3230b1557f69e60c4d62ca2fd016dc846020f66c0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a723058207cd57be4a9899c961b45e1a6a6afbe97659e7bf4667c7f6afd9cdcedf42decf60029
test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"b","type":"uint256"},{"indexed":true,"name":"c","type":"address"}],"name":"e1","type":"event"},{"anonymous":false,"inputs":[],"name":"e2","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_49e3d5827e0d7f0443a7c3fe938b26e9656f5590855b1ecc44d056a8fb2b0419.sol":{"keccak256":"0xec0cd59390ecfbcfbf6e9c05e83d4257888d8508a96628f775ed11549025f0ac","urls":["bzzr://a6cf582fc0ad043726cd5b6aa3268768ab190532a9e09f67d0e86069a727b342"]}},"version":1}
test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol:A 60606040523415600e57600080fd5b5b60948061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000805b60035b60ff1691505b60035b60ff1690505b50505600a165627a7a72305820ddc0cfe67cd1a7d60cfd24c57208d93f22354c769cf18938e18644bd21a13a7c0029
test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4a0c790bc4a45893b6406ee557f0c947b8d531c4311572d2a22d72354fd094ba.sol":{"keccak256":"0x5cf3fa04ba3d040f7a7830cc45a255bf3de1ebc03dbeca1e521d03d8a8733926","urls":["bzzr://2e87edd9138a3de680313f03ff58c5328034cba145ba5eb818e388f62a9b9a24"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol:C 6060604052341561000f57600080fd5b5b6105448061001f6000396000f300606060405236156100725763ffffffff60e060020a6000350416630c55699c8114610077578063b8c9d365146100d1578063b8e010de14610128578063baf2f8681461013d578063cfad78b114610194578063e2179b8e146101eb578063fb5343f314610194578063feae062d1461013d575b600080fd5b341561008257600080fd5b61008a6102f0565b6040516020810161009d818380866100a7565b90508092506100bb565b836100b1826100c0565b8452949350505050565b6100c6565b60ff1690565b505060405180910390f35b34156100dc57600080fd5b6100e46102f9565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561013357600080fd5b61013b6102ff565b005b341561014857600080fd5b6100e46103cc565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561019f57600080fd5b6100e4610459565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b34156101f657600080fd5b6100e461046f565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561019f57600080fd5b6100e4610459565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561014857600080fd5b6100e46103cc565b6040516020810161009d81838086610101565b90508092506100bb565b836100b18261011a565b8452949350505050565b6100c6565b90565b505060405180910390f35b60025460ff1681565b60085b90565b6002805460ff1916811790556001805464010000000073ffffffffffffffffffffffffffffffffffffffff30160267ffffffffffffffff61046f81167801000000000000000000000000000000000000000000000000810277ffffffffffffffffffffffffffffffffffffffffffffffff9094169390931777ffffffffffffffffffffffffffffffffffffffffffffffff1916821763b8c9d3659081179094556000805468010000000000000000939095179290920293169290921767ffffffffffffffff19161790555b565b6000805473ffffffffffffffffffffffffffffffffffffffff64010000000068010000000000000000909204918204169063ffffffff1682604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561043957600080fd5b6102c65a03f1151561044a57600080fd5b50505060405180519150505b90565b600080546104699063ffffffff16565b90505b90565b60075b90565b600080546104699063ffffffff16565b90505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff64010000000068010000000000000000909204918204169063ffffffff1682604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561043957600080fd5b6102c65a03f1151561044a57600080fd5b50505060405180519150505b905600a165627a7a7230582023fdd01d1aff732735939d617ea092d344dd0b74a449d9d09cb0409557b809480029
test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t2","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t3","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t1","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t4","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4a0e961f165cfdaf604ad4a008beab4a27d3aac31813be04d474256be81f8443.sol":{"keccak256":"0x4559b40c968acccee4619ad037ac47215406715db520d3e48ad6e0c38f397cfa","urls":["bzzr://cafe4c338dc286f432042ee46f278644ea235ad7dd4537651fc51e026647425c"]}},"version":1}
test_4a456e7c7718df0f3ff093182aa9292aa7fdfdbb34b85d3f29aad362bc9e2094.sol: ERROR
test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol:C 6060604052341561000f57600080fd5b5b6103228061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d0e30db0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b6000605a610060828261020c565b50600090505b605a81101561011257807f01000000000000000000000000000000000000000000000000000000000000000260008281546001816001161561010002031660029004811015156100b257fe5b8154600116156100d15790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055505b600101610066565b6004600160005b0160005b505560056001805b0160005b50556006600160025b0160005b50556007600160035b0160005b505560016040516080810182825b815481526020019060010190808311610151575b50509150506040518091039020600060405180828054600181600116156101000203166002900480156101cf5780601f106101ad5761010080835404028352918201916101cf565b820191906000526020600020905b8154815290600101906020018083116101bb575b505091505060405180910390207f4e1f36d07c9214512662052328cbfc5c72416274c922d32aa208b4d43cb72e1c60405160405180910390a35b50565b81546001816001161561010002031660029004825481601f106102675782601f1061024c575b826008026101000360020a809104028280011783556102cf565b60ff19168360005260206000205581800160010183556102cf565b82601f10610297575082600052602060002080549082601f016020900481019061029191906102d5565b50610232565b508180016001018355818115116102cf57601f016020900481601f016020900483600052602060002091820191016102cf91906102d5565b5b505050565b6102f391905b808211156102ef57600081556001016102db565b5090565b905600a165627a7a72305820a32670983f23e169960cb0d6eea95ff31650869ebfc1237b9140d3c2134ea8670029
test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"r","type":"string"},{"indexed":true,"name":"t","type":"uint256[4]"}],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4b5da0e8a529d55b261148b88ba9d2fd3ca6ead6adac612c4547c3f4840284d7.sol":{"keccak256":"0x57768963ff8ef460db74df3a4814e3b1189e8bfad87fb4e475e9841984559446","urls":["bzzr://cdb001a329f4035fb258d816ead5d37a89b82b2951334e410081696f437cfe95"]}},"version":1}
test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol:c 6060604052341561000f57600080fd5b5b60ce8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60017f616263000000000000000000000000000000000000000000000000000000000060027f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60405160405180910390a45b5600a165627a7a7230582049abaf572ee04abc52bca595610f6a476b380c349868cdba1e68954fddc9d5700029
test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4b9fb1579520c42165a2507bcb3adcb494074ef81ea034e9cc6441d2c9821626.sol":{"keccak256":"0x21e153e8924ac7bce088709dea8c6d6edfa04939f361b817784b3c818f99d18d","urls":["bzzr://a8568529c4e3e4fa466d829ebca7212fa81e94ccd944ce90ef8e869f88ad76ff"]}},"version":1}
test_4bb8d86da72a524930f9172e2e4f7f0ba08c91d16508818e35a66a6d83d4f43c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:A 6060604052341561000f57600080fd5b5b60d48061001e6000396000f30060606040523615603c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de3081146053575b3415604657600080fd5b60515b60016000555b565b005b3415605d57600080fd5b606360a1565b60405160208101607481838086607d565b9050809250608f565b836085826093565b8452949350505050565b6096565b90565b505060405180910390f35b6000545b905600a165627a7a723058203da401887a6e5581f9a0106298d0e39f6384ab0b874677ebbd3b6095792637210029
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":{"keccak256":"0x45b15f57dbc887b57ca294c506553eb27e874cbfd696692261b684b10698ffb5","urls":["bzzr://d92c078fc05f10c08dc525988bc330dddd355186492117d4848237ce6454c0d4"]}},"version":1}
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:B 6060604052341561000f57600080fd5b5b60d48061001e6000396000f30060606040523615603c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de3081146053575b3415604657600080fd5b60515b60016000555b565b005b3415605d57600080fd5b606360a1565b60405160208101607481838086607d565b9050809250608f565b836085826093565b8452949350505050565b6096565b90565b505060405180910390f35b6000545b905600a165627a7a7230582081112e2c3bb8a92c7e9619ff98f2e7c5d56a5f39847c0471ab70b9fcc2fea42d0029
test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4bdf17f4ff25d30bc0c01870e7d33a741228e311157323e6dd40cfdc4c79b3ed.sol":{"keccak256":"0x45b15f57dbc887b57ca294c506553eb27e874cbfd696692261b684b10698ffb5","urls":["bzzr://d92c078fc05f10c08dc525988bc330dddd355186492117d4848237ce6454c0d4"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol:test 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60005b905600a165627a7a72305820d1825c0d433f79e224132357fb9a6dc1dbd516f787ef14c0b5445db80a824e210029
test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4c0cfe0ce1a83aac2875fedbf6fdb42d4fe6c6dded64907b97fbc6bdef100fcd.sol":{"keccak256":"0x1a5fffd77163b17af7fdb4db0227b24ec7c4e0529f632eb4f3d0a9a93dca9643","urls":["bzzr://485c87025fcbddbbe30d317a072c113408b4b0d183e5abcfc058dea19c3d5188"]}},"version":1}
test_4c13e96d0350f7611b2bc19e1fa973bb35d013c2f161fc85a848203675231675.sol: ERROR
test_4cb734b2bbb117222693fc5430043c6805e3958f61239a4bae7e453c42efe051.sol: ERROR
test_4cf33cdf17de27245d0f50d3410dd439e01cffcb082c1cc0a01cf98d4d46b042.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol:C 60606040526042600055341561001457600080fd5b5b60bc806100236000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a72305820dc1f8f3967678669ec98ca48dbd98dbf61c9b1a093357df93aedcada234e218a0029
test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4cf6189d7cb0a661447984b2a9437c1aaf00cb55eb7d9b1f27a0e0c839a2dc83.sol":{"keccak256":"0xe2cb33a865630c2e1212c8e98915e413c37c07885b2e423c7a07b6f94951f96c","urls":["bzzr://9aba0e5379c19eacd2f6aafdd99c846cc43c0be5d6006abc84583cd7ddc91972"]}},"version":1}
test_4d05be6403c97195c3651af1112798e3d70c02b163a8f7d8688ebd915b34037b.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60035b905600a165627a7a72305820c54466fa91451122eb5d58dbfa4f6cbf7a91e4874a627b0dda448fc23abb47f90029
test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4d2333d3d5de23e29a92a5db93cc44d88b802d88225bd28692e10ae27e72df01.sol":{"keccak256":"0x10c5e5baa9ddf45cfbaac393ecb05a184e5737216b4b34b8d7a058eb05eaeec4","urls":["bzzr://dc192e01be1416b3a0be2b4af4ab88a376759e8d16558a2e867855068860e571"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol:C 6060604052341561000f57600080fd5b5b61013f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e6100ef565b60006040518059106100ad5750595b9080825280602002602001820160405280156100e357816020015b6100d06100ef565b8152602001906001900390816100c85790505b509050600791505b5090565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820904e2a0b993945f9984aebd4972ae9ed7983a4d7981666497d9904356a02902d0029
test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4d72547b312c8824cb24bf9f3ce59bca8c18188644e366ed257633fa0ec8dfb1.sol":{"keccak256":"0x04f6e98fd3fb33cb21ce6bf1cd4aa6af6b94c7296f92319aedb10a32fc3f69f7","urls":["bzzr://c8257c0a36fe78a5246fdec845391c9121f9a195b36316f10e1b4fdda8688d99"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol:C 6060604052341561000f57600080fd5b5b6101838061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305a0581e811461005357806326121ff0146100b1578063d48092f7146100c6575b600080fd5b341561005e57600080fd5b61006b6004351515610124565b6040516020810161007e81838086610088565b905080925061009c565b83610092826100a1565b8452949350505050565b6100a6565b151590565b505060405180910390f35b34156100bc57600080fd5b6100c461013b565b005b34156100d157600080fd5b61006b6004351515610140565b6040516020810161007e81838086610088565b905080925061009c565b83610092826100a1565b8452949350505050565b6100a6565b151590565b505060405180910390f35b600081151561013257600080fd5b5060015b919050565bfe5b5b565b600060018215151461013257fe5b5060015b9190505600a165627a7a72305820ba5ce272fca84895f112b5d1effec8de9cf0e7d5f045fb5f53bb25ad41d4df270029
test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"val","type":"bool"}],"name":"h","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"val","type":"bool"}],"name":"g","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4d90e1818da758d34213293e104dcaf240a91c3930c5c8a30459a207f2892914.sol":{"keccak256":"0x1f397911ac4a3d947299fc0cd312a9ba656a601fe8004336553ac35d957b91ee","urls":["bzzr://255db65124fd68fdff97f97f52d1590331466e732d91596b89aff989e4362ce5"]}},"version":1}
test_4dc3f2bd43329785b4839a8300e5486aa77a88d576f92dd9776bb350edfbfd6b.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:A 6060604052341561000f57600080fd5b5b60ef8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60008063e2179b8e81604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151560a457600080fd5b6102c65a03f1151560b457600080fd5b50505060405180519150505b505600a165627a7a72305820df4b8883ae2b264a0a457cc90d3049e709ca0397d0b4b2a25545641a0dfe1c960029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:B 6060604052341561000f57600080fd5b5b60de8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146058575b600080fd5b3415605057600080fd5b605660a9565b005b3415606257600080fd5b606860ac565b604051602081016079818380866082565b90508092506094565b83608a826098565b8452949350505050565b609e565b60ff1690565b505060405180910390f35b5b565b60005b905600a165627a7a72305820d1e1bbb97225be61496fd4bd8840fb281e475fe93c237af85df6770e181ecea00029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:C 6060604052341561000f57600080fd5b5b60de8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146058575b600080fd5b3415605057600080fd5b605660a9565b005b3415606257600080fd5b606860ac565b604051602081016079818380866082565b90508092506094565b83608a826098565b8452949350505050565b609e565b60ff1690565b505060405180910390f35b5b565b60005b905600a165627a7a7230582091b800b0f08c226da94869d3abb8283eeebb2253e1a826b5cad3bf89f19c4eb60029
test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4e83c3b378e06f234c78027954ba1a739317d86fe4444f9389b59fe74198fac9.sol":{"keccak256":"0x3e2ebc91a3e39dbfe8d493aa2f48503ef1878da58433f17a6402de17182c83da","urls":["bzzr://28e2c7b5d0c86ddb8682affc4aa20d726f9fa7cd89554890f377ef797a2f8955"]}},"version":1}
test_4e870e0e0c991d39814bb1f772e4e8c8c2d91911b08ca694fb8490c7975ac4e4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol:C 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600281900a82045b929150505600a165627a7a723058201e826c96d7a98960d78262dc43aa535ec19262fff421f1fdc29cbc05131851f60029
test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4ebf310ac276779210a888ee13dc4a8e2c1fcb90c53ca24d41c2ab1725f828f6.sol":{"keccak256":"0x1bdbabd54ea9721a21ca3ed9446ec0e1c62ee6e60da0382e14e97c9d4319153f","urls":["bzzr://c03c097e0d1ba35c2c7142b3ac35565cea5735d45f2a1f30a852461c77678997"]}},"version":1}
test_4ed4b92817da31f161ef542307fc8a9b0c4759d680b93416d0120ac98eacd7ce.sol: ERROR
test_4ee4530975514bf378e95e976fa4ab794f04af2d7139f78c047efa98a98ae439.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol:c 6060604052341561000f57600080fd5b5b6103d58061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c2985578811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b600060036100a482826102bf565b507f660000000000000000000000000000000000000000000000000000000000000060008081546001816001161561010002031660029004811015156100e657fe5b8154600116156101055790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055507f6f0000000000000000000000000000000000000000000000000000000000000060006001815460018160011615610100020316600290048110151561016357fe5b8154600116156101825790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055507f6f000000000000000000000000000000000000000000000000000000000000006000600281546001816001161561010002031660029004811015156101e057fe5b8154600116156101ff5790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055506040517f666f6f00000000000000000000000000000000000000000000000000000000008152600301604051908190039020600060405180828054600181600116156101000203166002900480156102aa5780601f106102885761010080835404028352918201916102aa565b820191906000526020600020905b815481529060010190602001808311610296575b50509150506040519081900390201490505b90565b81546001816001161561010002031660029004825481601f1061031a5782601f106102ff575b826008026101000360020a80910402828001178355610382565b60ff1916836000526020600020558180016001018355610382565b82601f1061034a575082600052602060002080549082601f01602090048101906103449190610388565b506102e5565b5081800160010183558181151161038257601f016020900481601f016020900483600052602060002091820191016103829190610388565b5b505050565b6102bc91905b808211156103a2576000815560010161038e565b5090565b905600a165627a7a72305820fc626948bd80371b0641fefeb93d77d710bbb1f282ff134ad75675a4322e8a2d0029
test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4eed02a09b44e4a8284de815dd59664ec606dc20d91750b995ce1889d3af13e7.sol":{"keccak256":"0xadccfb65e1c92fb3b3f71bac964534665198a107cae0cdf90c815055f33db433","urls":["bzzr://40e28d1103a77811d756b119cd0bb9b61ae6ecdd23637711a7ad2bbee91d812b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol:C 6060604052341561000f57600080fd5b5b6101458061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b6000806000806100a26100f1565b6007935060089250600991506060604051908101604090815260ff8616825261ffff8516602083015263ffffffff84169082015290508060015b602002015163ffffffff1694505b5050505090565b60606040519081016040526003815b60008152600019909101906020018161010057905050905600a165627a7a7230582097973db8e4d9fef0619c4456202e3eb0cc3596bba6314a229b73964063a8a4c80029
test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_4f31ac602ee96be41b71f41f3ee72f6e9a600e43bfece6fa58bd071ceed1658a.sol":{"keccak256":"0xafe305c1e933f8f38176ca836db8a90d0053da0a1cdffc9fea108ef8679ec7c7","urls":["bzzr://95f144090d0b445c3bfd567d9bb4601b2b4926a86dd968ae258a5f043fc3a0d1"]}},"version":1}
test_4f3adbb9101e463ffe4280c96ef7b44817b8305081fd83e172de2b8ce7f86f33.sol: ERROR
test_4f7bc300ce224de4c3c53c6533af4d62f047fd433e3655543f8cf6e71161a456.sol: ERROR
test_4fe9c48859ea708f0115006995666c9c89cc223fda73cd347280f8d11b09328d.sol: ERROR
test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820d7d09c2c11ac4229466a454aebf9c86d71a8f4020f5bbbcfa3efaf9a321579bc0029
test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":true,"inputs":[],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5039c111f3aa8e4af7f4881151f10b5e2271c89fa672044376273d795d0456be.sol":{"keccak256":"0x45f635d60815bf6ca253d128995cc6b0eda5cabae6160bf92de6aa8c60e7e85f","urls":["bzzr://94cbf9a0f0e7572f8db28e376b894b70f7764d36b73e2f3aea75fd8a6c105165"]}},"version":1}
test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol:test 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820f5b2c8d57f177819d5d628f3c665fd4e5ae82417fb9d0ee54a8cc8049d4ad3ae0029
test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5046635d9a4085aa361b6c52d29fdfac6034b5b7f3f18481c8cf90cd1a0f16a9.sol":{"keccak256":"0xd7e561c67581743ff8eb2fb92e2435c789ac0398fe158fd384dcc5ff9ff4570d","urls":["bzzr://b524ebb682d571b9f67fcac40c3572b7f782f61d7c3392f46eae5274845623a3"]}},"version":1}
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:base 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058201a0dc5b54866c429bb83f727ba28aa8fcd697ccf833213ae2b06d7f20864b07a0029
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":"base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":{"keccak256":"0xac66a663fdfc93a799c8964df07b326adaf8549176007fe999a4f1469bd6f39b","urls":["bzzr://1cdfd20a97a208dcee206537e13418d106f48d518c42acb0f982b282bc013044"]}},"version":1}
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:derived 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058208d670d2f407e9c83211ce3d39fa35f9a3642849978719bf3edfc72906eb97f750029
test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":"derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_504a3a5e9514421bc0dec671fca5a73270836550aa474eaa799937ed0a3526da.sol":{"keccak256":"0xac66a663fdfc93a799c8964df07b326adaf8549176007fe999a4f1469bd6f39b","urls":["bzzr://1cdfd20a97a208dcee206537e13418d106f48d518c42acb0f982b282bc013044"]}},"version":1}
test_508758ea7e183ee47f4b481359b186918ef43ea33ad198ced271c43a8cbff6cc.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint24 -> uint24
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint24_to_t_uint24(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint24_to_t_uint24(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint24(value))

			}
		
			function cleanup_assert_t_uint24(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF)
			}
		

test_50b2d953e9878e01e12115776c972712b774f991d32d5c4ff8f8689feca099b8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol:test 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60105b905600a165627a7a72305820fc2c5cc38e5569db7902d7abce49d042f996a889cf558829dc01d4850e73ae490029
test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_50da25f76e1a45038959375e49729f1c11d587d883f0a999f94a945385067c91.sol":{"keccak256":"0xb3596e3f2e85376b97760d6c095b0a0365d8230490341f8ea05a992f4828849b","urls":["bzzr://130b30ad0b774ceb0151559eda46790e2203bb0cc07e224817a218e248f4bb9c"]}},"version":1}
test_50f33136dff592a17704745f5ffa8f9a02a4babd9aeb54a8db7c5962980aa222.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol:test 6060604052341561000f57600080fd5b5b60fd8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639f3fab588114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60006002826000604051602001526040519081526020908101906040518083038160008661646e5a03f1151560c157600080fd5b505060405180519150505b9190505600a165627a7a72305820e75e25f7b4e8accb3e2050409b1c24a6493856c08fa576501e179ea9acb520170029
test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"sha256hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5103fa62c4cc6ef38a040e97b1a8ea0d2d73ad3a5cf717f16e42bf2a24e6c4e8.sol":{"keccak256":"0x5d0bc6a960b7e8f2b16973b250dd0d3c79461a48517c4505c167d225efaf76a0","urls":["bzzr://8878f3e1dd0f89e01503140173d6b37336f95cfe80e81bcd1a3207a835f34388"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol:C 6060604052341561000f57600080fd5b6040516080806101f58339810160405280805191506020015b600082905561003a6001826003610043565b505b50506100a3565b8260038101928215610071579160200282015b82811115610071578251825591602001919060010190610056565b5b5061007e929150610082565b5090565b6100a091905b8082111561007e5760008155600101610088565b5090565b90565b610143806100b26000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114610048578063cd580ff31461009f575b600080fd5b341561005357600080fd5b61005b6100f9565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b6004356100ff565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60005481565b6001816003811061010c57fe5b0160005b50549050815600a165627a7a72305820670e4c10dc3ef512d9d18f3f305b2c0fa71609522cde5cdc69b816e17a1ac79a0029
test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_a","type":"uint256"},{"name":"_b","type":"uint256[3]"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5124a746a71baebad169d727b1f7340aa169d73898b8b8337912b065321ccd8d.sol":{"keccak256":"0x7e8d54fbff6d66208aff505c7efb26f9e0c966667447b9db77ea7818a068684b","urls":["bzzr://9ee2e0f1e3084343bc2c00f2127cd3ec104a91dddecf569eb25a5e2cf6bddfbb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol:C 6060604052341561000f57600080fd5b5b6101ff8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063e2179b8e146100a1575b600080fd5b341561005357600080fd5b61005b61011c565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100b46101c7565b604051606081016100c7818380886100f3565b90506100d8816020840184876100f3565b90506100e9816040840184866100f3565b9050809450610107565b836100828261010c565b8452949350505050565b61010f565b90565b5050505060405180910390f35b600080600080600080600061012f6101c7565b955095509550856001141580610146575084600214155b80610152575083600314155b1561016057600096506101be565b6101686101c7565b509350506002831461017d57600096506101be565b6101856101c7565b50909250506001821461019b57600096506101be565b6101a36101c7565b9250506003821490506101b957600096506101be565b600196505b50505050505090565b6001600260035b9091925600a165627a7a7230582040be2767ff817b4c0612a8b6dcf53825947a495b85cf401de07fe990b1ec6d250029
test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_51fd594f5d3600554846ef6a00325156438ba4b1f27a1e203f2a3953cb1cb2a4.sol":{"keccak256":"0x5849350fef312df1314053a218008e803e0ddcfa93e6cb7e28f2dece55be3ad1","urls":["bzzr://7e4964a0a21a8504cc8fa18eea343eb434648aef9d27d5833c9a91768473d97f"]}},"version":1}
test_5221263da48451d1edd163b29e1b7b99be2ad44a96f6bf831f42cddec12fe264.sol: ERROR
test_5242e3e47d4b6640484fddacf845c41c4cff4ae583ef9771cfc8190df1a9b251.sol: ERROR
test_529a4c8337c76645b862cc255b9d696e8b22cb590d5544ad01f80dbd038584b6.sol: ERROR
test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol:c 6060604052341561000f57600080fd5b5b60e58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166352efea6e81146046578063d9c55ce1146058575b600080fd5b3415605057600080fd5b6056606a565b005b3415606257600080fd5b60566077565b005b60746002600060a4565b5b565b60005b600381101560a0576001810160028260038110609257fe5b0160005b50555b600101607a565b5b50565b506000815560010160008155600101600090555600a165627a7a723058209960cf273e8c1c7254100342ed8224dea6b9ab307f843f2523fb64ef99eeb9a30029
test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5334a81ef356080508e84a629151460a3cd71e7010ace53648c9b743f17a932d.sol":{"keccak256":"0xfbb32c91f9d44c7c0c9f59e230c2caa436d6de57c93f3fbc09321c6f3e9f2182","urls":["bzzr://8553638973e7689e33ac5910e8bb60c8c1d4a6a1a749b60a6e85454788ff52ff"]}},"version":1}
test_53654e981b463e4a2df635c6d4c877c54108666956c057f497d291841896a396.sol: ERROR
 conv bytes1 -> bytes1
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol:C 6060604052341561000f57600080fd5b5b61049d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b61005061010d565b60405160808101610063818380896100a0565b9050610074816020840184886100b9565b9050610085816040840184876100b9565b9050610096816060840184866100a0565b90508095506100b4565b836100aa826100d2565b8452949350505050565b6100cd565b836100aa826100fc565b8452949350505050565b6100f7565b7fff000000000000000000000000000000000000000000000000000000000000001690565b6100ff565b90565b505050505060405180910390f35b60008060008061011b6103dd565b6101236103dd565b61012b6103dd565b60c860405180591061013a5750595b908082528060200260200182016040525b5092507f41000000000000000000000000000000000000000000000000000000000000008360c78151811061017c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061012c6040518059106101bc5750595b9080825280602002602001820160405280156101f257816020015b6101df610413565b8152602001906001900390816101d75790505b50915060088260cb8151811061020457fe5b9060200190602002015160015b602002015260b46040518059106102255750595b90808252806020026020018201604052801561025b57816020015b610248610439565b8152602001906001900390816102405790505b50905060048160aa8151811061026d57fe5b906020019060200201515160015b6020020152606660405180591061028f5750595b908082528060200260200182016040525b508160aa815181106102ae57fe5b90602001906020020151602001527f42000000000000000000000000000000000000000000000000000000000000008160aa815181106102ea57fe5b906020019060200201516020015160638151811061030457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508260c78151811061034157fe5b016020015160f860020a900460f860020a028260cb8151811061036057fe5b9060200190602002015160015b60200201518260aa8151811061037f57fe5b906020019060200201515160015b60200201518360aa8151811061039f57fe5b90602001906020020151602001516063815181106103b957fe5b016020015160f860020a900460f860020a0296509650965096505b50505090919293565b60206040519081016040526000815290565b60206040519081016040526000815290565b60206040519081016040526000815290565b604080519081016040526002815b60008152602001906001900390816104215790505090565b60606040519081016040528061044d610413565b815260200161045a6103dd565b905290565b602060405190810160405260008152905600a165627a7a72305820640bd4ec3d001fd893a57b225d4fb01fb13193b645b4f6416c92677b63ca522d0029
test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes1"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_536fc37660db2779661fa5a9307546e15d3fd2cf0f4a6cf6f22cfbe4406c502d.sol":{"keccak256":"0xa825784197bc7b37a3d8a0de830d0ca683ad46cf57d27dc5263d0b5801801f94","urls":["bzzr://cf55ce57af2e2b4a718041da2770ca28bd7418b2fc00b7150df68859228b45e5"]}},"version":1}
test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol:C 60606040523415600e57600080fd5b5b609f8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6004356001805b82156067578101906001830392506055565b8160005260206000f35b5600a165627a7a723058201bd54cf24fcc98c1c51175aaf253ef9580fc4b061385e831f2b3f0e8465f807b0029
test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_53729d09f653a813ec911aefe9cf4fe2054175fd7a76c3b672e08c77a13a0d7a.sol":{"keccak256":"0x4696a08d7492f391bfcfb297a167c6bcbfb8fb47a9901354f3718b25e8c317c8","urls":["bzzr://0ad18feee5612efdfec8fff873a3256bdc92a55dd2d25e99e1614b2094ccde53"]}},"version":1}
test_53989775530bc57e1e028a66b1fae198f8d3775a4d37ab7c41a1de71e0785c10.sol: ERROR
 conv int_const 12 -> uint256
 conv int_const 7 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_rational_12_by_1_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_7_by_1_to_t_uint256_lib(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_12_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_12_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_rational_7_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_7_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_12_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		
			function convert_t_rational_7_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Lib 
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Lib 
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Test 6060604052341561000f57600080fd5b5b61019c8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b600073__test_53e84970cbd1207cda1459fa25e9c57__637ae2b5c7600c60076000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815260048101906044016100ba818380876100d5565b90506100cb816020840184866100d5565b90508093506100e9565b836100df8261010f565b8452949350505050565b610102565b836100df8261010f565b8452949350505050565b61010a565b90565b610120565b600061011a82610107565b92915050565b610136565b600061011a82610107565b92915050565b50505060206040518083038186803b151561015057600080fd5b6102c65a03f4151561016157600080fd5b50505060405180519150505b505600a165627a7a72305820a104ac0f0c1a439f5381e228d2b68aa4c4c272816559e4e120ba3e8265bb2ecc0029
test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_53e84970cbd1207cda1459fa25e9c57da2d11efe6045a62a5bd70e7cb81a16e6.sol":{"keccak256":"0x9cbc5c1ada5af3eb93d1d337fbd882a2c39ccd683623b1756a105a32f2dbc1c0","urls":["bzzr://ec6d9d25c357879716b8042778607b73c9cd3973cd7a9ddf0a9b948d8ffa8055"]}},"version":1}
test_540c266553b6209439793cfc36736ac59d5ef6451519183f68d132c74515514e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes16 -> bytes16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes16_to_t_bytes16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes16_to_t_bytes16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes16(value))

			}
		
			function cleanup_assert_t_bytes16(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000)
			}
		

test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol:C 6060604052341561000f57600080fd5b5b6104528061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636a5c7bf48114610053578063d7da973a146100ad578063f0ba844014610111575b600080fd5b341561005e57600080fd5b61006960043561017e565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b34156100b857600080fd5b6100c36004356102c2565b6040516020810161007c818380866100e0565b905080925061009a565b83610090826100f9565b8452949350505050565b6100a2565b600160f860020a03191690565b505060405180910390f35b341561011c57600080fd5b6101276004356102d7565b6040516020810161007c81838086610144565b905080925061009a565b836100908261015d565b8452949350505050565b6100a2565b6fffffffffffffffffffffffffffffffff191690565b505060405180910390f35b60006060604051908101604052808360005b1a60f860020a02600160f860020a03191681526020018360015b1a60f860020a02600160f860020a03191681526020018360025b1a60f860020a02600160f860020a03191690526101e590600090600361031d565b507f313233343500000000000000000000000000000000000000000000000000000060008081548110151561021657fe5b90600052602060002090600291828204019190066010025b6101000a8154816fffffffffffffffffffffffffffffffff02191690837001000000000000000000000000000000009004021790555060008081548110151561027357fe5b90600052602060002090600291828204019190066010025b90547001000000000000000000000000000000006101009290920a90040260045b1a60f860020a0260f860020a900490505b919050565b60008160025b1a60f860020a0290505b919050565b60008054829081106102e557fe5b90600052602060002090600291828204019190066010025b915054906101000a90047001000000000000000000000000000000000281565b828054828255906000526020600020906001016002900481019282156103e25791602002820160005b838211156103a457835183826101000a8154816fffffffffffffffffffffffffffffffff0219169083700100000000000000000000000000000000900402179055509260200192601001602081600f01049283019260010302610346565b80156103e05782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f010492830192600103026103a4565b505b506103ee9291506103f2565b5090565b61009f91905b808211156103ee5780546fffffffffffffffffffffffffffffffff191681556001016103f8565b5090565b905600a165627a7a7230582005988a65b2daa40fb72eb3ec20a79fc699f496bf405df4a7daaf2837ced223d60029
test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"bytes32"}],"name":"f","outputs":[{"name":"","type":"bytes1"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"bytes16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_54527f12caf5c6bc02ddfb2e4566af8ab2349346ee7ce6295bc5ed7333b3b254.sol":{"keccak256":"0xe10073ac3821406bfdbb37f6f220d4508fdae64817524ec8fd7a2f5e92fd01ad","urls":["bzzr://14e2756cc0b429d0f0a042b24e56305e7a2c3a2aa6ac735aab77ff17a347cb18"]}},"version":1}
test_5468568547fcacdfbe1efede585622d519d8be7489301e38052fc89b6f41b6a9.sol: ERROR
 conv bytes8 -> bytes8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes8_to_t_bytes8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes8_to_t_bytes8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes8(value))

			}
		
			function cleanup_assert_t_bytes8(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000)
			}
		

test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol:Test 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a45bb8da8114603c575b600080fd5b3415604657600080fd5b605361ffff6004351660ac565b60405160208101606481838086606d565b9050809250607f565b836075826083565b8452949350505050565b60a1565b77ffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b780100000000000000000000000000000000000000000000000061ffff8216025b9190505600a165627a7a723058205eb4fdd23bfabd6415387eb24067d4df85eee2d252a4a2b87572b9167f9940140029
test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint16"}],"name":"UintToBytes","outputs":[{"name":"s","type":"bytes8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_54917abc3a4ed57658ce75540f9652e1ef7eab334a926f2f0a7f99a77ac8d914.sol":{"keccak256":"0xd54e3ea09b12134827b7fc6c78a4ffee94ca347c4ec08cc94c06b3b77ea95778","urls":["bzzr://a4c6122295cca5ea7b4d8f70f466cd41c68e9df0eafcdb181230c3037f5ea22e"]}},"version":1}
test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol:test 6060604052600080546801000000000000000067ffffffffffffffff821602604060020a608060020a03199091161790553415603a57600080fd5b5b60368060486000396000f30060606040525b600080fd00a165627a7a723058200d52008a25cad1a37b54755c70477099898ee77f742b89f38ba795481aec74fd0029
test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_54a74a1ac26ff2edad03df1dbd2c6520076fc7035b40dc637805f2a737d5fa63.sol":{"keccak256":"0x640bd486d463e736d9442f064158f50eb11efbe043b34804754899ac1ef8ccfc","urls":["bzzr://d2b2cafa8c7265d8b324f013d9a95be3cfd8131540ec6b31cce4796c3764a0db"]}},"version":1}
test_54bb06e5936599f641e24e3f46310c18ef1743566678eba577ee484022254be6.sol: ERROR
test_54d48a45dc7ae783ac2778d247dd9371498a530e98e93876f8f7eb14ffa25cc3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:C 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b505600a165627a7a7230582010c388250ede4159e9d14dd1c71973944bac304be8c58692b0f9a43123438f5b0029
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":{"keccak256":"0x6759dca39e3c0c82c7f79b03b87e6e8946a71081d1044433b8075d2cd9a5c152","urls":["bzzr://73e815f39190a92a5be22dbe2673432a8a842254da93f8530ffe97b340911d98"]}},"version":1}
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:D 6060604052341561000f57600080fd5b5b60b98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663eee972068114603c575b600080fd5b60456004356083565b60405160208101605681838086605f565b90508092506071565b836067826075565b8452949350505050565b6078565b90565b505060405180910390f35b600281025b9190505600a165627a7a7230582045ccae724c6e19239c2ea94ac72e71cb85d391fe29c80208d34d5ff78cc63a680029
test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"self","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_54ef8be3a949c920c79fb896934442bb54ad635985559c79ea162d76ef2bc898.sol":{"keccak256":"0x6759dca39e3c0c82c7f79b03b87e6e8946a71081d1044433b8075d2cd9a5c152","urls":["bzzr://73e815f39190a92a5be22dbe2673432a8a842254da93f8530ffe97b340911d98"]}},"version":1}
test_551124ebb8df1835e98ecc89d037f39c5a5de994cbc343c8d2dff06bd9fad023.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol:test 6060604052341561000f57600080fd5b5b60dc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324b912e58114603c575b600080fd5b3415604657600080fd5b60556004356024356044356093565b60405160208101606681838086606f565b90508092506081565b836077826085565b8452949350505050565b6088565b90565b505060405180910390f35b6101218383018201830101600160106101005b50505093925050505600a165627a7a72305820a7d2f5db21ff8a4b70e201b766c26ce0911856461666d4b1e8507e73a0dbd3740029
test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x1","type":"uint256"},{"name":"x2","type":"uint256"},{"name":"x3","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5578500918c612c90024921cb1ff13a6e8d8b2db625f1f4c0036bf213902a008.sol":{"keccak256":"0xedf25866148b0e691ccdf7ddc1943e05d2aca16ce5f0ce0f691d17e65c22b20c","urls":["bzzr://0a314c83f49825f68399893ac43188e85b4186a5fb9d167d659ff24a5870229e"]}},"version":1}
test_5578b61d7a583f06b88c397f741e131ed56dea318d13d7de13148acd47cac8a3.sol: ERROR
test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol:test 60606040523415600e57600080fd5b604051606080607a8339810160405280805191906020018051919060200180519150505b5b5050505b60368060446000396000f30060606040525b600080fd00a165627a7a72305820ba7d705ef0775cda4aba023df0158823e49c95587f49aeb6d8bb2239c211f78e0029
test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"param1","type":"uint256"},{"name":"param2","type":"address"},{"name":"param3","type":"bool"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_558d93da05b1fa395d3cddd153320696105c3664dce2232acfbe7b48e268ca56.sol":{"keccak256":"0x974d8e6422ea274b57aee5472cefb646979c8a8c7aa04e32179f7ae00e01522a","urls":["bzzr://ba16cd64d5e0f6e0c64768c5a7fcf60898c448b6742f5ee8bb1c050cac6ef88b"]}},"version":1}
test_55b7126d712cac99400f891a31a04ce3bf4a038f9206ede8c6ce1a2e02a3e79e.sol: ERROR
test_55cde94ea1c1f1a295d1420e3f426bd86d73583cee6fb651f03469cc86109a2c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_560b6b48bb1ae7fe1d9af65bada5622978d9f9a1c0ac4806bd42bbbeafa6bd90.sol: ERROR
test_564edd48e5d247a5ac08664185cd6dcc593e1350ab54182ca60d8017966ca35d.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol:C 6060604052341561000f57600080fd5b5b6102528061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461005e578063b8c9d3651461005e578063e2179b8e1461005e578063e5aa3d581461005e575b600080fd5b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b6000805160206102078339815191525b90565b6000805160206102078339815191525b90565b6000805160206102078339815191525b90565b6000805160206102078339815191525b905600c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470a165627a7a72305820f44e6612f66481a18e7186369a3b20244f01b06e41c1f559047f1046ca2fdab20029
test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"i","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5693ca54e49ab47a6283539f7433ebad6e9002f03df578a80ef2c69ca6bbe9b4.sol":{"keccak256":"0xccf11f5b60afcc4b916a7728f0beec4ae3d7d5b2cfd0181d8980225fc0950720","urls":["bzzr://ae635c454fcb8d2e3b3900039dc0d909a4172490be36655e496fc430c46c461b"]}},"version":1}
test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820993e6dd851ec8581d003b5a598d3db1af4cd1b0f7b508550c8b63deffcc878970029
test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_56bb3efc34873e683ec963e4c41e0cc51bf60165650d552657b064e5a131de3c.sol":{"keccak256":"0x6480504b545240018abe31d78474e73d0eb4a6f4b43f6a9971316d16621bb7ce","urls":["bzzr://ed6e40da03a0ce06908b26f614630a4217679f6fad3f6495024b83bd01b0b8fe"]}},"version":1}
test_56eca85551d93cab7020c8991a206116a9b562a68c7924fad5627d911ff7c456.sol: ERROR
test_57356d7bde66ba99876e4611c577ec0706ff5da5d09a30dec3479a02cb6066cd.sol: ERROR
test_57447db1d73990f58b040a473e41c3499f379b61e96b0f571d3c711676499176.sol: ERROR
test_5763062d4894970a666a01d890953e350e6bf2656d159075c27cc7b519e7f821.sol: ERROR
test_5790808c858b32f8889bc4616e4c80c05305e6c3ee7667ac232d8169706b8de1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820430e29e1e04791a8d295dae5baac583916b7ce3429934aefc1cd98ca349b716b0029
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"x","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":{"keccak256":"0x71f9a087c6997ac08bf3f3019013510d8c769866670e838c905ed6e62aad7ee3","urls":["bzzr://bc5f03f6385752ba59512840ddd4c74c73711686047ee3c9aea77b80f0712746"]}},"version":1}
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:B 6060604052341561000f57600080fd5b5b60eb8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60007f0c55699c4769c0b08a59db8a53119b799ea10ec55a4da92af76b0404363e098060405160405180910390a15060015b905600a165627a7a72305820a0c1a3f9145a63824ddec266ea04990ca3bb07bfd213558e61dac556d258843c0029
test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"x","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_57bfafa3f28e7d834c953368cd6054f64eda475ff0fb776ba860afee3ee3b2d1.sol":{"keccak256":"0x71f9a087c6997ac08bf3f3019013510d8c769866670e838c905ed6e62aad7ee3","urls":["bzzr://bc5f03f6385752ba59512840ddd4c74c73711686047ee3c9aea77b80f0712746"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol:C 6060604052341561000f57600080fd5b5b60e38061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166392d0d1538114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000806001541315609c57506007607c565b6001805560005460ae9063ffffffff16565b50600290505b905600a165627a7a7230582088158cb04ca7528b3df93378eedd23729772b08a09bbc92df1919cf60403d2c10029
test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_58002e297336e6539efb14391383b99bb560c4e6b2e850e93d315d13b8f48028.sol":{"keccak256":"0x6b5b5876bca9ad51fe7d28a2238d68d31b61a5987bb449074c0e3edf3a21087a","urls":["bzzr://ea703a2c9b5a7cab85c3b2736ac7431de6e62aca01b50b605f9689949ab499c3"]}},"version":1}
test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol:test 60606040523415600e57600080fd5b5b60948061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60036002600160405190815260200160405180910390a25b5600a165627a7a72305820a981399c6b73f93a5762c22352ce4eedfe11ea88e6365d0ef581e110c71d48c10029
test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5808352c18ef276e11647f87415da6c34cb861c2b653a0648a8f89fa88edcf2d.sol":{"keccak256":"0xdbc4f8e447dd5374abfc2f4134abfc3f5d4a62a68fcd01c3cacdbee239fea036","urls":["bzzr://96b6afdf06b90e799e5623718573372f74df94b7f56655a3f6dc82fa9b1e3cac"]}},"version":1}
test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol:test 6060604052341561000f57600080fd5b5b60b08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60826000607b6063606360638563ffffffff16565b63ffffffff16565b63ffffffff16565b63ffffffff16565b90505b5050565bfe00a165627a7a72305820731d4909ba6ffac2c125a42eca8785239162c959602b13d2dfada51fea406f480029
test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_582e4056b144c2b1dc78ceef721d0438b60c6b8960f6b2a6310a58a00c7fa3e8.sol":{"keccak256":"0xc241ca57644b25ccddaeb2dc23b89d889b53bd3b2d1c9f75581c6c9fdf6674cc","urls":["bzzr://237d0ec216a0bb6a593932fa497977c8abbc604b28be707e01c4a686231ff8fe"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60005b905600a165627a7a72305820014f2f830e46bc5d32f3ed4d3772bd3250d7ac5ab66d8714204d7a7ab8c3038d0029
test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_584fee3a4e1d4eb23db8c598b288feff4baf3e48a3292ec434d613d6f20df2ab.sol":{"keccak256":"0x989b30d56bb4ccfb82ccdbb8802808143f1a960ffc4a51451cbda13935fbeadb","urls":["bzzr://bebaeffc56ede76f27dde0dc39ee5fc752966d380d03f15f2a4d208f4d85eb11"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol:C 6060604052341561000f57600080fd5b5b6102418061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461005e5780637934fd96146100b55780638a054ac21461010c578063b8e010de14610163575b600080fd5b341561006957600080fd5b6100716101ba565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100716101c0565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561011757600080fd5b6100716101d6565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561016e57600080fd5b6100716101ed565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b60075b90565b600080546101d09063ffffffff16565b90505b90565b6000805467ffffffffffffffff1916905560015b90565b6000805467ffffffffffffffff19166101ba178082556101d09063ffffffff16565b90505b905600a165627a7a72305820130024d78b820a9e74d93d4689c926b43f94d71859320730fa6245ea60c9dfe20029
test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ca","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"d","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5852b4c495451df1a2f2a81ae4e7450fe5640f858b23f30e38adf38e5e0f33c8.sol":{"keccak256":"0xba8f194ae2978b7582c33163df695bb7c75cd397f3cdf6a25456d1966ba734ef","urls":["bzzr://17f075f713aafb1cb61145e1c92ced28c1d76fbe5926d08212ef10fb125175d5"]}},"version":1}
test_5869c04d16b5835beaa4ce684bc581c051e819d94e0fa78f10fdf74e281d18db.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol:test 6060604052341561000f57600080fd5b5b60ef8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515609f565b60405160408101606281838087607a565b9050607181602084018486607a565b9050809350608c565b836082826090565b8452949350505050565b6093565b90565b50505060405180910390f35b6000808260ae576003600460b3565b600160025b60ff91821693501690505b9150915600a165627a7a723058201f6c41401f210d91e0623e7a3b0e677e217675ad1799e907b575d5f0bdaddec20029
test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_586db6a95842b1ed48a17b04f576650b9af3eeb4227512c06ee8717d35569027.sol":{"keccak256":"0x2508a89bf23757bcd2e4ae44591046202d85398f84fed82d5b1ac6016aaecccd","urls":["bzzr://ee2b39283d433759048dc9aa0ad7eced2727834e4529fb01f5fe5b0ca88198be"]}},"version":1}
 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv contract C1 -> contract C1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C1_$13_to_t_contract$_C1_$13(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C1_$13(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C1_$13(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C 6060604052341561000f57600080fd5b5b6104f28061001f6000396000f300606060405263ffffffff60e060020a600035041663b80ee897811461003a578063baf2f868146100bc578063f8a8fd6d14610132575b600080fd5b341561004557600080fd5b610059600160a060020a03600435166101ba565b6040516020810161006c81838086610076565b905080925061008a565b83610080826100a0565b8452949350505050565b61009b565b600160a060020a031690565b6100b1565b60006100ab8261008f565b92915050565b505060405180910390f35b34156100c757600080fd5b6100596101c1565b6040516020810161006c81838086610076565b905080925061008a565b83610080826100a0565b8452949350505050565b61009b565b600160a060020a031690565b6100b1565b60006100ab8261008f565b92915050565b505060405180910390f35b341561013d57600080fd5b6101456101c7565b6040516040810161015881838087610076565b905061016981602084018486610076565b9050809350610187565b83610080826100a0565b8452949350505050565b610198565b600160a060020a031690565b6101ae565b60006100ab8261008f565b92915050565b50505060405180910390f35b805b919050565b60095b90565b600080600060096101d6610369565b602081016101e681838086610076565b9050809250610204565b83610080826100a0565b8452949350505050565b610215565b600160a060020a031690565b61022b565b60006100ab8261008f565b92915050565b5050604051809103906000f080151561024357600080fd5b905080600160a060020a031663f07494a06000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561028b57600080fd5b6102c65a03f1151561029c57600080fd5b5050506040518051935050600160a060020a03301663b80ee897600760006040516020015260405160e060020a63ffffffff841602815260048101906024016102e781838086610076565b9050809250610305565b83610080826100a0565b8452949350505050565b610316565b600160a060020a031690565b61032c565b60006100ab8261008f565b92915050565b5050602060405180830381600087803b151561034757600080fd5b6102c65a03f1151561035857600080fd5b50505060405180519250505b509091565b60405161014d8061037a8339019056006060604052341561000f57600080fd5b60405160208061014d833981016040528080519150505b60008054600160a060020a031916600160a060020a0383161790555b505b60fb806100526000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f07494a08114603c575b600080fd5b3415604657600080fd5b604c60b3565b60405160208101605d818380866066565b90508092506078565b83606e826099565b8452949350505050565b6095565b73ffffffffffffffffffffffffffffffffffffffff1690565b60a8565b600060a282607c565b92915050565b505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820044288ceb54577fa885b927d9e0ee9148b9d6db454a64cc38766d21d4f7257df0029a165627a7a72305820644dd6c7b3b42c1af8481f73d1f2a1781624806584b094978fb83e75bedfd69a0029
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"address"}],"name":"t1","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"t2","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"address"},{"name":"y","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":{"keccak256":"0x20ba90beb3e1c90b6410daa4f2843e8b48647b91356626582058405182d2e57e","urls":["bzzr://8e518c2ffcd40f5f88fc0654d8f0ea0aa8a9fc63bb42d7a2d2425d1442ce245d"]}},"version":1}
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C1 6060604052341561000f57600080fd5b60405160208061014d833981016040528080519150505b60008054600160a060020a031916600160a060020a0383161790555b505b60fb806100526000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f07494a08114603c575b600080fd5b3415604657600080fd5b604c60b3565b60405160208101605d818380866066565b90508092506078565b83606e826099565b8452949350505050565b6095565b73ffffffffffffffffffffffffffffffffffffffff1690565b60a8565b600060a282607c565b92915050565b505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820044288ceb54577fa885b927d9e0ee9148b9d6db454a64cc38766d21d4f7257df0029
test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"bla","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"address"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":"C1"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_58c8d856eb49ea84a877f73c74e7a8638c92f1217201fca9bd2b7cab478fcc22.sol":{"keccak256":"0x20ba90beb3e1c90b6410daa4f2843e8b48647b91356626582058405182d2e57e","urls":["bzzr://8e518c2ffcd40f5f88fc0654d8f0ea0aa8a9fc63bb42d7a2d2425d1442ce245d"]}},"version":1}
test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000546002556001546003555b5600a165627a7a72305820a94ab01a9334050c7e49c6b19761db85540066f2a6dc3eb6b8ebf9e4219954d60029
test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_58e2a18204687960c639d07f179eb84b15f0014be29fbeb4528b946cc01f4106.sol":{"keccak256":"0x2b64ae70cafd8f731600924ec305e12855a58f279c11b0329a8aa4d432bc6bf1","urls":["bzzr://3b350fd2e80d434f06b06ef0b385d213bf8a3d835622fb036c67631c54c40679"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol:C 6060604052341561000f57600080fd5b5b60d98061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515608f565b60405160208101606281838086606b565b9050809250607d565b836073826081565b8452949350505050565b6084565b90565b505060405180910390f35b6000818015609e576001820191505b5b6001820191505b5b509190505600a165627a7a72305820d24843288118a9acfc97d0154200ede26944fef6be2cd1b2ecfc130f75464d4d0029
test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"twice","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_591f23020b82434fbfd1c7bd1f7f9fed8f941d6ffa3166f078c0fd21dacb14cf.sol":{"keccak256":"0x6886e86b5c4b7424cb88d9857da04a6e33d53609a59223ee929b77ad406043f8","urls":["bzzr://0eb273b12410cdba04e0db2eb1f30668a0eb7519bc92da57bcb870b220d0162c"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol:C 6060604052341561000f57600080fd5b5b6104858061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b60008054600160ff19918216811780845581546002908416811790925581546003908416811761ff0019908116610400176bffffffffffffffffffff000019166b3132333435363738393000001774ffffffffffffffffff000000000000000000000000191674313233343536373839000000000000000000000000177fff00000000000000000000ffffffffffffffffffffffffffffffffffffffffff167e6162636465666768696a0000000000000000000000000000000000000000001790935580546005908516179092166106001790915560048054600793169290921790915560f860020a908102600160f860020a0319161480156101ca575060015460f860020a02600160f860020a0319167f0200000000000000000000000000000000000000000000000000000000000000145b8015610207575060025460f860020a02600160f860020a0319167f0300000000000000000000000000000000000000000000000000000000000000145b80156102495750600254610100900460f860020a02600160f860020a0319167f0400000000000000000000000000000000000000000000000000000000000000145b80156102ae57506002546201000090047601000000000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff19167f3132333435363738393000000000000000000000000000000000000000000000145b801561031f57506002546c010000000000000000000000009004770100000000000000000000000000000000000000000000000276ffffffffffffffffffffffffffffffffffffffffffffff19167f3132333435363738390000000000000000000000000000000000000000000000145b80156103975750600254750100000000000000000000000000000000000000000090047601000000000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff19167f6162636465666768696a00000000000000000000000000000000000000000000145b80156103d4575060035460f860020a02600160f860020a0319167f0500000000000000000000000000000000000000000000000000000000000000145b80156104165750600354610100900460f860020a02600160f860020a0319167f0600000000000000000000000000000000000000000000000000000000000000145b8015610453575060045460f860020a02600160f860020a0319167f0700000000000000000000000000000000000000000000000000000000000000145b90505b905600a165627a7a723058200b41768ac597806d2344168768ca994b016f070061f452aa022d01490d5cd6090029
test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_594c2223584327a715835169799cb9e7923d2dce4c640c49b2d52f01728fa83e.sol":{"keccak256":"0x5d0dbd96e6aa96677073a6945a99cd08b77de9413a454e8bd0e50d442d591162","urls":["bzzr://6d20cebf165156e8666bdd6dc5a8f3c93094223edf3a46f95ff22948515c3ebe"]}},"version":1}
test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol:C 60606040523415600e57600080fd5b5b60a08061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600060566062565b605c6062565b5b505050565b602060405190810160405260008152905600a165627a7a72305820e0e20d1fb4504dfd2b080c1feb33a0186fe69435b1b9607239bd5c7c2b0c31950029
test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_598727fcc7313f86e020e62a14b6971de976ee9dbedd6b8d518ac24b3d60dad1.sol":{"keccak256":"0x630a3bcdc25a2c1085395f91c36b678ab02a265d11b1620d4951724e5c18dd5e","urls":["bzzr://614086f1f7e91b80940ee71099142d601d6b4debf8990c5710ae63ec64812fef"]}},"version":1}
test_5a1cb2e2ee5603e9528f1baf9b78e7291656268d70083d018a72679c627ac1eb.sol: ERROR
 conv int_const 10 -> uint256
test_5a471346e7b8c89393b5fff654bdb361bbe3b0ca93eb63bc7abf54e1ac01669c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663131e2f188114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a72305820df5e4846e2077f229da099f835249739114efa6cdf129535352980cb4f5a063b0029
test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul(uint256)":{"notice":"I do something awesome"}}}},"settings":{"compilationTarget":{"test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5a67e18d862cbf1462e1ea39b517883f5dddf168c5cd44279c2d131b4aed550e.sol":{"keccak256":"0x97440e1fe05b5a9402a81c82ee29e30dcdbd72e3e5e205209eeb31a9b2290da8","urls":["bzzr://79643ec41cb047f71b452897edc0811d1f90ec4c5539aa3e73e05c86fc59be6e"]}},"version":1}
test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol:test 6060604052341561000f57600080fd5b5b60f58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b605460b7565b606060405190810160405280602181526020017f313233343536373839303132333435363738393031323334353637383930313281526020017f330000000000000000000000000000000000000000000000000000000000000081525090505b50565b602060405190810160405260008152905600a165627a7a723058200a4a89609e19a84de593eda0d57f53c126788ea725fcdf1044f01af51041589b0029
test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5a88b4e89e2f37a44f0a8db0370240cc6d38346f8bfc52a8eb505154b36fc2f1.sol":{"keccak256":"0xfccce00aa5b8c5540981458295a415c46a0aefb7135aa05aa2886e34297aff16","urls":["bzzr://8e1c7a3f097f3a5cb669e35e16b520a9ab9dbf792c668b8ea62d2cf388e9e7f4"]}},"version":1}
test_5a931ee5ca4dbc71c43bac230b1d2b714ba8692e96995431e8fc4edd22555574.sol: ERROR
test_5b1274f9b28fe245f4e65caa5e0b6e3c33ce6e595606e9ddef86bc2270b6622a.sol: ERROR
 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol:C 6060604052341561000f57600080fd5b5b6101e28061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c8114610053578063d7b52a1f146100c0578063ef9d1d8614610117575b600080fd5b341561005e57600080fd5b61006661016e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100b5565b60006002821080156100ad576100af565bfe5b50919050565b505060405180910390f35b34156100cb57600080fd5b6100d3610177565b60405160208101610079818380866100f0565b9050809250610097565b8361008d82610109565b8452949350505050565b6100b5565b90565b505060405180910390f35b341561012257600080fd5b6100d3610194565b60405160208101610079818380866100f0565b9050809250610097565b8361008d82610109565b8452949350505050565b6100b5565b90565b505060405180910390f35b60005460ff1681565b600080548190819060ff19166001825b0217905550600190505b90565b600080546005908190839060ff1916600183fe5b0217905550600191505b50905600a165627a7a723058202e87d0efb398858d2aa066d817577ef717c7f08f3292817bb80762f09eb6fcee0029
test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_store_ok","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_store","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5b43c74d5fec5350226c3393f39c0d6598de55b71a4cecc6b84851cbec4b6117.sol":{"keccak256":"0x26bee7d71dd947603563f3527a235e296520d9dc5941e54c59833c22729cdd32","urls":["bzzr://3ad36f775db16799e66d93eb15c9646e7a623f863b14c9964f29ce7d43aba719"]}},"version":1}
test_5b5aa050c701a03115200586a06d6203913e4e75c203587d496f6c960044fab1.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:C 6060604052341561000f57600080fd5b5b6101968061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e61012d565b60076040518059106100ad5750595b908082528060200260200182016040525b508152600881516003815181106100d157fe5b602090810290910101526100e481610101565b6003815181106100f057fe5b9060200190602002015191505b5090565b610109610146565b6002825160038151811061011957fe5b60209081029091010152815190505b919050565b602060405190810160405280610141610146565b905290565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820edf14b37eb44c4b622fed59ca5cb8266746f99b4edae9cc5c09d9d00c5c25fe90029
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":{"keccak256":"0xdf69479d911fe65432712720c161dfdc41592663e9f78369c7a5abc1d6587f6f","urls":["bzzr://8496e6ceff5e61321f58699a252ca0f503de2faf0119d0382628db4e384e8798"]}},"version":1}
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582080e8bda6a43a58487086b9b4c5f6704b231da7ba1e199f4d632ecc11f6ba50900029
test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5b940736b4f44892dfbda6a332babf7b18a788c7e373e88bc5ae08eaceb67f57.sol":{"keccak256":"0xdf69479d911fe65432712720c161dfdc41592663e9f78369c7a5abc1d6587f6f","urls":["bzzr://8496e6ceff5e61321f58699a252ca0f503de2faf0119d0382628db4e384e8798"]}},"version":1}
test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol:test 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356054565b005b908101905b50505600a165627a7a723058203dc8602f618e194375b78ad0d9876984b946705e86a1bc50f62148a74e1de1540029
test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5be30fbb21743528b32c50589935498519fe50123d531caf4fc818137eb8672d.sol":{"keccak256":"0x055a96dae386107c7ded9452b65376f8acc70c6744f075d1e3aad2066dcb9caa","urls":["bzzr://893aaf099a45fbf8495164fbbfeb125647763c730c456913011c46ee9c9fac8a"]}},"version":1}
test_5bf1631305324e367bf3061b849d3058ac26a29443d0ba71a95b8d436199db62.sol: ERROR
test_5c369548f095f631131b00557e7683a7a963c7c1013264df79cac06ea9a3c322.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol:C 6060604052341561000f57600080fd5b5b6101498061001f6000396000f300606060405236156100495763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461006457806326121ff0146100bb575b341561005457600080fd5b6100625b600134016000555b565b005b341561006f57600080fd5b610077610112565b6040516020810161008a81838086610094565b90508092506100a8565b8361009e826100ad565b8452949350505050565b6100b0565b90565b505060405180910390f35b34156100c657600080fd5b610077610118565b6040516020810161008a81838086610094565b90508092506100a8565b8361009e826100ad565b8452949350505050565b6100b0565b90565b505060405180910390f35b60005481565b345b905600a165627a7a723058205cf0f74e2347905ce1d5a757759d8f516ffc5a050e658ae71020fc04b19016fa0029
test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5c36cfcd8f9a7a4587b9610cf5a05fac8bbc6bae51dfb99449923821221a0d6b.sol":{"keccak256":"0x2e32232e2a5c8999a2c437a05e8332c7086105c8d13baedb8fb6dee9520dc011","urls":["bzzr://e41b2e0e2749bf059983cf6162ab0a41094944aa890d4a39c2fa8abda3641bea"]}},"version":1}
test_5d06921029f8e8a34a2d374af88124ab9015989dba9095e296e484f6a15d7ded.sol: ERROR
test_5d0b4898c2bc6766f0d6fed83155c9c8f7062805f3a9fe43ebe1eb7dbd1fb227.sol: ERROR
test_5d4dac7437f33758adc60175cd3e9ef38d2a05ddd23c0ecc2ccc9cfa549ea83d.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Base 606060405261001964010000000061008a61002682021704565b5b60008190555b5061002c565b60025b90565b60bc8061003a6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60025b905600a165627a7a72305820bd43b05c455d166df8e5b954572f7622560d0bd6523d503bde6c82ed003677290029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:BaseBase 6060604052341561000f57600080fd5b6040516020806100f8833981016040528080519150505b60008190555b505b60bc8061003c6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60025b905600a165627a7a7230582089da4091767cfd1626bd3516c97f6f418d4e1c1ecbd4b86d310cef3bd142c67e0029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Derived 60606040526100196401000000006100e961002682021704565b5b60008190555b5061002c565b60025b90565b61011b8061003b6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d46300fd81146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660e9565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b6000545b90565b60025b905600a165627a7a723058206c6268b7e02a8d11ca9d5e7ba139c958ed745b00ee297c2bb269db9cac7099a50029
test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5e60a400db005a9e09ba8d347c234c596cbe3c7d15e4c84d41c29a6eeb7589ab.sol":{"keccak256":"0x48f10c1ea5816aa8a1bf56fdc043535a74789bd84315c55b82043dd7d5a4f3d3","urls":["bzzr://0d64eb64c5de0db73fdc08e0389db4dfe2531b3e17361d8e04e058c7473473b4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol:test 6060604052341561000f57600080fd5b5b5b5b610247806100216000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166377bef6e181146100535780639e2bd1bd14610053578063f5e3d9fc14610107575b600080fd5b341561005e57600080fd5b61006960043561015e565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b341561005e57600080fd5b61006960043561015e565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b341561011257600080fd5b6100696101e2565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b600081600281111561016c57fe5b6000805460ff1916600183600281111561018257fe5b021790555060005460ff16600281111561019857fe5b90505b919050565b600081600281111561016c57fe5b6000805460ff1916600183600281111561018257fe5b021790555060005460ff16600281111561019857fe5b90505b919050565b6000600019fe5b6000805460ff191660018360028111156101ff57fe5b021790555060005460ff16600281111561021557fe5b90505b905600a165627a7a723058202b1addec8fb55f02f972b037812eb5a1535093bc718bfa3f68f1090286dccb900029
test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"getChoiceExp","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"int256"}],"name":"getChoiceFromSigned","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getChoiceFromNegativeLiteral","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5e75552c5d42c6cf15cc09293930e83d48db6fb838ff60331b3990eb105f6a5f.sol":{"keccak256":"0x8d457cabf41d968379ac064936a8063d5ec90632ba1d815cadf93b7f6fedbfe1","urls":["bzzr://a77ef8e12b0f39f5453006569a75bb3b4cbc2f8b3aa3458bbee36583c749bc51"]}},"version":1}
test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol:C 6060604052341561000f57600080fd5b5b61013f8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637bc5bbbf811461003d575b600080fd5b341561004857600080fd5b61008c600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061008e95505050505050565b005b60008180516100a19291602001906100a6565b505b50565b8280548282559060005260206000209081019282156100e1579160200282015b828111156100e15782518255916020019190600101906100c6565b5b506100ee9291506100f2565b5090565b61011091905b808211156100ee57600081556001016100f8565b5090565b905600a165627a7a723058209471d5658e09a3705981b2a75ecf28ae2ab8e89de4c41649bf28bee43da34d4e0029
test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5f05502897cff8013b011bd23ff730ded54229881b4222c875464c5896188126.sol":{"keccak256":"0x5dee1d2283723a66891d5c6f1f106494319125abdbb4d01f1b45dfcf022c3f24","urls":["bzzr://a19a6b330313850c421aeecb9af7d886f33f4ede7987ec197812e51f46baa15a"]}},"version":1}
test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol:c 6060604052341561000f57600080fd5b5b61018d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b610060600060016050610064565b505b565b828054828255906000526020600020906007016008900481019282156101295791601f016020900482016000805b848311156100f15784819054906101000a900460ff1684836101000a81548163ffffffff021916908360ff1602179055506001016020816000010494850194600103029060040190602082600301049384019360010382029150610092565b81156101265783826101000a81549063ffffffff021916905590600401906020826003010493840193600103820291506100f1565b50505b50610135929150610139565b5090565b61015e91905b8082111561013557805463ffffffff1916815560010161013f565b5090565b905600a165627a7a723058207653350358a76a9d9b445100b4a03ea0105b2a53d279bfa9200da5eb2a794f490029
test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5f1868a43175ace77824feb88aaf842bea5464f4472d48c65079254959cce5a1.sol":{"keccak256":"0x4391fc9441818d4341532af0e9401549904a13295b4e2c8543df9568c2523be1","urls":["bzzr://a9e93708371abaeaa01fba3dea07dae8e790ce876e49d2a244a2e0d5b8e37a9d"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol:C 6060604052341561000f57600080fd5b5b60dc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630afdb4ea8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600081836000821215609e57fe5b9060020a900592508290505b929150505600a165627a7a723058203feb383bd7ef5a7c3899e81dcddbad317b18cd62c8e3f70099fde659d981411f0029
test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5f79ae05ad3495bc0ea802be58d3efe6c6846a6abe7933d17225b92cb9db6921.sol":{"keccak256":"0x4626cb018b2a441abe3ddbf3dd5a0d4bae4184e31ac076df1e864cce37df6874","urls":["bzzr://f742f49b43567ba5008204ef848c5a7c0a8a30eea2cce7725d4c92680bb3de7f"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol:test 6060604052341561000f57600080fd5b5b6101298061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663ebc2f80b81146046578063f72d0b3b146064575b600080fd5b3415605057600080fd5b606260ff6004358116906024351660bb565b005b3415606e57600080fd5b607a60ff6004351660e2565b60405160208101608b818380866094565b905080925060a6565b83609c8260aa565b8452949350505050565b60b0565b60ff1690565b505060405180910390f35b60ff8281166000908152602081905260409020805460ff19169183169190911790555b5050565b60ff808216600090815260208190526040902054165b9190505600a165627a7a7230582059cf908471fa97fbedd13eb85ef9ca67e3e0c5db48e190bb9a6330d0f2023ea40029
test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint8"},{"name":"v","type":"uint8"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint8"}],"name":"get","outputs":[{"name":"v","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5f8bd22d0a02819b0453b71b199e71ded7988e4cc552226e310412c5177ca16f.sol":{"keccak256":"0x308f9d5d01d1466aec94a66ae3079f56bc9b1ab786887c069a5d327d3d3c2ef5","urls":["bzzr://60fbe9319fa11d8764ab46b0796811d32c9a2894f47bcefebf231982acb6e709"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol:test 6060604052341561000f57600080fd5b5b60c18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166388b7a17c8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60005b9190505600a165627a7a72305820991e30373f440ca6ce19b105dbda8c98eda36dedb23ae39514d432cb3cd568380029
test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5fa0e1ed5d591246b6faae247862804ab2e279044d91f1e8f67b0b3d37b28af7.sol":{"keccak256":"0x1bec740dc2078b45065a6b2285f5c30d66e3240059f7dd21368f326b79497e99","urls":["bzzr://f0ce710d93f9207b03251fab6a01b2738c93ea7fdc726977e7a6d644661863d7"]}},"version":1}
test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582095b770a29bcad901f64f5dccc7c2c5843b4f521e32387ef036fe80af96092d210029
test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_5fbb5b10b6979d177ffc9f1c35421882e3337691b9766f5fcefd292a554af77b.sol":{"keccak256":"0x6d602606dd7438bfaca23d2571a3b111223a80014ab7a0093fb595d804cc13d0","urls":["bzzr://2ecb467cd29628a3a32375055a2384567e3e3141165289647bc3c068a1c6347c"]}},"version":1}
test_5fd9e166738faf9f1a6326f33a41643f65d7d10ffea1e42efe58aea5001a1e2f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol:test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600160025b60ff811683901160ac5760ff811691909102906001016092565b5b509190505600a165627a7a72305820bbc625706fcc68999913fa158633d4970782eb2ac5122716c2ac30c6a55e6ffd0029
test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_600af499a960aeb19d2b573c0d2f42efd80f0b969be55ff99342e7229d621eea.sol":{"keccak256":"0x5e4157d141e2da257f125b66f004a818bf58ffcc77bae64f1255cd551da78418","urls":["bzzr://b7192be9ba600e73f450cde8aaf0e837839909f211fa9ec2cf682c37ce8988be"]}},"version":1}
test_6049b5ca26689fcbac1aeb6a8d64ffc98a855a8b1f76b2c48a93113c9c8441ba.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol:test 6060604052341561000f57600080fd5b5b6102168061001f6000396000f300606060405263ffffffff60e060020a600035041663946644cd811461004557806396b8f0ac1461005a578063b8dda9c7146100d6578063c29855781461014f575b600080fd5b341561005057600080fd5b6100586101a6565b005b341561006557600080fd5b6100736004356024356101a9565b6040516020810161008681838086610090565b90508092506100a4565b8361009a826100a9565b8452949350505050565b6100cb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b34156100e157600080fd5b6100736004356101cc565b6040516020810161008681838086610090565b90508092506100a4565b8361009a826100a9565b8452949350505050565b6100cb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b341561015a57600080fd5b6101626101e4565b604051602081016100868183808661017f565b90508092506100a4565b8361009a82610198565b8452949350505050565b6100cb565b90565b505060405180910390f35b5b565b600260209081526000928352604080842090915290825290205460e060020a0281565b60016020526000908152604090205460e060020a0281565b600054815600a165627a7a7230582041df4a2d236bb27eb23aaad6a11282321d8b6baad2357b23c5aada5c4b2761f50029
test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"multiple_map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"map","outputs":[{"name":"","type":"bytes4"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_605193fef2c2fffd2757d5140fc5d8e40fced245835a1be7882da59a15fed6de.sol":{"keccak256":"0x27794d4a8c6de7a3db6e66193b75f509e9215feed740a1bf54e34bd433690887","urls":["bzzr://468227b6c312d0d0fdc2c7c3d130db6b900ac85cd0c71c80776062828497192b"]}},"version":1}
test_606db3dbaa292430622ca94cfd001818d4dc77f57641a13592505b840a7990b2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol:c 6060604052341561000f57600080fd5b5b6104328061001f6000396000f300606060405236156100805763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630178fe3f81146100855780630d18e43c146100f157806323fef0c01461014b5780632909f63814610166578063800bd5c814610184578063b55e49c0146101ed578063cc959c7314610205575b600080fd5b341561009057600080fd5b61009b600435610220565b604051604081016100ae818380876100c9565b90506100bf816020840184866100c9565b90508093506100dd565b836100d3826100e2565b8452949350505050565b6100e5565b90565b50505060405180910390f35b34156100fc57600080fd5b610107600435610275565b6040516020810161011a818380866100c9565b9050809250610138565b836100d3826100e2565b8452949350505050565b610140565b90565b505060405180910390f35b341561015657600080fd5b61016460043560243561029e565b005b341561017157600080fd5b6101646004356024356044356102bd565b005b341561018f57600080fd5b61009b61030d565b604051604081016100ae818380876100c9565b90506100bf816020840184866100c9565b90508093506100dd565b836100d3826100e2565b8452949350505050565b6100e5565b90565b50505060405180910390f35b34156101f857600080fd5b610164600435610318565b005b341561021057600080fd5b61016460043560243561033d565b005b60008060008381548110151561023257fe5b906000526020600020906002020160005b505460008054919350908490811061025757fe5b906000526020600020906002020160005b506001015490505b915091565b600060018281548110151561028657fe5b906000526020600020900160005b505490505b919050565b816102aa600082610362565b50806102b7600182610394565b505b5050565b816000848154811015156102cd57fe5b906000526020600020906002020160005b505560008054829190859081106102f157fe5b906000526020600020906002020160005b50600101555b505050565b6000546001545b9091565b806001600281548110151561032957fe5b906000526020600020900160005b50555b50565b8060018381548110151561034d57fe5b906000526020600020900160005b50555b5050565b8154818355818115116102b7576002028160020283600052602060002091820191016102b791906103be565b5b505050565b8154818355818115116102b7576000838152602090206102b79181019083016103e5565b5b505050565b6100e291905b808211156103de57600080825560018201556002016103c4565b5090565b90565b6100e291905b808211156103de57600081556001016103eb565b5090565b905600a165627a7a72305820fb57e9d5efd39f9471581820d6f4a278bd1b0c00fe1af570c001b1d1e563c0130029
test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getID","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"name":"setLengths","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getLengths","outputs":[{"name":"l1","type":"uint256"},{"name":"l2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"setIDStatic","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"id","type":"uint256"}],"name":"setID","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_60bc27adaf9741e6ea02c16aa99cbc94602f1623c409e9673fe0e9ea1f0bee77.sol":{"keccak256":"0xd57aae63edb0f82326917112279561b01b1d957164ba7975af1acd5126084794","urls":["bzzr://4312321112d3d690d4d6e494514cd87c524bdc280314cf61ec753bddda0a8778"]}},"version":1}
test_60c9893fce254322d6b889b287f01e53386f5d842238ee182a72fb90c12e097d.sol: ERROR
test_611ace9b2f6ee0196b738ca1d207d9a6279764eadda560533645c7eb75c14be4.sol:I 
test_611ace9b2f6ee0196b738ca1d207d9a6279764eadda560533645c7eb75c14be4.sol:I 
test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol:C 60606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a72305820388a8b811d4bd59d0db49237db26f1f3675fba6fe90a83952f65e52dd82424890029
test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_613a49aa3ff3764b1bd13a46574f77d62bbae9168776456b5ac07fed8a794abf.sol":{"keccak256":"0xd2ae0b046db1a9ef03fad2bf77079a29ff7b702f2cad5d74a631ca1ed6b394e6","urls":["bzzr://6d46734cbb771418e759e3129c0853ee6c8bc91b14f28c57ddec76e503a18b5f"]}},"version":1}
test_6172db891cd30318e8701ab33dff026e0510bf1c9bd5b1e273587b3b010806a5.sol: ERROR
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol:C 6060604052341561000f57600080fd5b5b60d98061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630afdb4ea8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600081836000821215609e57fe5b9060020a900590505b929150505600a165627a7a72305820cd5a1b9990940967a4c6775788386372a6eb1cf9487ab757210425eb3e8a20ef0029
test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"int256"},{"name":"b","type":"int256"}],"name":"f","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_61edd397329f8e9d7a426b4690ec3aacfedb75525549d3d4b4f725c6e7d8271c.sol":{"keccak256":"0x6b41175b3a4debe558b1e8a4792772f75c6077676fe84810ed34971a21d098ff","urls":["bzzr://839830bccf723a871aa39cffabc75f7066da6f230dac2221b8117b517b727df3"]}},"version":1}
test_625d3de7d62ea68415765227ef0e573034cb2a1b9d481542d8c160028b2ed88a.sol: ERROR
test_626fb6b87f5c915a89b90fc49b09814c111e356aed4ac3a01f64c8043c47b560.sol: ERROR
test_630460bfbccd57d26a19287949a4b0f3d4cb391b0070d394f132523fb08f8994.sol: ERROR
test_6318d6404b954fa7cf23a12f59e1b8398a04ae8ff11418ee05d28bcae9778f88.sol: ERROR
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol:test 6060604052341561000f57600080fd5b5b60f78061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f60043560a3565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6098565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b60008082101560b35750606760c4565b81151560c05750601260c4565b5060785b5b5b9190505600a165627a7a72305820a014696ec13d6aad6d77272126a74de3c903dbc7890e9af7f7ce69bef46ad7040029
test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[{"name":"b","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6322ee21517ef10199d495ba5f9cab1eb33c0e099fbbea33637814dff0bfacf3.sol":{"keccak256":"0xcbe1d3cbe82d675f41a9c47e0969a68179c499e2f04f0bd683daf2b5cc4d8d67","urls":["bzzr://1ba0d43c164dbfbf006e864c76585af69f8cb8960c42b81389a96d3a4a8148ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol:test 6060604052341561000f57600080fd5b5b60e28061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146058575b600080fd5b3415605057600080fd5b605660a6565b005b3415606257600080fd5b606860b0565b604051602081016079818380866082565b90508092506094565b83608a826098565b8452949350505050565b609b565b90565b505060405180910390f35b60ac60b0565b505b565b60005b905600a165627a7a723058209264c03d4578a4a2f79cc3205eec52cd429878a2634dc27b9b916ec0ff5fe9760029
test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6376288708f7149c8e8d30061dab6f7525bc5e8c5f5f57f7d4b45b4c2bc3e360.sol":{"keccak256":"0xff92d645d6a9b071c1afbc7bf36dd2bb7ba9983e011b14a51ca316c74e1bc8af","urls":["bzzr://b3c96cdb8514269b23288bb96bfd0aeaad95f4f68f42f756d23355486579cbbd"]}},"version":1}
test_641a57596389209d88461b4a8279efe900975b2982775b995dec9f99879f29e3.sol: ERROR
test_642fce6b19a9fc3ddbc8879acabea89b8c13153dee531fa1d8e843b257626a85.sol: ERROR
test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol:C 6060604052341561000f57600080fd5b5b6101578061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b61005a610099565b6100626100c0565b60606040519081016040528060018152602001838152602001604080519081016040526004815260056020820152905290505b5050565b60606040519081016040526003815b60008152602001906001900390816100a85790505090565b60c060405190810160405280600081526020016100db610099565b81526020016100e8610114565b905290565b60606040519081016040526003815b60008152602001906001900390816100a85790505090565b6040805190810160405260008082526020820152905600a165627a7a723058207eb71777f24d9b6e10e06b4b42c657e4571565b9baab78dc10d19992c6b599a20029
test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_644b686f96d30cd088601f5dbac2aa89d10abdea8663ab645df5a60122be756a.sol":{"keccak256":"0x642dce7c00404747d112e3072c41bd72f97f490e0449e6f44a120fb2ed93bfa2","urls":["bzzr://e4e9690dea04f2496cf13063e5ac3193114c729f699b8b7a3967e3456c828ea9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol:ClientReceipt 6060604052341561000f57600080fd5b5b61032f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166347e7ef248114610053578063d0e30db0146100c6578063f340fa011461011d575b600080fd5b341561005e57600080fd5b61008273ffffffffffffffffffffffffffffffffffffffff6004351660243561018d565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b34156100d157600080fd5b610082610248565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b341561012857600080fd5b61008273ffffffffffffffffffffffffffffffffffffffff6004351661027d565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b60007fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8383604051604081016101c5818380876101e0565b90506101d68160208401848661009f565b90508093506101f4565b836100a982610212565b8452949350505050565b61020d565b836100a9826100b8565b8452949350505050565b61022b565b73ffffffffffffffffffffffffffffffffffffffff1690565b610233565b90565b50505060405180910390a15060015b92915050565b60007fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a15060015b90565b60007f8ce0bd46ec50cf39f0d0ea8686a686eb226af5796dcda4231b26fb84b5ef123482604051602081016102b4818380866101e0565b90508092506102d2565b836100a982610212565b8452949350505050565b6102f0565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390a15060015b9190505600a165627a7a72305820c6ae43854d7de24098be8e4d1b1d712e5f21d3932deb13effc245d61e12a3b5b0029
test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_64ef799472054cca391ae6e9e5d2678d8ae2c46c96d64def5f0d02ecd7ddd2dc.sol":{"keccak256":"0xa9d681d74dffd237151b9438c8accabaf63c08841a7c7d61bc63d090f645b06e","urls":["bzzr://92740236da659a947062b08f04f6d9e3e9aa793041722d81f6cd20f21444cbb3"]}},"version":1}
test_6522802064e1bb0fb7839481a8c19759c5107c734dbd019a6ec7c0c1992d5d6d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol:c 6060604052341561000f57600080fd5b5b6104548061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b6000806000805460018160011615610100020316600290048060010182816100be919061033e565b91908154600116156100df5790600052602060002090602091828204019190065b815460ff601f929092036101000a9182021916600590910217905560011461010a5760019150610339565b600080815460018160011615610100020316600290048110151561012a57fe5b8154600116156101495790600052602060002090602091828204019190065b9054901a60f860020a02600160f860020a031916600560f860020a021415156101755760019150610339565b60008054600181600116156101000203166002900480600101828161019a919061033e565b91908154600116156101bb5790600052602060002090602091828204019190065b600460f860020a0290919091601f036101000a81548160ff0219169060f860020a840402179055505060006001815460018160011615610100020316600290048110151561020557fe5b8154600116156102245790600052602060002090602091828204019190065b9054901a60f860020a02600160f860020a031916600460f860020a021415156102505760019150610339565b600080546001816001161561010002031660029004806001018281610275919061033e565b91908154600116156102965790600052602060002090602091828204019190065b600360f860020a0290919091601f036101000a81548160ff0219169060f860020a8404021790555090506000600281546001816001161561010002031660029004811015156102e157fe5b8154600116156103005790600052602060002090602091828204019190065b9054901a60f860020a02600160f860020a031916600360f860020a0214151561032c5760019150610339565b6003811461033957600191505b5b5090565b81546001816001161561010002031660029004825481601f106103995782601f1061037e575b826008026101000360020a80910402828001178355610401565b60ff1916836000526020600020558180016001018355610401565b82601f106103c9575082600052602060002080549082601f01602090048101906103c39190610407565b50610364565b5081800160010183558181151161040157601f016020900481601f016020900483600052602060002091820191016104019190610407565b5b505050565b61042591905b80821115610339576000815560010161040d565b5090565b905600a165627a7a72305820261e5ff16a8e0e836d5c0ce04a57b43f4c4b1ace206997f7a396da9e8c7cf5c40029
test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6587dea9d5b141218ea040920b50c325f8241243d56286065ab539ff5c46717b.sol":{"keccak256":"0x9ab41e67b19ee6cb1c9eb223e530248f95cac0a76d5bb301e22d5b5778ea1db6","urls":["bzzr://d1c2b5080d4e01f585a12e0f3b87d61e59b3612cb341b7671150ac44e5263f67"]}},"version":1}
test_65c50cc0f764ce0d12adeb302d3058c495c919481550d9f127fac1d6dacf6210.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol:Test 6060604052341561000f57600080fd5b5b60df8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663943b40ed8114603c575b600080fd5b3415604657600080fd5b606b60043560243573ffffffffffffffffffffffffffffffffffffffff6044351660a9565b60405160208101607c818380866085565b90508092506097565b83608d82609b565b8452949350505050565b609e565b90565b505060405180910390f35b60055b93925050505600a165627a7a723058207654ee81b3d3fd12d72c6781c54a319c5d4a99c48aa5da77ed89dc771fcab99d0029
test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"address"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_662f0ef79aa6298bdf36172b670a850e01bed63cde163fc36a5bfaf3dec30a6e.sol":{"keccak256":"0xcf97bcbeba7d2409bc286681de3e3c9b54fd9ddc80011ef6543b88ef1e31f5c6","urls":["bzzr://f1c65f23bedcbf6c12f0663db57b72be1defb1406ef067cd49d87fe9f3a10501"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6678e8326e32b554c652b7521e4e0e631892e8b1c5a516b81360fd5ae0cdc887.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol:test 6060604052341561000f57600080fd5b5b6101b08061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114610053578063b3de648b146100b0578063e2179b8e1461010a575b600080fd5b341561005e57600080fd5b61006c600435602435610161565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b34156100bb57600080fd5b61006c6004356100a2565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b341561011557600080fd5b61006c610172565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b8181015b92915050565b805b919050565b600061017e60036100a2565b90505b905600a165627a7a723058200ae71b03563ddee0273e1b8a79141d075b3f6d97095838ee7030eae8c30792e40029
test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_672dd28493cf9f0e9d6ec4e3e4ce255f7b670c0870d482d8c5ce23c990a13566.sol":{"keccak256":"0x5e6151466ecf7d4c76b6998efb659ede6f648ed32bf9eed0a47a9adf1ec3d858","urls":["bzzr://788ae6d8d33c9d48e0a3d0c490f6bd7e9fc61a6bf053b48b73b89faa999265ee"]}},"version":1}
test_674cdd73ce0de1fa1b3cc2e8277a6d6874427281a558f2e3cb416f9a5a21e988.sol: ERROR
test_6787a838c1d0ee4c9a59431af38120123149c449092ad2f5caa4b34a554222f5.sol: ERROR
test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol:C 6060604052341561000f57600080fd5b5b60a78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b605b565b92909150600790565b60676003600260016052565b82600052816020528060405260606000f35b5600a165627a7a72305820883778200e9d7b454341e066abe37bb09b1904bbfbcd1636a538a4c8d0429a020029
test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_678984c79de07a4659cca35905a3b24cfeff03f2cec6b0b0a08b2e5666cd7053.sol":{"keccak256":"0xddb7dc59ba9cf4b63dc27bc4a240674eccffa049a96dec61d79cadaf369784ba","urls":["bzzr://5abdaed79aba3b9ebf8ceb5647ed362d6d94994b55e9c424478411ac67bacf63"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol:test 6060604052341561000f57600080fd5b5b61011c8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166348ab5e6c81146046578063f72d0b3b146061575b600080fd5b3415605057600080fd5b605f60ff6004351660243560b5565b005b3415606b57600080fd5b607760ff6004351660d2565b604051602081016088818380866091565b905080925060a3565b8360998260a7565b8452949350505050565b60aa565b90565b505060405180910390f35b60ff8216151560c757600081905560cd565b60018190555b5b5050565b600060ff8216151560e5575060005460ea565b506001545b5b9190505600a165627a7a72305820df611fa2c89ec89e2e23ed75bc6d85621e1e9357e06ac0b13ffd265a4302e5930029
test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"which","type":"uint8"},{"name":"value","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"which","type":"uint8"}],"name":"get","outputs":[{"name":"value","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_678f2980abe50b8a9750070aaa1def0de20350275dd534c4b331e447086dcce3.sol":{"keccak256":"0xb28747cbb8496779e88779c2cfa264d5ffd9000492b18947e44deecdb6b9853d","urls":["bzzr://ed872ea24a20974e079fca793a2b92633692a2d68b803e20bd51ff567ffed7b7"]}},"version":1}
test_67a89c49f0e9290185cd4d92c6706b09625c628157788a651e671fd65292bba4.sol: ERROR
test_67df6832d25a804cfa9ce78d689bff000992f34c3f3e225535c3d34a174d11da.sol: ERROR
 conv bytes32 -> bytes32
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol:Contract 6060604052341561000f57600080fd5b5b6101718061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166329e99f07811461003d575b600080fd5b341561004857600080fd5b6100536004356100cc565b604051604081016100668183808761009a565b905061007781602084018486610081565b9050809350610095565b8361008b826100b3565b8452949350505050565b6100ae565b8361008b826100bd565b8452949350505050565b6100b8565b151590565b6100c0565b90565b50505060405180910390f35b6000806003836040517f6162630000000000000000000000000000000000000000000000000000000000815260030160206040518083038160008787f1151561011457600080fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff19169150600190505b9150915600a165627a7a72305820a7edde81365912273005fee4cccf1a0adb4d18e41533572a84717659cdbb41540029
test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol:Contract {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"uint256"}],"name":"test","outputs":[{"name":"data","type":"bytes32"},{"name":"flag","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol":"Contract"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_680bc98bcc7e0662fbf62d0b74071bf191a20c38d880f0fa6c54e9d0bcf3b764.sol":{"keccak256":"0x92a58ecbcec0d8cde7ea1649b1acdc13c19cdb03a1ff32d28006b8e3a41484cf","urls":["bzzr://3de2c228d35669cd3d036b69490408c7ecd76d764b51123e59f58ef7313150b3"]}},"version":1}
test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol:C 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60015b505600a165627a7a72305820353b6ad981824d2a92b7686237deb4725e218aed75f33c027d2072fa416639e80029
test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6871e433c32d8953e625d4c92b3fac90cb296a4d92e5704bdab91db3d302e970.sol":{"keccak256":"0xbceef2b992b8bc3e3db4b469967dc30e0ab9170fa30fade0bfabf7e11acdce56","urls":["bzzr://3fb998fcdc07e237d8cc3c6d80c8588f059ace851195daacd377a1ba8f693258"]}},"version":1}
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ccfd4c91dd03d3b83ad1eea8cdaaada70b0067eff5b5b31263b51a00c0f61e2a0029
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":"base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":{"keccak256":"0xcae5da88d160d3d2bf72e6b2eae20ca62c7ff013a1b80983a4cb38f112dee08a","urls":["bzzr://948416af892a1f1eef01d2cab5edf42f018dd8acc74c1d26e7bd1aac0d2346cc"]}},"version":1}
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:c 6060604052341561000f57600080fd5b5b6101138061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60017f61626300000000000000000000000000000000000000000000000000000000007f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60026040516020810160a58183808660ae565b905080925060c0565b8360b68260cb565b8452949350505050565b60c7565b90565b60da565b600060d48260c4565b92915050565b505060405180910390a35b5600a165627a7a7230582040bc6e781a332cf709fc5bcc875bbd1c5491fe299212f1337885ac1af0cad1100029
test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_68748675cc9afc292cc554cabb2f0f682b4e7a284e8051f1a0e7f5feb19d0375.sol":{"keccak256":"0xcae5da88d160d3d2bf72e6b2eae20ca62c7ff013a1b80983a4cb38f112dee08a","urls":["bzzr://948416af892a1f1eef01d2cab5edf42f018dd8acc74c1d26e7bd1aac0d2346cc"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol:test 6060604052341561000f57600080fd5b5b60c18061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c04062268114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60000b90565b505060405180910390f35b60fa805b50905600a165627a7a7230582026de2c1f1b5b14b7878c69d56ef643a6b3ccbd9edc9b6f5a73722fdb443cb95c0029
test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_687b1767b10fa40072df82ee2e29f36043a96058358a312fdf0ff195373538e0.sol":{"keccak256":"0x494d0ab666d3b25ad0ccec0da1bbf387215c8df4efa6d3d8b7157c467486ec97","urls":["bzzr://4ef14659857115777302aa7f84130f77382dbb2532d9113bbfcae439e11fbd57"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol:Test 6060604052341561000f57600080fd5b5b60da8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6000600a82111560375750600a810160a9565b600080fd5b5060025b9190505600a165627a7a72305820bc611cbce2f2a8503cd951794656d82d1e205b29988eda0f1df44862edcfccb50029
test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_68d55fd63c9342657d2d78fb9e5cff17a5e43116d2ff34dd120b4faa9dc9e5f5.sol":{"keccak256":"0x6856098c37fcf59915bfdff3192944b1ea0b5d8ffaef803872d74c787bdcfad1","urls":["bzzr://244e6c90e81e63fb4c377ab081ef15e54ecb7f1ddfbd2e7bfcbf6c9428a087f0"]}},"version":1}
test_68e899b09189c66e7fc5d6bd832d4e17d99bf3f6c4b33c0c981c8d38edcc2e8a.sol: ERROR
test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol:C 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60075b505600a165627a7a723058204216b7221812237f203e5bba120a9a685b4fae054b0a480a928e4e4e488cc34e0029
test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6901978cd86a6809be33d1fb45511d68f2e138844b642e9887429d2eac2d8d00.sol":{"keccak256":"0x792fcdd8d34dc2b6f531fb1465cd3a1e997fa031ab6207cf0af42036e665168b","urls":["bzzr://d5ec931d581900ff9ff2f92f36ba50323174565a16b0e59160b443ab69741474"]}},"version":1}
test_69a930c58e299381bfc48a5953bc92472a46ff7cdf7d4504d0447f9d11398fa2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol:test 6060604052341561000f57600080fd5b5b60d08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b600101600a8110609b57607c565b5b608d565b5b905600a165627a7a72305820edf1b0c9373472dddf9f1ec5748a6a99dcce4f04d4c4060cf18524e25f8ea7530029
test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_69dcd554cfdc23731341eea1ebd65333587f28397ff7ff70de2a1186a7e09624.sol":{"keccak256":"0x042e0c60eb2665b5b6044e8379ef5357e819a4fd997b0d98a886e9c9580f864b","urls":["bzzr://d59c59705a98c464ce260c2c38a42ebb8f05f5eda2c0f634efae600d6525b7f1"]}},"version":1}
test_69fcd726c104d80bb76a7dfe20a52f1f942be7718958528e35dff7d6452c796b.sol: ERROR
test_6a19751fb1cd67824104cf82388419548d94dd67498848262ef44bfecc737761.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol:test 6060604052341561000f57600080fd5b5b60d38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c04062268114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600063ffffffff6401000000095b8063ffffffff1692505b5050905600a165627a7a72305820226dc4f5994de09b715b3d8407818e703fef93db9c4b70da203f4c6b3791c2220029
test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6a1e3b033fdb793a5f1f8afc1989b2b2bffce30d17ba9d7dbb34dcfe8e71cfb6.sol":{"keccak256":"0x0642c412005f068207258dc58d703bfbf7394d5456cb7bf1b5b4f6067b21066c","urls":["bzzr://71c1c231f6fc1af342b988f1df3a780b18fa44abae76ab79740da316ac5ca0e3"]}},"version":1}
test_6ae75d008fb13d14f2a05cca2bbed825641b8d3fefa8ea9ad1aae3bb9bafb097.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol:HexEncoding 6060604052341561000f57600080fd5b5b6104718061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663496e25d9811461003d575b600080fd5b341561004857600080fd5b61006973ffffffffffffffffffffffffffffffffffffffff600435166100ad565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a2565b90565b505060405180910390f35b60008080808064010000000073ffffffffffffffffffffffffffffffffffffffff87165b049350836fffffffffffffffffffffffffffffffff169350836801000000000000000002841777ffffffffffffffff0000000000000000ffffffffffffffff169350836401000000000284177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16935083620100000284177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff169350836101000284177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff1693508360100284177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f1693506008847f0808080808080808080808080808080808080808080808080808080808080808168115156101e957fe5b04925060047f040404040404040404040404040404040404040404040404040404040404040485165b04915060027f020202020202020202020202020202020202020202020202020202020202020285165b049050808217831660270284017f3030303030303030303030303030303030303030303030303030303030303030019350836000528573ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000029350836fffffffffffffffffffffffffffffffff169350836801000000000000000002841777ffffffffffffffff0000000000000000ffffffffffffffff169350836401000000000284177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16935083620100000284177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff169350836101000284177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff1693508360100284177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f1693506008847f0808080808080808080808080808080808080808080808080808080808080808168115156103ad57fe5b04925060047f040404040404040404040404040404040404040404040404040404040404040485165b04915060027f020202020202020202020202020202020202020202020202020202020202020285165b049050808217831660270284017f303030303030303030303030303030303030303030303030303030303030303001935083602052602860002094505b505050509190505600a165627a7a7230582029356415da65dfe2cc3ef0958809444d48600e63d924acd52b5f3f0e09e2899e0029
test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol:HexEncoding {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"hexEncodeTest","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol":"HexEncoding"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6b10b454ff20196505043b73c3be56152ca690db60fdd56b370ca0afe0c4432c.sol":{"keccak256":"0x8e434dee1697833bbdfd06d4d203af9c827b4d6a3c17032100fa843a4cfb11e7","urls":["bzzr://7e52a810e72b6477113178b3e5d6eb1f0bdd16309202f7b490bed31a96b1b80f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol:C 6060604052341561000f57600080fd5b5b61020e8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630f1031ec81146100485780638d6888921461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b610113565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60006101e061010960028263ffffffff16565b50600791505b5090565b6000806000818160026000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815260048101906024016101648183808661016e565b9050809250610182565b836100828261018f565b8452949350505050565b61018a565b90565b6101a0565b600061019a82610091565b92915050565b5050602060405180830381600087803b15156101bb57600080fd5b6102c65a03f115156101cc57600080fd5b50505060405180515060079350505b505090565bfe00a165627a7a72305820bef7be7745f10a7218e7e800124e39341b2e49e553e074ab0b5bf632932981f80029
test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"intern","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"extern","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6b2fb0b3b0545670c63d78a2cca22b2b17dce73a1b96b2f0fd87cc0d093f6c6f.sol":{"keccak256":"0x9050923ce0d3bdbb81ee831659831eca636acfd565d0a15b836080e980cebd32","urls":["bzzr://5e3850ce1a7a770bf8ac1356299f7ff4a9aaa4b04eb5d935fee1f96964ccbb87"]}},"version":1}
test_6b4d56eabc922349c6029f92ce94a31c8ffde1c203e496a0bb7708772f200d90.sol: ERROR
test_6b6ab0a3d75dfdce4993f7b1b96248c4124eae0f0ac45c7c65e6b57513f8dc8e.sol: ERROR
test_6b7443cd9b1c52bfa2505a4ca9f50c33eba53ea1f0d1fee89a97012abca68f50.sol: ERROR
test_6b9d21055235cb7bceed292a6045813b80074e0d3fdf895a3baad2a65c084111.sol: ERROR
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:receiver 60606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631b9265b88114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058209ff1fd9db5b3890161693a9380ae8abb6c814750e210e84a24c168ae8c3733a30029
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"pay","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":"receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":{"keccak256":"0x4602785a3c4ed5b406fb6b8226acc25cf699ba93355f2cdd8297fd31a0a2b818","urls":["bzzr://83dc8d4e56fad3a2a5a8f74ae0b310abcdf472601a823131e77a84ab3aef30e0"]}},"version":1}
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:test 606060405261000c610052565b604051809103906000f080151561002257600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055341561004d57600080fd5b610061565b60405160908061027983390190565b610209806100706000396000f300606060405263ffffffff60e060020a60003504166326121ff0811461002f578063e2179b8e14610044575b600080fd5b341561003a57600080fd5b610042610059565b005b341561004f57600080fd5b6100426100d9565b005b61006161013e565b604051809103906000f080151561007757600080fd5b73ffffffffffffffffffffffffffffffffffffffff16631b9265b8600a6040518263ffffffff1660e060020a0281526004016000604051808303818588803b15156100c157600080fd5b6125ee5a03f115156100d257600080fd5b505050505b565b60005473ffffffffffffffffffffffffffffffffffffffff16631b9265b8600a6040518263ffffffff1660e060020a0281526004016000604051808303818588803b15156100c157600080fd5b6125ee5a03f115156100d257600080fd5b505050505b565b60405160908061014e83390190560060606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631b9265b88114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058209ff1fd9db5b3890161693a9380ae8abb6c814750e210e84a24c168ae8c3733a30029a165627a7a723058208545d7a07b9478f560c470c415444efcd2dff3168a8ae85a33f81d4e8c27ff16002960606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631b9265b88114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058209ff1fd9db5b3890161693a9380ae8abb6c814750e210e84a24c168ae8c3733a30029
test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6b9f1f594eb4443259506499f5cb89ae89d27d5b6d402b33968f995a7d346f8c.sol":{"keccak256":"0x4602785a3c4ed5b406fb6b8226acc25cf699ba93355f2cdd8297fd31a0a2b818","urls":["bzzr://83dc8d4e56fad3a2a5a8f74ae0b310abcdf472601a823131e77a84ab3aef30e0"]}},"version":1}
test_6bc6687f5bd21bdc02578ee02d99e6a0fd2e01edec30bdc8ed7297a354a032de.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol:C 6060604052341561000f57600080fd5b5b6101d28061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610053578063a56dfe4a146100ac578063c5d7802e14610107575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b34156100b757600080fd5b6100bf610190565b60405160208101610079818380866100dc565b9050809250610097565b8361008d826100f5565b8452949350505050565b6100a1565b61ffff1690565b505060405180910390f35b341561011257600080fd5b61011a6101a0565b6040516020810161007981838086610137565b9050809250610097565b8361008d82610150565b8452949350505050565b6100a1565b90565b505060405180910390f35b6000806000610172565b6007600155600290565b61017a610168565b90506002811461018657fe5b600192505b505090565b60005462010000900461ffff1681565b600154815600a165627a7a72305820c8353bdfbfc69df0da364e41673a2741a16573940db15e46435ccff75d8e14cb0029
test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint16"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"z","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6bca4d3ac3d6f51338a78456c1f8f775226da8f2f29dfb105bb878fefb40271c.sol":{"keccak256":"0xafd137f1ac0767de43625ed75c621975d6e3e99679ef4192db3b37942706dbc5","urls":["bzzr://431d87152652e81df80835a72e1fbbd753f8dc64c6fd3c3664c3d0797ffa4137"]}},"version":1}
test_6c084a53736ab537c1be780084c4ae234541b7dbe2fe934b9b54b6da13edc3ad.sol: ERROR
test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ab023a76d851ec8b4ef250cd16968c2b2b9a97d966c318e559dc04f0b26b23530029
test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6c14b6467070d14d7b0143f26b87c3dfaea3535e20a012c9e11840b03ccd95c6.sol":{"keccak256":"0x44573c76da55c2dbc0a8e4c51dfaa22f53c76a61a1770a3241556fce3229fd85","urls":["bzzr://390173cfcecc45839de17aa4e120df7ab305399909350242c1b2357814320aae"]}},"version":1}
test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000546002556001546003555b5600a165627a7a72305820730ea2ca98805c4748579024a8c62dcd7391945e5e5e65dca18e4c65790355550029
test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6c253cd098cac84e3cfee41db4bd9daf63db6f151a398d0d051787a9a4d2fe95.sol":{"keccak256":"0x35046a943ebaef5cf68f9a7cd0cb95a80e1187fde8d85f805caa654d60a1d380","urls":["bzzr://3c1f0758bf260e4bd3e43b8e092d3f333244a7dc96897b3de2010228e76ee030"]}},"version":1}
test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820adafbb739a2829f4e1af3b14ec6449cd3156f12e72b8ba3a7b0c04ed1df8f6b20029
test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6c3845e6ad846c2994cd2c3ec261173339d9d630e16a0abfd197faacab54ffa5.sol":{"keccak256":"0x99d0b9a5614df5f59f8fbd289ab816cd14d5015d224c5712e43f8d03a2c58893","urls":["bzzr://0dc4f391f4a3d9a17bef4fcc155d19d12c476eb2d4fb1e87c5b1a0d621292fae"]}},"version":1}
test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol:C 60606040523415600e57600080fd5b5b60908061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600280546000908155600354600155815b5050505600a165627a7a7230582047aa45a7c991fb9341a7cc1eae4d8de13fa8312e61c156d89fc8adb3599013c90029
test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6c914d4d3db3c8fa8df1b1ef5ca39855baac9170c17946a80c143c25e8d7770c.sol":{"keccak256":"0xc962ec4a77a150c925539c91718bd05b11a6252fdb15a784889d58c146741fa7","urls":["bzzr://4caf8f00f246ec1a03f0365e906f0fe03dd26cc00fc3d7f3fef4fd54cf192e48"]}},"version":1}
test_6ce07fc0b5c4cf2bd403cca63fee712fb823b5967379a5271c30c1c45f5f0249.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol:test 6060604052341561000f57600080fd5b5b6101d58061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114610053578063b3de648b146100b0578063d48092f71461010a575b600080fd5b341561005e57600080fd5b61006c600435602435610166565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b34156100bb57600080fd5b61006c6004356100a2565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b341561011557600080fd5b61006c6004351515610177565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b8181015b92915050565b805b919050565b600081156101905761018960036100a2565b9050610172565b61018960036007610166565b9050610172565b5b9190505600a165627a7a72305820fb19c1b8a59ea6628a7dbd6c6dd437994f07666853a6626bed9ca64773a8bd1a0029
test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"flag","type":"bool"}],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6d03efef729e9e90cae72f0b9c958015176d1114909c13e32959319b68511fbd.sol":{"keccak256":"0xd75051d116119fe5c869e580d82872d9d317df23c2870aaf2f64a68990bb5cc2","urls":["bzzr://27941de02710ffd0e67510373c1c748f45c23e36141550f475cfef3ad133341c"]}},"version":1}
test_6d0c455b0bc56e7a36ec1f7f8d7eb0f4050dddbcb50d7e5174637d53b7fe92c3.sol: ERROR
test_6d5dc35e493a933a4574a77d2926b1bd0e916ebb916120b2c6c9e0a439e95312.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60005b905600a165627a7a7230582029cbc8a2326059dc3c63ab9f6d253ec7f3e08076bdf68c88d51951be55f8c2ca0029
test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6d882db900fa2d952c50aedd45e864b48cbcdaba4f96140f60011ad4a4b206e2.sol":{"keccak256":"0xa1ace900f869abd93529802c398e733c82414c25d6d245cbed871fbd886be7e9","urls":["bzzr://47a8f4bae31fea738b65a504f033efe7b341fc2ffc6d5a2220f3c2b22076bc73"]}},"version":1}
test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol:test 60606040523415600e57600080fd5b5b60928061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6002600160405190815260200160405180910390a15b5600a165627a7a72305820a304f9ee37d470297cbe1a47fbfb3d737d9e7c7387ba18c8077add196b88c1650029
test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6dcc7ef7b0b23e11c404c91cc3da42672577512ed9280301ae1d620a4fdef076.sol":{"keccak256":"0x32e61831915e727faf0b2f46910533ba775402c113c13134d130779071c65fb0","urls":["bzzr://40789883586acbb605c72435071301eff07c7257827892d1b3e9143eab815a71"]}},"version":1}
test_6dd2fb7814bea79c156a0e225f80a56e9889fc6d1ddb36d8c57e710fc02968ff.sol: ERROR
test_6e538601cb9b2dc962344db536d649027ac886e6c5c5baca19f54159ae36b3d6.sol: ERROR
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C1 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820a9b3ef34a0162f46275786998fd7e43595e8884a50ad83a13b702112559982760029
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":"C1"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":{"keccak256":"0xb3d27729e97a71f38cc2da288bef468c9d8c2a6d69f17d2f5fcf1cedecc4aabd","urls":["bzzr://5d2bcf946c0653a299a75ef972223fc2d449d96b03937e2145a7513630170932"]}},"version":1}
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C2 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820874a055de6a25fc9b157a04d3b6f7926b3b0a0a00ed32b1bfd029a2784fc1b0b0029
test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol:C2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":"C2"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6e702062cdb03a1ad351a87ef8bbde9c0fabde18c94a3a5990bd39dc89d106e9.sol":{"keccak256":"0xb3d27729e97a71f38cc2da288bef468c9d8c2a6d69f17d2f5fcf1cedecc4aabd","urls":["bzzr://5d2bcf946c0653a299a75ef972223fc2d449d96b03937e2145a7513630170932"]}},"version":1}
test_6ebff97432ffbfe6b4b6b6102d2e3da7f42b7e43b8ccb65b3ca2d45aadc5d009.sol: ERROR
test_6f0c55e56e4ed325d01bddb1bfbea35b8bfd4aa9d063af8c9986537e6d00af0f.sol: ERROR
test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058208fe5397554822d40c89d31856b3cd1bbaeb83d223a34fdb44370992c6a6291410029
test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6f3b86818d5a58032dba75e24941fe3f4ef93825c952ea729eb9883280a30cf7.sol":{"keccak256":"0x97eeaed9ed192fdeebaa0855712a40405ac618ffc0c63280c36563102181c0b2","urls":["bzzr://81678ca22a7284aba1b079fbcd44927bcb2fe197a2948777343c09031950aa94"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol:C 6060604052341561000f57600080fd5b5b60db8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515608f565b60405160208101606281838086606b565b9050809250607d565b836073826081565b8452949350505050565b6084565b90565b505060405180910390f35b6000818015609f57600191909101905b5b600191909101905b5b509190505600a165627a7a72305820d57fca8657d59a29367d3ea2c0159c99a9f5b305e33d74a8bf34026dc9b483520029
test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"twice","type":"bool"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6f675b172f6c63f8640c7c8bcca841f7768f922d2626ae1c8a95d117e62f1b34.sol":{"keccak256":"0xfdf137bf5891c5e488ee75ff8d0fb2b71decabc35e6e7e39cc5b5829a0eb8016","urls":["bzzr://506c341d45d3c5f8aaad8813fa0759da965843b908b7b25293d899f1b14e9825"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol:test 6060604052341561000f57600080fd5b5b60e98061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e81146046578063e2179b8e14609a575b600080fd5b3415605057600080fd5b605c60043560243560ac565b60405160208101606d818380866076565b90508092506088565b83607e82608c565b8452949350505050565b608f565b90565b505060405180910390f35b341560a457600080fd5b60aa60b5565b005b60005b92915050565b60ac5b50565bfe00a165627a7a72305820f915f21ad82df35b9e26f425445cc4062c918b503f9967b5ffbeba4ba457aa200029
test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6f6d3664cf507859a64d83a51426f67bd7d254d22ac809f342e9df73a8264d0f.sol":{"keccak256":"0xbd7b0b35fc88f6767b79de864bc0635f1edbaa1062fa25a24ac109191fe0b493","urls":["bzzr://8d4bfec620d2e33467d3cc57a36827b4fe67450d48dd27716d007aa8625eace6"]}},"version":1}
test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol:C 60606040523415600e57600080fd5b5b608a8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60008055605c80805b505050565bfe00a165627a7a7230582070d9a4475e5ae982dd45ea6afaad596bc93d380dad522ebf9e602960b0ae19de0029
test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_6fc947507e8f383c4e6250ca9bef0ab592407ec59979d7240b2902c183043c24.sol":{"keccak256":"0x76c3a0d3a40563ab6f512c57a470f5f27cc6c31442e06b6f3cea949228733935","urls":["bzzr://4cd12221e4fa012755cbba658cf9b02f4a0bd3b26204c3f758fdb534deafe859"]}},"version":1}
test_6fe3582eb5c007997298e818d9525fa6e455f55f8e03e02616749b0836386705.sol: ERROR
test_703b13b5c30d168c7baa79c52d1f538fece0ab0ed60896dfe36fddb8f27f7779.sol: ERROR
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:B 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820b1f2ca567a10f60d3501a4bfec01a48cab27dbbd20e42ee0eb790257e6304df00029
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":{"keccak256":"0x3562d11acd5ae19fcce965ef3b6206edd7cd41aa2b2362f5115cedd7e92ded77","urls":["bzzr://96597c2082391b7797555643d5664e89ed26d7b2503b0a78dbecd5ddd52e26e0"]}},"version":1}
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:C 60606040523415600e57600080fd5b5b60a08061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063b3de648b146058575b600080fd5b3415605057600080fd5b6056606d565b005b3415606257600080fd5b60566004356070565b005b5b565b5b505600a165627a7a72305820c2c7f543f43c0e3f5632eb8a458396856b46f68a7f2f5cc02d658babdc0336e60029
test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_70d074ab32ffc6eb2d2ac6afbb352f1f3b57b44b338675db5b9de44e44e87cb9.sol":{"keccak256":"0x3562d11acd5ae19fcce965ef3b6206edd7cd41aa2b2362f5115cedd7e92ded77","urls":["bzzr://96597c2082391b7797555643d5664e89ed26d7b2503b0a78dbecd5ddd52e26e0"]}},"version":1}
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a7230582069b80d1bb4c233513f0b9cf6848b965e4026b4f30d14bebef65127dd0ec015890029
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":{"keccak256":"0xb6a72a262dcb989934c5dbd053a967a6e322c12a9f1bb0931d2ea6a2295f6e77","urls":["bzzr://a9b7e0ccb2abc44791adb83292917220d0d42c7a2ffec748c04447211e926a33"]}},"version":1}
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test2 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a7230582043bf501d90a78d76db8f9c789886e70724b3c0cf6d5a453c29845a38e0d76d3e0029
test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol:test2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":"test2"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_70f53d455078d7eeb027c64100dab13e042cb025382df1c093414d0fac7720b5.sol":{"keccak256":"0xb6a72a262dcb989934c5dbd053a967a6e322c12a9f1bb0931d2ea6a2295f6e77","urls":["bzzr://a9b7e0ccb2abc44791adb83292917220d0d42c7a2ffec748c04447211e926a33"]}},"version":1}
test_717f5d86a0ca49ca78be627d314d81f2745713254c4fb3c9a3f43f40dfeff6f3.sol: ERROR
test_71cd60d1a921dc9a16d7142bc6e8babeb8070fdf7b7ce6cb1d462167d5bcf596.sol: ERROR
test_720a0e517a806de6df93efb609ded56e8f76be7a6bc7b48dd715175d90f9491b.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol:test 6060604052341561000f57600080fd5b5b6101198061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639f3fab588114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60006003826000604051602001526040519081526020908101906040518083038160008661646e5a03f1151560c157600080fd5b5050604051516c01000000000000000000000000026bffffffffffffffffffffffff191690505b9190505600a165627a7a7230582028f84cce54f4a53db686bd5429c2c48d83dd7a2314bea94655d19e690edac27f0029
test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"a","outputs":[{"name":"sha256hash","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_720c49161e3610054dfa1b491d5bbdb4d508fa1cd19362a9ef021e61faa688e6.sol":{"keccak256":"0xc76cb583fc84777c0d74ecc91eaed560ebd2e96f32ce03b6f5bd4d75f639b53b","urls":["bzzr://f021bd32081b2b75d85c099af1a10211aaab7b6ae564284dfd4bbe62dc9960e3"]}},"version":1}
test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058202ae350156022a9d3306fcc6898fb7f1d9a0899475c01cd8599fe3ce92bff5ee40029
test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7219e2cfa24bc9059b32f74d2efc075aeaf384920dd3d1312f5a60f1c6ba23cb.sol":{"keccak256":"0xbfc20e353d86af6f9ae44ae5a9a9d0872879765e1a362f6fc547b123261ee7b1","urls":["bzzr://1674bf7814ca945ef39a7ab020d07ba5a2e1bb34e60e24c3f4086b59d7be7cf7"]}},"version":1}
test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60025b505600a165627a7a72305820d4fd0d6e3a8b59292c15484fe1cfdc1b97eb81e47d7a624bb860a7c30382833a0029
test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_722013bbc11d1c435f0cf81b53825fb0e7631710f661e1616351535d43c60483.sol":{"keccak256":"0xc14a079f71636d809d838fcc7976ee41612bc0302c1710208777beb15dfed244","urls":["bzzr://ed6182fa6f6b1d6c3a5cc2712303134ed32dd1f78395b60f9fc2d00d92245b09"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a72305820e2fd4163d4644c32bfe027e55128155221dd932ca1b73c855674abf77edc61e70029
test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_728ed712b1038c93c4208321c1392b907d1534bb86262c632e387fddf24a0499.sol":{"keccak256":"0x98933ca5f8eb2b9fedea5635bf6f3d2f46077bf96d101326291e67b1f6d1c1e8","urls":["bzzr://b29bc698fd19554753dafa67b15f0bb8722fcaa15c136a61b8ab86966472b3c4"]}},"version":1}
test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol:C 60606040523415600e57600080fd5b5b60938061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b730a0bfc97e48458494ccd857e1a85dc91f7f0046e5b505600a165627a7a723058206cbff46da7707125cf79ed49c9d975e128daea0f03bfbdea0a76a8a3048b9c020029
test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_72eda5b5d0ce8a8d75ed2448eb9402bb61b460325fe09d676c2b1b1e59c8a69b.sol":{"keccak256":"0xd30ef454a521c281f09bfcdc2efed94ce5e98a1140b9c53f88f73de252423e41","urls":["bzzr://75017c4ba0bba1fc5257314bfd1e6e2079e9cbae16f2b5266120cfa796adafd8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol:test 60606040525b5b5b60d2806100156000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b905600a165627a7a723058202adf3c15fe9bc2e5531ac060e5cda2a4b05a1450bc054bb0776c611e700da8a70029
test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_73102637abec0e02b08c4a26bb89e7ff04779964482d642d801e6f3a8ba40615.sol":{"keccak256":"0x47d6fc36ed326e098dcf32dbf186e051e312bfb84b9c5a7453f6f2bd731958da","urls":["bzzr://6098fe964869ca2ed8fbf47e0d6acc5bdc6a2214ac1e42557db4c24e83e44e95"]}},"version":1}
test_73508fc7a781d22072adaa767b3e36a341df575fff13821fe9a204eb1122c56e.sol: ERROR
test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol:A 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820d7331574c51c99725277323af45b7acc378380655a9a5f23f5cb5f54a7f1821a0029
test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_735be571eb4c26b3ee4e3a8d51c760533b11b74f3164675ba5368f9e77f59f44.sol":{"keccak256":"0xac060b8cc7c2341271849d7d3565a8de460ca60713a86dc8c4dd8aa3156765d7","urls":["bzzr://5599b230b44b97c56099f2a3f1d590b3bc9c76a170c4dad190078f6f801d9cb3"]}},"version":1}
test_73842527d9eb3b1222a8361a1f3764499bfdc1ec047a1dcd86409cd5a9210a39.sol: ERROR
test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol:test 60606040523415600e57600080fd5b5b60928061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146050575b600080fd5b3415605057600080fd5b60566060565b005b60566060565b005b5b565b5b5600a165627a7a72305820aef0d303753590eadc838c9287c62462c786a78db14e9991557fc65fd63d96200029
test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_73864bbd8c17b1277b496745b24d8721c2537da4b732923dc84eb02c8474f09d.sol":{"keccak256":"0x941a19e9e128a1807c7a02ee73c6d1066dd4671690f6b4fad47132e2719a662b","urls":["bzzr://55cc494849cbc939eadfde901e5e1fa43b9c06f562b4ec6d286943240032e59d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol:c 6060604052341561000f57600080fd5b5b6101508061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166311d7dd64811461003d575b600080fd5b341561004857600080fd5b61006d60046101043560248101908201356101246101c4356101e435610204356100d5565b60405160608101610080818380886100ac565b9050610091816020840184876100ac565b90506100a2816040840184866100ac565b90508094506100c0565b836100b6826100c5565b8452949350505050565b6100c8565b90565b5050505060405180910390f35b600080808986600881106100e557fe5b602002013592508888868181106100f857fe5b905060200201359150868460058110151561010f57fe5b602002013590505b97509750979450505050505600a165627a7a72305820558ae5e451e809b10f9baf272cd0a2a6106fe70c13d5357b35593d11970a5e960029
test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256[8]"},{"name":"b","type":"uint256[]"},{"name":"c","type":"uint256[5]"},{"name":"a_index","type":"uint256"},{"name":"b_index","type":"uint256"},{"name":"c_index","type":"uint256"}],"name":"test","outputs":[{"name":"av","type":"uint256"},{"name":"bv","type":"uint256"},{"name":"cv","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_738baff76fa5852819ce82e788fdfc38c364b1fdc20dcf950f5498a1a0e081cf.sol":{"keccak256":"0xb09795e95190044ab3bd8e66a3491a8379094333e22db9a566f35c325436f089","urls":["bzzr://a4a4f7727dfdb7caabb9d0a4f314c806f3e8c1e65664010ddc810e721a1ad27d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Receiver 6060604052341561000f57600080fd5b5b60da8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb581146046578063cba2534f146094575b600080fd5b3415605057600080fd5b6056609f565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b609d60043560a5565b005b60005481565b60008190555b505600a165627a7a723058207325aa2a432d964e3767d472176608a898261568a7b498cdc05561de23a14cca0029
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":"Receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":{"keccak256":"0xcdd280f1e9bbeb2a4f54e3995d6e72e76d58dbd2d3e11c6955ec56b4cd12186d","urls":["bzzr://84183c20836ed2874ad6f21af911e22015763053b3015ccec8c369422b9512ff"]}},"version":1}
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Sender 60606040525b5b5b61022d806100166000396000f300606060405263ffffffff60e060020a60003504166383a6deb5811461002f5780639bfcdaa114610086575b600080fd5b341561003a57600080fd5b6100426100f6565b604051602081016100558183808661005f565b9050809250610073565b8361006982610078565b8452949350505050565b61007b565b90565b505060405180910390f35b341561009157600080fd5b61004273ffffffffffffffffffffffffffffffffffffffff600435166100fc565b604051602081016100558183808661005f565b9050809250610073565b8361006982610078565b8452949350505050565b61007b565b90565b505060405180910390f35b60005481565b6000806040517f726563656976652875696e7432353629000000000000000000000000000000008152601001604051908190039020905073ffffffffffffffffffffffffffffffffffffffff831660e060020a82046002601760405160e060020a63ffffffff851602815260ff909116600482015260240160006040518083038185886125ee5a03f29350505050508273ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156101de57600080fd5b6102c65a03f115156101ef57600080fd5b50505060405180519250505b509190505600a165627a7a723058206af61d832af8e6dde25a3e7cf0ccb615c8e9f3a248e90c0bf20b92a43b1a64ec0029
test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol:Sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":"Sender"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_740fd09160a8beee71a537d9656fc407df5fcf2356376ec8139f8b1c7319c7ea.sol":{"keccak256":"0xcdd280f1e9bbeb2a4f54e3995d6e72e76d58dbd2d3e11c6955ec56b4cd12186d","urls":["bzzr://84183c20836ed2874ad6f21af911e22015763053b3015ccec8c369422b9512ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol:A 6060604052341561000f57600080fd5b5b60d48061001e6000396000f30060606040523615603c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de3081146053575b3415604657600080fd5b60515b60016000555b565b005b3415605d57600080fd5b606360a1565b60405160208101607481838086607d565b9050809250608f565b836085826093565b8452949350505050565b6096565b90565b505060405180910390f35b6000545b905600a165627a7a72305820a0012a5c8e87e40aaa11e0110cb6b81844a35d4b22ceb2c42e4106904d6657e80029
test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_746fa6b68ec9fb004dc02a77609dd1a9807cf8e325c3ce3c436de37469a3c408.sol":{"keccak256":"0x801c8ed4162a6a410d7897f5593921770869aefbbb5264ffeeaddef77b2a2984","urls":["bzzr://f6e27032b5caf26a8af785a2ad5f08571fd79947672beb756dac23e6a02f78aa"]}},"version":1}
test_74db2db87e27c8ab26e0fcdbdd7bfd09598004610ab95a1cb74ce3faf898478a.sol: ERROR
test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol:test 60606040523415600e57600080fd5b5b60868061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6057565b600090565b5b5600a165627a7a723058204ab1046f918049859f22bca6fd8d2648a0e451926eada4b62d7467bcfca20fd80029
test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_74eaee66a5a2e509f81af988bf0749579993af162b790eae50d2904a8b7cdfa9.sol":{"keccak256":"0xb3aa4d03d5624262a6a91d2405b544c93379ea8c63be618f90d00282f1f3eefe","urls":["bzzr://4a2164cdc5b7432df3e39410a74af71c5163e255d4119b173f1eefc5ef2271fa"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:A 6060604052341561000f57600080fd5b5b6100256401000000006100fb61004182021704565b61003a64010000000061010a61004d82021704565b5b5b61006e565b6000805460201790555b565b61006264010000000061010561004b82021704565b61004b565b5b5b565b5b565b6101478061007d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de30811461005e5780639942ec6f146100b5578063aaf05f3d146100ca578063c27fc305146100df575b600080fd5b341561006957600080fd5b6100716100f4565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100c86100fb565b005b34156100d557600080fd5b6100c8610105565b005b34156100ea57600080fd5b6100c861010a565b005b6000545b90565b6000805460201790555b565b5b565b610112610105565b610105565b5b5b5600a165627a7a72305820cbc2aea6998ffa2cbe093c03aa88a598edcc50aaf7cfc2b5cda10058d159b3d80029
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f1","outputs":[],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":{"keccak256":"0x267be9ffd86442c53b9f81d6d143523ca8d24aa8c62630584e8876c2a7225d0b","urls":["bzzr://ecaebda52f183719a7f105e9cbdb73699d6d096c680e9460cf1a861b4dd510d8"]}},"version":1}
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:C 60606040525b61001a64010000000061014561003682021704565b61002f64010000000061013461004382021704565b5b5b61006e565b600080546140001790555b565b61005864010000000061012761006182021704565b610041565b5b5b565b600080546103001790555b565b61017e8061007d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de3081146100695780639942ec6f146100c0578063aaf05f3d146100d5578063c27fc305146100ea578063c3f90202146100ff575b600080fd5b341561007457600080fd5b61007c610114565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b34156100cb57600080fd5b6100d361011b565b005b34156100e057600080fd5b6100d3610127565b005b34156100f557600080fd5b6100d3610134565b005b341561010a57600080fd5b6100d3610145565b005b6000545b90565b6000805460201790555b565b600080546103001790555b565b61013c610127565b610125565b5b5b565b600080546140001790555b5600a165627a7a7230582015bf27825b34def8422ea3e6852a8ad4ff43b1d0a9cf96fab80c6e045db7a29a0029
test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f1","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f4","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7573b218cf980500b359e64ab8fc9377ec844c586036b6d955c76686a23fce16.sol":{"keccak256":"0x267be9ffd86442c53b9f81d6d143523ca8d24aa8c62630584e8876c2a7225d0b","urls":["bzzr://ecaebda52f183719a7f105e9cbdb73699d6d096c680e9460cf1a861b4dd510d8"]}},"version":1}
test_75b3338ba7ad75ef1f7b93fb8e6c34cc4a41e1d3be841b27d7970af76df8627e.sol: ERROR
test_75c8c5aa9e148c6e32d03742af682d75b0dab34d8ac53923ed6823f5a3859929.sol: ERROR
test_75e5c789160da2a41ad6571a2ed9658da799e3b2df88462bb23e5528e54eab70.sol: ERROR
test_75e7e2d9e3094de9cc1729c487b3feea5b639d9a49f6d0f5aab20736db605aa4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:C 60606040525b5b5b610333806100166000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c8114610053578063b3de648b146100aa578063dc9031c41461011a575b600080fd5b341561005e57600080fd5b61006661018a565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b6100c0600435610190565b60405160208101610079818380866100dd565b9050809250610097565b8361008d826100f6565b8452949350505050565b61009f565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b341561012557600080fd5b6100c06004356101c0565b60405160208101610079818380866100dd565b9050809250610097565b8361008d826100f6565b8452949350505050565b61009f565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b60005481565b600080546001018155816101a26102ae565b6040518091039082f08015156101b757600080fd5b9150505b919050565b6000610400821015610297573073ffffffffffffffffffffffffffffffffffffffff1663dc9031c4600184036000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600481019060240161023481838086610083565b9050809250610252565b8361008d8261009c565b8452949350505050565b61025a565b90565b5050602060405180830381600087803b151561027557600080fd5b6102c65a03f1151561028657600080fd5b5050506040518051905090506101bb565b6102a16000610190565b90506101bb565b5b919050565b604051604a806102be83390190560060606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a72305820d31a89482266503689034bae587e2abfe7b844dad10bd81d1bde48554b44371d0029a165627a7a72305820fe8f859650cfa6f127ecca49a714843849a247b857f860110aa70dadfdc973310029
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"depth","type":"uint256"}],"name":"stack","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":{"keccak256":"0x66ea93f4462940adec0f68ab14628d1025198728b8f6be2c7adc0de029a1bc10","urls":["bzzr://02abd28704984b45bf4eb16921dd2a27ab6e12a60eb7ca5050e0d5e155947dd2"]}},"version":1}
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:D 60606040525b5b5b60368060146000396000f30060606040525b600080fd00a165627a7a72305820d31a89482266503689034bae587e2abfe7b844dad10bd81d1bde48554b44371d0029
test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_760108fdb84aed07af9beb17da46bd5f85cf09f040c123666076e50ac011e0ca.sol":{"keccak256":"0x66ea93f4462940adec0f68ab14628d1025198728b8f6be2c7adc0de029a1bc10","urls":["bzzr://02abd28704984b45bf4eb16921dd2a27ab6e12a60eb7ca5050e0d5e155947dd2"]}},"version":1}
test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol:C 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058203296c171c6479e05ac5d7fee9ae331c8484e831aa9e8a7c13c9330f0c5daafe30029
test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7603a03293a6e0efed1bfc5675d4854b96be4668cfa748610b9d8fb23a0dc2fc.sol":{"keccak256":"0xabc0f1073efe0ce6db260b0724a1b76a9d4401ef35e7f397ddfff1558915ba9b","urls":["bzzr://fc208e66cda473e83e5cf98bc1d5630ccb2bce26c997d0344da4c469d8c3bf50"]}},"version":1}
test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol:C 60606040523415600e57600080fd5b5b60828061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60545b50565bfe00a165627a7a72305820f18f77682437490f51c4983c7e60c441e8acf7387e1d5cc04ff4443db523cdf10029
test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_76149febee0c35eae8c6b67beb8facff2c787d1dbdc8d516b24d6419a99a20b4.sol":{"keccak256":"0x6febd3a10a9ade530246d6545e8a04772124e9f9b60768202426a4ff24abef4f","urls":["bzzr://de092c47a3a2235cd9a16851970721f57ccf60d2567f4b057c7c57f28dda0044"]}},"version":1}
test_7638cc89d82d8e3b1a5bf0a730297b26b394e3f712fa26c716de6cc67dbabe04.sol: ERROR
test_7689b2ca346d2b84730baf1fde76378cb5090fbd233f9a3b245041cb887b3ddc.sol: ERROR
test_771254df8dbe951498282fcc4a180f4e813d37eb78db61389248c2efeb80fb43.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol:test 6060604052341561000f57600080fd5b5b6101b28061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114610053578063b3de648b146100b0578063e2179b8e1461010a575b600080fd5b341561005e57600080fd5b61006c600435602435610161565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b34156100bb57600080fd5b61006c6004356100a2565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b341561011557600080fd5b61006c610172565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b8181015b92915050565b805b919050565b600061018060036007610161565b90505b905600a165627a7a7230582081bc0a6e1635f98077718f7fdc91acbe6143a800228622b602f94c52f3b105930029
test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_77a6e9721e7993b5774b714466764c134e43d45a9d374a2725f4a49e7b3b70d0.sol":{"keccak256":"0xc29642058e23aa15de30f53a1a76ac3f55df6f4ed40bb886defc828f1771e1ac","urls":["bzzr://75cc4c7b47b0e336272a82f2f0f188762decef0da2ed253f3691f06512de5540"]}},"version":1}
test_77b85f4269f81fa35010a4afd31348ab641b9ff29ad2428721f15055cd3ce6e6.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol:c 6060604052341561000f57600080fd5b5b6102b28061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a1b9e9f811461005e5780631ab06ee5146100b85780631f7b6d32146101175780639507d39a1461016e575b600080fd5b341561006957600080fd5b6100746004356101c8565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b34156100c357600080fd5b6100d16004356024356101e0565b60405160208101610087818380866100ee565b90508092506100a5565b8361009b82610107565b8452949350505050565b6100ad565b151590565b505060405180910390f35b341561012257600080fd5b61007461020c565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b341561017957600080fd5b610074600435610213565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b6000805482016101d8828261023b565b90505b919050565b6000816000848154811015156101f257fe5b906000526020600020900160005b50555060015b92915050565b6000545b90565b6000808281548110151561022357fe5b906000526020600020900160005b505490505b919050565b81548183558181151161025f5760008381526020902061025f918101908301610265565b5b505050565b6100aa91905b8082111561027f576000815560010161026b565b5090565b905600a165627a7a7230582041593f367b3078ef6bfce386540ee6432eddc6b2ac565df7c80af0100fa994400029
test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"enlarge","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"length","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_78b4d9f4eab9e64003cff5fc6a2174dc0f47cf2df5d7f16b3c07cfd5bb43f4e4.sol":{"keccak256":"0x10d5ec99bbc7924c0f9d50262ba8eea548f29bc4455e01051d144d82b99752c3","urls":["bzzr://c6df8e1db711329704af3f1c53bedaf67b043aa7469ff12afb8e865eb19fb6fb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol:test 6060604052341561000f57600080fd5b5b61014c8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146100485780634ee892c7146100a1575b600080fd5b341561005357600080fd5b61005b610100565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100bc6004356024351515610117565b6040516020810161006e818380866100d9565b905080925061008c565b83610082826100f2565b8452949350505050565b610096565b90565b505060405180910390f35b600061010e600c6001610117565b60031490505b90565b60005b929150505600a165627a7a72305820f4fe24a41ac7436c27e3487f862d4af60c97ce6f308b40e983b8b6b50ca94e950029
test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_78c299d6dd33e92d498b0861a6b30c953acdbfd0b7ac81ceb6daa2db7192514b.sol":{"keccak256":"0x832b5098163c6521101acce54fe19f83e276683799c8e367c1bf53b814e92656","urls":["bzzr://c3259e872256f4f3adc9750373c61f11cfc756271d280ec5c967f18059db4c55"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a72305820963321158b9536324d0d496d43401927e6e76f0391a8b7dc3c52f988254f0f8c0029
test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"author":"Lefteris","methods":{"mul(uint256,uint256)":{"author":"John Doe","details":"Mul function"}},"title":"Just a test contract"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_78d68498ee80d4fbebc4ca9f5b527613297a8189e6f664a1a326e1d33e5419b5.sol":{"keccak256":"0x2cd8411662ee8a9c5dd12b6002833cf78b982b26d5bd0065632ae0475a6da657","urls":["bzzr://9f258f2916e84a1c0e83d20a5422270443a2c3c5c369a721fd9ddbfebfe8be95"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol:test 6060604052341561000f57600080fd5b5b60e18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b60008054830190819055600180548385029283010260070190819055905b50929150505600a165627a7a723058203662d3674b2ef90d9f9c9af577e724a22e3986268326828327cb49af3f9e2e040029
test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"w","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_78f5159347340bc15499f72f9908895c6dbae6107c52fdc0313dade346635746.sol":{"keccak256":"0xcafe3c66c739de5872b64d10c103ffaa460767643fef7700f6f404c40a89f1ee","urls":["bzzr://d2927aabaf5938286d8a0ef31a457a75fac65b49a90bc42230cddcda60d14225"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol:C 6060604052341561000f57600080fd5b5b6101de8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636063214e81146100535780637f5dfda414610053578063ffbb17b514610105575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b341561011057600080fd5b610066610195565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b6000600580fe5b81600181111561017157fe5b1491505b5090565b6000600580fe5b81600181111561018c57fe5b141591505b5090565b60008080610165565b81600181111561017157fe5b1491505b50905600a165627a7a723058203587faf3ec16cc87ed8eccc22b7543fa2b29d43bd365e1fe8e4ad1eb920dcc810029
test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test_eq","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_neq","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test_eq_ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_790833ae4b541fa7c8c7941c650474d8daf52af94886a234c18326561ea85036.sol":{"keccak256":"0x4778e3f23dc0a89986f52672791cee700ba8d277db904b349730104b8c17b560","urls":["bzzr://65b4194f5bc781174ec85b51e1f4d819e1f82e62309363cfd3247709ec398acf"]}},"version":1}
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:A 60606040523415600e57600080fd5b5b5b5b603680601e6000396000f30060606040525b600080fd00a165627a7a72305820b2f691046b89758f23eada85deb29132ce6c157b49be6b9bd2e40b1d96f0b49d0029
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":{"keccak256":"0xf829dbc91c75754cbb401ac83874fdff988d9ffaa8f98459e8f39cf6b59f3252","urls":["bzzr://b2bf12bc0dde1034d7173fd38cef5f8ba902e1af345de0b10bd4531812ea40a8"]}},"version":1}
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:B 60606040525b5b5b60bf806100156000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f446c1d08114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60ff1690565b505060405180910390f35b60005b905600a165627a7a72305820307fa244e4a603e8f1200434680bdd6e55a51331851d13148ddae024500a06f60029
test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"A","outputs":[{"name":"r","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_790da28d856265b2725917a63daf97d20c0b1b6142621861c6bfde764d4f9630.sol":{"keccak256":"0xf829dbc91c75754cbb401ac83874fdff988d9ffaa8f98459e8f39cf6b59f3252","urls":["bzzr://b2bf12bc0dde1034d7173fd38cef5f8ba902e1af345de0b10bd4531812ea40a8"]}},"version":1}
test_792029307df43a239fa224e88910e13af4873463218f0e33b6ccf4bdbaa142b9.sol: ERROR
test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582074d0dd6260d6a323bf87156937a61d2998b621a056006fde48dbc77be70b02cd0029
test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"components":[{"name":"x","type":"uint256[2]"}],"indexed":false,"name":"t","type":""},{"components":[{"name":"a","type":"uint256"},{"components":[{"name":"x","type":"uint256[2]"}],"name":"sub","type":"[]"},{"name":"b","type":"bytes"}],"indexed":false,"name":"s","type":""}],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_794c0105b6dd73ca61667ff739c563a5a5d95079d6afaedc57b4d7d7d8009672.sol":{"keccak256":"0xe1803b2d3a17654cc65ac9ecfe768707458e3596641646c8f3367eada24f87fb","urls":["bzzr://dd747761ed076bb4d26cd7c6bf35ffcb7f1ae32d0aa5cddc4dba9f621fa706a8"]}},"version":1}
test_796ab0e9d5008f554b8ed5b124782adcc7013591daecea7608a22b9fa75d6783.sol: ERROR
test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol:test 60606040523415600e57600080fd5b5b60838061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b805b50505600a165627a7a7230582007bfbc926dd48191ac81c1b2a6013e5aee5a82a2285ecc44376982da64cf286e0029
test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_79b14529563aa3a471138aa580698d7245ae3dcf7e04f22e5794021954e44a40.sol":{"keccak256":"0x7be3a74d94f52eac35e3fdc17e6091e498edb09425959ea9f867f0e4e1c91032","urls":["bzzr://a8a6b90b154a8ea9d3caae3d4e3b9583217e7712d6dd26d13f5c5cafd4e07f24"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol:test 60606040526000805467ffffffffffffffff191661003e640100000000026100901767ffffffffffffffff16179055341561003957600080fd5b610047565b60005b92915050565b60c5806100556000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b60005b929150505600a165627a7a7230582087243405068d62779d9ba5f887d65bc942a50dfc88b90a430fbfe47e035e43c10029
test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_79bbf342bb01ee1a71a16f0a5f996b794d5b9dd1caa7a4c8c4d0406dd7ff0cf8.sol":{"keccak256":"0xc9c70824e632dcab07ebd867ebfd5e4c86885955eff2e0b16b280052b5fa201d","urls":["bzzr://faec006d863eaedcf14da465d30f0ddc15b195d2f0c276d629dfa628a4744bf6"]}},"version":1}
test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol:Foo 60606040526112346000553415601457600080fd5b5b60368060226000396000f30060606040525b600080fd00a165627a7a72305820c43c82ddbcdf788e99e128950a5a006614aafe754ff0bd0b70cb8aa93ddaea070029
test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol":"Foo"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_79d35aeaf756b3dd876ceddfbc93db88e39a399d4338c46cd3b2500ccba8be17.sol":{"keccak256":"0x63ca4a2e22c4c8c028d44ca31ae277ada92bab9ff0950677152658a3ddf0e5ff","urls":["bzzr://c5ea20eff03ff219ed98042f880b7b881eafbbd0644767a22c3524ca91d89258"]}},"version":1}
test_79e0cbf3cb31f5f08eb949b351fb33795943895ef3f7ed1574dffdda3d621601.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv enum C.X -> enum C.X
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_X_$3_to_t_enum$_X_$3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_X_$3(value))

			}
		
			function cleanup_assert_t_enum$_X_$3(value) -> cleaned {
				switch lt(value, 2) case 0 { invalid() }
			}
		

test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol:C 6060604052341561000f57600080fd5b5b6102108061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a68ff3ed8114610048578063f8a8fd6d146100a5575b600080fd5b341561005357600080fd5b61006160ff600435166100fc565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b610061610104565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b60015b919050565b6000600573ffffffffffffffffffffffffffffffffffffffff301663a68ff3ed8284604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600481019060240161016c81838086610176565b905080925061018a565b836100888261018f565b8452949350505050565b6101a8565b60006002821080156101a0576101a2565bfe5b50919050565b5050602060405180830381600087803b15156101c357600080fd5b6102c65a03f115156101d457600080fd5b50505060405180519250505b50905600a165627a7a723058208f2ff36d68f31a2b3b7d4d9e9879e8ed52ffbf7c6b47ece7658dff2bd7ed71090029
test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint8"}],"name":"tested","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7a42465f85fb441db5a169eadabacc6ebebf8ee3c543f305f8e8a326fdb6e1ad.sol":{"keccak256":"0xe6514a15119af790eba2d74e3d278ccc8381172823c88141e4fc0441dd9a36a1","urls":["bzzr://f0540f09fa9e5fb4e201e3a908593a7c431d96927375961858fe4ba016f59c95"]}},"version":1}
test_7a66854f1a4c4a756dc4f2e7e6d12dce162fcb6bc835e7235db6295e967c5d88.sol: ERROR
test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol:test 6060604052341561000f57600080fd5b5b60a68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a0b2b43b8114603c575b600080fd5b3415604657600080fd5b60736c010000000000000000000000006004359081049068010000000000000000900463ffffffff166075565b005b5b50505600a165627a7a72305820fe84b8babe4326d12b359689dbbed48e42645e78f6f948c46e42f9715ca0592a0029
test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"function"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7aa36346dc75e6a7f2a95cfc302ccd6b36656cf8bb0d092b786ee8bc97a1193a.sol":{"keccak256":"0x6fbe8bf66f6b0e60f0bc749cba74435133cb4370422d2143e7d9979a992a1fbb","urls":["bzzr://4248ee5f53fbe7762415c42657b5907945657c8d016e62492a7242ba13b8d598"]}},"version":1}
test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol:test 60606040523415600e57600080fd5b5b60988061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6005600460036002600160405190815260200160405180910390a45b5600a165627a7a72305820ec24d6114c7d0261d3563aeca3b684db78e9a09b3de9236600f44477529f82870029
test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7ae76954aeccc8f8d1d87f886d12f3e75df73f4d8b5430008cc0617b9f5fb604.sol":{"keccak256":"0x4623e899586027f56b3465610ce35fbc5fd17986e08dedf2fe7945b445a81490","urls":["bzzr://87d3f790d7257a81c1cb38b6cfcbc9565b2caabe493e0b5133161958737595f0"]}},"version":1}
test_7aec2bb3b46f9a4caae14b6efb3d41bdc838301cfc6fe3b1c425e41f976f8c58.sol: ERROR
test_7b8131833f67aa9adb951de9f46f183504be5b74e95ad033c2f0d1a1c511d64f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol:C 6060604052341561000f57600080fd5b5b6101778061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342dad49e811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b60176100a2600080366100ab565b50601890505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ec5782800160ff19823516178555610119565b82800160010185558215610119579182015b828111156101195782358255916020019190600101906100fe565b5b5061012692915061012a565b5090565b61008691905b808211156101265760008155600101610130565b5090565b905600a165627a7a72305820c298ca3e2eb58dda0bd638c2acf36c8fa8c8ae844ac9ea0a78ad2d128c857ffa0029
test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"save","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7b9b61ce8d006dab182b281099126e79ba883ef648692732b20ff2ee293d5d69.sol":{"keccak256":"0xee1996c962fdcaace6bf45a919479b8bf33d1070436bee9bdd5cd1bd10538441","urls":["bzzr://a5bf070225c81fed78aaecedf1b685a0bc4080e52e8c7971c50812d2d606de7a"]}},"version":1}
test_7bd353d620264a707009d27ac4590689c81f0a3c4f60780422ebfd4d36595954.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 192)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 192)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol:Test 6060604052341561000f57600080fd5b5b6105f48061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166386d5c4be8114610048578063975057e7146100f9575b600080fd5b341561005357600080fd5b61005b6101aa565b60405160c0810161006e8183808b6100cd565b905061007f8160208401848a6100cd565b9050610090816040840184896100cd565b90506100a1816060840184886100cd565b90506100b2816080840184876100cd565b90506100c38160a0840184866100cd565b90508097506100e1565b836100d7826100e6565b8452949350505050565b6100e9565b90565b5050505050505060405180910390f35b341561010457600080fd5b61005b61034e565b60405160c0810161006e8183808b6100cd565b905061007f8160208401848a6100cd565b9050610090816040840184896100cd565b90506100a1816060840184886100cd565b90506100b2816080840184876100cd565b90506100c38160a0840184866100cd565b90508097506100e1565b836100d7826100e6565b8452949350505050565b6100e9565b90565b5050505050505060405180910390f35b6000806000806000806101bb61049c565b60008054600160ff1991821681178355805460029216821762ffff001916610300179055600490556005906003905b602091828204019190065b6101000a81548160ff021916908360ff16021790555060066000600301600160028110151561022057fe5b602091828204019190065b6101000a81548160ff021916908360ff160217905550600060606040519081016040908152825460ff16825290919060208301906001830190606090519081016040908152825460ff81168352610100900461ffff1660208084019190915260019093015481830152908352910190600383019060029080519081016040908152909291908301826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116102b75790505b5050505050815250509050806000015160ff16965080602001515160ff16955080602001516020015161ffff1694508060200151604001519350806040015160005b602002015160ff169250806040015160015b602002015160ff1691505b50909192939495565b60008060008060008061035f61049c565b600181526002602082015160ff90911690526003602082015161ffff90911660209182015260049082015160400181815250506005816040015160005b60ff90921660209290920201526006604082015160015b60ff90921660209290920201528060008151815460ff191660ff919091161781556020820151600182018151815460ff191660ff919091161781556020820151815461ffff919091166101000262ffff0019909116178155604082015181600101555050604082015161042c90600383019060026104c9565b50506000805460015460025460ff9283169b509181169950610100900461ffff1697509550600391505b602091828204019190065b905460ff6101009290920a9004169250600360015b602091828204019190065b9054906101000a900460ff1660ff1691505b50909192939495565b60c060405190810160405260008152602081016104b761055c565b81526020016104c461057c565b905290565b60018301918390821561054c5791602002820160005b8382111561051d57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026104df565b801561054a5782816101000a81549060ff021916905560010160208160000104928301926001030261051d565b505b506105589291506105a3565b5090565b606060405190810160409081526000808352602083018190529082015290565b604080519081016040526002815b60008152600019909101906020018161058a5790505090565b6100e691905b8082111561055857805460ff191681556001016105a9565b5090565b905600a165627a7a723058207b57ce2e3184377d85d8f86c9f811ca2c475b636f64da46c5d944705874bb8bb0029
test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"load","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"a1","type":"uint256"},{"name":"a2","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"store","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"a1","type":"uint256"},{"name":"a2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7be025e0f65fb9935017067b935cd8992a0474b9cc7508e8d866ee22f9311d31.sol":{"keccak256":"0xd668c2f655c86afac43ba9680506e0552cdba316675d71741f07499432b85318","urls":["bzzr://7dc4e664128840dd215fde191b37fb2be02edad3ddc44b9a0f381cc14af321f0"]}},"version":1}
test_7c1fb5ce4054fd72dfecd1ed9201013689172cfea44ea29c7c137beea22b46e3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7c71e9f30851ab414e21b54a19c2a22dc846c1744fbf07fd4d3cdc03220727ed.sol: ERROR
test_7ca8cf1729a005c314f4529a53ea64fb43fe45e5793f8ad8c8f66c52ad07810b.sol: ERROR
test_7cd7d4cbb01ebeb9999dbcadad371b0505035955d14405ee65bc76e48ded9bc6.sol: ERROR
test_7d06d30023684f5b69d58f6c26e14495cc5dfa42c83a73099a5e3d9ab00ce1fd.sol: ERROR
test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol:test 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b69123456789012345678905b505600a165627a7a723058207f7b672dea143a31097f9d5864f044dcc0207ef4860f6b926153ca3e740840cc0029
test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7d0a553fe038e8662b98d49236b5b463782b9f42333a8bb76a95cb978db23027.sol":{"keccak256":"0x170be5c7d98e91752acea280cd62312bc37fa68941d67cd4db4195a9c8b4e71a","urls":["bzzr://e3f968841f1598cf68beb4050d86dd3da1f59cef1c49b2f7c045df0f5b3d89c2"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol:test 6060604052341561000f57600080fd5b5b60c18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166388b7a17c8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60005b9190505600a165627a7a72305820f5366bc7f82c60e309bf0d0af508622acc35bc6f103ad9e85b3e65e88a4f2c3a0029
test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName(bytes32)":{"notice":"This is a test function"}}}},"settings":{"compilationTarget":{"test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7d1d62c517e0e24d56984335403c92ce71e53d899964ab41668a62427e1ef6b3.sol":{"keccak256":"0xce5f77dae67f923f51273ec31b5704576226998f65bb6fb45b8a5dc83855c366","urls":["bzzr://39bbcf70f48878b34121de1b0fa06a9ee39b8d03c947b405cc901d18a8940d88"]}},"version":1}
test_7d30e35844e1778766ec6bb49861dc45c243e9764af42f3ed378cf234e4410cb.sol: ERROR
test_7d79c8c3c888fcb103c1bde29c4e54bfebde4fad2d04b659304255a32deed30c.sol: ERROR
test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol:test 60606040523415600e57600080fd5b5b60878061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b600381900a5b50505600a165627a7a723058202ebe9dea5954f58dbde7155c6ce570e73726d72484aaff3aff79884f246434f70029
test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7d9eaff56b107c6ba470f6e498d7803ba2745aaa50e5bb89538a8e6f94e63bbc.sol":{"keccak256":"0xe05840b06339deff14012685e3194cfe16e95ab29d8c643a8a6489720e6721a6","urls":["bzzr://8eb9efbbb7805c1105bd210388e89ce25674b44d944ace6ecbb135ee662f121d"]}},"version":1}
test_7df6f23cceb2db050dbe6d555a3a57ad9eccb93244c18704d8837fa502e4b6df.sol: ERROR
test_7e0f395f2250803f6b0236bf600c78464f26d8671f3c045b6706725dcd7d4dfb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol:c 6060604052341561000f57600080fd5b5b61052f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166352efea6e8114610048578063f8a8fd6d1461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b6101aa565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b600060076101056001826103ef565b610110600082610421565b5060006001600381548110151561012357fe5b906000526020600020906003020160005b5060025b0160005b506000808052602091909152604081209190915580548190600390811061015f57fe5b90600052602060002090605a020160005b5060025b0160005b50600080805260209190915260408120919091556101968180610421565b6101a16001826103ef565b50600790505b90565b600060076101b96001826103ef565b6101c4600082610421565b506002600060038154811015156101d757fe5b90600052602060002090605a020160005b5060025b0160005b50600080805260209190915260408120919091558054600390811061021157fe5b90600052602060002090605a020160005b5060008054600190811061023257fe5b90600052602060002090605a020160005b5061024f91605a610453565b5060026001600381548110151561026257fe5b906000526020600020906003020160005b5060025b0160005b506000808052602091909152604090205560018054600290811061029b57fe5b906000526020600020906003020160005b5060018054819081106102bb57fe5b906000526020600020906003020160005b506102d8916003610453565b506000805460019081106102e857fe5b90600052602060002090605a020160005b5060025b0160005b506000808152602001908152602001600020546000600381548110151561032457fe5b90600052602060002090605a020160005b5060025b0160005b5060008080526020919091526040902054600180548190811061035c57fe5b906000526020600020906003020160005b5060025b0160005b506000808052602091909152604090205460018054600390811061039557fe5b906000526020600020906003020160005b5060025b0160005b506000808152602001908152602001600020546101000217610100021761010002179050600160006103e0919061045d565b610091600080610482565b5b90565b81548183558181151161041b5760030281600302836000526020600020918201910161041b91906104a7565b5b505050565b81548183558181151161041b57605a0281605a02836000526020600020918201910161041b91906104d1565b5b505050565b505090565b505090565b508054600082556003029060005260206000209081019061047e91906104a7565b5b50565b50805460008255605a029060005260206000209081019061047e91906104d1565b5b50565b61009191905b808211156104ca5760006104c182826104fb565b506003016104ad565b5090565b90565b61009191905b808211156104ca5760006104eb82826104fb565b50605a016104d7565b5090565b90565b5050565b50505600a165627a7a7230582030bf47346d34151eaa7a33b42f87bff9d415f9a044e851a5b5ed0b2cb33da7b30029
test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7e251081c55ba1a3210da9b1870394cac36ae2c7894dc376142620159680c32c.sol":{"keccak256":"0x38fed72d5e9d4c3851f9129443e18fd2cabd2c2b68335aa927a205133d83d191","urls":["bzzr://c44ca766c4abba7f7b8ef8d8e1ec1ce9a28bca3ffe815d6d18ef567b30cf8ad3"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol:A 606060405260016000556002600155341561001957600080fd5b5b60bd806100286000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6001545b905600a165627a7a72305820f2cbd91a06f256c38a6cd54fbe7625dc92211a8d7cfa215d3aed332f7ce6923d0029
test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7e2a9f46ef62e9271f93c1793f412b89c9b8256db18b9be3836bec5220b493db.sol":{"keccak256":"0x3c3ffe1a18ae5d8a976bd00ad88b67dee1e3fea8184861283f154aa4a96471ee","urls":["bzzr://e5784abc6aef196c567b7241846cf4dc59e4b47b86c8b46104d2b7d9c5ab3f61"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol:test 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c04062268114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060fe195b8060070b60000391505b50905600a165627a7a723058208d4d1d76152cc57164406ed9cf15c4729e51688c4a3318aff4a74cb4f3819eec0029
test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7f1c6c6e6716ca251786945222861bde77875d2d1eef73debf7d6a61ef4e21d0.sol":{"keccak256":"0x92fffc7fb7a1b719e26644ec59686231f188ce4fefc61a2d8d59b8db4809b738","urls":["bzzr://0423380c80550194f4a35cff9ee74636e32224a3e5427caa3ddc22ab1c720eab"]}},"version":1}
 conv uint256 -> uint256
test_7f365e5183f7f44816de35d13ce95c3fe5c802c4a51b166c8d5f510e710e8d6f.sol: ERROR
test_7f60a872013c48e8f73a3e4fdf5f7ab049160b563f2efb7c8d414dcf2eb1848d.sol: ERROR
test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol:test 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60126040517f6162630000000000000000000000000000000000000000000000000000000000815260200160006040518083038160008661646e5a03f15050505b5600a165627a7a72305820a34435c8b989094ee93baa1b8d1f7e3682d7b171cb33000a0b9e2289c7eba41d0029
test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7fb549568206f9b18dd5adfa09d17b821052ad065a12a37a19f2840a4378e56a.sol":{"keccak256":"0x85300fe8c7a6ee376d535622ebd64cf2a953e662e500a0cea1c8af01324502f3","urls":["bzzr://d194689e3b293efc9a2ecd82c8eb003cd23db3642d82fe9aa017d3acbf1ce47d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol:test 6060604052341561000f57600080fd5b5b6101288061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b81146046578063e420264a146097575b600080fd5b3415605057600080fd5b605960043560e8565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b341560a157600080fd5b605960043560f2565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b600781025b919050565b600881025b9190505600a165627a7a72305820b56ffaaaec4d3ea91975534dff5f0e2e9eb93e3bd526a4ce38868d471b66540a0029
test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"b","type":"uint256"}],"name":"g","outputs":[{"name":"e","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7fbd4837cc492a2836fc8fd3bdc87dd8ed1bfefe81557ae7c20504645ec5296e.sol":{"keccak256":"0x8e5468d51445388eec651372f2ee9a14b3fdd127bc1d5fff2e5890a3d0a2fde2","urls":["bzzr://8290201243fdec5d6ea46247163c64f68621b2decd6ec4aebd17fd8efacafb03"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol:c 6060604052341561000f57600080fd5b5b6103938061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663443e52f4811461005357806360726abb146100be578063b6588ffd14610117575b600080fd5b341561005e57600080fd5b610078600480359060248035908101910135604435610170565b6040516020810161008b81838086610095565b90508092506100a9565b8361009f826100ae565b8452949350505050565b6100b3565b151590565b505060405180910390f35b34156100c957600080fd5b610078610194565b6040516020810161008b81838086610095565b90508092506100a9565b8361009f826100ae565b8452949350505050565b6100b3565b151590565b505060405180910390f35b341561012257600080fd5b6100786101d6565b6040516020810161008b81838086610095565b90508092506100a9565b8361009f826100ae565b8452949350505050565b6100b3565b151590565b505060405180910390f35b60008481556002829055610186600185856101f9565b50600190505b949350505050565b6003805460009081556004805491929183916101c59160019190600260001961010083861615020190911604610278565b506002918201549101555060015b90565b600080805580806101e86001826102fe565b506000600291909101555060015b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061023a5782800160ff19823516178555610267565b82800160010185558215610267579182015b8281111561026757823582559160200191906001019061024c565b5b50610274929150610346565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102b15780548555610267565b8280016001018555821561026757600052602060002091601f016020900482015b828111156102675782548255916001019190600101906102d2565b5b50610274929150610346565b5090565b50805460018160011615610100020316600290046000825580601f106103245750610342565b601f0160209004906000526020600020908101906103429190610346565b5b50565b6101d391905b80821115610274576000815560010161034c565b5090565b905600a165627a7a723058208c234fe5a6ffc00f433b3a44d7c1eb3022b9282f9efb3fe8daf3bd4da047bdb20029
test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_a","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_b","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"del","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7fc2dae98d4f39bf1238637f588ce7d378b8ca9982fa38f99dc927b245aa1b0b.sol":{"keccak256":"0x4634905b76b8532bb26a03a7b928a9f5c03a43968f706751eb854de5a633fdf6","urls":["bzzr://f9bbc1dc7c8a9054123f1210e3d3538201a09279bd56c0d2f1f967a235a8d6a4"]}},"version":1}
test_7fdd0bf0af005bd4f46c80212c991db1cef05c3211c02286f6d82d72d90754d3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol:Scope 6060604052602a600055341561001457600080fd5b5b60bd806100236000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639ffd5c7f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820764841cb441dc5ba61f89f856d28d2fd6f17545de0362edee280f93d04a7b8480029
test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol:Scope {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"getStateVar","outputs":[{"name":"stateVar","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol":"Scope"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7ff26932d087953547fcae460c89f4d1c1332955301cca1de2033f01a95aca47.sol":{"keccak256":"0x463adb20d0be16f76404f868077db2c9bd8ee455fa770abad8ffe9e5c388de97","urls":["bzzr://b1e3e7e6ba3b7eb41cddc9ef831cbc91ce6c5ab89b336a76fe548f533d68f61e"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol:test 6060604052341561000f57600080fd5b5b60c18061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f44b54ca8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60005b9190505600a165627a7a72305820e79e424857a39d6ae30c752719916a68540b6ce7de7afcbb700d8086bb82aeae0029
test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName1","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"functionName1(bytes32)":{"notice":"This is a test function and it has 2 lines"}}}},"settings":{"compilationTarget":{"test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_7ff3b039e80965fec8f77a842d9e6a3fe65f6fa30ee4e6a9e7f5d0008a8621b6.sol":{"keccak256":"0x1b24a34e74854306e1a98a2491d8255f7b299f62b115851e9bf8c6ca385eef47","urls":["bzzr://ea1ee06e4fb7cda853deca23195130b6128f4eeaa895527f85f87833b758fac8"]}},"version":1}
test_7ff8a1dcff72f6b5a3bc4f6cce2d914f9a2a1cbb324a6e059afa1ef431b7d6a2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Base 6060604052341561000f57600080fd5b5b6101228061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660f0565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b600060ea60f0565b90505b90565b60015b905600a165627a7a72305820b07c2c129f459a2d382d4c1eaf13b5723ced7d3153ae704fe2838d511d58dbe30029
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":{"keccak256":"0x5f1417192c8aab6dc5c560e7d9cb7106036c58aac742c0c22699b86199a2d721","urls":["bzzr://a113ce6e9fe172fe89a751637bc7160d05aaa2a3a0446a17dac8c294804ddef4"]}},"version":1}
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Derived 6060604052341561000f57600080fd5b5b6101228061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063e2179b8e146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660f0565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b600060ea60f0565b90505b90565b60025b905600a165627a7a7230582005be01afbcd9602eacf19617a14900288e6f5e21ebfb0ea36148bd3f06e0c8870029
test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_80317bbc6f3abeaddc0d8c41da61df2f99cac1f72999fad4a31904618e4ae53c.sol":{"keccak256":"0x5f1417192c8aab6dc5c560e7d9cb7106036c58aac742c0c22699b86199a2d721","urls":["bzzr://a113ce6e9fe172fe89a751637bc7160d05aaa2a3a0446a17dac8c294804ddef4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol:C 6060604052341561000f57600080fd5b5b61015c8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a391c15b8114610048578063f43f523a146100a5575b600080fd5b341561005357600080fd5b610061600435602435610102565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b610061600435602435610119565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b6000818381151561010f57fe5b0490505b92915050565b6000818381151561012657fe5b0690505b929150505600a165627a7a7230582033195e3b139ebb8282177bfe44494d119ddca8217ebe5e90a6df018518389f480029
test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"div","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mod","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_805cf9faa7184ab81a0193153fd55d333a6e1b7606192e4d6d80a21be2aea324.sol":{"keccak256":"0x72078ef798cc0097193738c999a859010743bfc429195562511fb16cf90cfc55","urls":["bzzr://33bc26783daeca5b469d031731cf3f31ec24664e3da60a48c0712d5e945488f3"]}},"version":1}
test_80809ea185c278957fb4aa0c767b40c57dd50e740f71a7f1cdc8bca26776e99f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol:C 6060604052341561000f57600080fd5b5b61014f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114610048578063d48092f7146100a4575b600080fd5b341561005357600080fd5b6100606004351515610102565b604051602081016100738183808661007d565b9050809250610091565b8361008782610096565b8452949350505050565b610099565b90565b505060405180910390f35b34156100af57600080fd5b6100bc6004351515610096565b60405160208101610073818380866100d9565b9050809250610091565b83610087826100f2565b8452949350505050565b610099565b151590565b505060405180910390f35b6000811561011257506001610116565b5060005b5b919050565b805b9190505600a165627a7a7230582007dce9f53c85ccd9853a48785733683e81b76e0098eefe4b108744d3fe7116f70029
test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_in","type":"bool"}],"name":"g","outputs":[{"name":"_out","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_80910127dd4c6d4f029e74fa13defaff3664004311f039b1935148a7eb021939.sol":{"keccak256":"0x1380bd4f8d9b286619fd7a1d28b7c3bcd48ac3c7b5579ab8772831b37ba5df00","urls":["bzzr://68bd9e9daadbd792b5f008dcfb18931f9785399ff5498a10a9656c010ba8345b"]}},"version":1}
test_80b06307c67c7fd5a8ba3ec1e9824759a3669629245c9adeb5d3eff0d1f0394d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol:C 6060604052341561000f57600080fd5b5b6102868061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630e1c06e4811461005e5780631b08d96f146100b7578063b8e010de14610110578063ff88694814610167575b600080fd5b341561006957600080fd5b6100716101be565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100ac565b151590565b505060405180910390f35b34156100c257600080fd5b6100716101c7565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100ac565b151590565b505060405180910390f35b341561011b57600080fd5b6101236101cf565b6040516020810161008481838086610140565b90508092506100a2565b8361009882610159565b8452949350505050565b6100ac565b90565b505060405180910390f35b341561017257600080fd5b6101236101e6565b6040516020810161008481838086610140565b90508092506100a2565b8361009882610159565b8452949350505050565b6100ac565b90565b505060405180910390f35b60005460ff1681565b6005805b5090565b6000805460ff1916600190811790915560055b5090565b600060057f418875ab2e38951ea8f665d12c6b3fc169dc8250ac43e2b3b3fe3b73ffa9b6c1816040516020810161021f8183808661008e565b905080925061023d565b83610098826100a7565b8452949350505050565b610247565b151590565b505060405180910390a1600191505b50905600a165627a7a72305820c503a23f5c9cbd19dc3d4225e7dee8ee421c3ff47427ca231c6af8f7a4d4a7580029
test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"perm","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ret","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"ev","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"bool"}],"name":"Ev","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8104fefd5fe800d78c17016753c56e67635955761b504b78432cb75eb2aa3849.sol":{"keccak256":"0xc224a673a43b2cbd1f4ffd5d10229e007934fa3221297c1ab40d42cf9fe9cb80","urls":["bzzr://ebf8b8f732c73cc8ff56cdc803db5d16766b970d42cd85a900c402cd6ac4ea4c"]}},"version":1}
test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol:C 6060604052341561000f57600080fd5b5b6103208061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146100695780633247485e1461007e5780634753a67d1461007e5780639942ec6f146100a8578063aaf05f3d146100bd575b600080fd5b341561007457600080fd5b61007c6100d2565b005b341561008957600080fd5b61007c61016a565b005b341561008957600080fd5b61007c61016a565b005b34156100b357600080fd5b61007c610170565b005b34156100c857600080fd5b61007c610244565b005b6000806000806100e06102a7565b5b845b60010192505b60015b60ff1660010191505b60408051908101604052600581527f68656c6c6f00000000000000000000000000000000000000000000000000000060208201525b905060408051908101604052600481527f7573656400000000000000000000000000000000000000000000000000000000602082015290505b5050505050565b5b565b5b565b600061017a6102b9565b6101826102b9565b61018a6102b9565b6101926102a7565b61019a6102a7565b6101a26102a7565b600080805b60015b99508980156101b7575060015b99505b885b9650600087815b7fff0000000000000000000000000000000000000000000000000000000000000090921660209290920201525b855b9350600084818151811061020257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b825b90505b50505050505050505050565b6102f2600080808080805b60005b546000555b61016a5b96506102698763ffffffff16565b5b855b95505b600160025b945092505b60025b6000808052602082905260409020805460ff1916905591505b60015b60010190505b50505050505050565b60206040519081016040526000815290565b604080519081016040526002815b6000815260001990910190602001816102c75790505090565b60206040519081016040526000815290565bfe00a165627a7a72305820173a4ba4a6d4a1f42bcd91605fffa310515cd2a48c29239de2bb7d6c7ec0b6280029
test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fun_y","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fun_x","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f2","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f3","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8107f6076c6774d62bc9c3aaff0bb760d153b28044d1cc59f25ed56ccf0c1b60.sol":{"keccak256":"0xa6bd0cf97ff411fcc0f3ec22228956252595ed1ed5263dcba5e7f391fcc67e8a","urls":["bzzr://cc5c453d034d497abeaaba7f4182822f5f129947b196df4efff85d4354f06cf0"]}},"version":1}
test_814a9a6ac59a88cca6e539ba0542ae04c5965a1378b3f651898539dda972bb13.sol: ERROR
test_81724bbb51c212f8151ad780d1adee93c86bb362bd6a3bbbaa670acaff0d9ec4.sol: ERROR
test_81891bfe4170e45eb6370911b64a40a073cff134f46cce541276acdc637d0259.sol: ERROR
test_819507b699a0217c441ada101211a9a95e06a36021b18a65ec45a84f5a98ab3b.sol: ERROR
test_81eb77952d9ec92bc3240e8233ddde8fe3f2872f8de9876b08191a2b7cd84697.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6101598061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166352ff8cff811461003d575b600080fd5b61004d600435602435151561004f565b005b600081156100a957507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f8273ffffffffffffffffffffffffffffffffffffffff3316823460405190815260200160405180910390a3610127565b8273ffffffffffffffffffffffffffffffffffffffff33167f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f34604051602081016100f681838086610100565b9050809250610114565b8361010a82610119565b8452949350505050565b61011c565b90565b505060405180910390a35b5b5050505600a165627a7a72305820a2fc3a905b98e34d59d3160abe34df6d468d7bfe233b3cbe237072a285db7a2a0029
test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_id","type":"bytes32"},{"name":"_manually","type":"bool"}],"name":"deposit","outputs":[],"payable":true,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_id","type":"bytes32"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_82070dc8ae324ecf60da3881ac270c9ff51d72235c133a196d129ef79d8cac91.sol":{"keccak256":"0x3a5a996a4a0990d75ffddfa18555a730a4afdec85c4300f7a1892f4f675a8c5e","urls":["bzzr://5ec36942bf69e727128fd96e0da586b304701ec7baf46b11313faeedfcf0f0f2"]}},"version":1}
 conv enum base.Choice -> enum base.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206e6a2f38f8e1adfaf14cf319eb43ea358ebc96579007cb1821c4d99474d4934a0029
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":"base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":{"keccak256":"0x2f8154f54ec97e61d0a50948aa0b1c238633191fb381e4005d4bdcab65572e21","urls":["bzzr://073500555801e7f8f3440406622828cea0617852862903f033ba628e4ecc3e43"]}},"version":1}
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:test 6060604052341561000f57600080fd5b5b60d08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166385bb7d698114603c575b600080fd5b3415604657600080fd5b604c609e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6093565b6000600382108015608b57608d565bfe5b50919050565b505060405180910390f35b60015b905600a165627a7a72305820cda8f777feb328dac2ac0506942237d261d2d1660f91577e01e4b4bc6942e6240029
test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8270fc81fc9a946275a2cb42510a53ad301c4f7797d298b54aa1ccde64fcd276.sol":{"keccak256":"0x2f8154f54ec97e61d0a50948aa0b1c238633191fb381e4005d4bdcab65572e21","urls":["bzzr://073500555801e7f8f3440406622828cea0617852862903f033ba628e4ecc3e43"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol:A 60606040526001600055341561001457600080fd5b5b6005600181fe5b0160005b50546001016000555b505b60bc806100396000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a7230582000d1691e51abf489e84ce0951cc8c1d0fa7789f0ebc711cb9051b96a79c5d4fc0029
test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_82b02dd83c5109a46810289c45b5985a1b22fef58baa5f8ae0c51cbd3513fa24.sol":{"keccak256":"0xb53cc7f51e13d6d05a3daa932c316980feef7280d606e783863d010989da3f03","urls":["bzzr://b85b716b0a9a7df63de0a712863c3c5dfee0019c31b643d5fe1cff7a9a8d8156"]}},"version":1}
 conv contract C -> contract C
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_C_$1_to_t_contract$_C_$1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_C_$1_to_t_contract$_C_$1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_C_$1(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_C_$1(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058204c6da34ba22a3a3b58eb84e736d84d4ad45d4873bec7d5a65cdd0fe78b86b1ab0029
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":{"keccak256":"0xf7f94de1bfda40e42bddc57b9b63411f061e4cfbd7c30f21ec4f0382220e5600","urls":["bzzr://bcb591acaf2b805907d84fc8e443da2d211a2faa5102557c771e5b15e414a5a4"]}},"version":1}
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:Test 6060604052341561000f57600080fd5b5b61019e8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a63102578114610048578063cadaacbf1461005d575b600080fd5b341561005357600080fd5b61005b61008b565b005b341561006857600080fd5b61005b73ffffffffffffffffffffffffffffffffffffffff6004351661016b565b005b60003073ffffffffffffffffffffffffffffffffffffffff1663cadaacbf826040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815260048101906024016100e9818380866100f3565b9050809250610107565b836100fd8261012a565b8452949350505050565b610125565b73ffffffffffffffffffffffffffffffffffffffff1690565b61013b565b60006101358261010c565b92915050565b5050600060405180830381600087803b151561015657600080fd5b6102c65a03f1151561016757600080fd5b5050505b50565b5b505600a165627a7a723058209ceed0df8bb8294732a8f8303b8a491739e17b2bdb2593e8938374926742dd510029
test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"externalCall","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_82f6f7a7ab1eb3a7ca724d9c738aad295f5e8078040a0ccfd1d08e3ab86847fa.sol":{"keccak256":"0xf7f94de1bfda40e42bddc57b9b63411f061e4cfbd7c30f21ec4f0382220e5600","urls":["bzzr://bcb591acaf2b805907d84fc8e443da2d211a2faa5102557c771e5b15e414a5a4"]}},"version":1}
test_8305b8f2f8e68542feaec35576893842fb2c6542d38d96c9cc27e86a049df50e.sol: ERROR
test_8361d557dfaeacae2946aa24724dbe4c943419581c8227200a1dda0c73f6a78c.sol: ERROR
test_836dfd8ff4de0e4efbec792fdb3eec380f8f2b3d1fde368a252bb4dcd71032e6.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol:Test 6060604052341561000f57600080fd5b5b6101268061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d7ddb5698114603c575b600080fd5b3415604657600080fd5b60717fffff0000000000000000000000000000000000000000000000000000000000006004351660d1565b60405160208101608281838086608b565b9050809250609d565b8360938260a1565b8452949350505050565b60c6565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b7fffff00000000000000000000000000000000000000000000000000000000000081165b9190505600a165627a7a723058204712d7158ace0ec4db180de325799eb8517cc8ba55f55ebd8e98a5d7ce694d0d0029
test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes2"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_83ba3c0325dc55f8324ab86dbd870cdf54bfe199135359f5d588ec9cae1fca32.sol":{"keccak256":"0x328a61f93cbece6e7d87804f008d94b92d69046f79600f7b081a76e04dc2fbf0","urls":["bzzr://e408bc998dcc52d6f2e441787627731bbb864e449baa3e1901b0d77b720af0aa"]}},"version":1}
test_83f0aa75b311a45c431c12e757e19c7739832c9910b7cceac5a1660bb623d14d.sol: ERROR
 conv bytes17 -> bytes17
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes17_to_t_bytes17(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes17_to_t_bytes17(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes17(value))

			}
		
			function cleanup_assert_t_bytes17(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000)
			}
		

test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol:c 6060604052341561000f57600080fd5b5b61038e8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100ee565b60405160a081016100638183808a6100b1565b9050610074816020840184896100b1565b9050610085816040840184886100b1565b9050610096816060840184876100b1565b90506100a7816080840184866100b1565b90508096506100c5565b836100bb826100ca565b8452949350505050565b6100df565b6effffffffffffffffffffffffffffff191690565b50505050505060405180910390f35b600080808080805b600981101561017557780100000000000000000000000000000000000000000000000081026000826009811061012857fe5b600491828204019190066008025b6101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055505b6001016100f6565b6f02000000000000000000000000000000600360095b0160005b8154607860020a84046101009290920a91820270ffffffffffffffffffffffffffffffffff9092021916179055600360085b0160005b6101000a81548170ffffffffffffffffffffffffffffffffff0219169083607860020a9004021790555060006003906009610201929190610294565b50600360015b0160005b9054607860020a6101009290920a9004029550600360025b0160005b9054607860020a6101009290920a90040294506003805b0160005b9054607860020a6101009290920a9004029350600360045b0160005b9054607860020a6101009290920a9004029250600360095b0160005b9054906101000a9004607860020a0291505b509091929394565b82600a810192821561031d579160030160049004820160005b8382111561031b578354835470ffffffffffffffffffffffffffffffffff1916607860020a61010084900a909204780100000000000000000000000000000000000000000000000002919091041783556020600f8201049384019360019384019360089092019103026102ad565b505b5061032992915061032d565b5090565b61035f91905b8082111561032957805470ffffffffffffffffffffffffffffffffff19168155600101610333565b5090565b905600a165627a7a72305820ada52b999253131fb18fe275d7c6e7c4a69b86de6c143f03afbd7f5fea347cd10029
test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"bytes17"},{"name":"b","type":"bytes17"},{"name":"c","type":"bytes17"},{"name":"d","type":"bytes17"},{"name":"e","type":"bytes17"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8432ee2696b4bd234485f908fe08ade231e46569d2a5f735f635d4f6d0243bc7.sol":{"keccak256":"0x7e01bcff47f2bdd8da63539b5906abcff208ff1b6f3b47f9f57e8f3c8d9e9257","urls":["bzzr://262f6abe4c572ba70b9f93182a8029540bcebf881cf77d6cf71ff2225b9961bb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600060018211609d5750600160ac565b60a760018303608d565b820290505b5b9190505600a165627a7a72305820d24c485ebc7d57748da37acced34989eb20f74f910071756c60d401de73160890029
test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_84388f7abf6036dff6938d4ae4dadcde960c6e4b07cb34d463ecdb6c869c96f1.sol":{"keccak256":"0x84a1cb6452a83f05eab69ad665cae4a04248ed704c55106d849445e59c0cf25e","urls":["bzzr://da02b51aefc9ec8c0cbc8e144a4e78f3bfa99ecba1d5fdc8adf447774d05b9c5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:B 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600a5b905600a165627a7a72305820e4ce618eb31642ffaf7e9361b4eeacd4ccdef79406efb5ed4aa4a8f4baafbfaf0029
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":{"keccak256":"0x7bf08a1ac876af8c6b1f7b0659ecc167cbae8050991c948632f0572cef792971","urls":["bzzr://1cfe23dceaaadd23fb9a9ccce94c06f25db5398a12498c1f1e724ae49f912b54"]}},"version":1}
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:C 6060604052341561000f57600080fd5b5b6101a98061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610053578063b3de648b146100aa578063e2179b8e14610104575b600080fd5b341561005e57600080fd5b61006661015b565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b610066600435610161565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b341561010f57600080fd5b61006661016b565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b600a5b90565b600281025b919050565b60006101776001610161565b90505b905600a165627a7a72305820428860c301b907eae40a044a766f34cf3726145b3097a5276a10cb8699a176990029
test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_846592e1daf14a05c6daffd46ca767d1709d4f81d115c9bc812305ebff266bdb.sol":{"keccak256":"0x7bf08a1ac876af8c6b1f7b0659ecc167cbae8050991c948632f0572cef792971","urls":["bzzr://1cfe23dceaaadd23fb9a9ccce94c06f25db5398a12498c1f1e724ae49f912b54"]}},"version":1}
test_84671500d6adeb981a0d79b178728873b3403d1fb8b3ef97bf0bab550d3337e3.sol: ERROR
test_8476e0a255bc11bd7ef7a34e8b5e10129f4d05a17c69f7a1cd04653df6c22061.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol:Test 6060604052341561000f57600080fd5b5b6101f68061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e6101b3565b805160ff161515806100b65750806020015160ff1615155b156100c457600191506101ae565b60048152600560208201528060008151815460ff191660ff919091161781556020820151600291909101805460ff191660ff9283161790556000541660041415905080610117575060025460ff16600514155b1561012557600291506101ae565b6040805190810160405260028152600360208201529050805160ff1660021415806101585750806020015160ff16600314155b1561016657600391506101ae565b600060408051908101604052815460ff9081168252600290920154821660208201526000549092501660041415806101a4575060025460ff16600514155b156101ae57600491505b5b5090565b6040805190810160405260008082526020820152905600a165627a7a72305820e4f242b1607b6d14005075b34b8192938fd236378367767728cc5ea3006655c90029
test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_84b4d3490ee06979cadb5ef5468fc5f1dba2af0d1ec49bdbc317a052e42a162a.sol":{"keccak256":"0x06c95f18cb9c71be57dddcba744b43c0b733415eca94419f6184218dbf0a1725","urls":["bzzr://8631f60d8a001a75c8261666a345e4971f67d05ae492047d8810f0d2f55a0031"]}},"version":1}
 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol:test 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166376bb682a8114603c575b600080fd5b3415604657600080fd5b604c60b9565b60405160408101605d818380876075565b9050606c81602084018486608b565b90508093506087565b83607d8260a1565b8452949350505050565b609d565b83607d8260aa565b8452949350505050565b60a6565b151590565b60ad565b90565b50505060405180910390f35b6001425b90915600a165627a7a723058200fdec72c705b6486c988b86e624164f34d7099f6953829819e08eacba10716300029
test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"someInfo","outputs":[{"name":"equal","type":"bool"},{"name":"val","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_84bf0ec28bc5ac397f60481ed538427352182bc95f5c55fd55d5f0b33547322d.sol":{"keccak256":"0x5184b1488a72fe8c9542172822fd6a1638f08099a19fbe7ee71e1effaf717098","urls":["bzzr://03be07adf0430752e291fc21c7490c2147f03621b17d3560187f1b6f876c3aaf"]}},"version":1}
test_84cfd8593e603d8d8a86b83c20cd5afc3c9a50fda9e0898218cefa01f17c3309.sol: ERROR
test_84ef14001c25a13127f01723fe615c72ecd30fdd085b7873c8d674c33518524a.sol: ERROR
test_8503cd9ba6229dba70b77aabda1246a2338c34f689eb6f6152f056d3a14f3bd1.sol: ERROR
test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol:test 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a723058209bc6e3a4957e411b829fad17759ab88df67592330616b1799344c2aa0af3d5040029
test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_856777147aad23d6a5020bbe53b42d2b9270d8fb786563ce613eeed13af55eda.sol":{"keccak256":"0x218cdb601b383122cfc997b1f9d7fdd94da3e8174c32899e3daeeb1c1f678f5b","urls":["bzzr://7a29c0910cc1d7524744c3a9be9fe22ecf5318d85d2a0eaba4458d3454683256"]}},"version":1}
test_85778f54865e309f7b3039563223dd12ef8ba24bfa3bad131e9683c983d4f6eb.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol:C 6060604052341561000f57600080fd5b5b61011f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000609260cc565b6080604051908101604090815260018252600260208301526003908201526005606082015290508060005b602002015160ff1691505b5090565b60806040519081016040526004815b60008152600019909101906020018160db57905050905600a165627a7a7230582022c4e605f3610809e7aaef47bf21ebc68a2fa1babc5b97ad76c0cf73115b20dd0029
test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_85aab53a48821aef6628a7d969ade593b1451fc35d3978643827eca0c42868da.sol":{"keccak256":"0x48970f11a3ba5e95714241e09e9694c38c0fc471de51feedaf488b83066919eb","urls":["bzzr://69dcc1724a5b8f2939aed07e29c5ac9e258c35e945cef55c625d151d59419979"]}},"version":1}
test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol:test 60606040523415600e57600080fd5b5b608c8061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b60005b5060015b5060095b50505600a165627a7a723058204171d31a62bd5bae71fc88dd24f9d8ca8e4366477b3a19ce2436c7e491ef4b600029
test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_85b9138910109c9ca84d34e7d3c04e2dfbab7575a15897ac081bf5cb91da2925.sol":{"keccak256":"0x5a2e5dab0165e610489f1addbd30558668f6d4fa0abf85c28b7b0e32e9f522c2","urls":["bzzr://7323d1a149d1a029cd00cd7104567a826cae023c3afe43585e6a50bb2a02aed4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

test_85f3ba3981ebed2001e0f49ffb266d2ba68870203568fbe1c7a969eaf0f9ec1a.sol: ERROR
test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol:C 606060405260408051908101604052600481527ff09fa684000000000000000000000000000000000000000000000000000000006020820152600090805161004b92916020019061005c565b50341561005757600080fd5b6100fc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009d57805160ff19168380011785556100ca565b828001600101855582156100ca579182015b828111156100ca5782518255916020019190600101906100af565b5b506100d79291506100db565b5090565b6100f991905b808211156100d757600081556001016100e1565b5090565b90565b60368061010a6000396000f30060606040525b600080fd00a165627a7a723058209f16b95be12320fb288d189ab03b73576838436bd901342a7ed337a5ce6109f90029
test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_85f47286239dbd45fe4ef41ea3a12f7c208795902a969a57ea6c3502bf200fa9.sol":{"keccak256":"0x15f9121078da12736434a6a3b21ee5122d878bfd76a12e22052bbebe9f0d1b8a","urls":["bzzr://446dee2d45943116ad5e73f147e52eef07f29d02b9f0cbfc123d5f6af2729f44"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol:test 6060604052341561000f57600080fd5b5b60ea8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639642ccdf8114603c575b600080fd5b3415604657600080fd5b60776bffffffffffffffffffffffff196004351673ffffffffffffffffffffffffffffffffffffffff6024351660b5565b604051602081016088818380866091565b905080925060a3565b8360998260a7565b8452949350505050565b60aa565b90565b505060405180910390f35b60005b929150505600a165627a7a72305820efd5b0886d2dfe3dd5bd46d703e5caf49d75dd5c3eb53cfe505d285a01f2a0270029
test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"arg1","type":"bytes20"},{"name":"addr","type":"address"}],"name":"functionName","outputs":[{"name":"id","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_866881ab0638afe36a281b3c677fa7e16215f53cf226717041d2cef62faf1038.sol":{"keccak256":"0x1ec19144f087852cd8ef0aa1ed7c5c0ff990b05c0eb23becac22c62377bc27b5","urls":["bzzr://a5fac7d935106a909d56847056dddc98f419c2ed15383e4ef519dec75d6ea691"]}},"version":1}
test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol:B 60606040523415600e57600080fd5b5b60848061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000805b5b5b50505600a165627a7a72305820ab34f97c9b7f59623a3c25c35224c5539ad4d235041ae83ccdda21245b7625bf0029
test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_867ad19273ee2dfd94f9727618bd84b319efea62811f36cf18ca917edabebf8a.sol":{"keccak256":"0xbdf30e2df5df181e4f6fa957783c856ac3dbd5487e619f62f2186351b822aeee","urls":["bzzr://d79bfd59206466809d9d73bcecbd3147a2fdaf6b1f350a30f8a89fecb6ab61d3"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol:C 6060604052341561000f57600080fd5b5b6101d28061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663fae4f40a811461003d575b600080fd5b341561004857600080fd5b61007c7fffff0000000000000000000000000000000000000000000000000000000000006004351661ffff602435166100c0565b6040516020810161008f81838086610099565b90508092506100ad565b836100a3826100b2565b8452949350505050565b6100b5565b90565b505060405180910390f35b60007f61620000000000000000000000000000000000000000000000000000000000007fffff000000000000000000000000000000000000000000000000000000000000841614610113575060016101a0565b61010261ffff831614610128575060026101a0565b7e010200000000000000000000000000000000000000000000000000000000007fffffff00000000000000000000000000000000000000000000000000000000007d01000000000000000000000000000000000000000000000000000000000061ffff851602161461019c575060036101a0565b5060005b929150505600a165627a7a72305820bc56eff3ac8577454b2ac9033f284435444441e933e9f6b7f62e0b3dfdc59a8f0029
test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bytes2"},{"name":"x","type":"uint16"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_86a679e741d2ecff029a9b24f86f6bebf9536d1b49555e11ed5eb83cbeef2589.sol":{"keccak256":"0x68c87808db3a3113cc9d168d6936a4f944e77e3af59ba8a73e1bd8aad40f7845","urls":["bzzr://4f9a4d30c0bc9d432a5ac7a89381bbd72f2c0bcd35295125a4b421776554312d"]}},"version":1}
test_86d07f925f6a698475fd21a0bc310b93f2faf08c6926755e657058da25f62800.sol: ERROR
test_86dad6b1bb702dcb3d5fcaaca7c2d8a58883a3b1fd7ceabe125bdceea70b6517.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Helper 6060604052341561000f57600080fd5b6040516020806100f8833981016040528080519150505b60008190555b505b60bc8061003c6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663890eba688114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a72305820d276b43cb79e548d040d84a19aca0dc90ab41602957cdf7f581dc50f1274e2880029
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"flag","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":"Helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":{"keccak256":"0x72fcd9e42ae00b4b1c9bc5c581dc225de5103e0e83fde375f60a3be26fd677b5","urls":["bzzr://7946aa661f5e208cd9b3b0aec76e7fff6e494003f68cf95aafba37936fb36e9e"]}},"version":1}
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Main 6060604052341561000f57600080fd5b5b6103c28061001f6000396000f300606060405263ffffffff60e060020a600035041663b3de648b811461002f578063e420264a14610089575b600080fd5b341561003a57600080fd5b6100456004356100e3565b6040516020810161005881838086610062565b9050809250610076565b8361006c8261007b565b8452949350505050565b61007e565b90565b505060405180910390f35b341561009457600080fd5b61004560043561027a565b6040516020810161005881838086610062565b9050809250610076565b8361006c8261007b565b8452949350505050565b61007e565b90565b505060405180910390f35b60008181526020819052604080822083905573ffffffffffffffffffffffffffffffffffffffff30169063e420264a9084908490516020015260405160e060020a63ffffffff8416028152600481019060240161014281838086610062565b9050809250610160565b8361006c8261007b565b8452949350505050565b610168565b90565b5050602060405180830381600087803b151561018357600080fd5b6102c65a03f1151561019457600080fd5b505050604051805190506040519081526020016040519081900390206101b861028f565b602081016101c881838086610062565b90508092506101e6565b8361006c8261007b565b8452949350505050565b6101ee565b90565b5050604051809103906000f080151561020657600080fd5b73ffffffffffffffffffffffffffffffffffffffff1663890eba686000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561025857600080fd5b6102c65a03f1151561026957600080fd5b50505060405180519150505b919050565b6000818152602081905260409020545b919050565b60405160f88061029f8339019056006060604052341561000f57600080fd5b6040516020806100f8833981016040528080519150505b60008190555b505b60bc8061003c6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663890eba688114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a72305820d276b43cb79e548d040d84a19aca0dc90ab41602957cdf7f581dc50f1274e2880029a165627a7a72305820caab505ab1a77d13f9adb83b920327fb1816e35cb3816b78c636a458cccfa1170029
test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":"Main"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_874010cd41201b51dfb3abf31ab2170f31e3a385472f82b0c4207948dd8381ad.sol":{"keccak256":"0x72fcd9e42ae00b4b1c9bc5c581dc225de5103e0e83fde375f60a3be26fd677b5","urls":["bzzr://7946aa661f5e208cd9b3b0aec76e7fff6e494003f68cf95aafba37936fb36e9e"]}},"version":1}
test_874765e31e765d6b0ec7c3c025bfecd2e7d7b50f7cbd18e290ec9ebbf8db49f3.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol:test 6060604052341561000f57600080fd5b5b61020c8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639adbf6918114610048578063b3de648b146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fc565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b61005e600435610105565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b8080025b919050565b60003073ffffffffffffffffffffffffffffffffffffffff16639adbf6916009840a6000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600481019060240161016f8183808661007b565b905080925061018d565b8361008582610094565b8452949350505050565b610195565b90565b5050602060405180830381600087803b15156101b057600080fd5b6102c65a03f115156101c157600080fd5b505050604051805190506101d7836007016100fc565b0390505b9190505600a165627a7a723058205cde10208ce5bcb35e9ebb75818bddd189ce1455657693d02f3ecc0f3ef150560029
test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f1","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8788d51b07459fd4041d6352c03ad95f69ddbdacb7207607edc9e74d41025c2f.sol":{"keccak256":"0x6a6ff86be397dab06d2b614eeaa55dd3ad9746e76ca97c4d315ece86280e86b5","urls":["bzzr://c13b11fea3b4c4fa4f24e2d624223f309f17226820ad477cc9659bf3cc3aece3"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol:test 6060604052341561000f57600080fd5b5b60f58061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663834ba3d781146046578063b3de648b146094575b600080fd5b3415605057600080fd5b605660a9565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b60a760043560af565b005b60005481565b806040519081526020016040519081900390206000555b505600a165627a7a72305820d7ff3e0c60a0b196365668bc1592c338608cb79cf859a4a704e34bafdfa2ae520029
test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"shaValue","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_87ca760b3a2b460457e24cdf29533624920e37ae705ca6d0a199b38cb3b06c8a.sol":{"keccak256":"0x3ea67da8eb236517e3e22b522f52501c21b8c9db518e29f881b468714c5ad354","urls":["bzzr://4d53f60ad77e7f96af776be0fcbf1bbcdb216397d8b3a1e31d9350ff98fbcf33"]}},"version":1}
test_87e0ffd3cfb669eb6ca87842448a9230885a8101c95a09f5f1435ce4bb065924.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_87e1b5728c10b62d511f36b4eead9e9fa399fec55e55ef3ec84ebe696d8d8665.sol: ERROR
test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol:C 6060604052341561000f57600080fd5b5b60d18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60106081565b60008060006060846066565b9250606b565b800290565b6072856066565b91506007905093509350939050565b608d6003600260016054565b8260005281602052806040528360605260806000f35b5600a165627a7a7230582001db6ebc391c896a82247db00b117a520f520ea56be7f4dd965a614e26a958e50029
test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_87e7b32588ea6159b78e5b27af587c8567d9479a38936e99093a889912fef293.sol":{"keccak256":"0x1d8b372a307dc221fcc968f13864c6bc49891b6cd6c36f66a15eaef85be1fb13","urls":["bzzr://09c0b94eedefaaf59016a205de58a31d1b9e24bb613de571b427fe617e71124c"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol:C 6060604052341561000f57600080fd5b5b60ef8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006040517f61626300000000000000000000000000000000000000000000000000000000008152600301604051809103902090505b905600a165627a7a723058206c0f41cee59c644da43289f2a15b4d923249e99ef1f4f3331e976cf68bcc786c0029
test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8803f9caf00583e4e5fba3a60215544bf83f8c44ce2ee7b0a162eb7cf91b8e43.sol":{"keccak256":"0x7ec5e5f08104b6bdc1986eb44df210519c354e4ffac8254763701921fc1c2130","urls":["bzzr://735933c8e68e858a54198494cd4a9ecec57987e1f5e3d70f470624d7d104b3cd"]}},"version":1}
test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol:C 6060604052341561000f57600080fd5b5b60ad8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b73fa0bfc97e48458494ccd857e1a85dc91f7f0046e8060006002604051600060405180830381858888f150505050505b505600a165627a7a72305820377db9f301762d137948eb6f4882bce2150637bcc9f6fcab394c252ac027c1b70029
test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_88a05b2ef5b05afd78684d66c705236d70d47fda14d708d4ff0db88eed47d333.sol":{"keccak256":"0xfbd80c8ed319e6925bc0e095627614d016e179830dad7b7c1560abd7f9526efd","urls":["bzzr://2260cb62cab8f746d7d8f18d9fb33596a90ad092bca9598a4b70e391af000b09"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol:C 6060604052341561000f57600080fd5b5b60f18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006080604051908101604090815260018252600260208301819052600391830191909152600460608301525b602002015160ff1690505b905600a165627a7a72305820cb143fec1dd3d81918c4497e1e9829f2691efc42d083c34685a79f0514b7a6440029
test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_88b2deb8433a32881ef3021bf9f74ec7ab424dff58b98ac012fd93350863473a.sol":{"keccak256":"0xa4703d4ad2c0a95e3aa50605970317099b7f70b26623c6987fe3a31a625179a4","urls":["bzzr://a90e420a8d939f884eb94be6ba2c1eb38360e6b224498008a0c5993e97f245c9"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 conv int_const 1 -> uint8
 conv int_const 2 -> bytes32
 conv int_const 3 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_bytes32(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_rational_1_by_1_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint8(value))

			}
		
			function abi_encode_t_rational_2_by_1_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_bytes32(value))

			}
		
			function abi_encode_t_rational_3_by_1_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_rational_2_by_1(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_rational_3_by_1(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		
			function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
				converted := cleanup_assert_t_uint8(value)
			}
		
			function convert_t_rational_2_by_1_to_t_bytes32(value) -> converted {
				converted := shift_left_0(cleanup_assert_t_rational_2_by_1(value)
			}
		
			function convert_t_rational_3_by_1_to_t_bytes32(value) -> converted {
				converted := shift_left_0(cleanup_assert_t_rational_3_by_1(value)
			}
		function shift_left_0(value) -> newValue {
					newValue := mul(value, 1)
			}

test_88c7c3c33735ab216b1290ddaae60ee4d4be05e4f03aaada11e711f10b8ba194.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8912e251e081600d6043fad553258643893da558e80d6535a2f28cc70cc17a1a.sol: ERROR
test_89573a8c86cad1752d7fe7f7fddf7376e67c34a38ffef5cedf81e12303727260.sol: ERROR
test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol:test 60606040523415600e57600080fd5b5b609f8061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c28114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b6000805b600a821015606d575080606d565b6001909101906055565b5b5050505600a165627a7a7230582009f10e23ffbdfe1bd3e74142cdf2c9acac42f37a763945679d75412974a15a7c0029
test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_89d80deb42c93a570751b6c33fa1e34bfed7b567f9f72ed6c96410176762d255.sol":{"keccak256":"0xacce1a32e4d76f0e47b7f09ce56722aaa71d9abb719b2a934a9458882dafa73c","urls":["bzzr://acb1846088cce5a6f487aadd961b8501a0679633f9039d970dab32fbb56af2b1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a2779b91be013a93c3c28337b106d4781b4888f0cc7a6589bf18f98f57ccd47.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol:Inconsistency 60606040526000600255341561001457600080fd5b5b6103c3806100246000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663511e2f8b81146100485780637fec8d381461005d575b600080fd5b341561005357600080fd5b61005b6100b4565b005b341561006857600080fd5b6100706100cb565b604051602081016100838183808661008d565b90508092506100a1565b83610097826100a6565b8452949350505050565b6100a9565b90565b505060405180910390f35b6100bc610187565b6100c8600160026101cb565b5b565b6000805481906100de8260018301610242565b5060008054819081106100ed57fe5b906000526020600020906002020160005b5090508060010180548060010182816101179190610274565b916000526020600020906002020160005b60408051908101604052612328815260006020820152919050815181556020820151600191820155835492506101629150839083016102a6565b506001805490610174908281016102a6565b5061017d610187565b60035491505b5090565b60005b6001548110156101c7576101be6002546001838154811015156101a957fe5b906000526020600020900160005b50546101cb565b5b60010161018a565b5b50565b6000806000848154811015156101dd57fe5b906000526020600020906002020160005b509150816001018381548110151561020257fe5b906000526020600020906002020160005b50600181015483549192508391811061022857fe5b906000526020600020900160005b50546003555b50505050565b81548183558181151161026e5760020281600202836000526020600020918201910161026e91906102d0565b5b505050565b81548183558181151161026e5760020281600202836000526020600020918201910161026e9190610308565b5b505050565b81548183558181151161026e5760008381526020902061026e91810190830161032f565b5b505050565b6100a691905b808211156101835760006102ea8282610350565b6102f8600183016000610372565b506002016102d6565b5090565b90565b6100a691905b80821115610183576000808255600182015560020161030e565b5090565b90565b6100a691905b808211156101835760008155600101610335565b5090565b90565b50805460008255906000526020600020908101906101c7919061032f565b5b50565b50805460008255600202906000526020600020908101906101c79190610308565b5b505600a165627a7a72305820106d740aaa87173f7e15d6b4586569f0149d35a069106ff52faa96a2b5bc766a0029
test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol:Inconsistency {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"DoNotCallButDoNotDelete","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"trigger","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol":"Inconsistency"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8a91d72a5f4f22be14a80a1d8a0b66d69cffd42c866305b966e55dc5e4d8e83d.sol":{"keccak256":"0xc881d6f154be29523d9f6af87fa99c06a5e51a51383d1c00078bba11b8665bbf","urls":["bzzr://f5bf50df5643ffe527384e95dbd380cedbd74531c7a7a36f3ef7c782c7172796"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:A 606060405260076000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a7230582078931f3cde3116ff97e48eee22f66a9db46a8cbe8273fe87015fbd7d2220621a0029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:B 606060405260096000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a7230582019a18f411e378657330f07a106b00df350c349c40f5b65f280a097f1f64358880029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:C 606060405260076000556009600155341561001957600080fd5b5b610212806100296000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f811461005e5780634df7e3d0146100b55780638919b82e1461010c578063dc8c2f4c14610166575b600080fd5b341561006957600080fd5b6100716101c0565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100716101c7565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561011757600080fd5b6100716004356101ce565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561017157600080fd5b6100716004356101db565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b6000545b90565b6001545b90565b600081905560015b919050565b60018181555b9190505600a165627a7a723058202c6197014dc1d33bbedc2b243d11ff99e5142940e20c704acbc7a90aa791ca100029
test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"a_set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"b_set","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8a925931edb69179139041db78b646e2566c3e0906df842c18af7b8e7fde092b.sol":{"keccak256":"0x07b5d211e6b4c30c8c8d39783f2ab209d92ec56060c2e8ddf8d2ef6951478f32","urls":["bzzr://3d8d87b2fd802abca089977e86047b6270764fe3df45a87658abe05070cc53d3"]}},"version":1}
 conv uint256 -> uint256
test_8acd05af9cad579d312487d031bada538878fc59e9a2422de028741231437aa6.sol: ERROR
test_8b78054e2774eb504436fe7ff45ae2b3b938a142ff4dc056083031d590f9c923.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol:C 6060604052341561000f57600080fd5b5b60f88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000600181805b600491505b5060065b600b9250600c915060005b1560b1576004935060c5565b600c9250600d915060005b1560c557600593505b5b505050905600a165627a7a72305820e40f4579874d1f974ae175f401ec950103f9d1740cb5c838ca1126eac7937e840029
test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8bbd7fea31b09db7606f44609211a9c2e41c7869f9b386bab2e71cf642b3e4ad.sol":{"keccak256":"0x716afd57ee24be5af8442a515bcb8acf17965419a8437afdb7715bed6a2e313b","urls":["bzzr://962ea99d5e4e66bc0fbc22c72af7467821505d2fa9c9bf15d606fc311a0c6180"]}},"version":1}
test_8bee95459d1441914eec5a303aa8f726a910e0ebe1ac463846116eac14a62516.sol: ERROR
test_8bf24a9a4a6fcbac7b272c50473972e6d7542e9241f52294b73cd71ec3f2b0ae.sol: ERROR
test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol:c 6060604052341561000f57600080fd5b5b60e58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60008060008154600181600116156101000203166002900481101515606f57fe5b815460011615608d5790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000290505b505600a165627a7a72305820787c4d5cb3da9e5d75cb585cf79da94e4f57a6fe974aa38322a4d95b481c072e0029
test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8bfb5f6733ff8652b9effbd076e650b075cf84a1f0bcb89dc25e753af8116a99.sol":{"keccak256":"0x258b3129215b625fb758c82d966d5fc30c51b24294c4272e5fc73c70960be866","urls":["bzzr://928971424b097aeb7559c7eac8810b8d679ff1eadad0af309c464f85989609f4"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol:C 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600281900a82025b929150505600a165627a7a72305820aa7ef3c11ac1b2feeadee5f9f934e8ddf4af3e7ae62d2ed54e230ef7a0e0c4680029
test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8c009fe2f41d65acad476e5a2b3a0f003f999e769756bdf96442cc5bfffec2c6.sol":{"keccak256":"0x8ea5d3e77dcba17b8a1100a3b39859e32985529a21579659becab7905e24fcc9","urls":["bzzr://44d021ac16dd62522dc7d878bcda107833cf7bfd5e23005c796bd3871ae7c38a"]}},"version":1}
test_8c29992e4977d3ed0b37a6432a72132558d4654ae2d49e30900435bba71baaea.sol: ERROR
test_8c4c74f609bbf4765bc4195a638e983a43c21bf0000f9dce8de1192a66d64b28.sol:C 
test_8c4c74f609bbf4765bc4195a638e983a43c21bf0000f9dce8de1192a66d64b28.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:C 
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:D 60606040523415600e57600080fd5b5b5b5b5b5b60368060206000396000f30060606040525b600080fd00a165627a7a723058201ccdd194732ed2fe28e24c1914206e8c245ab187191af3fa4ba66812b3c7c1790029
test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8cade697aa193aa1ca0fc29d32bc50dc689a9444ee97b88661cba9bbdc0205cb.sol":{"keccak256":"0x5f25e813e4c8df5fe7e462e306808b90ed6e92ddf149ee27d43d1b5ba22ea7ff","urls":["bzzr://f4469d5228f2d494070359494cd30a0796dd55b7ec148a781f7abaf488a70622"]}},"version":1}
test_8cf063f2816e4d1a1d31505bce0249a55a9339938ababc7472b7923684d1585e.sol: ERROR
test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b607f195b505600a165627a7a7230582051bacccdae871d7b587647fecb636494e7fedb60515fdabc17a578f11334f2330029
test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8d3188e2b93c27e6100c9fe7466079849d34ca84cde92f563100b85f96a5a5a6.sol":{"keccak256":"0xdec0d6f211a1480d8653e5fdf227d32bc77b928b71b22a1bcc355a73fb0413e7","urls":["bzzr://9a9f4e7a47a26b0a50bec089d7cab3aa35cb38d563770251f0192daa4835efe0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol:test 60606040525b5b5b610128806100166000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a044b0708114603c575b600080fd5b3415604657600080fd5b606873ffffffffffffffffffffffffffffffffffffffff6004351660243560a6565b604051602081016079818380866082565b90508092506094565b83608a826098565b8452949350505050565b609b565b90565b505060405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff831682156108fc0283604051600060405180830381858888f150505073ffffffffffffffffffffffffffffffffffffffff301631925050505b929150505600a165627a7a7230582016f6dd9eceb6529d45f6e1be3c79b9c5d6d45d001fa684b5480c9069cc2625020029
test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"addr","type":"address"},{"name":"amount","type":"uint256"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8d3490811ae48b49edeeb791883ef255bb677e03a1ac4d29ae4aa9cc14e47a01.sol":{"keccak256":"0x3c00949a51ea8fdc45b9193fdffc82434c374a54e84f2c9eb07db6ce63b8edc5","urls":["bzzr://b267e957f8767d6a2da77c3761d7c8deae908d3c55029860eb78027af0cfdbbc"]}},"version":1}
test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820cab056ca2702d0e8232eb5c636cbf4538baa527a9be4bc9452a1b7853803eaef0029
test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8d7f9da7c09b51950f727b088e6587372d3e19ed14b109bc01cd8e5c58a3ce3d.sol":{"keccak256":"0xd24c56a072acc1042c8d509585fa3bc6e76a333e65d6fa78860dc386cf087100","urls":["bzzr://39c36e2386455d6aa5399c152d2ad0a816d8c0c6819e77249f5f8d994e46d771"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:helper 6060604052341561000f57600080fd5b5b61016f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461005357806362548c7b1461009f578063f9633930146100b4575b600080fd5b61005b61010d565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b6100b2610129565b005b34156100bf57600080fd5b6100c7610139565b6040516020810161006e818380866100e4565b905080925061008c565b83610082826100fd565b8452949350505050565b610094565b151590565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b90565b6000805460ff191660011790555b565b60005460ff165b905600a165627a7a72305820281cf34dee19873267129474658e9773c887c9cb4eefd6d4415bf5d5064fd2450029
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"},{"constant":false,"inputs":[],"name":"setFlag","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getFlag","outputs":[{"name":"fl","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":"helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":{"keccak256":"0x3392db80506a0f0bbd61f396c0f403e90e61fab53cd08acddff6a44813d55634","urls":["bzzr://6be4cf054e7b038331cc7f88b6de581fa44703bc5a8f880fae47f5797061a510"]}},"version":1}
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:test 60606040525b61000d610049565b604051809103906000f080151561002357600080fd5b60008054600160a060020a031916600160a060020a03929092169190911790555b610059565b60405161018e8061037383390190565b61030b806100686000396000f300606060405263ffffffff60e060020a60003504166331fe52e8811461003a57806396dfcbea14610093578063fd72b6e91461011f575b600080fd5b341561004557600080fd5b61004d61016e565b604051602081016100608183808661006a565b905080925061007e565b8361007482610083565b8452949350505050565b610088565b151590565b505060405180910390f35b341561009e57600080fd5b6100a66101d6565b604051604081016100b98183808761006a565b90506100ca816020840184866100ed565b90508093506100e8565b8361007482610083565b8452949350505050565b610101565b8361007482610110565b8452949350505050565b61010b565b151590565b610113565b90565b50505060405180910390f35b61012a600435610267565b60405160208101610060818380866100ed565b905080925061007e565b8361007482610110565b8452949350505050565b610088565b90565b505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff166362548c7b60026040518263ffffffff1660e060020a028152600401600060405180830381600088803b15156101bd57600080fd5b87f115156101ca57600080fd5b50505050600190505b90565b60008054819073ffffffffffffffffffffffffffffffffffffffff1663f963393082604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561022d57600080fd5b6102c65a03f1151561023e57600080fd5b50505060405180519250505073ffffffffffffffffffffffffffffffffffffffff3016315b9091565b6000805473ffffffffffffffffffffffffffffffffffffffff166312065fe08383604051602001526040518263ffffffff1660e060020a0281526004016020604051808303818588803b15156102bc57600080fd5b6125ee5a03f115156102cd57600080fd5b5050505060405180519150505b9190505600a165627a7a72305820f701f2f7d88d4d8b1bca919da6c2b8a76aad636c4b5f76dc45997f8b837760eb00296060604052341561000f57600080fd5b5b61016f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461005357806362548c7b1461009f578063f9633930146100b4575b600080fd5b61005b61010d565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b6100b2610129565b005b34156100bf57600080fd5b6100c7610139565b6040516020810161006e818380866100e4565b905080925061008c565b83610082826100fd565b8452949350505050565b610094565b151590565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b90565b6000805460ff191660011790555b565b60005460ff165b905600a165627a7a72305820281cf34dee19873267129474658e9773c887c9cb4eefd6d4415bf5d5064fd2450029
test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"outOfGas","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"checkState","outputs":[{"name":"flagAfter","type":"bool"},{"name":"myBal","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8d9431c11a02922167104f1cbc0de431b37078bcaebef59c4c197869944e3405.sol":{"keccak256":"0x3392db80506a0f0bbd61f396c0f403e90e61fab53cd08acddff6a44813d55634","urls":["bzzr://6be4cf054e7b038331cc7f88b6de581fa44703bc5a8f880fae47f5797061a510"]}},"version":1}
test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol:C 60606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058209322e6f8611516e95336b77f3b73c6f9972e3f0c0ff2d3b3a85b230fc428a5710029
test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8db07166c4e150b2ef9333ab054b47464fe75b5f769e04bcfb943383907c4cb3.sol":{"keccak256":"0x3ebb72496852666eeea51ec74b46792289ed91c42845591cff0630f150b89d31","urls":["bzzr://230739b91cd0fbb7a5cd084e73e894af3875fba3302e4db5f240f771182a50ad"]}},"version":1}
test_8de14ebf1857ba92a290125ffff0bd305a51b7a1fc05ca4184f8d44f122d48ff.sol: ERROR
test_8e8680780fdc619e3a1684d8e6f90b01be8d71c2d8d23087d754674f8ea6301f.sol: ERROR
test_8ea2251c00b5efcd8acf88ae3e622fc6995b9334e5ca345ba46ca21ea9c491a6.sol: ERROR
test_8f80a2edcbd5ed3d727ffd33bd1c7003f2ccfe7576ad3322d181b8c516100a5e.sol: ERROR
test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000195b505600a165627a7a723058208c559ffb2a7afa16f18bd738efedd9cf058bf5a70fdd8dc7f7035d5a446b98940029
test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8fa5a363cdb355d0b62134fb27ac41595086ccb6c3f5624d64a0ab9861802d43.sol":{"keccak256":"0xc660fa948470fb600e6eaacfa63ddfe4f7f0c3700ebc92782448273f0e8e45b0","urls":["bzzr://8c83cdba44aef647d22c5b881bb7f7b7f608f9253ac1e391a9ef9b8346ac0445"]}},"version":1}
test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol:C 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058208b5e5424bb631ba3be1438aaadbd50e134f0c8c1b0643c03b374eb31a05e157f0029
test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_8fb55347d26f7897d262bb39f90bbfa13f1cb624cc72e3109073be4d19b6cf3a.sol":{"keccak256":"0x838b93b5cf085229bcaf8d73767c1c8e48adc82a43118173e5363a8668493bef","urls":["bzzr://24153263939a6a90c679c603dba8c8988b741d18d5f17620ed00121690e289ce"]}},"version":1}
test_8ff1a5fd51838e63a1810d04e008795c86e39b52ddca0c3ce47380c8f98d34bd.sol: ERROR
test_9036a6b0126f288e6385e685edfd6821def9728256a796aafda4fc590cb19992.sol: ERROR
test_90af48599341cea294fa78bba9b3556a106c0dccd32fd8d1171d81651e66991b.sol: ERROR
test_90e85d40d23a67239a4f4dbd02b394cdd8a598e97c24d1299fb470dd53af8d20.sol: ERROR
test_90f4793b74d91ca4e07e528e8b775f8829b1cce5f2c16d7d7523e841b2244a5a.sol: ERROR
test_9131be56f5fdd5919aba5e4b2088f9f703163f47c047924e60f63c798f8cb84a.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166393245a098114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a72305820450b8f79cc6acaac17ca3c7406e6d2abc849d5dd153ef434d843592b7dd9a0f00029
test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul_and_add","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{"mul_and_add(uint256,uint256)":{"notice":"Multiplies `a` by 7 and then adds `b`"}}}},"settings":{"compilationTarget":{"test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_913d59e45f6c5bfd9de34864540f05febc5e8e259c9116cc9febcfdeb39d16b0.sol":{"keccak256":"0xc6f22279a68782a863ddbe6d37f4b12a0cdf80ba612063da92dd163c1675c4a5","urls":["bzzr://5f17b4a07e9a03c6acbcf6e64bf3f24d242061945afedd5147485a7edc98a1fa"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol:c 6060604052341561000f57600080fd5b5b6102028061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c29855788114610048578063dd1730e21461009f575b600080fd5b341561005357600080fd5b61005b610100565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b60043561ffff60243516610139565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60006040517f666f6f00000000000000000000000000000000000000000000000000000000008152600301604051809103902090505b90565b60008282609160405192835261ffff919091167e0100000000000000000000000000000000000000000000000000000000000002602083015260ff167f01000000000000000000000000000000000000000000000000000000000000000260228201527f666f6f00000000000000000000000000000000000000000000000000000000006023820152602601604051809103902090505b929150505600a165627a7a72305820bbad7a9803b57d390c04815a70300a8e593eb33dd0ac6fcb89ef0b2f3fb14d310029
test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint16"}],"name":"bar","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9271f0a46728cae9d437e46d105de8bb1ef37087b74c5d737969ba90f82b81ae.sol":{"keccak256":"0xa4e7b47fed1ce7a9fdd423539548a754b889c9f3f8375a806ca2f09fd71ac55e","urls":["bzzr://18303ab05e3513d62f9ecabeb306e6d17a7e9b4ea73f104b1b421936c395bd44"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 conv bytes32 -> bytes32
 conv uint256 -> uint256
test_928197185d4e60d95371505de3cbc59590fadc472902456208c4693ef63c22b0.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol:C 6060604052341561000f57600080fd5b5b60c78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b600060025b600191505b5b50905600a165627a7a723058206fbc0b3ca6962937726b12a10f2c6eb1f76ce33efb7a1ac8aeb869293326e12b0029
test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92859f1daa543df4fffdcbd3ef6b6003395233fabc2a6aaf30427ee9e7fe99ef.sol":{"keccak256":"0xf51e0e1b6fe023a0de6d7c64cd526c46b2b69cfad3d8851efc218c5bd0bcc0d1","urls":["bzzr://f5154d0352a7b9b014f7271e4ebebb774321a3dcc7fafaa4b2620cfb3766ea5c"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix 60606040526000805460ff19166001179055341561001c57600080fd5b5b6101218061002c6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d909b40381146046578063d957dd3c146096575b600080fd5b3415605057600080fd5b605660e6565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b608b565b151590565b505060405180910390f35b341560a057600080fd5b605660ef565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b608b565b151590565b505060405180910390f35b60005460ff1681565b60015b905600a165627a7a72305820056b9fc18b2584a62f5e7bc032125264669ce83dfd2bb2375d1cec658c1513500029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"fix"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix_init 60606040526000805461ff001960ff19909116600117169055341561002357600080fd5b5b6101ad806100336000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631054761c8114610053578063d909b403146100ac578063d957dd3c14610105575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b34156100b757600080fd5b61006661016d565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b341561011057600080fd5b61006661017b565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b600054610100900460ff165b90565b600054610100900460ff1681565b60005b905600a165627a7a72305820782b372410fab6d944bc22bfc1d7bb3cb8cbafc5259b0bf441301542f06cbeef0029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:fix_init {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"checkOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"fix_init"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init 60606040526000805460ff19169055341561001957600080fd5b5b610121806100296000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d909b40381146046578063d957dd3c146096575b600080fd5b3415605057600080fd5b605660e6565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b608b565b151590565b505060405180910390f35b341560a057600080fd5b605660ef565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b608b565b151590565b505060405180910390f35b60005460ff1681565b60005b905600a165627a7a7230582023159774e431672c531a5d20a8b8ab3921de18810fdf9fda257920d9e096b37e0029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"init"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init_fix 60606040526000805461ffff1916610100179055341561001e57600080fd5b5b6101ad8061002e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631054761c8114610053578063d909b403146100ac578063d957dd3c14610105575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b34156100b757600080fd5b61006661016d565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b341561011057600080fd5b61006661017b565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b600054610100900460ff165b90565b600054610100900460ff1681565b60015b905600a165627a7a72305820d21ab88620ddf9c12ca57cacd20a426a267cce0c2a603e93aef3a14c1e75de9c0029
test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol:init_fix {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"checkOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ok","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"isOk","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":"init_fix"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92b4dfc1437a39a82518bb94febd32c0544b82754dc5707ad094f520d4f426f6.sol":{"keccak256":"0x5c78ad8d7f806ed8d3757b1556d67de83c0120f825ecb175882013dcc7a54d26","urls":["bzzr://8daac2264f4fe317c3fc36ead4ebc96e1c2c0fa7d653849a72946ceef6de5a38"]}},"version":1}
test_92b62fd43a2bd396191a0495fa25f7a9f2cfa6a8525c3c074db4ed0f381aac21.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol:C 6060604052341561000f57600080fd5b5b61016f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063a0b2b43b146100a1575b600080fd5b341561005357600080fd5b61005b610135565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100db6c010000000000000000000000006004359081049068010000000000000000900463ffffffff1661013b565b6040516020810161006e818380866100f8565b905080925061008c565b8361008282610111565b8452949350505050565b610096565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b60015b90565b815b929150505600a165627a7a723058201d786a3753576f956572639d82eaa1b185c3ca0e6a77ae24d2c78f266e18001c0029
test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"cb","type":"function"}],"name":"g","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92bb0f3197e6a8407dccf85d9e5ba70331ee89ee57d85b833bef67d45056b6a6.sol":{"keccak256":"0xc7888e15c352167054002e643d0a500cf4e655a118a8b991f77f2b84a89adf12","urls":["bzzr://75340ea34425b62a1693387fc3107ceef9f6f0ac069f29570cfd7b8ca81a8535"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_92c502d6ce1d103d2544d90c8fef681918bf82565e5602c5f4cb0051dda631d6.sol: ERROR
test_92cc180dd604d01708498f9cd3d31ebe7c9aff6e4522934bde6f119c2a8b4f59.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol:C 6060604052341561000f57600080fd5b5b61006a6401000000000261018017600160006101000a8154816001604060020a0302191690836001604060020a03160217905550610061600261007464010000000002610164176401000000009004565b6000555b61009c565b600281025b919050565b6001546000906100949083906401000000006001604060020a0390911604565b90505b919050565b6101b6806100ab6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663481b57268114610053578063ab5b4456146100aa578063eee9720614610104575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b610066600435610164565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b341561010f57600080fd5b610066600435610180565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b60005481565b60015460009061017890839063ffffffff16565b90505b919050565b600281025b9190505600a165627a7a723058203d6a2fa6736d52b29e71ab7e4abc7b2f07788b51638c2342120ebd57058f10e70029
test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"result_in_constructor","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"use","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_arg","type":"uint256"}],"name":"double","outputs":[{"name":"_ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_92d51885d3770d93f476266a93bc151dcbbba201a246f0261b1eac116c045df6.sol":{"keccak256":"0xfc8b646be41b391145a52e37a705928aa9d60c8443e0126ff9a5a5f280b33cbf","urls":["bzzr://54cb42796e9bcbabbb790ce051b87e909b0650dab086d9ac32acdc60ad680d2f"]}},"version":1}
test_92e7c407ef10f78be75dcf6e8e75d9f77245b94e2ec3042efe42c18776eaa397.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol:c 6060604052341561000f57600080fd5b5b6101c68061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b6100506100a6565b604051604081016100638183808761007e565b90506100748160208401848661007e565b9050809350610092565b8361008882610097565b8452949350505050565b61009a565b90565b50505060405180910390f35b60008060606040519081016040908152600182526002602083015260039082018190526100d591600091610128565b506000805460039081106100e557fe5b906000526020600020900160005b505460606040519081016040908152600282526003602083015260049082015260005b602002015190925060ff1690505b9091565b828054828255906000526020600020908101928215610168579160200282015b82811115610168578251829060ff16905591602001919060010190610148565b5b50610175929150610179565b5090565b61009791905b80821115610175576000815560010161017f565b5090565b905600a165627a7a723058203821e86bb00440744fb53bfc70284d8a3b9888fd9f98d2338e113d93f7209aa10029
test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_930235fe21a0ba986bd1e501459705461c999ff018a914e492cc737a58ca1f2f.sol":{"keccak256":"0x15b0b8e2191c57a09003f24e62d092e6451706388e3272c0db619baf4c31341c","urls":["bzzr://2fceeb91df1907ff29b322987663733c7471744a3ba16ee9d912ac55fd05887a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol:C 6060604052341561000f57600080fd5b5b6101108061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b42600090815260208190526040812054151560cf57600619600090815260205260057fd37b509a4e8d947091863c19170380bd75d3feb2b4cb32d960013e3186096592555b50426000908152602081905260409020545b905600a165627a7a7230582066a75090bc6b613af8b8c8188459c427f559e3a46e2a6a0823d161dfedb725680029
test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_93044484738a6f18796301fa392083b24ac273df198eb45d05325d74f9f7da84.sol":{"keccak256":"0xa0bdd0e75256333095a26625c1bb3294367622015b542c15ab7d456d826b2c9b","urls":["bzzr://66974b85c8011d57d4d184aceb2743631f8a05014564087c6a33d67ba68e5b64"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
test_932b5dd2ee38999135ed865eb6f331633b076b261f2ef5d094cfa1af31752132.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol:C 6060604052341561000f57600080fd5b5b6101418061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114610048578063f8a8fd6d1461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b6100fc565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60075b90565b600061011361010d63ffffffff8216565b505b5090565bfe00a165627a7a723058209540fa62fbbc5a41f2561b83e300a7af46e40545061338a25f57302631b505970029
test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_93f2736966f276e8af69210c764c09935387de7cc6e938dab374215918b74734.sol":{"keccak256":"0x155c66211f17bf8646b3844f8cc5eb2d69190e6b9f2ffc3fd7486381539827a3","urls":["bzzr://f42ea623673ada831ecf767c12301f99f17f3a42b6e906711ea9d6fa93f627ff"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Child 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c29855788114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820873092bcd68cbcecaf3a811aa5eff77aaa5881951c8f014ea3e6deb91d3d83bc0029
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Child {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":"Child"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":{"keccak256":"0x96f6800dcc044f104be35ec501eb020edc61319363f86ae84fb515a102cd04d0","urls":["bzzr://e83796c300b44cfe14dcf8049de34d98464aabc570ee3dca179324d41532f2ab"]}},"version":1}
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Parent 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058200672578554bfb9748163d520cdecad1200adff4cee357e1867d8d2c1f2e3a09c0029
test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol:Parent {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":"Parent"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_943f64a2407c7cb528e2602b51644aa3c84de9d9fa34e96cfbc9ee107544b095.sol":{"keccak256":"0x96f6800dcc044f104be35ec501eb020edc61319363f86ae84fb515a102cd04d0","urls":["bzzr://e83796c300b44cfe14dcf8049de34d98464aabc570ee3dca179324d41532f2ab"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol:c 6060604052341561000f57600080fd5b5b61023d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166202293b811461005257806331955a2014610070578063b81bba7914610085575b600080fd5b341561005d57600080fd5b61006e6004356024356044356100f1565b005b341561007b57600080fd5b61006e61012d565b005b341561009057600080fd5b61009b600435610141565b604051604081016100ae818380876100c9565b90506100bf816020840184866100c9565b90508093506100dd565b836100d3826100e2565b8452949350505050565b6100e5565b90565b50505060405180910390f35b826100fd600082610175565b5082821015610127578060008381548110151561011657fe5b906000526020600020900160005b50555b5b505050565b6000805461013d9160019161019f565b505b565b60015460008183101561016f57600180548490811061015c57fe5b906000526020600020900160005b505490505b5b915091565b815481835581811511610127576000838152602090206101279181019083016101f0565b5b505050565b8280548282559060005260206000209081019282156101df5760005260206000209182015b828111156101df5782548255916001019190600101906101c4565b5b506101ec9291506101f0565b5090565b6100e291905b808211156101ec57600081556001016101f6565b5090565b905600a165627a7a7230582043f44abbbce90906db9d797711f32570513beb892c18595452b7f146472ce4f10029
test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"length","type":"uint256"},{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"setData1","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"copyStorageStorage","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getData2","outputs":[{"name":"len","type":"uint256"},{"name":"val","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9495947caffd1df6d7c171e362f76167cd5b1d95abefd8f079e45a533ee39c12.sol":{"keccak256":"0xd4318f0d641cbb4668333a36b3e07fba5d641117b8e8d694482eb92988e43b5f","urls":["bzzr://4786dd00a2ba11b9d37742765deafdeb53fcc39c20ba960bd04d968879bb3148"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol:C 6060604052341561000f57600080fd5b5b6101028061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600060c7565b600081801560b4576001811460bc5760ac600184036093565b8302915060c1565b6001915060c1565b600191505b50919050565b60ce826093565b90505b9190505600a165627a7a723058206df5abe6935d8b027063152ce0fffc8552f7e3223d276d77064ab93424e5f36d0029
test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_94ea5ad50cfe1a832f1a2b1df436a293413516c8a55eb9bda79da3b5423ff6e7.sol":{"keccak256":"0xcea57482fe15eca781d68268733f768be1faed5d86dd3b5aa5ac28712985a4bd","urls":["bzzr://6d23d49fe7ccc185455031964bf87e98e1765e112de585a6f5fb509901942eb7"]}},"version":1}
test_950faa97f622661ecab89eb5beb514c7a67f3557f2564bb8a5b2df21dfe2f6eb.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol:C 6060604052341561000f57600080fd5b5b6101bf8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610053578063a56dfe4a146100ac578063c5d7802e14610107575b600080fd5b341561005e57600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a1565b151590565b505060405180910390f35b34156100b757600080fd5b6100bf61017d565b60405160208101610079818380866100dc565b9050809250610097565b8361008d826100f5565b8452949350505050565b6100a1565b61ffff1690565b505060405180910390f35b341561011257600080fd5b61011a61018d565b6040516020810161007981838086610137565b9050809250610097565b8361008d82610150565b8452949350505050565b6100a1565b90565b505060405180910390f35b600760015560008060025b6002811461017357fe5b600192505b505090565b60005462010000900461ffff1681565b600154815600a165627a7a723058207504670a2fb8ed4631bfbee2cd880d644937fcee562b25c29a55aea0dd003b5c0029
test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"uint16"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"z","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_951748b87d70d64eadb0701021329110310852a2cc77fce741fa700ba06456ca.sol":{"keccak256":"0x8baed28f8a5724542a5bf9fa5014a1cef9b7ce93a90bc3941804a2d1d09818bf","urls":["bzzr://8256ea91a67a972468971c61e6353ce628b7bd1c4c27f45daf5bb7044b46603a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol:test 6060604052341561000f57600080fd5b5b600080546002919060ff19166001835b02179055505b5b60cd806100356000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166367cb61b68114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805460ff166003811115609b57fe5b90505b905600a165627a7a723058203af8ff48887ac99c6ef60a478df4f61dcb7398011beb8cc3179036b5078cf6fa0029
test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getChoice","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9550248b1f5fbe8c2ac9eb9eaee97497ca94dbc9cac1c2c5de095a99d0b34f7b.sol":{"keccak256":"0x17f5d8db9ab9f75813a1ff5e4e8129ce6f8bf19bc68c62c70ec79f500a539b76","urls":["bzzr://86fa0553eacce2689315a7ace4bc4f60c34c89abeeca870c51d4b03b7e245567"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582017cf6854b5801b52265dc66db536cb5b8af95f3c43ddc2cc3de422c05afac5980029
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":{"keccak256":"0x03308c180ad5e6aff2a960dac5e73937907dc8077347f40e19fee18282ad278d","urls":["bzzr://7e410d439375d3ec18b78f97e0ab8a058f52e80d53a8263de723a3420bece33c"]}},"version":1}
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:Test 6060604052341561000f57600080fd5b5b6101238061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663821cd9a78114603c575b600080fd5b3415604657600080fd5b60a960048035906024803515159177ffffffffffffffffffffffffffffffffffffffffffffffff19604435169160649160a43580830192908201359173ffffffffffffffffffffffffffffffffffffffff60c435169160e43590810191013560e7565b6040516020810160ba8183808660c3565b905080925060d5565b8360cb8260d9565b8452949350505050565b60dc565b90565b505060405180910390f35b60055b99985050505050505050505600a165627a7a723058205ab5b7e08667aa87c7d09a0bb5719984636e047ee694e0ef427a7d818889d9710029
test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"},{"name":"","type":"bytes8"},{"name":"","type":"bool[2]"},{"name":"","type":"uint256[]"},{"name":"","type":"address"},{"name":"","type":"address[]"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9571332dcf83bf553ac5dccc0b8c9975b41b965583a1c8eba7ea79720bf015d0.sol":{"keccak256":"0x03308c180ad5e6aff2a960dac5e73937907dc8077347f40e19fee18282ad278d","urls":["bzzr://7e410d439375d3ec18b78f97e0ab8a058f52e80d53a8263de723a3420bece33c"]}},"version":1}
test_9574f689a972a457909962dbf85db2b324e77803035da7bf5f424bbd67223b2b.sol: ERROR
test_958db3ac1513d329da029c3955eeae176844da5e9003ce619bb2546246003d53.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol:test 6060604052341561000f57600080fd5b5b6101288061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634f8dd50d81146046578063b3de648b146097575b600080fd5b3415605057600080fd5b605960043560e8565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b341560a157600080fd5b605960043560f2565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b600881025b919050565b600781025b9190505600a165627a7a72305820d57593c9076a057e193733b2b96b471bb30507ef327a6007aba8c56332df50320029
test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"uint256"}],"name":"c","outputs":[{"name":"e","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_95a8c629853eab908b3275a2c4f6a11915c0d48ac5983b6677a80b6cb838bb42.sol":{"keccak256":"0x844197c659449e894182bf36b03506762e82cd2e6105a16bde4cf64f8910724f","urls":["bzzr://c94cd69e4e0a4d3e36f76ac95dad3d2c8bcdc231d21cbfc56ed7f2aa9e9f9353"]}},"version":1}
test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol:test 6060604052341561000f57600080fd5b5b60a38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b60006002600360001960066007600887181617015b06811515606f57fe5b0490505b50505600a165627a7a72305820a8041d9271c199dae3ec423ad21d688a4a3b94462865f54a0eacd074e29acc6d0029
test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_95ceac2d39afaac979b401bf780245650c0b6229623ff9d9dd2d88d7701fdff8.sol":{"keccak256":"0xf7ad1b673d5e3290fdeef1116d971746e525706aa86c1d90fb78e7018387fea2","urls":["bzzr://c473a35e85849f5274a889e2382091ed4c3fe7d779ce39147885fc2b1c84937d"]}},"version":1}
test_95d10d87edc55d42f9ccc0922a38150c0142cf54b69384c69b6775c63fba7f32.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:c 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a7230582002196bfa2138554784858b91e46cc5317a60f3e2fa9ab9361897cde15deb79240029
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":{"keccak256":"0xd4a373a92ca8f479fe0ae64130bb0aac575cd9cbbb1728db91962989ff0a01c8","urls":["bzzr://161e5c198c0823a2c1571f1242cf96c461c6c7194563d980eaeacdee5435be3e"]}},"version":1}
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:d 6060604052341561000f57600080fd5b5b60ec8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000630dbe671f81604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151560a357600080fd5b6102c65a03f1151560b357600080fd5b505050604051805150505b5600a165627a7a72305820d97c548bd21a611f36b7b0e0be7ddbf58e15a48a32c1fc323bc12bd186c5583d0029
test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol:d {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":"d"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_95ebea1272eaddd337c421b96405721b4e3d772817985d6f299ca38c9a95e60a.sol":{"keccak256":"0xd4a373a92ca8f479fe0ae64130bb0aac575cd9cbbb1728db91962989ff0a01c8","urls":["bzzr://161e5c198c0823a2c1571f1242cf96c461c6c7194563d980eaeacdee5435be3e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol:c 6060604052341561000f57600080fd5b5b6103818061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166352efea6e8114610048578063d9c55ce11461005d575b600080fd5b341561005357600080fd5b61005b6100b4565b005b341561006857600080fd5b6100706100c2565b604051602081016100838183808661008d565b90508092506100a1565b83610097826100a6565b8452949350505050565b6100a9565b90565b505060405180910390f35b6100bf6000806101fc565b5b565b600060036100d0828261021e565b506004600060028154811015156100e357fe5b906000526020600020900160005b506100fc9082610248565b5060056000600281548110151561010f57fe5b906000526020600020900160005b508054600390811061012b57fe5b906000526020600020900160005b506101449082610272565b5060086000600281548110151561015757fe5b906000526020600020900160005b508054600390811061017357fe5b906000526020600020900160005b508054600490811061018f57fe5b906000526020600020900160005b50556000805460029081106101ae57fe5b906000526020600020900160005b50805460039081106101ca57fe5b906000526020600020900160005b50805460049081106101e657fe5b906000526020600020900160005b505490505b90565b508054600082559060005260206000209081019061021a919061029c565b5b50565b8154818355818115116102425760008381526020902061024291810190830161029c565b5b505050565b815481835581811511610242576000838152602090206102429181019083016102c6565b5b505050565b815481835581811511610242576000838152602090206102429181019083016102f0565b5b505050565b6100a691905b808211156102bf5760006102b68282610311565b506001016102a2565b5090565b90565b6100a691905b808211156102bf5760006102e08282610333565b506001016102cc565b5090565b90565b6100a691905b808211156102bf57600081556001016102f6565b5090565b90565b508054600082559060005260206000209081019061021a91906102c6565b5b50565b508054600082559060005260206000209081019061021a91906102f0565b5b505600a165627a7a723058201c2ac533c1be99144467da8c10df3c6e392dd1024812ae65f0e415282e510c120029
test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9609073f960c2c331e9a761315b74453f0ec56086ccf8cdb50a06f9a696a96c3.sol":{"keccak256":"0x7bc9a03b7e1efbd02fc09d9316eff9a52d80b8a79a885fe8fe4163a118c125d3","urls":["bzzr://584c2c9a3140212b7d54236a0d1d1a620e5fc084015e079d45d6ea224ae07c6b"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol:test 60606040526000805460ff19166080179055341561001c57600080fd5b5b60c28061002b6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e5aa3d588114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60000b90565b505060405180910390f35b60008054900b815600a165627a7a723058200e98bc8e9f35070bea7b4f60b03f16b639fa2ce26be1cafef3c61b3c0af7bb160029
test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"i","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_963876144947f6d3ba8ae08efad42f15503fea100f8cfc8da522613d0dd3bcb8.sol":{"keccak256":"0x4bfd0abeda0680e2b4f79ca79da3cb7fa40b88ff30cf89d33947e396252d2e11","urls":["bzzr://269b09d56de7a408d277bb866028820addf32f3bca49dabc09a8d27516fffbf7"]}},"version":1}
test_9643829129f2a4d912ada8acc47cbe07e7372ae6f3d28a571ecbebe235f99bf8.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol:Test 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166399dbd65d8114603c575b600080fd5b3415604657600080fd5b606e7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff196004351660cb565b60405160208101607f818380866088565b9050809250609a565b83609082609e565b8452949350505050565b60c0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b805b9190505600a165627a7a72305820b656e90689b99a9e5734e4b8072b77de8dfbd2df29d75b75ad77755aa15012e90029
test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes4"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_96978bfcf15030f3b84aa66fcdf633c560554e64cf4df167bcad717d9578f45b.sol":{"keccak256":"0x917f2892be249011ed96978140e7de68716443fac401ee23edbc04fe5b1ae937","urls":["bzzr://31e752731aa728e368a276fd3536d005f8150edc6ee14de0fc08f9b62571adfb"]}},"version":1}
test_96f72ff945f87d3ab91a1075f1c42e571556097b85d742a299b9f4d1f8ecfefa.sol: ERROR
test_9726eddf145221f6487ad0a403593dccd21214e544236132de5ec2a0c292d00f.sol: ERROR
test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol:test 6060604052341561000f57600080fd5b5b60ad8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b6007811115606e5760636008820a6078565b600190810190556074565b60016000555b5b50565b6001545b9190505600a165627a7a7230582016c1b5d6b3d09f6de9be15062d755d98b3f8ec57a3b6b43e0ee88afe79f48e290029
test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_97a151f5594b71ff743083dcb37b490900cc13331307db1aa8decde32ca399f2.sol":{"keccak256":"0x07bb877d24261c3754289074e20dc790226dee703543127ced4a28965a9fa756","urls":["bzzr://93f6be73c3cbba834d7f071b537ed5f7b28733a7363994dd46ecf016f9cf6643"]}},"version":1}
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:A 60606040523415600e57600080fd5b5b604880601c6000396000f30060606040525b3415600f57600080fd5b601a5b60016000555b565b0000a165627a7a72305820699d6932c6f8f13ff00072bc7780af6f45a24f2d56b9911ad741e58106a176aa0029
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":{"keccak256":"0xd3fbdcb203cefe16ce95dbedd909ac6326d9080e877943e39aae8835e7eeb133","urls":["bzzr://e953e3401a7bfe2b967829437b1dd577f00e7448b2adada4beb8f85847a5e867"]}},"version":1}
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:C 60606040523415600e57600080fd5b5b604880601c6000396000f30060606040525b3415600f57600080fd5b601a5b60026000555b565b0000a165627a7a723058201101fa95dc6292a181951fe947d5a83afb72beba4e6c64ef331ec94a880ad1cc0029
test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_97bc11372ddd27733bf2f09170329d41ea2ffd5b4552c470337d4037bd890991.sol":{"keccak256":"0xd3fbdcb203cefe16ce95dbedd909ac6326d9080e877943e39aae8835e7eeb133","urls":["bzzr://e953e3401a7bfe2b967829437b1dd577f00e7448b2adada4beb8f85847a5e867"]}},"version":1}
test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol:test 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b601260026040517f6162630000000000000000000000000000000000000000000000000000000000815260200160006040518083038185876187965a03f1505050505b5600a165627a7a72305820c030ddc8d847d37b8bc7c4e220a05f975cf8607591ea4cd82a16903cf3b70a140029
test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_97f360df35730e61e6d33c105e16fc036ef4e20fdad59de2a10d75465c972e6c.sol":{"keccak256":"0x0dd6596ebbd7b9c3be1f6679680e64a44bec9ab3268134f26c6d3c84354cae23","urls":["bzzr://ac4e4c0d0dfa3efc2ceadabcda9d7631f51b0a94a277aaed9dcbf0331e96d90e"]}},"version":1}
test_98d2c73c973197709fd29998be82bb9b1166f5332fa2472818167c11b1f2f7ff.sol: ERROR
test_98ff12a82bf8af0b4ff8430565f9fd958c35a1a53f037c533e4ca3afa301e44e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol:test 6060604052341561000f57600080fd5b5b6101748061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063a58504751461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b61012b565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b600061013161012461010c808063ffffffff8516565b63ffffffff16565b63ffffffff16565b63ffffffff16565b91505b5090565b60025b90565b6101385b90565b61013f5b90565b61012b5b90565bfe00a165627a7a72305820f8170ffe348f589e89ca7039762c7a29b689f50a8196b317da79eb9a7c8859990029
test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f0","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9917eca4e58d581b0493c8ea0ae446983b95ac6d6c5546bfdb55156e87ca3c00.sol":{"keccak256":"0xa28f6b8e8ef10d593618488871059dc81136737b31521108bdb09a939be8e4ed","urls":["bzzr://faf61abc130f35a54449439b1369175f5f2620ce336dd6703ddc402ffad7a99f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol:C 6060604052341561000f57600080fd5b5b6101618061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100ca565b60405160808101610063818380896100a0565b9050610074816020840184886100a0565b9050610085816040840184876100a0565b9050610096816060840184866100a0565b90508095506100b4565b836100aa826100b9565b8452949350505050565b6100bc565b90565b505050505060405180910390f35b6000805462ff00001961ff001960ff1990921660fe1791821661010060ff93850b850360020284168102919091179182166201000092850b6138b802850b841683021780855580850b850b94918104841693928104820b90910b916301000000909104165b909192935600a165627a7a723058203a29775207c13e07e24d1524d983fee2d7a3f3083399f421ead80e668e5c25fa0029
test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x1","type":"uint256"},{"name":"x2","type":"uint256"},{"name":"x3","type":"uint256"},{"name":"x4","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9961c05677eb1a49f78b940f3c73aa66e0a919c2dcb6108c4835c1a36bb57d36.sol":{"keccak256":"0xb2d70d3a84a6f0689d136ed6bda4d562b69e7d0e012e0f3a97e79ee22ffa658a","urls":["bzzr://dec4d1c6eeed0ec865a5470a6cf4d12d4c06f5e214a4173b8c5c0363eca76bfd"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol:C 6060604052341561000f57600080fd5b5b60e78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c60a0565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6095565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff30165b905600a165627a7a72305820a595a9ec8aa1d9a6b5203e8446d4002cadae3796fa843301adf8c9572256f3420029
test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_997e0d6a4d157bc5ae5034e8e16148f7226a19f4558777b6d219f48cb5e2a436.sol":{"keccak256":"0x2f73f5cc2f4bfb1dcf8d073adc8d1fe85236f7481cdb3bb03b34955704f1d372","urls":["bzzr://09486f8f6c9a910575d18a26fc2965c60019f78a0b54c123c6faac1c437b1255"]}},"version":1}
test_998fa7ad119f89f9b72ec7bd7253fd9581e9aff7b6391bab26423c09d16fe6a2.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a72305820c728d16efce374ff65bab83c846de0d1bb32b866680c37cf7f2df3185fabb0b40029
test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Mul function"}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_999f1d87a47d791149fcde607713e2bd485404156770ad9166f326cc8b5f3f40.sol":{"keccak256":"0x1c4b52b3438a4a6956b0c0b69cf1c3ce5e65d4acf7211246e73e41135453ada1","urls":["bzzr://d3b46a2a4297bf2defa5803f0358a94c7243db3bdc55c42685c30cf6bf326c87"]}},"version":1}
test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol:test 60606040523415600e57600080fd5b5b64e8d4a510005b505b60368060256000396000f30060606040525b600080fd00a165627a7a72305820bfa08aaf936c7812ac175e02a06124b9cc2f744ba01980d46c144eec4e7afeb60029
test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9a03e5cd0014572445ff366978ffe881ff651cbb85afdc1447818199aacde8ea.sol":{"keccak256":"0xc4494f83e042e6f65841777159b55dbd8409a4346aab344737fcbebea186a4e1","urls":["bzzr://fad47c39b8b9a807c7ed42571ec7e11a1b33ceeddcf5a9ebdb069a0f18a0d3a9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol:C 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6002805b50905600a165627a7a7230582046e605628b71ce50d1926a1922b09e1e0ac93d6b3e9c57d73c2a31b2f386aadd0029
test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9a0ae9bdc645d3c53caa5894a0ef0642e9a3c8f2fada617cedc91f4ce74ee240.sol":{"keccak256":"0x7ff9b78f119102ae791d33038fb5e4bb7b6e22ed1398ddee9a3d70f7bce0bd34","urls":["bzzr://ad4563304212a48a8f279373091791e4d76af1f1deb14c5da332d148a2f56eb8"]}},"version":1}
test_9a1941c271bbc9c7168726b1e845a8e29164d1beca14ea669243d8401a0ccb51.sol: ERROR
test_9a72102700f174a263b424dd72e71d8e7b01a23737673cd8451a3bb01aeec2db.sol: ERROR
test_9aa997fb96961a011327c2a1f46b0814c69dff164abcdfc5b217ccf367618f10.sol: ERROR
test_9acc9ee29c0221d9e7b53b5f219b76a2b8a4a16c3715d1250736452c380f45d8.sol: ERROR
test_9affe3c7fa60e61edb13b5f669efc149128b90a18ae4b9b4a650e1dcdddff258.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol:test 6060604052341561000f57600080fd5b5b60026000555b5b610108806100266000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312ae63978114603c575b600080fd5b3415604657600080fd5b604c60ba565b60405160808101605d818380896093565b9050606c816020840184886093565b9050607b816040840184876093565b9050608a816060840184866093565b905080955060a5565b83609b8260a9565b8452949350505050565b60ac565b90565b505050505060405180910390f35b60008054600181905560038083556002819055909182919081905b50909192935600a165627a7a7230582036185c82d8323b1dc7e75619b2a837eba4f16506c6388493d35a0352ddaee7870029
test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"assign","outputs":[{"name":"ret_local","type":"uint256"},{"name":"ret_global","type":"uint256"},{"name":"ret_global3","type":"uint256"},{"name":"ret_global1","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9b368c95d1e11b7f12dfd2a625aa327632ab342a99ce0da3db3ffef0fa7f6c33.sol":{"keccak256":"0x5d32c876288454f848e26076b22befd6d038da82294aed796cc6de2bf7bdff36","urls":["bzzr://f39081e83dfa0ebcd87b6de5d4f23b556eea554eeb3f304a0672097eabc4426f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol:c 6060604052341561000f57600080fd5b5b61073a8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354c516898114610053578063a38fc890146100b9578063d1011ea71461011f575b600080fd5b341561005e57600080fd5b610075602460048035828101929101359035610176565b6040516020810161008881838086610092565b90508092506100a6565b8361009c826100ab565b8452949350505050565b6100ae565b90565b505060405180910390f35b34156100c457600080fd5b6100756024600480358281019291013590356101d9565b6040516020810161008881838086610092565b90508092506100a6565b8361009c826100ab565b8452949350505050565b6100ae565b90565b505060405180910390f35b341561012a57600080fd5b61007561022c565b6040516020810161008881838086610092565b90508092506100a6565b8361009c826100ab565b8452949350505050565b6100ae565b90565b505060405180910390f35b60006101838185856105a5565b5060008281546001816001161561010002031660029004811015156101a457fe5b8154600116156101c35790600052602060002090602091828204019190065b905460f860020a911a81020490505b9392505050565b60008383838181106101e757fe5b905090013560f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660f860020a900490505b9392505050565b6000602361023a8282610624565b50607760f860020a026000601f815460018160011615610100020316600290048110151561026457fe5b8154600116156102835790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a84040217905550601460f860020a026000602081546001816001161561010002031660029004811015156102c857fe5b8154600116156102e75790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a84040217905550600160f860020a026000601f815460018160011615610100020316600290048110151561032c57fe5b81546001161561034b5790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a84040217905550600860f860020a026000601f815460018160011615610100020316600290048110151561039057fe5b8154600116156103af5790600052602060002090602091828204019190065b8282829054901a60f860020a02179250601f036101000a81548160ff0219169060f860020a84040217905550600160f860020a026000601e815460018160011615610100020316600290048110151561040457fe5b8154600116156104235790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a84040217905550600360f860020a0260006020815460018160011615610100020316600290048110151561046857fe5b8154600116156104875790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055506000602081546001816001161561010002031660029004811015156104c457fe5b8154600116156104e35790600052602060002090602091828204019190065b9054901a60f860020a0260f860020a90046000601f815460018160011615610100020316600290048110151561051557fe5b8154600116156105345790600052602060002090602091828204019190065b9054901a60f860020a0260f860020a90046010026000601e815460018160011615610100020316600290048110151561056957fe5b8154600116156105885790600052602060002090602091828204019190065b9054901a60f860020a0260f860020a900461010002171790505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e65782800160ff19823516178555610613565b82800160010185558215610613579182015b828111156106135782358255916020019190600101906105f8565b5b506106209291506106ed565b5090565b81546001816001161561010002031660029004825481601f1061067f5782601f10610664575b826008026101000360020a809104028280011783556106e7565b60ff19168360005260206000205581800160010183556106e7565b82601f106106af575082600052602060002080549082601f01602090048101906106a991906106ed565b5061064a565b508180016001018355818115116106e757601f016020900481601f016020900483600052602060002091820191016106e791906106ed565b5b505050565b6100ab91905b8082111561062057600081556001016106f3565b5090565b905600a165627a7a723058202db116111c3b3b0e5dfe11c1e53a829ddbb0f5aed8df7179c53f43c0279293dd0029
test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg","type":"bytes"},{"name":"index","type":"uint256"}],"name":"storageCopyRead","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"arg","type":"bytes"},{"name":"index","type":"uint256"}],"name":"direct","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"storageWrite","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9b3d78d3ce31eacc524a28c36b60825b3f4062717d9b6801535c3392c950eedc.sol":{"keccak256":"0xb5f250fdf2082a9953253e316d0f0966e9b9c644b107576e47aebf86b2b330f6","urls":["bzzr://12e691e26f037053b81a0d8eb3329e93facb2d83a755afcb25bc6f68c18c3fce"]}},"version":1}
test_9b4b9a7b758883d4ac7822c3b19dde789be3097275183ad69bd803dde93db547.sol: ERROR
test_9b8035ba320a5e3fa60d2dca08cb04d40ab1aed5ed0c30477b70e671fc2204ea.sol:test 
test_9b8035ba320a5e3fa60d2dca08cb04d40ab1aed5ed0c30477b70e671fc2204ea.sol:test 
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:C 6060604052341561000f57600080fd5b5b6101788061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600061009e610121565b60076040518059106100ad5750595b908082528060200260200182016040525b508152600881516003815181106100d157fe5b602090810290910101526100e481610103565b80516003815181106100f257fe5b9060200190602002015191505b5090565b6002815160038151811061011357fe5b602090810290910101525b50565b60206040519081016040528061013561013a565b905290565b602060405190810160405260008152905600a165627a7a72305820bf5cb0188a0209bba0ee67f6ac48f1e0ce42edced5c2bd9670c04b9531cd76db0029
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":{"keccak256":"0xc0921ae77902b7abd00e02c0768d335d92babc7d739fdd69b509e205615bf12b","urls":["bzzr://86720fd237aeeeb2834d6440588cba8ae211d3ec46169469df024ada2f73521c"]}},"version":1}
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058201137e2c9febfcc01f456d93e328ed0f582d7b84e6d348a1bb1dd062c3899771e0029
test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9bf43f01211803143d88332dc7502413054236c242bcb604afdd0b6cfcfd0763.sol":{"keccak256":"0xc0921ae77902b7abd00e02c0768d335d92babc7d739fdd69b509e205615bf12b","urls":["bzzr://86720fd237aeeeb2834d6440588cba8ae211d3ec46169469df024ada2f73521c"]}},"version":1}
test_9c0239e7e77d910595c9b93ea0b073e4a84033eaed3d45c8aed31be23924bf3a.sol: ERROR
test_9cc26bc479d26d1a4073e4a523106dd40e90e7e9b2aeb120857ed6ec4029796f.sol: ERROR
test_9cd0e8a951ea943d3f339256cd1d7a9ca2c5481322f6d1f4e45aee7220d93d41.sol: ERROR
test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000315b505600a165627a7a723058202fd6a82f17e4936f624676e00f0632f7ad8fd0f52cf973e83f79d0d2f5e0a4c60029
test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9ce10c4103f440818447d256ac7d269e62c18fe2fd91c22b9d64d2e1b3a4ca27.sol":{"keccak256":"0xdc02fa014144444fcdff3009926ed05ecc89c100fdb1891e37159a228622225b","urls":["bzzr://95e10050dd52d3793a5df1b0e7aeb63ae8d3b0becba942e147632e63ec0e9a5e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol:test 6060604052341561000f57600080fd5b5b60d78061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600160025b82811160a457908102905b6001016092565b5b509190505600a165627a7a72305820e5325af9f9d121bbf64ad0ec3a2569d5312b743796c7d4480f8c4887160a17d90029
test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"nfac","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9d0626c7d3b2c47bd2c679a57bbf421f36abec186641fac6b21f661a745e6bb2.sol":{"keccak256":"0x55f01d02c0d0537d45375687b70a7743aca9b6f7ae32d5f4d80ed110550f996e","urls":["bzzr://9098b1407f1ded3d416d3c5bd764481ad9b91f408ab02d3763266f293199926f"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:A 6060604052341561000f57600080fd5b5b6101468061001f6000396000f300606060405236156100495763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610052578063e2179b8e146100ab575b6100505b5b565b005b341561005d57600080fd5b610065610104565b6040516020810161007881838086610082565b9050809250610096565b8361008c8261009b565b8452949350505050565b6100a0565b151590565b505060405180910390f35b34156100b657600080fd5b610065610114565b6040516020810161007881838086610082565b9050809250610096565b8361008c8261009b565b8452949350505050565b6100a0565b151590565b505060405180910390f35b600061010e610114565b90505b90565b60015b905600a165627a7a723058200855cc5a20eddb43fa49bade3cea27724dc7531f7577a312a806a5e6896e281c0029
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[],"name":"A","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":{"keccak256":"0xbfaee7947fb3af70ff1f2700e51680d84be00895b055af8ff47ed22404eefc24","urls":["bzzr://4a3abac3d65e769e3489f9c79590f470b8d3701b12b9290f38677b9d223bdd32"]}},"version":1}
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:C 6060604052341561000f57600080fd5b5b61016c8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663fc68521a811461003d575b600080fd5b341561004857600080fd5b61006973ffffffffffffffffffffffffffffffffffffffff600435166100af565b6040516020810161007c81838086610086565b905080925061009a565b836100908261009f565b8452949350505050565b6100a4565b151590565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff81166326121ff083604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561011d57600080fd5b6102c65a03f1151561012e57600080fd5b50505060405180519250505b509190505600a165627a7a7230582032648412b743fa9c46f31c9c70e35ee548b5c95215bc2647d52974e94c7f47130029
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_interfaceAddress","type":"address"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol":{"keccak256":"0xbfaee7947fb3af70ff1f2700e51680d84be00895b055af8ff47ed22404eefc24","urls":["bzzr://4a3abac3d65e769e3489f9c79590f470b8d3701b12b9290f38677b9d223bdd32"]}},"version":1}
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:I 
test_9d12d0cab3fefaf689da568a02f64acd3e37c0ca674def57e43b2272eb9ccb24.sol:I 
test_9d4fdcd41285dd4c4f3d58d1726defef6191fa82620c72d73f5723afafa36efe.sol: ERROR
test_9df07950c11b7d3b2685d4f3a848707cb32b322fc5b63741991f7d776c0d0207.sol: ERROR
test_9e5c082e3092d0461e04042e5311929529ade5ed6bffa8b506d8a0467f87934f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol:c 6060604052341561000f57600080fd5b5b6104bb8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166363e2359a811461003d575b600080fd5b341561004857600080fd5b61005b600480356024810191013561009f565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b60006100ac8184846101c7565b50600080546100bd9160019161021f565b50600180546100ce9160029161027f565b506002805460019081106100de57fe5b906000526020600020900160005b50805460049081106100fa57fe5b906000526020600020900160005b505460028054600190811061011957fe5b906000526020600020900160005b508054600390811061013557fe5b906000526020600020900160005b505460028054600190811061015457fe5b906000526020600020900160005b508054600290811061017057fe5b906000526020600020900160005b505460028054600190811061018f57fe5b906000526020600020900160005b50805460019081106101ab57fe5b906000526020600020900160005b505417171790505b92915050565b82805482825590600052602060002090600402810192821561020e579160400282015b8281111561020e576101fe828460026102dc565b50916040019190600401906101ea565b5b5061021b92915061031b565b5090565b82805482825590600052602060002090600a02810192821561026e5760005260206000209160040282015b8281111561026e5761025e82846004610345565b50916004019190600a019061024a565b5b5061021b929150610381565b5090565b8280548282559060005260206000209081019282156102cb57600052602060002091600a0282015b828111156102cb576102bb8284600a6103ab565b5091600a019190600101906102a7565b5b5061021b9291506103f4565b5090565b826004810192821561030a579160200282015b8281111561030a5782358255916020019190600101906102ef565b5b5061021b92915061041e565b5090565b61009191905b8082111561021b576000610335828261043f565b50600401610321565b5090565b90565b82600a810192821561030a579182015b8281111561030a578254825591600101919060010190610355565b5b5061021b92915061041e565b5090565b61009191905b8082111561021b57600061039b828261045b565b50600a01610387565b5090565b90565b82805482825590600052602060002090810192821561030a579182015b8281111561030a578254825591600101919060010190610355565b5b5061021b92915061041e565b5090565b61009191905b8082111561021b57600061040e828261046d565b506001016103fa565b5090565b90565b61009191905b8082111561021b5760008155600101610424565b5090565b90565b5060008155600101600081556001016000815560010160009055565b5061046a90600a81019061041e565b50565b508054600082559060005260206000209081019061046a919061041e565b5b505600a165627a7a7230582057aae11f5591ff2a6ccd80c1f907fbe4565a475a44523bad5d2dbe4bcfe08bb70029
test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"d","type":"uint256[2][]"}],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_9f97e57a9823dd6550093ff071f092ba5f4abe2108164158d64f3874ff731fac.sol":{"keccak256":"0xf2fcedb181d6510e956503970fd0eb885027ad0d50d66c7256503bbb53ed228a","urls":["bzzr://f7ffcd8cbbd15991582fcbe17f297b600eba7e1041ab4a638e8f5559298502a3"]}},"version":1}
test_9fef6910d0cf850f405646dca5b0f40f2b849245105b1ff3a23b62c495ab9fa8.sol: ERROR
test_9ff93aa9996f9cc7eea14b5fcaa482b846f9f781d7dbf9b824e7bb30ba3e5812.sol:Interface 
test_9ff93aa9996f9cc7eea14b5fcaa482b846f9f781d7dbf9b824e7bb30ba3e5812.sol:Interface 
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:A 60606040523415600e57600080fd5b5b6101428061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6054606d565b604051809103906000f0801515606957600080fd5b505b565b604051609a8061007d83390190560060606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058207c2ac620288755e10718a86fbcda496559d5880e14388ddf147c3e03286f33510029a165627a7a723058205a474fb0ca7eb56be37050e3cfaf27650cf765f31bf961d598920a6665dc9a580029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:B 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058207c2ac620288755e10718a86fbcda496559d5880e14388ddf147c3e03286f33510029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:C 60606040523415600e57600080fd5b5b6101428061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6054606d565b604051809103906000f0801515606957600080fd5b505b565b604051609a8061007d83390190560060606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058207c2ac620288755e10718a86fbcda496559d5880e14388ddf147c3e03286f33510029a165627a7a72305820525474a224bd467e77692ca9d7e410e6787ad0099c6e59f1c5726aaa06a344820029
test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a00b1297f7708851a88e92eaa7906db950313dbe41bce335042c86a93b96145e.sol":{"keccak256":"0xce2d74169b60cc845cde74590b285063d840a7a2d8b872e4941a42bd32f28dda","urls":["bzzr://8b0339fe2958061b671c9ad02869ec74e42dde704fa8683c25986ff2b7f739f5"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol:c 6060604052341561000f57600080fd5b5b6101818061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100a6565b604051604081016100638183808761007e565b90506100748160208401848661007e565b9050809350610092565b8361008882610097565b8452949350505050565b61009a565b90565b50505060405180910390f35b60008060048160085b0160005b50556100c260096000816100eb565b5060098054925060088381106100d457fe5b906000526020600020900160005b505490505b9091565b828054828255906000526020600020908101928215610123579182015b82811115610123578254825591600101919060010190610108565b5b50610130929150610134565b5090565b61009791905b80821115610130576000815560010161013a565b5090565b905600a165627a7a723058207851ebfe1353c72453077e28bebe056c2f02926f88a341c14c10fd121e65e7360029
test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a01ed668ae14956648b1b1497d7cc75bfe87c1023d4e6e533ac4ec3bb076bab1.sol":{"keccak256":"0x078e503ae990ea90515cf2a2086a05db55e12193bca38f7b96f9c29e7b7e01c0","urls":["bzzr://614515d1231ce8b286ca60844bf5daa40840434310fc788b4f7178d22ac47094"]}},"version":1}
test_a05a3293a803db028f8d0c1778229a86a02fe367d66bdac135b35bd4da2dbdbe.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:receiver 6060604052341561000f57600080fd5b5b6101018061001f6000396000f3006060604052361560465763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb58114605d578063cba2534f1460ab575b3415605057600080fd5b605b5b60806000555b565b005b3415606757600080fd5b606d60c0565b60405160208101607e818380866087565b90508092506099565b83608f82609d565b8452949350505050565b60a0565b90565b505060405180910390f35b341560b557600080fd5b605b60043560c6565b005b60005481565b60008054820160010190555b505600a165627a7a723058205b8bdb0a617e5a550c48d1024f6aea180a764fd353aba854ae5201af90660f210029
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":"receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":{"keccak256":"0xfb492946172c1469e2aa8a3f4142d91ae96716ed220bc0bec8b32a5492950fa0","urls":["bzzr://459dfdf201f2cba600f19a5a8bab6a55e790868e431785be444e2356cf874a24"]}},"version":1}
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:sender 6060604052341561000f57600080fd5b5b610018610054565b604051809103906000f080151561002e57600080fd5b60008054600160a060020a031916600160a060020a03929092169190911790555b610064565b6040516101208061044b83390190565b6103d8806100736000396000f300606060405236156100545763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633c6bb436811461007657806352efea6e146100cd578063d264e05e14610126575b341561005f57600080fd5b6100745b61007060016000366102c4565b505b565b005b341561008157600080fd5b61008961017f565b6040516020810161009c818380866100a6565b90508092506100ba565b836100b0826100bf565b8452949350505050565b6100c2565b90565b505060405180910390f35b34156100d857600080fd5b6100e061020d565b6040516020810161009c818380866100fd565b90508092506100ba565b836100b082610116565b8452949350505050565b6100c2565b151590565b505060405180910390f35b341561013157600080fd5b6100e0610221565b6040516020810161009c818380866100fd565b90508092506100ba565b836100b082610116565b8452949350505050565b6100c2565b151590565b505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff166383a6deb582604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101ed57600080fd5b6102c65a03f115156101fe57600080fd5b50505060405180519150505b90565b600061021a600182610343565b5060015b90565b6000805473ffffffffffffffffffffffffffffffffffffffff16600160405180828054600181600116156101000203166002900480156102a25780601f10610277576101008083540402835291602001916102a2565b820191906000526020600020905b81548152906001019060200180831161028557829003601f168201915b505091505060006040518083038160008661646e5a03f1506001925050505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103055782800160ff19823516178555610332565b82800160010185558215610332579182015b82811115610332578235825591602001919060010190610317565b5b5061033f92915061038b565b5090565b50805460018160011615610100020316600290046000825580601f106103695750610070565b601f016020900490600052602060002090810190610070919061038b565b5b50565b6100bf91905b8082111561033f5760008155600101610391565b5090565b905600a165627a7a723058209c430722f1997178ec661cd113722b98a688880224c00b746fcc13edd8eebb9a00296060604052341561000f57600080fd5b5b6101018061001f6000396000f3006060604052361560465763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb58114605d578063cba2534f1460ab575b3415605057600080fd5b605b5b60806000555b565b005b3415606757600080fd5b606d60c0565b60405160208101607e818380866087565b90508092506099565b83608f82609d565b8452949350505050565b60a0565b90565b505060405180910390f35b341560b557600080fd5b605b60043560c6565b005b60005481565b60008054820160010190555b505600a165627a7a723058205b8bdb0a617e5a550c48d1024f6aea180a764fd353aba854ae5201af90660f210029
test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"val","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"clear","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"forward","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":"sender"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a05c6aa4c455550bc540bcdee54176aa84d41053e47869ce0a8ae2e0b7b4b7f3.sol":{"keccak256":"0xfb492946172c1469e2aa8a3f4142d91ae96716ed220bc0bec8b32a5492950fa0","urls":["bzzr://459dfdf201f2cba600f19a5a8bab6a55e790868e431785be444e2356cf874a24"]}},"version":1}
test_a068779a2cfdc1d27117c0425d7421d1c68a7d3d4d603fb414cb1308bfc4f132.sol: ERROR
test_a07c7d8da8638e924675f8887300aa76e5b5b0bb1e32e0cf7b5a2120fbf335c9.sol: ERROR
test_a0b712548b30efb2e4727791cc07779bcd4d9e31efbbda6c3b12f24a9f934bd4.sol: ERROR
test_a0ef0d278e4d56ca36c4abb3c594d99d52c8876b6a03aba134b775e0882baef8.sol: ERROR
test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol:C 60606040523415600e57600080fd5b5b60b18061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6054606e565b604080519081016040526001808252602082015290505b50565b6040805190810160405260008082526020820152905600a165627a7a72305820e414ce2e2180773b95228aa889e03c568bb8aac7c52075cf1202899e9446c0870029
test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a13655ec235e9ade2c184a43db2eb10d05643249976815385a812ba0e511211a.sol":{"keccak256":"0xbfbeee2e066c781b82072e884dac9e357159f700f338765222d199fb1b664a7b","urls":["bzzr://982cb006088788355fea76482c81c8dcd85288dd8d9530c7a8f07f74ce5e46cc"]}},"version":1}
test_a17f098b8a60bf705f49a611efef0df25f6b940fe9b0f7cc101dc3e73a033329.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol:test 6060604052341561000f57600080fd5b5b6101288061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637a9839c281146046578063e9a58c40146097575b600080fd5b3415605057600080fd5b60596004356089565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b341560a157600080fd5b605960043560243560f2565b60405160208101606a818380866073565b90508092506085565b83607b826089565b8452949350505050565b608c565b90565b505060405180910390f35b805b919050565b8181015b929150505600a165627a7a72305820e329f918d571c2eca83f1752be554fcd66f810e70ffdd46e91e185bc9d90bd680029
test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"fun","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a1a7f02d24b779c3ebe50e4b919bc9815f910d03030d291ff22ee4a398a5a43e.sol":{"keccak256":"0x0ca7b924c5208e9c6ace12ad79da61594e0d662d49500e8c627a5cad4eb9e7c1","urls":["bzzr://70de6236bd7632713dab4414a78119b9c956c198b387bf88386d63dd975e93a0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol:test 6060604052341561000f57600080fd5b5b60d68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d406534c8114603c575b600080fd5b3415604657600080fd5b604c609a565b60405160408101605d818380876075565b9050606c816020840184866075565b90508093506087565b83607d82608b565b8452949350505050565b608e565b90565b50505060405180910390f35b60066007600082825b50505090915600a165627a7a723058207febc4ab92458ee4d546010dc303ac3ddbffccdf12bc2a43e1bc0b46c57d8d4e0029
test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"delLocal","outputs":[{"name":"res1","type":"uint256"},{"name":"res2","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a1ddf1ee8e4b5013ca04ef579d212ac76fde1a4127bf0f280675992c338b5902.sol":{"keccak256":"0xb5fb8a4624c03afa63adb7e5184abc7bf0bfafbdcbfdecfdd9e55dfd34c78471","urls":["bzzr://f64387b5ce5d8e9244fd6ed599b1f1cd94c4071df927396367387748d6bf7f47"]}},"version":1}
test_a1e7886c6972414c41914214582e5d16af3372033464486598ba35a4d1ffd4db.sol: ERROR
test_a230f3312a66875d0b98b1f3059f2e4d4d7ff0d8b08af0909c5f040dfaa327a7.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol:C 6060604052341561000f57600080fd5b5b6000805467ffffffffffffffff19166100406401000000000261009f1767ffffffffffffffff161790555b610046565b60075b90565b60d1806100546000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166392d0d1538114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805460999063ffffffff16565b90505b90565b60075b905600a165627a7a7230582044f8d67fc4a251b6e63e235f023f3b5ed0010bace3216d6db30c258ede9a62ed0029
test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a25f57bf6162e2b848c927fe0120ea7bcdd35e36618b1137f33fcc44c088f113.sol":{"keccak256":"0x0a9686ad10383beb5a63e6546c8ef5e5b74dad9f4f533fb7000722b9088dc489","urls":["bzzr://9cb9e3dcbe047fb4c74c3bf20b61aaef087b7bf3b16655eaecb2b872fcd5f682"]}},"version":1}
test_a292bd1b13da75cad5b25b157dcc718305188547796306e42e15fa738e5d1f4b.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol:test 6060604052341561000f57600080fd5b5b60d98061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b605260043560243560a0565b60405160408101606381838087607b565b9050607281602084018486607b565b9050809350608d565b836083826091565b8452949350505050565b6094565b90565b50505060405180910390f35b806008805b5092509290505600a165627a7a7230582099fc056a91b21fa080365cb34a5c1787e4911573ced86b6fe3bedacd51ecc07f0029
test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"},{"name":"ret_g","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a30d5083e375341184a5bf52f5cc10f5df174273054c2467837a7c839d381dc2.sol":{"keccak256":"0x71da32b0021deb9328047c5ecd9018f3a9c6a604b06cab5460fa4c5e69d959e2","urls":["bzzr://ff1b2ded29969657f5b4876c7d8fc042b18d61f6de7be9c9e4827cbf741b65cc"]}},"version":1}
 conv enum base.Choice -> enum base.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:base 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820a7970f018ccfd7a826c133dadf9a9807967acff3b223d2b656ab5d0022180eea0029
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":"base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":{"keccak256":"0x2409cd125182d61050e6b0297cf4d43ef529abc7d7bc0ddd23ed2659a080b59a","urls":["bzzr://1720abf81b1f2bb9450a831738980da35524d906d21c368f13a56b0fc4615d89"]}},"version":1}
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:test 6060604052341561000f57600080fd5b5b60d08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166385bb7d698114603c575b600080fd5b3415604657600080fd5b604c609e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6093565b6000600382108015608b57608d565bfe5b50919050565b505060405180910390f35b60015b905600a165627a7a7230582020fa42a9764bd192a379bddee7d1a5a9eef610c2eb7a70bd450f68c598f664a40029
test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a394ec0ba54cb45681095df8a607077ecbb3fbbcee97452309d9e0c9ff3abc83.sol":{"keccak256":"0x2409cd125182d61050e6b0297cf4d43ef529abc7d7bc0ddd23ed2659a080b59a","urls":["bzzr://1720abf81b1f2bb9450a831738980da35524d906d21c368f13a56b0fc4615d89"]}},"version":1}
test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol:c 6060604052341561000f57600080fd5b5b61019a8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338b28cb881146100535780636bc5fb1914610068578063d9c55ce11461007d575b600080fd5b341561005e57600080fd5b610066610092565b005b341561007357600080fd5b6100666100a3565b005b341561008857600080fd5b6100666100b2565b005b600561009f601482610101565b505b565b6100a16014600061012b565b5b565b600060156100c1601482610101565b50600090505b60145481101561009f57806001016014828154811015156100e457fe5b906000526020600020900160005b50555b6001016100c7565b5b50565b8154818355818115116101255760008381526020902061012591810190830161014d565b5b505050565b508054600082559060005260206000209081019061009f919061014d565b5b50565b61016b91905b808211156101675760008155600101610153565b5090565b905600a165627a7a7230582088c94a1786f0aec382fc8816be73cf2fac6fca27aec83d4f6de4f1b43ba2c5c30029
test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"halfClear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fullClear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a401bf0c3d2b8fcb6ee82dfb416598c61eae3b7866af6eb1a3999c22385863cd.sol":{"keccak256":"0xbd265582aa11155de243c9f58db084c8b2e8dadf3fd86c9add154ca4bea632fe","urls":["bzzr://b3ac8a8be8b488962911925530c22a73bdb8575a20de70cd4112c4e7217b7f9c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol:test 6060604052341561000f57600080fd5b5b61011a8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60005b600182111560e55781600a141560a45760e5565b5b600582111560d257816008141560b95760d2565b60001990910190600682141560cc5760a4565b508060e9565b60001990910190600382141560e5576090565b5b50805b9190505600a165627a7a7230582089888da213ccd063dcac5f6431bf46f73d864a26d401e5e3086618e88ef4ee560029
test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a4096d9dff43d08f7db499e8e30ce1bcf27a7ca883ddffc8a7c4cc24c809d83d.sol":{"keccak256":"0xcf5ff73b6d4bbb9f2f6f8b96f0c41da0706bab4e206e917d4e92950459c82006","urls":["bzzr://1e391047567012eb22e0aba5d78c2b588676d01729b2b801596e2f785b204597"]}},"version":1}
test_a460f9701ede782f9f5d1cc0d12119591b73d39ccf2ff386d69971211f1c769d.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol:c 6060604052341561000f57600080fd5b5b6101d08061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee581146100535780631f7b6d32146100b25780639507d39a14610109575b600080fd5b341561005e57600080fd5b61006c600435602435610163565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a7565b151590565b505060405180910390f35b34156100bd57600080fd5b6100c5610182565b6040516020810161007f818380866100e2565b905080925061009d565b83610093826100fb565b8452949350505050565b6100a7565b90565b505060405180910390f35b341561011457600080fd5b6100c5600435610188565b6040516020810161007f818380866100e2565b905080925061009d565b83610093826100fb565b8452949350505050565b6100a7565b90565b505060405180910390f35b60008181846004811061017257fe5b0160005b50555060015b92915050565b60045b90565b600080826004811061019657fe5b0160005b505490505b9190505600a165627a7a7230582086cc0b31531b04ca0d3b4d3745ecd7edae04890504e401ba5d393aae4969b3f10029
test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"value","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"length","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a4cccf988d38c45add24636c437bace9f0ba111f94b7661d2155fe61ec687504.sol":{"keccak256":"0x954e0c43337e430af024e82ba033217cb50357227fc5abd906854468a9af5f87","urls":["bzzr://496e803876a20cbb9820a9d351c657c6e6cb10565128ebc336a8e7abe457fb3a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol:test 6060604052341561000f57600080fd5b5b60086000555b5b60bc806100256000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166373d4a13a8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a7230582090c68d22f528f418087ed7f0f003c77b0fd2d64a46ac264e7d21e03e8ae472ff0029
test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a4f54e03f15855d00c84670f6773550b3cb860c69e225d9d877e0f927a5134f0.sol":{"keccak256":"0xe0048f7edc1e07a5dfafa92a90d94a6f8420c6ccebd181fbcd7af6822b9e2360","urls":["bzzr://a72555c46d267d3e75d2c3b0cd3574aa3f70f6f04463efb2cf7d3df8cbaa6e3c"]}},"version":1}
test_a514682d88b29b64fbfffd8a00161f001d1b5d4dd599933cd6657d1bfec50e34.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol:C 6060604052341561000f57600080fd5b5b60e68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6000816001811460a6576002811460ae576002915060b3565b6008915060b3565b600991505b505b9190505600a165627a7a72305820ac440b74a807c73a87151725adc4c121776dea8d4855c395ba098d6581db026c0029
test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a5710f0c043e04e8e592c4f7284c5937143835fdc81ff84debfac726ae268619.sol":{"keccak256":"0xd26691c1f6b0e9c4ff931b1724b610239a0c0aa59b4a0f04c9ddece0d2673e37","urls":["bzzr://8475ad55829a0e9c565429c60ec8c0f8f7505c640d9d1e745b0cb39afdbd1d25"]}},"version":1}
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol:test 6060604052341561000f57600080fd5b5b6101098061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302143aa98114603c575b600080fd5b3415604657600080fd5b6054600435151560243560d1565b6040516060810160658183808860a2565b9050607481602084018487608c565b905060838160408401848660a2565b9050809450609e565b8360948260b8565b8452949350505050565b60b4565b8360948260c1565b8452949350505050565b60bd565b151590565b60c4565b90565b5050505060405180910390f35b808260005b92509250925600a165627a7a723058208ef84e7052d2fc08722c51f5ddafd7031cee5b9e04d6d8ce1b10014427c7c5230029
test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x1","type":"bool"},{"name":"x2","type":"uint256"}],"name":"run","outputs":[{"name":"y1","type":"uint256"},{"name":"y2","type":"bool"},{"name":"y3","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a65c275d4f2c7c87f812e6c41b6edd02267b4bcf574b62e5b026146b15fe8ae8.sol":{"keccak256":"0xf6254876b67349aeab1ec45eb7326c8f65e62d2ad18f89f93163069d289c7068","urls":["bzzr://3bc8a2d7a3ef509ea9f11dbf19f4d90f9b128a37f72a71d9d858bfa811d41750"]}},"version":1}
test_a6aa8db9c3d1650ca95de6f31ba8404eb594c6cdbfbd51d3dd978a2461d81e56.sol: ERROR
test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol:test 60606040523415600e57600080fd5b5b608c8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b600281018082181881185b50505600a165627a7a72305820fcffe999624686b007bb5febd241c695c17bbd87294c0bc0378003f5491506230029
test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a6cb1afe9d69473518bd46b2386b864b0ed402a3e7df912b4d4520f47ebfd3d5.sol":{"keccak256":"0xcea4fab0885ee60d9682b05edbfbdbfc9352147616abad3b27fee74b18539f4d","urls":["bzzr://2cf49a09157df0807477e124f2ebce95b5ba7e3747416fbb6af557dc7055dbc1"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol:test 6060604052341561000f57600080fd5b5b6102858061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b6000816100a4828261016f565b505b60c882101561015b5760097f01000000000000000000000000000000000000000000000000000000000000000260008381546001816001161561010002031660029004811015156100f357fe5b8154600116156101125790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555081820290505b8160010191506100a6565b61016760018303610097565b90505b919050565b81546001816001161561010002031660029004825481601f106101ca5782601f106101af575b826008026101000360020a80910402828001178355610232565b60ff1916836000526020600020558180016001018355610232565b82601f106101fa575082600052602060002080549082601f01602090048101906101f49190610238565b50610195565b5081800160010183558181151161023257601f016020900481601f016020900483600052602060002091820191016102329190610238565b5b505050565b61008991905b80821115610252576000815560010161023e565b5090565b905600a165627a7a72305820bf4d3fd9b3de4b92b433dcd865f3b5d94267e69a690e96e15e7cf86cfaae3ce00029
test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a6cbe877f6c91a6302d75b3d4f02123b2a6d93dd768d6e8a61fbeb999b8d3b3b.sol":{"keccak256":"0xc653a4c23ca5151ab22043ccd96e7b756fc65077013a1973b5cc2b977f9684e5","urls":["bzzr://5fdc705bd2956fe889dc4cb9f31d31c127dffb0622a645f0f0ba7d8996eb2bec"]}},"version":1}
test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058206cece22f71812fa5ab0d69b9f2e7d87b74665ac4e63cb1ee810998c0342819200029
test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a78e9e6fbc3bd256d595e7da71cb1808698a459331bf5d883f58a6d5d6137a69.sol":{"keccak256":"0x6967258ae7240f6d307eb2b13b2e453001976d33835bf5e9c40b98d7b1ddd21d","urls":["bzzr://6781ebdc73d2b1f6778c2911f6dadf3d9e311cc2946663f984679e4dc1d1d706"]}},"version":1}
test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820da11c85d3cd141cfaffccc1bdf7c4a7665373aaed4e66ab003e8e05f2eca77c90029
test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a7ad51b74a557c7d866d6554889d9c9dbd4de7d5dccfdf0a3ef0220596791742.sol":{"keccak256":"0xf4d355219e15d43c51163733a33ebea9ca1632b8c9568022f10cfcb8fd02369e","urls":["bzzr://21b6313ef03a884aee29b0506064fdc77a53fa363a6bfd79b1cdc5de5b091bc2"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv int_const 1 -> uint256
 conv bool -> bool
 conv int_const 3 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_3_by_1_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_rational_1_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_rational_3_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_3_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		
			function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:First 6060604052341561000f57600080fd5b5b6102068061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b60008060016322ecff568180600385604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815260048101906064016100eb81838088610130565b90506100fc8160208401848761006d565b905061010d81604084018486610130565b905080945061012b565b8361007782610086565b8452949350505050565b610144565b8361007782610174565b8452949350505050565b61015d565b8361007782610174565b8452949350505050565b610167565b151590565b61016f565b90565b610185565b600061017f8261016c565b92915050565b61019b565b600061017f8261016c565b92915050565b50505050602060405180830381600087803b15156101b857600080fd5b6102c65a03f115156101c957600080fd5b505050604051805190501190505b905600a165627a7a7230582033dc205d829e48e6e043361fb24dec705251697b17bbb7cdaccbd80e503c94450029
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:First {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":"First"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":{"keccak256":"0x7a300144e5475fe94c4057f70c00f3bdfce163d63d9ba68e263b2caeef2d01af","urls":["bzzr://11b4c0c9062c49955f8ee822b455eabf723e375608f7179b12d5e756b882776c"]}},"version":1}
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:Second 6060604052341561000f57600080fd5b5b6101548061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166322ecff56811461003d575b600080fd5b341561004857600080fd5b61005b600435602435151560443561009f565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b6000600263946644cd82604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156100f757600080fd5b6102c65a03f1151561010857600080fd5b50505060405180511515600114159050610120575060015b5b93925050505600a165627a7a7230582022decda846f1ae32c38ec105731632ae7905f7f4c4fe007939700755d6ead96c0029
test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol:Second {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"bool"},{"name":"","type":"uint256"}],"name":"fun","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":"Second"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a7da0e048dc8dc83681b876446a678948fd20ec3487ef580c0849899930cc444.sol":{"keccak256":"0x7a300144e5475fe94c4057f70c00f3bdfce163d63d9ba68e263b2caeef2d01af","urls":["bzzr://11b4c0c9062c49955f8ee822b455eabf723e375608f7179b12d5e756b882776c"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol:c 6060604052341561000f57600080fd5b5b6101298061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60000b90565b505060405180910390f35b6000609560d6565b60a060405190810160409081526001825260001960208301526000908201819052606082018190526080820181905290915081905b602002015191505b5090565b60a06040519081016040526005815b60008152600019909101906020018160e557905050905600a165627a7a723058203ed35c16844a4fd376e30c73d45c1488a9c109d7bea2906b32e2030fa42e22ad0029
test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a8315ff1f2d290910d1193c000781ed4369f32fecf3c713833395ab999858fc4.sol":{"keccak256":"0x55ed12500397527fac8fab65948a2bb98ebf3fde213e790758969dd0bfeac034","urls":["bzzr://00d43610f3b0643715aa0f1703b9c9b00403e7de4f7a29ea81e2f7076e1fcfd0"]}},"version":1}
test_a83fe2302a56218b3928e24a4ce81d9a0fc9f929dfdcaa4e2d719804ac8f5766.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol:C 60606040526000805463ffff00001961ffff19909116611234171663ffff0000179055341561002d57600080fd5b5b6101658061003d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b6100506100ca565b60405160808101610063818380896100a0565b9050610074816020840184886100a0565b9050610085816040840184876100a0565b9050610096816060840184866100a0565b90508095506100b4565b836100aa826100b9565b8452949350505050565b6100bc565b90565b505050505060405180910390f35b6000805465ffffffff00001963ffff0000198216620100009283900461ffff908116600101811684029190911791821665ffff000000001983168490048216600119018216840217938490558381169364010000000092839004821693928104821692900416825b50909192935600a165627a7a72305820bde6556c156989c7fd44e74caa1535f901ce308d7b944bd942fa29bd8b09dc710029
test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a8f21ddbecab6f66e267cffd84ce2eefdcf3de74f59bdc977381f67a04957173.sol":{"keccak256":"0x1f2b24ea6fa0b46b80ae9e14a868cf55ced5e7ac344bde96249b691f54db294a","urls":["bzzr://2d01c86a90c454ce25ab45d5937955bcae354149329ab1fc868d1134b65bf542"]}},"version":1}
test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600180806003815b50505050505600a165627a7a7230582010f34c5177404f38e8a0e27d2ede1a7f3717e239fb6fa6c98659270543aac07f0029
test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a93ee09aab72b6eabe1f8e4c7fc88d5571301959ae5f7bd438c972f786a7e6ef.sol":{"keccak256":"0x9703343df9474fa7bf58aef039b2c01a746559f879a6d95790599a76d43ee155","urls":["bzzr://950853b69cbb8409b830a8966082ab5fef31ea407cdd71e3a217b7ac943f9b33"]}},"version":1}
test_a975cbcedf834e5bb49a21b02461f67a97407888f6c13625077728462d7157d8.sol: ERROR
 conv uint16 -> uint16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		

test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol:Test 6060604052341561000f57600080fd5b5b6101058061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635ad298bd8114603c575b600080fd5b3415604657600080fd5b60717fffffffff000000000000000000000000000000000000000000000000000000006004351660b3565b60405160208101608281838086608b565b9050809250609d565b8360938260a1565b8452949350505050565b60a8565b61ffff1690565b505060405180910390f35b7c010000000000000000000000000000000000000000000000000000000081045b9190505600a165627a7a723058202fabcaaf30139175c9269249d48ef818bdf7c0aee73d5c460b75d551295e94080029
test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"s","type":"bytes4"}],"name":"bytesToUint","outputs":[{"name":"h","type":"uint16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_a9f97108bb6aa76ca35e8f5a6839f8857e1af15e0a709d8816c6a96e6103f5d4.sol":{"keccak256":"0xbf22b3ee8fcfe1721c6ba95c590848f9b71b4cbcbf697082f1a9e49e99116444","urls":["bzzr://bf344e76467b79a350d0cc4e5a940c740e24157fa3137a297c7cd4b6b73056df"]}},"version":1}
test_aa50798e6b62563778e8cfb2b9bd78150d7f6a2ac0deb4db12bcdbce557c5c86.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol:C 6060604052341561000f57600080fd5b5b6102018061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b60008054600160ff19918216811762ffff001990811661020017808555825460029416939093171662abcd001763ff000000191663fa00000017815560ff9091161415806100ee5750600054610100900461ffff16600214155b806100ff575060015460ff16600214155b806101175750600154610100900461ffff1661abcd14155b8061012f57506001546301000000900460ff1660fa14155b1561013c57506002610086565b6000805462ffff001980821690925560018054909216825560ff1614158061016e5750600054610100900461ffff1615155b8061017f575060015460ff16600214155b806101945750600154610100900461ffff1615155b806101ac57506001546301000000900460ff1660fa14155b156101b957506003610086565b506000805460ff191690556001805463ffffffff191681555b905600a165627a7a72305820021394a8e96ef384cd4e51ca1e340c93ebe8957ea639e185ef75b724484f534c0029
test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_aa7bb19da5cfd4f3177fc92f221f86b570519c5e15b123009214e0b06f413638.sol":{"keccak256":"0xad18fe49df893bd6198060de1629df9a03af82de0d1052113993c966a25ffc86","urls":["bzzr://c9fa81bcc96d948c15b70eb1c6f90fea6b3dc976cc4aa81a00fd86a53f98c809"]}},"version":1}
test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820bd65040435afb500113f61f22b9f2ccc96e2d5d7959d80fb33879deee332fffa0029
test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_aae94da8c0a85bdc9d9d9680b231025b03e505f1e7be76257b496131744a275c.sol":{"keccak256":"0xdd9e20490182808992b5adc3ad9e100f1bae9e3f046f7c9245a011c3f15be893","urls":["bzzr://2801177e82f717926e7beacc76c935e05be63a37553cb43874c0cfafd8bb97de"]}},"version":1}
test_ab37a3d71f393a84bd1693077f3b34fd79690f3a60bc5d03cb2886430e62dd74.sol: ERROR
test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60015b505600a165627a7a7230582046e70d362ec12638ae812f0cb0697a82d775605e897903a4f9144bd2d29a8cda0029
test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ab937fc7ca3216a8fc851e5e27b8b79f51c84135ea7c7efd48ba67294c4b436d.sol":{"keccak256":"0x9cae0d74cbb392603192ec31f2c4b2015769ba6857430e0f95ba96a836fdab87","urls":["bzzr://9d32b90b45584f6e7c8ab74dde861eeb3808d168de35c8c180db6411785d1d1e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_abb71ce402873b4706c2f6b691ec9ffc632a82a0ef93c86fe3681be0c1389209.sol: ERROR
test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol:B 6060604052341561000f57600080fd5b5b60f08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600260017f30313233343536000000000000000000000000000000000000000000000000005b7f313233343536370000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff198216141560bc575b6074565b5b505b5b50505600a165627a7a72305820091b0033c64cd0562c0fda5ddc8b50f2df7345122297814ad11ca210884bd5f30029
test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ac8d72fe575d59231b8da03bb763573f1aad5619912f3089c3d383f7f5e04f90.sol":{"keccak256":"0xaa8dc508dc9544b99eb04d15523b1f7fb2722026f69710e3f2b67492e387fa22","urls":["bzzr://0e8a751c40543696ac94b29d9930a66accd307a2580da3fbeea61cf790877416"]}},"version":1}
test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol:C 6060604052341561000f57600080fd5b5b6101918061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b60008031818080808060405160006040518083038160008661646e5a03f191505093508573ffffffffffffffffffffffffffffffffffffffff166040516000604051808303816000866102c65a03f291505092508573ffffffffffffffffffffffffffffffffffffffff16600060405160200152604051602060405180830381856102c65a03f415156100e457600080fd5b5050604051805192505073ffffffffffffffffffffffffffffffffffffffff861660006001604051600060405180830381858888f19450505073ffffffffffffffffffffffffffffffffffffffff88169150600090506001604051600060405180830381858888f19350505050151561015c57600080fd5b5b5050505050505600a165627a7a723058207583f3e22785b69647fcde6aaf530d95cac159eb6bd879b15eb6117573ac108c0029
test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ac9f49206a7d5cc3b6d9faa9fac0e3d9f13c443193dc66bc39a1c14ec27e5f50.sol":{"keccak256":"0x897e21b81fc0555296ec368b4b2d35c77d771c3dce1fde38745baf4f954dd930","urls":["bzzr://94b7ebf4d8baf013faf2e960d7de7baa03a1b8a6c0335af331de292fb8ec548b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:receiver 6060604052341561000f57600080fd5b5b60da8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166383a6deb581146046578063cba2534f146094575b600080fd5b3415605057600080fd5b6056609f565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b609d60043560a5565b005b60005481565b60008190555b505600a165627a7a72305820d0b9fb7f87d58605f862c5847254d46fac4c9716597b9124cd23d1b9d9893a210029
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:receiver {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"received","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"receive","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":"receiver"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":{"keccak256":"0xe518ffa5857ac3009efea606cb849fce8ecead558a95b7d0193e2811f01f27ae","urls":["bzzr://605401e7c8482be4379dc078bf810fed2fcb7daf218ee67147a1b6ab0b0c5c06"]}},"version":1}
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:sender 60606040525b5b5b6101c5806100166000396000f300606060405263ffffffff60e060020a6000350416639bfcdaa18114610024575b600080fd5b341561002f57600080fd5b61005073ffffffffffffffffffffffffffffffffffffffff60043516610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b6000806040517f726563656976652875696e7432353629000000000000000000000000000000008152601001604051908190039020905073ffffffffffffffffffffffffffffffffffffffff831660e060020a82046002601760405160e060020a63ffffffff851602815260ff909116600482015260240160006040518083038185886187965a03f19350505050508273ffffffffffffffffffffffffffffffffffffffff166383a6deb56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561017657600080fd5b6102c65a03f1151561018757600080fd5b50505060405180519250505b509190505600a165627a7a72305820b857b1ec300528931eba7c9bbe238ad6347b3c896adf3d7b6835b9ad8944675b0029
test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol:sender {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"rec","type":"address"}],"name":"doSend","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":"sender"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ad12585c61d73d85419396988baf12cd0bcbb357751e9e5ad4bdf921ee467632.sol":{"keccak256":"0xe518ffa5857ac3009efea606cb849fce8ecead558a95b7d0193e2811f01f27ae","urls":["bzzr://605401e7c8482be4379dc078bf810fed2fcb7daf218ee67147a1b6ab0b0c5c06"]}},"version":1}
test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol:C 60606040523415600e57600080fd5b5b60a38061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60546060565b605a6060565b905b5050565b6040805190810160405260008082526020820152905600a165627a7a72305820aa273b8556f8e3a00294dabc6ea0ab7757845339ad7a65634edaa47422fb32a80029
test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_adafa04241136b791592176055dec75f94c0f39697e4cfd879f8be0ad7bd746e.sol":{"keccak256":"0xc96a57f9adc7b23c6f1ee8c488a42053c52b1e134a0b55bf2e590273036827f5","urls":["bzzr://867ff629bcd55189ddef42aeda578c69d1798a7de2dc564c69ea9261ff083da7"]}},"version":1}
test_ae453b4a62b8399a5e6e9802fc6c96a8ba2a1c21af6ef9f4740753175fb7eafc.sol: ERROR
test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6001195b505600a165627a7a7230582087f399ccd71be25d219bc6d64fd0dade9abb680040fbeb9117e4c4cf7b14068d0029
test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ae626913527c19c5ce92ca1e0a378ad71da3c82f77421d489f8fba7dec2381d6.sol":{"keccak256":"0xe083bcac2b903976cc6344c07cbf45ebd9d9b33a93bb8574ab45149177723cc8","urls":["bzzr://28c479d3de14d05f36492434022a94902f147661bfe1ea005748427bcad3010f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a723058206aae38d8b97682c0fc50faa857bccfb38b9a4a5624b1dfdb4250819f765f1b040029
test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter starts here. Since it's a really complicated parameter we need 2 lines","second":"Documentation for the second parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ae63ebd3880a0197e5aa64a7fc8cd28b06174ec19d8e28c4739f92bfcbb7abc6.sol":{"keccak256":"0xb2f0364c5e82be10e68e0929c662a1614c3302bc76d349f068c005c5f99493de","urls":["bzzr://31f168698debd0124b592926cc0d7ff79114e479b960ba647aa38fe92d5ae6b9"]}},"version":1}
test_ae8507b74c056512b5b16e8a58f86f285d0175c93b2fd63211875ecb6b7f9396.sol: ERROR
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol:C 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60ff1690565b505060405180910390f35b60005b905600a165627a7a7230582006047b1df7e0a3d94b50bef913855bbee37367df5379ff133f205ab8ea941c8c0029
test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"x","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ae9a4fa81be7331a16cd4a6e84f4bab6d91ca0ed77f0e73ffadc0c6c6116aaeb.sol":{"keccak256":"0x8cf6030d9e23e0ddf51a87a0b048223b2ac96830062e9138ab2ee6479e227e46","urls":["bzzr://c411861ee4e8fb0157332b54be8a033e5128211ca9a4b070cbca4782a7c13969"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol:test 6060604052341561000f57600080fd5b5b60d38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a444f5e98114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6000811580609d57506008915060015b508190505b9190505600a165627a7a723058205d68cb721a0df5de31feef7537b7a4b379d0a34e2de652f4c5d043a7b778da890029
test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_aeec0cc4001294ece78d2825d1173ddab0d6e5f58b6b299be699058f4a0b1d59.sol":{"keccak256":"0x4b93c695b8c3bd7aea353aab072a6aa112cd0c5f6a4e3279f452d8c81d818dc8","urls":["bzzr://182314c1eb8aca7a3de837b55f7e9d08653d09877291e392d8f3ecd9d4252787"]}},"version":1}
test_b034fbe9a427db603843d120c58f7a89ade6c81c42ca80f424956911196b5bf6.sol: ERROR
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Lib 6060604052341561000f57600080fd5b5b60c78061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635a2ee0198114603c575b600080fd5b60426096565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b608b565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b335b905600a165627a7a723058208066559862a9a034ef558913e13c5c2b99c3c3b0c18c0f6a420f62b9a567d30c0029
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"m","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":{"keccak256":"0x02dc154446872016c9e63fa2fdb3701f45f45cb22bd6e15621eecca4da3ccd8f","urls":["bzzr://e3317458ec4e92090af1dab968cd2756b8a970eb523e7f825061b443bc74d808"]}},"version":1}
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Test 6060604052341561000f57600080fd5b5b6101d18061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461004857806367e404ce1461005d575b600080fd5b341561005357600080fd5b61005b6100ca565b005b341561006857600080fd5b610070610189565b604051602081016100838183808661008d565b90508092506100a1565b83610097826100a6565b8452949350505050565b6100bf565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b73__test_b03f569d87269261675cb0bf1959dc1__635a2ee0196000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b151561013257600080fd5b6102c65a03f4151561014357600080fd5b50505060405180516000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058203ca1e709021bbf47ab8d7d8d385ff87838b7f59e9e891dd348fca9d32b40c5db0029
test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"sender","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b03f569d87269261675cb0bf1959dc186363a3159aa404df9b89a307a346e7fa.sol":{"keccak256":"0x02dc154446872016c9e63fa2fdb3701f45f45cb22bd6e15621eecca4da3ccd8f","urls":["bzzr://e3317458ec4e92090af1dab968cd2756b8a970eb523e7f825061b443bc74d808"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:A 6060604052341561000f57600080fd5b5b6000805460031790555b5b5b60bd8061002a6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de308114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820c9d2bf7a013d98143b407181a1570371ea7dafe4893e68b22a6f6ff0d32abf270029
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":{"keccak256":"0x589933154bee3210e7a95e89b53398ac816b8a081a7075e9cfe9fbd848fd5a40","urls":["bzzr://c02b8a1c351e550d0a4feb9ebde00b876cbe5bbaba3580df66fdf99ea2027aba"]}},"version":1}
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:C 60606040525b6000805460061790555b5b5b60bd8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633bc5de308114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820b385e57bd9195816ec2d84e0ae0ebdee7262f6a8259e412e935952ce9fe4bf240029
test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getData","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b0737117fefc73edb621d8e5ef91dbce1b84c70ae3d21422149cf335b8671a0b.sol":{"keccak256":"0x589933154bee3210e7a95e89b53398ac816b8a081a7075e9cfe9fbd848fd5a40","urls":["bzzr://c02b8a1c351e550d0a4feb9ebde00b876cbe5bbaba3580df66fdf99ea2027aba"]}},"version":1}
test_b08182b9df9948da4f1451bc51c3dac3676cfd0568ab4a1f236dd234bad31c2e.sol: ERROR
test_b0b9a5aa3e059d5cc102f719d938378c872f5502e1aac8d2cd758da942a1ce0b.sol: ERROR
test_b0d410d75202e464eb463e64ef37d72093a3bad01850364a467533eb721ba361.sol: ERROR
test_b1e61aadda732b6407bd2061145fdca8fbbd165b23d1a22f15e5ca035ee8c62f.sol: ERROR
test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol:test 60606040523415600e57600080fd5b5b60828061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b610abc195b505600a165627a7a7230582096708aa491891b0afd38ab1d00539395dda3d662e6c2b7db8cc7c761955a312d0029
test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b1f24eedb1c6c4e106a05bbe6ea2a8c6f47ec7f46f8ec929aae3f10b84afcaea.sol":{"keccak256":"0x7983cb8080f0147be5db3e1edb2994fcdadf2bbccd1d42daee40a51f308b2f4d","urls":["bzzr://25e11ba9974cc74996e3167011b4720f425e030688f5f51fcc73996aa8ad2d79"]}},"version":1}
test_b24f2522d57cffa55653d997fc472ad545328d948dc9d71f003c2bcab514e252.sol: ERROR
test_b29e9e7fc6d774a490ff7e16a606e249c2bbd0b26364d0c6a354b6895cdb4882.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint24 -> uint24
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint24_to_t_uint24(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint24_to_t_uint24(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint24(value))

			}
		
			function cleanup_assert_t_uint24(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol:test 6060604052341561000f57600080fd5b5b60086000805b0160005b505560036100296008826101b4565b50600880600281548110151561003b57fe5b906000526020600020900160005b505560806100586009826101de565b5060166009600181548110151561006b57fe5b90600052602060002090600a91828204019190066003025b6101000a81548162ffffff021916908362ffffff16021790555060026009607f8154811015156100af57fe5b90600052602060002090600a91828204019190066003025b815462ffffff9384166101009290920a918202939091021916919091179055600160005260008051602061051083398151915260205260036000805160206104f083398151915260025b6002020160005b5055600160005260008051602061051083398151915260205260046000805160206104f083398151915260025b6002020160005b5061015a90600101826101b4565b50600160005260008051602061051083398151915260205260056000805160206104f083398151915260025b6002020160005b506001018054600390811061019e57fe5b906000526020600020900160005b50555b610239565b8154818355818115116101d8576000838152602090206101d8918101908301610218565b5b505050565b8154818355818115116101d857600901600a900481600901600a900483600052602060002091820191016101d89190610218565b5b505050565b61023691905b80821115610232576000815560010161021e565b5090565b90565b6102a8806102486000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630afb372b811461005e57806328b922ed146100b85780637def10ce14610117578063f0ba844014610177575b600080fd5b341561006957600080fd5b6100746004356101d1565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b34156100c357600080fd5b6100ce6004356101f4565b60405160208101610087818380866100eb565b90508092506100a5565b8361009b82610104565b8452949350505050565b6100ad565b62ffffff1690565b505060405180910390f35b341561012257600080fd5b61007460043560243560443561022c565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b341561018257600080fd5b610074600435610264565b6040516020810161008781838086610091565b90508092506100a5565b8361009b826100aa565b8452949350505050565b6100ad565b90565b505060405180910390f35b60088054829081106101df57fe5b906000526020600020900160005b5054905081565b600980548290811061020257fe5b90600052602060002090600a91828204019190066003025b915054906101000a900462ffffff1681565b600a6020528260005260406000206020528160005260406000208160058110151561025357fe5b6002020160005b5054925083915050565b6000816008811061027157fe5b0160005b50549050815600a165627a7a72305820bbe3e5f412e98f7bb30a9bfa1705df303e42ed2ea16d5f63d235878997813aeb0029940bdfffc386637f3850e9a7633ff77a8eeeeaf0803c9df08029cdc08acce781bff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba8
test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"dynamicData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"smallTypeData","outputs":[{"name":"","type":"uint24"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"multiple_map","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b2beea5dc5c652adeadec52cf6d2643bbaed621175b9d8d7e2f412178eabf641.sol":{"keccak256":"0x271f760c79141f7ac6eec80f917b149512edc24f3ef17dfb3feac9bd5aa9dfbb","urls":["bzzr://35f2a3baae8ec411cdacac65ac0501a8334fadacfd60693b31568f44ac5b6159"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:A 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a7230582011e363210ee40dda64ed3ed46cd938de40eed25ceb5e10aecff81610f6e18a730029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:B 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006092609b565b60021790505b90565b60015b905600a165627a7a72305820ac1315b73bdf84e7364c96739ecf8b4c523e0d3184ea787428b2b0a616789d740029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:C 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006092609b565b60041790505b90565b60015b905600a165627a7a72305820b97834826124162dd33e6f8570c7455af2ba64dac96d96e133e878ef065cbc3f0029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:D 6060604052341561000f57600080fd5b5b60ef8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60006092609b565b60081790505b90565b600060a360ac565b60041790505b90565b600060b460bd565b60021790505b90565b60015b905600a165627a7a72305820b902ba4c90a25d68f0a34ea41c74fdcfe9dd1b07dfcaaa7d4c19b2ce8fc55af90029
test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b30fb86328439b9fe4434a452614d96a66d55adee19d5d8cd481f4ed4e1114dc.sol":{"keccak256":"0x3e05a11530cad6959901024af8e143dc274a63c5f4450878bad96b4e0fb23f7e","urls":["bzzr://9a626f44d9a2afaeb1c2003f5af7b4c21cb1959a0c9ab0fad5c04c64d191a87c"]}},"version":1}
test_b316f78f3ec6d532dccfaac7cd9e77a09f5b41989d8019433c681ae2c26250e6.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol:C 6060604052341561000f57600080fd5b5b60d58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60006001195b15801560a0576000915060a5565b600191505b50905600a165627a7a7230582014e05a4e214254fd9cdb36c369352bfd9904e5ae83ec2cb068b9d2a5a8ba72e90029
test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b3503615665b27e9fb4b9ef7b6dd7bf585a46ac105da2d3b002dee6fcd5af41d.sol":{"keccak256":"0xa5291eba211622cfea4df0e7d2dd279e5bd8230e6c6c95e312a4c25445a3ca8d","urls":["bzzr://6195ff242a3bdc09622ced04212bf03c26127ced4972faf27b96cc8e10555d4b"]}},"version":1}
test_b39d0090e7490dd9915593254833c46ade257555b49d5180bbcaad980610582f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol:C 6060604052341561000f57600080fd5b5b60db8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ea703418114603c575b600080fd5b3415604657600080fd5b605860ff600435811690602435166096565b604051602081016069818380866072565b90508092506084565b83607a826088565b8452949350505050565b608b565b90565b505060405180910390f35b63ffffffff915060ff80821660020a8104165b929150505600a165627a7a72305820f86f634a5957dfb0b688d168f93dbdd7b17b347caf7e380e2a16d2edfb080c1d0029
test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b3d04dadc4be424813526ef827762ff531ee526a1377f1943d505eb86387fb27.sol":{"keccak256":"0x5220beab0f5e28ce54028166310acc3152e60f790ee804c3c4ebbc93f8ee6adf","urls":["bzzr://cba71327d5b88630c652649904a85a4e8cedeeac1bd1fb68b36a7b0394b9e0fb"]}},"version":1}
test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol:test 60606040523415600e57600080fd5b5b60838061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600360045b50505600a165627a7a72305820781c2ea8dbd2a6685f475259cb1b184ede78fa10a8fb0d88e0237bb160a4ac280029
test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b3d94441cfb40fef283c60dc096845cb5cffe17376dc10f598366be538683119.sol":{"keccak256":"0xa54fa97e913788b252c021839f5dd420a1ea42d4f12545aa7632859513754c5c","urls":["bzzr://4873b8cef6bf80e8e8a7c7da62b61ad83dce206de5fad56a8bc9ccbf844ec6b8"]}},"version":1}
 conv bytes2 -> bytes2
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes2_to_t_bytes2(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes2_to_t_bytes2(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes2(value))

			}
		
			function cleanup_assert_t_bytes2(value) -> cleaned {
				cleaned := and(value, 0xFFFF000000000000000000000000000000000000000000000000000000000000)
			}
		

test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol:Test 6060604052341561000f57600080fd5b5b6101098061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663ab1956e18114603c575b600080fd5b3415604657600080fd5b605563ffffffff6004351660b5565b60405160208101606681838086606f565b90508092506081565b836077826085565b8452949350505050565b60aa565b7fffff0000000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b7e0100000000000000000000000000000000000000000000000000000000000081025b9190505600a165627a7a72305820399e27396a5e920f1a7d698300a1a246f45e17918e041e50c581d3a71307db540029
test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint32"}],"name":"uintToBytes","outputs":[{"name":"s","type":"bytes2"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b3f1fc338952fff466796b92475acbf38803c91a6320d3a75114e17cff96a6d5.sol":{"keccak256":"0xcb0c256b89bba2917bb0abd83b468936c300625f2fa0a3ffdcaaeefa0ed1f8aa","urls":["bzzr://e4de67f2c7876029e40dee96cdf45f0689753b0bc7e3350f3d796d5b0fe230c1"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:A 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60015b5b905600a165627a7a723058206588233fecf761b8f2b61b09a0605fd4a7852216099bb7cdc6e620095a1498d80029
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":{"keccak256":"0xfaa62ef6b09828aed1f2f380301518c911c136ff60df30aca471ea6602c9c168","urls":["bzzr://b3c49387ed4f42f8e7f5f493778b5f1e56d2bee7b1dee0239f9dfed80538c203"]}},"version":1}
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:C 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60005b5b5b905600a165627a7a72305820d8cd029d47945606f3bf2685f0660b58d39fd679f9411d5a072085f364d6f4740029
test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b414c0f012bdc501f16e74ac7c80c7f895c2b64d6bf94072622682c611ceb219.sol":{"keccak256":"0xfaa62ef6b09828aed1f2f380301518c911c136ff60df30aca471ea6602c9c168","urls":["bzzr://b3c49387ed4f42f8e7f5f493778b5f1e56d2bee7b1dee0239f9dfed80538c203"]}},"version":1}
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol:test 6060604052341561000f57600080fd5b5b60c18061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166388b7a17c8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b60005b9190505600a165627a7a7230582058fdb9a5cb5e95bfdc31febc7b1d951a1e0d78e2dce83a1250e754c3975896da0029
test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes32"}],"name":"functionName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b4264297a49ba27e2a264d1a94efb02162b0f4aa77e3af7581852f2eaac361c9.sol":{"keccak256":"0x3fee7b6d1997ca8bc6ae4038aafeb43d912155f0f1d86f084aab99275ee90f0f","urls":["bzzr://7fb7dbf158c1e72e8b86aa50ba727cae729d4d5ad4264c99f157dc9e97aa97fd"]}},"version":1}
test_b42efd822472f49f0656523c3a15d479eea4232cf4399c069a614335fda7201e.sol: ERROR
test_b42f7d031b7c9db8f5a3682c529d24f0e5a9bda0af37af8906d27336a34820e0.sol: ERROR
test_b43144db133e03cdbc4d24cf0864117f04dbea2f8af8d043ce0f7cc87abdf9ec.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol:C 6060604052341561000f57600080fd5b5b6101fd8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635fdf05d78114610048578063901717d11461009f575b600080fd5b341561005357600080fd5b61005b6100f6565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b610148565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b600080600554131561010a57506007610091565b600160055561013f6000805b600491828204019190066008025b9054906101000a900467ffffffffffffffff1663ffffffff16565b50600290505b90565b60008061015781806014610161565b50600391505b5090565b60058301918390821561019457916003016004900482015b82811115610194578254825591600101919060010190610179565b5b5061015d9291506101a5565b5090565b61009191905b8082111561015d57805467ffffffffffffffff191681556001016101ab565b5090565b905600a165627a7a72305820a136c068047d537dd14b9998d635503dc6a10f03fb9fd975ad398e7daae9bf350029
test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"two","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"one","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b43d89a4e8efd31a6431c64f4b1987557f73ef39e37b9d4436c46b85b2ba93b6.sol":{"keccak256":"0xba354961066ce0104a7e046281753ff3636e9b48c6b6ebfa2b724ed71468dd72","urls":["bzzr://77b8f3b8abd3e68689f8b4cda04d273ab63240fe9f5fd81580361d49739a9392"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:A 6060604052341561000f57600080fd5b5b61010f8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd978811460505780635b4b73a914609e5780639f68d7ca1460b3575b600080fd5b3415605a57600080fd5b606060c8565b60405160208101607181838086607a565b9050809250608c565b836082826090565b8452949350505050565b6093565b90565b505060405180910390f35b341560a857600080fd5b60b160043560cf565b005b341560bd57600080fd5b60b160043560d8565b005b6000545b90565b60008190555b50565b60d58160cf565b5b505600a165627a7a72305820f1f554d8c80faea2184f3524a0ea5430d78f7ca1b6b2209d1fca498e3e8df4320029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setViaA","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:B 6060604052341561000f57600080fd5b5b6101658061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd97881146100535780635b4b73a9146100aa578063a531d066146100c2575b600080fd5b341561005e57600080fd5b610066610119565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b6100c0600435610120565b005b34156100cd57600080fd5b610066610129565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b6000545b90565b60008190555b50565b6000610133610119565b90505b905600a165627a7a72305820e3e9f6e7407728c27fd24cc1a69bae9271e9b3afb862f310bccfa710587dbee20029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaB","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Base 6060604052341561000f57600080fd5b5b60e58061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd978811460465780635b4b73a9146094575b600080fd5b3415605057600080fd5b605660a9565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b60a760043560b0565b005b6000545b90565b60008190555b505600a165627a7a72305820dd0d10119c593b9c53c7ea2cf37c3a91c45cab751bf9f4e828d7518c9cb07e5f0029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Derived 6060604052341561000f57600080fd5b5b6101958061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd978811461005e5780635b4b73a9146100b55780639f68d7ca146100cd578063a531d066146100e5575b600080fd5b341561006957600080fd5b61007161013c565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100cb600435610143565b005b34156100d857600080fd5b6100cb60043561014c565b005b34156100f057600080fd5b610071610159565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b6000545b90565b60008190555b50565b61014981610143565b5b50565b600061016361013c565b90505b905600a165627a7a723058201fe90c24b68407b3bd3873c5bc59b6202d3f258d6f263fc30322a6d855b5a90c0029
test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"i","type":"uint256"}],"name":"setViaA","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaB","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b445ab24b3260e9d1edf09cfb77cd0f375c285ac196cfd39a5d787798ef7a54c.sol":{"keccak256":"0x11957b32b2d7989d273bb260b7b5a8d847bba25e107f6352bb79770a81ccdfc4","urls":["bzzr://d86f6a879a31b100093e74d36619626badb0310fc1537958c5c80b07144391aa"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 conv int_const 9 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_rational_9_by_1_to_t_uint256_lib(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_9_by_1_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_9_by_1_to_t_uint256(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_9_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Lib 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632021012c8114603c575b600080fd5b60486004356024356086565b604051602081016059818380866062565b90508092506074565b83606a826078565b8452949350505050565b607b565b90565b505060405180910390f35b8181025b929150505600a165627a7a7230582015ecabf4d20304d92ae2ecb645508e8c2b3cfad490c42f3329618c7e24b5f3f20029
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"m","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":{"keccak256":"0x17273473e7ef73e28a6f177c3bb489545f4baa156cfad86a1da2331c4e727369","urls":["bzzr://f89fae770dd55d3e38fa13f6abc5260f40ae4939b89d11b166d266dc2b2043b9"]}},"version":1}
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Test 6060604052341561000f57600080fd5b5b6101cc8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b600073__test_b4513a1911b74c00d19d7a18e382c12__632021012c8360096000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815260048101906044016100fe81838087610070565b905061010f81602084018486610119565b905080935061012d565b8361007a82610153565b8452949350505050565b610146565b8361007a82610089565b8452949350505050565b61014e565b90565b610164565b600061015e82610089565b92915050565b50505060206040518083038186803b151561017e57600080fd5b6102c65a03f4151561018f57600080fd5b50505060405180519150505b9190505600a165627a7a723058203fbc3e7252732a6748cecd35d90b23de4d8b2c60ec92675e7fb8baebfcf8beca0029
test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b4513a1911b74c00d19d7a18e382c12272d9a9c472619fec93ab22dceb7bced5.sol":{"keccak256":"0x17273473e7ef73e28a6f177c3bb489545f4baa156cfad86a1da2331c4e727369","urls":["bzzr://f89fae770dd55d3e38fa13f6abc5260f40ae4939b89d11b166d266dc2b2043b9"]}},"version":1}
test_b4c1953756e1b1c4800f40cb0deda30f57ba55c66f8225f1f2cfe434ae11ffe0.sol:C 
test_b4c1953756e1b1c4800f40cb0deda30f57ba55c66f8225f1f2cfe434ae11ffe0.sol:C 
 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

 conv bytes20 -> bytes20
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes20_to_t_bytes20(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes20_to_t_bytes20(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes20(value))

			}
		
			function cleanup_assert_t_bytes20(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)
			}
		

test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol:C 6060604052341561000f57600080fd5b5b6101ee8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166358f4cea581146100485780638bf150da146100b4575b600080fd5b341561005357600080fd5b61006160ff60043516610120565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b6100a9565b6bffffffffffffffffffffffff191690565b505060405180910390f35b34156100bf57600080fd5b61006160ff60043516610171565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b6100a9565b6bffffffffffffffffffffffff191690565b505060405180910390f35b60ff811660020a7f3132333435363738393031323334353637383930000000000000000000000000027f31323334353637383930313233343536373839306162636465000000000000005b50919050565b60ff811660020a7f3132333435363738393031323334353637383930000000000000000000000000047f31323334353637383930313233343536373839306162636465000000000000005b509190505600a165627a7a723058201d0f22369e9ad5702f820b4482b4d53cdd480fc7e01ae509745e59be847008730029
test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"uint8"}],"name":"left","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"y","type":"uint8"}],"name":"right","outputs":[{"name":"","type":"bytes20"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b511607b5f3e17f2c42571c50ab144cfe66ec9e86a40bf60545a3d2fd7c3eb7d.sol":{"keccak256":"0xcd9f29548c7ec247eeb53e27de7d759052508057b2ac662435057b46b1b01388","urls":["bzzr://cd0e98d888e528a6293c2c78bae9e8d6d4b50af45629970f2087780cdb34a6e6"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b5a5a188804df6e72fe90fe4a6f7f66f4e301c0c5bc8a3ccdcb7fa7cf81d8a42.sol: ERROR
test_b5e7f6e6fdf6b99af7038ee8d4a168142ab615b09591242780d2f0d9378c4833.sol: ERROR
test_b628e1c74497f8abb1dca9a177d48376407fc61df3581c9de20c99326949289b.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol:test 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60005b905600a165627a7a723058209564ab8c1d5277e44a22895bb582d1293e267e6f4f048af8969fa41b05354a8c0029
test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b6554790a2c741faceeb7f5a2c00df8c67d2cd67d24ffc3ebc1ed920d79b9cea.sol":{"keccak256":"0xd6853bf5d239e826b7222720fa598a5594d88a859315cab0d33ee11d3118b8bd","urls":["bzzr://fce9e1d43f58a228c75c71682902e97f20732e05a47c9f183935b40e27b6c634"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 224)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value5,
				$headStart,
				add($headStart, 160),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value6,
				$headStart,
				add($headStart, 192),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol:c 6060604052341561000f57600080fd5b5b6104d18061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632e64cec181146100485780635dfcf9841461010b575b600080fd5b341561005357600080fd5b61005b610173565b60405160e0810161006e8183808c6100de565b905061007f8160208401848b6100de565b90506100908160408401848a6100de565b90506100a1816060840184896100de565b90506100b2816080840184886100de565b90506100c38160a0840184876100de565b90506100d48160c0840184866100de565b90508098506100f2565b836100e8826100f7565b8452949350505050565b6100fa565b90565b505050505050505060405180910390f35b341561011657600080fd5b61012c600461012435602481019082013561022f565b6040516020810161013f81838086610149565b905080925061015d565b836100e882610162565b8452949350505050565b610168565b60ff1690565b505060405180910390f35b6009600080808080808060075b0160005b505460098054919750909550600786811061019b57fe5b906000526020600020900160005b5054600a805491955090935060038481106101c057fe5b906000526020600020900160005b5054600a80549193509060039081106101e357fe5b906000526020600020900160005b50805460019081106101ff57fe5b90600052602060002090602091828204019190065b9054906101000a900460ff1660ff1690505b90919293949596565b600061023d81856009610283565b5061024a600985816102c2565b50610257600a848461030e565b508282600381811061026557fe5b60600291909101905060015b602002013560ff1690505b9392505050565b82600981019282156102b1579160200282015b828111156102b1578235825591602001919060010190610296565b5b506102be929150610363565b5090565b8280548282559060005260206000209081019282156102b1579160200282015b828111156102b1578235825591602001919060010190610296565b5b506102be929150610363565b5090565b828054828255906000526020600020908101928215610352579160600282015b828111156103525761034282846003610384565b509160600191906001019061032e565b5b506102be92915061042d565b5090565b6100f791905b808211156102be5760008155600101610369565b5090565b90565b82805482825590600052602060002090601f0160209004810192821561041d5791602002820160005b838211156103ee57833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026103ad565b801561041b5782816101000a81549060ff02191690556001016020816000010492830192600103026103ee565b505b506102be929150610457565b5090565b6100f791905b808211156102be576000610447828261047c565b50600101610433565b5090565b90565b6100f791905b808211156102be57805460ff1916815560010161045d565b5090565b90565b50805460008255601f0160209004906000526020600020908101906104a19190610363565b5b505600a165627a7a723058207e08c398f602705586e352259126ee17b3cb4f1e87806067dda839924ceaf7900029
test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"retrieve","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"},{"name":"d","type":"uint256"},{"name":"e","type":"uint256"},{"name":"f","type":"uint256"},{"name":"g","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256[9]"},{"name":"b","type":"uint8[3][]"}],"name":"store","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b6661f14ea58fbc7d86457711067f126021187381f8685ddcdf7171e4e2552c6.sol":{"keccak256":"0x5114f23e2a4aa53975a39a19c6352be2dbc6535a36789b3a587fae2e40574bfa","urls":["bzzr://763c1a69acc7965965a6c555fbbf155da2988f83f39c935d3918d536bed1b13d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol:Creator 6060604052341561000f57600080fd5b6040516080806101c583398101604052806060810180519150505b60008190558160025b602002015160018054600160a060020a031916600160a060020a03929092169190911790555b50505b61015a8061006b6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636c8ae38c8114610048578063d7e96c051461009f575b600080fd5b341561005357600080fd5b61005b61010c565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b6100b2610112565b6040516020810161006e818380866100cf565b905080925061008c565b83610082826100e8565b8452949350505050565b610094565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b60005481565b60015473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582082962ba4effdc120d70efd0f8afc2e3a3fbb24ec4afb96b8869608cbd39262c90029
test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol:Creator {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"r","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ch","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"s","type":"address[3]"},{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol":"Creator"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b6683322c373d25d49244aa0ae7368fdebc5b95ea73c2e7ca665d44e9debf921.sol":{"keccak256":"0xceb9ac1a2f6e088d1c54d3e01372cfa26fe7c9b32e041aa8521d018e167e2d1c","urls":["bzzr://ce909ac9007ae314690d78617290715ccc23f57452b0dcddb4264bc516f26686"]}},"version":1}
test_b6be75902ffaed5ee3cd3980979607b1402abddb706efdcf0fa49c8bdd9a63a2.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol:Test 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166394e8767d8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b805b9190505600a165627a7a72305820d66cdb7978d4439e6a37f82119c51b8b66c83f3c43f0d88a15bb753e74d39ef80029
test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint256"}],"name":"uintToBytes","outputs":[{"name":"s","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b6c4f2f259e0eafe53cacab22759e9ed50d5176fa0351fb9fef80c3c164f07fe.sol":{"keccak256":"0xe1f91e1dcc62f9a84c03ef507c89e5bae0af6c352a7aa0652f322146b1d88fe4","urls":["bzzr://669abed5502f121d36a152595c62517f20b556a742f55edb9fee9456f8c1b68d"]}},"version":1}
test_b7b313c7f7e2add33bc2c0115d4c956794250e416da494dbf1b9edf4c8160cdc.sol: ERROR
test_b826b50589319431bae630a9b84696c453a33a831d7219975bfa26d0296f5b9c.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol:Test 6060604052341561000f57600080fd5b5b60e08061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663ffdd124e8114603c575b600080fd5b3415604657600080fd5b606160043567ffffffffffffffff602435166044351515609f565b60405160208101607281838086607b565b9050809250608d565b836083826091565b8452949350505050565b6094565b90565b505060405180910390f35b67ffffffffffffffff821683015b93925050505600a165627a7a72305820c177acfbb9bca9486cd79fb8a1d6b29381a6ab8921456942d0f85353807dc5020029
test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"},{"name":"arg2","type":"uint64"},{"name":"arg3","type":"bool"}],"name":"foo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b890af82262f871c84e46d853bcd779f34ecfc5e0703113b385d3fb49414ca5f.sol":{"keccak256":"0x5b318564553ee00a197dcb35aedaa06cd3b99275201a21b77c58de0ebd3076fe","urls":["bzzr://24030371f75ec001fbcc5d1e75c5f6a42d1233ce87e7667f464cbf007285e6b3"]}},"version":1}
test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol:test 60606040523415600e57600080fd5b5b600080546002919060ff19166001835b02179055505b5b60368060336000396000f30060606040525b600080fd00a165627a7a723058204c6e72f0838f9a3224749c04c883a19b8fc1d8ede44035433ee1a89ba468fc1c0029
test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b8a4d3e5db992daf808b9b3c366d45391e183a5a04cb761235e7f2c3f85d7c5a.sol":{"keccak256":"0x3167c7333b099e51cd5059e37affce8bf944679184a1b24b42dcbaa8c10a63d3","urls":["bzzr://c1477c4ac552bbbe623c8d9eea70f4feeaeda0da2844cb7a8e1ca2fbf822aa22"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol:test 6060604052341561000f57600080fd5b5b6103d08061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b6100536004356100a9565b6040516040810161006681838087610081565b905061007781602084018486610081565b9050809350610095565b8361008b8261009a565b8452949350505050565b61009d565b90565b50505060405180910390f35b60008080366100b8828261021f565b50600090505b368110156101c757600036828181106100d357fe5b90509001357f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660008281548110151561017057fe5b90600052602060002090601091828204019190066002025b6101000a81548161ffff02191690837e01000000000000000000000000000000000000000000000000000000000000900402179055505b6001016100be565b600080546101d791600191610259565b50600180549350848481106101e857fe5b90600052602060002090600691828204019190066005025b9054906101000a900460d860020a0260d860020a900491505b50915091565b81548183558181151161025357600f016010900481600f01601090048360005260206000209182019101610253919061035a565b5b505050565b8280548282559060005260206000209060050160069004810192821561034a57600052602060002091600f016010900482016000805b848311156103115784819054906101000a90047e010000000000000000000000000000000000000000000000000000000000000284836101000a81548164ffffffffff021916908360d860020a90040217905550600201602081600101049485019460010302906005019060208260040104938401936001038202915061028f565b81156103475783826101000a81549064ffffffffff02191690559060050190602082600401049384019360010382029150610311565b50505b5061035692915061037b565b5090565b61009a91905b808211156103565760008155600101610360565b5090565b90565b61009a91905b8082111561035657805464ffffffffff19168155600101610381565b5090565b905600a165627a7a72305820b1621421a7874086fb2f6d00bfdc9fb5cad4f478772e3b897911d4538de4ec020029
test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"l","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b8ac152734aef208c4deee1166706c870718e0433385c0cdc5732066f704792e.sol":{"keccak256":"0x9ef32120e3554810e0999d5d432857cb33e405a8686a752060012b66377e6151","urls":["bzzr://7b243ff4a249fc3a396d4dc988a4efae3415ef7d9d3e9a52cca9fb4f2abffd8e"]}},"version":1}
test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol:A 60606040523415600e57600080fd5b5b609c8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600360016000805b835b9150828411606557826067565b835b90505b505050505600a165627a7a72305820c307422fb13e12280b82e759984ecf44615393810172300299d0b43bec3e77830029
test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b8d3c09279a03641873bf9935606f90d8d4c337f3c91ca5eac73f9804cba2d9e.sol":{"keccak256":"0x5ce5f6560ee966d8116f5e45f952a043cb22c22b8d33cfad3d97daa3b3bc89eb","urls":["bzzr://341d299ad7b6473b934d3cbfc834a1021502d4822533d42f0713fc50b1503f93"]}},"version":1}
test_b93af23af26c977c5d4037377f4fade251bffff033b94aa168622cbd201668be.sol: ERROR
test_b9409b68d813841d07cab2ec713027f9d5dd68fac84a3b21b2f514b10b0e5a00.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol:c 6060604052341561000f57600080fd5b5b61022b8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100ca565b60405160808101610063818380896100a0565b9050610074816020840184886100a0565b9050610085816040840184876100a0565b9050610096816060840184866100a0565b90508095506100b4565b836100aa826100b9565b8452949350505050565b6100bc565b90565b505050505060405180910390f35b600080600080600080548060010182816100e491906101b4565b916000526020600020900160005b506005905550600080548190811061010657fe5b906000526020600020900160005b505493506000805480600101828161012c91906101b4565b916000526020600020900160005b50600490555060008054600190811061014f57fe5b906000526020600020900160005b505492506000805480600101828161017591906101b4565b916000526020600020900160005b50600390556000805491925090600290811061019b57fe5b906000526020600020900160005b505491505b90919293565b8154818355818115116101d8576000838152602090206101d89181019083016101de565b5b505050565b6100b991905b808211156101f857600081556001016101e4565b5090565b905600a165627a7a72305820f1d7736591e5260e5a95f4c9b0c7c74dac0a29543cf02d44847f778634333b440029
test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"},{"name":"l","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b9526e7f82a46df4253d76d776f424362e682f29e644840e7c8dd87d9740767a.sol":{"keccak256":"0x5ae326c94d14a890fae0dfc600e173be76527c68bc3d68d881eefecfb699417b","urls":["bzzr://d102901ea7e99502d15a4d6a443892ed4f07c1c59ff1ae78d5f798a34a17fb24"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol:C 6060604052341561000f57600080fd5b5b60e48061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608d565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6082565b60000b90565b505060405180910390f35b7f400000000000000000000000000000000000000000000000000000000000000060fe60015b5050905600a165627a7a723058206e93b0d060ef1d8fd871e40753a293a7d05519fe182f027f640a11d9aa3c3b7b0029
test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b98aeade4c9d7ec9d8a0326f55a110d7f12bcb7a4bac63329053b130aad811c2.sol":{"keccak256":"0x915558e8f355bf0b0b5293d87e5346b7341a388f12a5bcfc57dd64918c963a59","urls":["bzzr://25e852bfa087a91e183eb9cc8090d3f823ef4f446e22db47c76005720b1520cc"]}},"version":1}
 conv int_const 1 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_1_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_1_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_1_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol:C 6060604052341561000f57600080fd5b5b61016b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b6000805473ffffffffffffffffffffffffffffffffffffffff6401000000008204169163ffffffff90911690600290600190604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815260048101906024016100ca818380866100d4565b90508092506100e8565b836100de826100f5565b8452949350505050565b6100f0565b90565b610106565b6000610100826100ed565b92915050565b50506020604051808303818588803b151561012057600080fd5b6125ee5a03f1151561013157600080fd5b50505050604051805150505b5600a165627a7a723058205cf8553212f54b71c8cfab9cc54389f30926658f736d3cc32110989cd2e92c550029
test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b9b78e3259d5f9145d09ef5d5b84d3388b09010903bae52542a48ca392ed4e57.sol":{"keccak256":"0x538ed2c3688c627beb0919aa2de18d9040c81c028b403d121634a2ac7d1965c3","urls":["bzzr://659617bdb3292e515fbf3ae1f536686b61de919ae137c9242ba9e44594ea3ac0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol:C 6060604052341561000f57600080fd5b5b60fd8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c609a565b60405160408101605d818380876075565b9050606c816020840184866075565b90508093506087565b83607d82608b565b8452949350505050565b608e565b90565b50505060405180910390f35b60008063ffffffff808061010061ffff5b04915061010061ffff82165b61ffff8085169750919004908116945090505b50505090915600a165627a7a723058201337a01959c3af15b99657578c9850103402f5de834bfba7c46a45d4250697490029
test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_b9d1a6d39641078e668e35c073650b52576effafe7e4e8b6ebd6dfd46617c81c.sol":{"keccak256":"0x1cca93ed5bac27e5929f0f978046e697c8bf66b10785f4b34ee45584ea195692","urls":["bzzr://23197d51f9f5dba71f94d9103a11d79f1f9fd41be252e47efa41c03a750ca950"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol:C 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600619805b50905600a165627a7a72305820d6889c3b45cdf6ac2d79161afe500e61c34a3399deb2ec0e457d2814a92a008b0029
test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_baac0a95385be0618e3bcab69a25272fd1262a0f44d695a06e79850d623423c8.sol":{"keccak256":"0x454984b67cb1e22f2eb013be55b32f59c7e1d2fc514f55f085e4e910c5de95f9","urls":["bzzr://d51cda7e5bd4cc3066960dfed44055cb056494233b86961c9e48dbedacf6b0d8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:A 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600281025b9190505600a165627a7a72305820c43a994769c71a70341346903b592fcb92d2227c6ce3f81f1d876ab97c6ac6650029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:B 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515608f565b60405160208101606281838086606b565b9050809250607d565b836073826081565b8452949350505050565b6084565b90565b505060405180910390f35b600a5b9190505600a165627a7a72305820beb991d754b74d1aee4b23da64b37a9d4236a3a2452f208d89fcc00b64e2006d0029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:C 6060604052341561000f57600080fd5b5b6102248061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c1811461005e578063b3de648b146100ba578063b8c9d36514610114578063e2179b8e1461016b575b600080fd5b341561006957600080fd5b61007660043515156101c2565b6040516020810161008981838086610093565b90508092506100a7565b8361009d826100ac565b8452949350505050565b6100af565b90565b505060405180910390f35b34156100c557600080fd5b6100766004356101ca565b6040516020810161008981838086610093565b90508092506100a7565b8361009d826100ac565b8452949350505050565b6100af565b90565b505060405180910390f35b341561011f57600080fd5b6100766101d4565b6040516020810161008981838086610093565b90508092506100a7565b8361009d826100ac565b8452949350505050565b6100af565b90565b505060405180910390f35b341561017657600080fd5b6100766101e6565b6040516020810161008981838086610093565b90508092506100a7565b8361009d826100ac565b8452949350505050565b6100af565b90565b505060405180910390f35b600a5b919050565b600281025b919050565b60006101e060016101ca565b90505b90565b60006101e060016101c2565b90505b905600a165627a7a72305820338eacf641952a5c2143792bb34005eb9ef83b55b543858bedddaa7a298fd8580029
test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_baae152fce3c42785dd6e13ca7ca229136b2300d8d59f5710698db53228c606d.sol":{"keccak256":"0x91c2cc9688d09974deae7ee751453fba6fb2f3b279d78232231b8fd4ad1eda10","urls":["bzzr://38e7aa33815abd0dc552971dd7d8a1f5cf9cea8b8fad92bf45b88a374e8b33ad"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol:C 6060604052341561000f57600080fd5b5b60e78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060606040519081016040908152600482526005602083015260069082015260015b602002015160ff1690505b905600a165627a7a723058201f4da1129d138afef79d426702cf6d28be1627821f6d01b8a2123710f31b8dd80029
test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_baf46f4354509b48e5e10192d02ee79b0f5422cdc24dc2c172c5a2848f886403.sol":{"keccak256":"0xa835e93d335d62b7c64df21120c0e803e58095527e4e286ec5e5309d6e1b8dae","urls":["bzzr://13e4ab039248434c9fb8a81555b1edd4816fd7101fb95f0c199656ba073395ac"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol:C 6060604052341561000f57600080fd5b5b60dc8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663491daff18114603c575b600080fd5b3415604657600080fd5b605b63ffffffff600435811690602435166099565b60405160208101606c818380866075565b90508092506087565b83607d82608b565b8452949350505050565b608e565b90565b505060405180910390f35b63ffffffff80821660020a83821602165b929150505600a165627a7a723058203feeeae5326d46b3106040e4d4f5dffced3299365c62fd8f8007fdae86443c0f0029
test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint32"},{"name":"b","type":"uint32"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bb297b05cf679631ebed3fd2c54c14b2b177225990aa68191d709657d9c4fc45.sol":{"keccak256":"0xcf0e5c74df61de44af6102dee5f2ab0c6ce94e02c508d6deaa85186f5f68b696","urls":["bzzr://002ddae28b2d040392d747138a5ee052c3456ed21ec869638d2903f104869e56"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol:Test 6060604052341561000f57600080fd5b5b60cf8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b7333445566778899001122334455667788990011225b905600a165627a7a72305820c36b82df13cc2d15b7248ef2a7c7ee711d0c30715748e9f30bb372cf1adb98190029
test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bb5b24f01833e7867dfd5d6e7f6fa29c781de187c20588bf71c80cb17b96a652.sol":{"keccak256":"0x38114533a4f9b3768bba42bc0ca0da8221fd14e64f1855b41219838547f1fe7d","urls":["bzzr://fb8d239dd8c245acf932990b7730077c59f82ac7fcbc228dbc043f0dfaf96f7f"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:helper 60606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a723058200a68f90d2f64036d705fd114654e4f24f1099ee63753094fac077fdbe3a472fc0029
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":"helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":{"keccak256":"0x5a016cb4fa4d58f642e668e38210cc44c7cd749e75e987fd914a8c9e3b4254e6","urls":["bzzr://ec26ae85f3565af3a43054daf8ec5851ac20eced6080257e018c892488de4b5d"]}},"version":1}
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:test 60606040525b61000d610061565b604051809103906000f080151561002357600080fd5b60008054600160a060020a031916600160a060020a0392831617808255909116906005604051600060405180830381858888f150505050505b610070565b60405160558061016883390190565b60ea8061007e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b3415604657600080fd5b604c609a565b60405160408101605d818380876075565b9050606c816020840184866075565b90508093506087565b83607d82608b565b8452949350505050565b608e565b90565b50505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff308116319116315b90915600a165627a7a72305820d3a61f3c3cc61d25fdcb5aa1b97f6d8580689dcd2afe8f84812d829721ebd43f002960606040523415600e57600080fd5b5b603980601c6000396000f30060606040525b600b5b5b565b0000a165627a7a723058200a68f90d2f64036d705fd114654e4f24f1099ee63753094fac077fdbe3a472fc0029
test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"},{"name":"helperBalance","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bb5f4bcc5040495a03b96a0e99fa15bc256c2593dc2c558d944d4885c990ab1f.sol":{"keccak256":"0x5a016cb4fa4d58f642e668e38210cc44c7cd749e75e987fd914a8c9e3b4254e6","urls":["bzzr://ec26ae85f3565af3a43054daf8ec5851ac20eced6080257e018c892488de4b5d"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058208a5481cf201d1d57a10bbfb5293e6befb48548398fef0eac1b4e08b76483b6c30029
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":{"keccak256":"0xc2ca9bf09c2c42141f02bfb900feb191ba2855808c3cd7ddd2081aa47e9b0a68","urls":["bzzr://db0dbe07343ea1a44ab0f4257ecb979745fd702322d7f02cc539dacfa7740e8e"]}},"version":1}
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:B 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2179b8e8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060926098565b90505b90565b60015b905600a165627a7a723058200e7e5972b3040b339bf8f905377b0386a16e935cef21a1b305164c098b783b540029
test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bbf870df11917c7794c40e4fabf4bfedfdaff647f38acb458d8809a0738c1228.sol":{"keccak256":"0xc2ca9bf09c2c42141f02bfb900feb191ba2855808c3cd7ddd2081aa47e9b0a68","urls":["bzzr://db0dbe07343ea1a44ab0f4257ecb979745fd702322d7f02cc539dacfa7740e8e"]}},"version":1}
test_bc2c5438526d91e46a9d220753afe053cc619d2e18a53a1c3605c895450a00cb.sol: ERROR
test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol:ClientReceipt 6060604052341561000f57600080fd5b5b60a98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d0e30db08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b7fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a15b5600a165627a7a72305820dd91944e970d1c1742c5eb1f0eb006f6f8da4197a2ada98ef921491b2889733d0029
test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bcbb7af724404988b675c8936c0068d3108a1681964e0242d6df9612cea6a088.sol":{"keccak256":"0xdc5ca2f16837ad72a9863dacf1dcb6c5d9a737ffba4366c977318a8e18ef83a5","urls":["bzzr://0034576fa6fd95fabf705496638167a6038fce8df0c2da6b2273aef0c67e9563"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol:C 6060604052341561000f57600080fd5b5b61011e8061001f6000396000f3006060604052361560465763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114605557806326121ff01460a3575b60535b600134016000555b565b005b3415605f57600080fd5b606560e7565b60405160208101607681838086607f565b90508092506091565b836087826095565b8452949350505050565b6098565b90565b505060405180910390f35b606560ed565b60405160208101607681838086607f565b90508092506091565b836087826095565b8452949350505050565b6098565b90565b505060405180910390f35b60005481565b345b905600a165627a7a723058209914665c401b4303948e6dd1bae012b78f4a4bb3b51302b12dfe9f09f40fa9160029
test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":true,"type":"function"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bcc23b96e7c7f16a061766c2e6b71bafa93e95620dd6b0bf810bccb9df00e9f4.sol":{"keccak256":"0xfa16af48145ead105be72055e3d7f874bf4554d161b3b22476f6caa57220aeba","urls":["bzzr://5a96c378bd1999fe09ccf1096bdc94bad5a794ff3ed642e5761f4b0051271afb"]}},"version":1}
test_bccd18d2661c52f039ee39184ce13bfc886628fa99379484a921dfce2a74d0ac.sol: ERROR
test_bd52527e75f7635d22859024a104e877fbea2ed8bd8df4c89b38db208e8e234f.sol: ERROR
test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol:test 60606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b60426044565b005b5b5600a165627a7a7230582089b0417423a5ea422823c6905c5b863a91237d5237be99e1366566419d20b4b50029
test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bd746452cdc53e2298ab80eef44abbb5a64d8fe42061310d691d225de6af0699.sol":{"keccak256":"0xe146f5b404d806b24d28124285b641aabfa929a26bc6cf16ded946b6df4c6259","urls":["bzzr://0d6be5a3fa13e51104831648826abd6ea838f52b899be3f7f40a864ce74c9f34"]}},"version":1}
test_bd85b7787d7c9483b9e1d61acc5d045c58beca1450a4b4f575eca511747f1112.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol:test 60606040525b5b5b60ef806100156000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c68d81e08114603c575b600080fd5b3415604657600080fd5b606573ffffffffffffffffffffffffffffffffffffffff6004351660a3565b60405160208101607681838086607f565b90508092506091565b836087826095565b8452949350505050565b6098565b90565b505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff16ff5b9190505600a165627a7a72305820a9ff971bf013e8709579a4d7d8910eb4bf0348e3c384f0aa3247064ecdfad7a40029
test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"receiver","type":"address"}],"name":"a","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bd9b11841eb136a9c241be169a7f859b94c9dc32a4a3ca7c01b51eab9dd283f3.sol":{"keccak256":"0xd028405086e4afbc682d5f6e65784f427acb64d6a1f276fcc2518cd91453ed6a","urls":["bzzr://a068755447c3cc62e33e8c3e449d9dc13f7db86aca43cca05c7facc2dc592050"]}},"version":1}
 conv bytes7 -> bytes7
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes7_to_t_bytes7(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes7_to_t_bytes7(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes7(value))

			}
		
			function cleanup_assert_t_bytes7(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFF00000000000000000000000000000000000000000000000000)
			}
		

test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol:B 6060604052341561000f57600080fd5b5b6101418061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633120d434811461003d575b600080fd5b341561004857600080fd5b61005660ff600435166100b6565b6040516020810161006981838086610073565b9050809250610087565b8361007d8261008c565b8452949350505050565b6100ab565b78ffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b600060ff82166001825b7f313233343536370000000000000000000000000000000000000000000000000078ffffffffffffffffffffffffffffffffffffffffffffffffff198216141561010a575b6100c0565b5b505b5b50509190505600a165627a7a72305820ce7b67dce34e3d0fb6fa2cd1b966632b21c659ab2b40b496fee1e17ba04560940029
test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"}],"name":"f","outputs":[{"name":"r","type":"bytes7"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bdd47a22a3cc88e204fe24b9e6997c9ac1218b43bf51562b98d46a059161f479.sol":{"keccak256":"0xe6a64db24db990c896775bac71cbebda190c130a250c26e2252ecaeae0a7cae5","urls":["bzzr://8d62006b2ef82c13866b0422735bd7b51a01e119fb62760e9455a9d19c59a7ca"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol:C 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6142005b905600a165627a7a72305820934d6a1a504684787eddf71376e83cfdc1152f41bd4c5019ca59b63b1e134ec90029
test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bdfd9653465bcade4773d2fe4b090bc7faf10a0673b39a6fb5a278e7fa1ea676.sol":{"keccak256":"0x85d401e9cea7e9e27e5b597d429f6a93da4eeab533f86b1e615b75b614b965e1","urls":["bzzr://0cc668b88a8f5a63d32876465d7e5465b1a3ba43ba0b4bc6c70c01ecdcb62601"]}},"version":1}
test_be012172ebceceb8d789b00c43e26cfebd1816d89a9c95d410b6dbbdd0f9b31d.sol: ERROR
 conv uint256 -> uint256
 conv uint8 -> uint8
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol:test 6060604052341561000f57600080fd5b5b60017f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2b8190557f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2c805460ff1990811660021790915560037f2cb3386a8d1f0cfb7790ec8108ec5b22bb928014d163271568e125471f357ddf55600760009081526020527f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2e805490911690911790555b5b610155806100cf6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f0ba8440811461003d575b600080fd5b341561004857600080fd5b610053600435610102565b60405160608101610066818380886100ab565b9050610077816020840184876100c4565b905061008881604084018486610092565b90508094506100a6565b8361009c826100dd565b8452949350505050565b6100bf565b8361009c826100e7565b8452949350505050565b6100d8565b8361009c826100ef565b8452949350505050565b6100e2565b151590565b6100ea565b90565b6100f5565b60ff1690565b5050505060405180910390f35b600060208190529081526040902080546001820154600390920154909160ff9081169116835600a165627a7a723058205944b935eb4a437e218073caa81c00272128849d200051cfcdae55b37bdcf5e00029
test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint8"},{"name":"d","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_be01f1ab895f1808c5370c8ae585e9d5ad1a29dd57b9a9c5400459a53546ed8e.sol":{"keccak256":"0xa588745b75aee8e76b79562485d17e74ff9e4109e3504059a8750a5f2a51c0b5","urls":["bzzr://c78b0ccb8c6fbb89b3d5ac0950aed76d021843a47bc05f758970d3c275b8a91a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol:test 6060604052341561000f57600080fd5b5b6007600090815260205260087f870253054e3d98b71abec8fff9ebf8a15d167f15909091a800d4acaab9266d2b555b5b60ce8061004e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416639507d39a8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b6000818152602081905260409020545b9190505600a165627a7a72305820ee764dd778fd702aade55fc90d0ae90f9965412867d296341a12b97c187fcf0f0029
test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"get","outputs":[{"name":"value","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_be15fb5a1dd28fb8b622b2091bcdd76ca2455a78f739c1728c3a47d02778173c.sol":{"keccak256":"0xd274fad9768b13c632d1e7d19f0293384dff664854cd109cbb533ce1992cdf2f","urls":["bzzr://b4db2c7b08c02527a663bdd4a2c1f7b4ba22ce5db27a8da12473c2d38365c6a0"]}},"version":1}
test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820cceb2b91defdec662524e964164fe8db41e5e445a78974e69f6faae0ce4a5ac20029
test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_be3186891720e98db4b30dd61fa2d7f42fcda5c87c4252a66337bd3e506b7b1a.sol":{"keccak256":"0xc9f2d46fd31064ca8253a4c7648321157ab19571bab1cc112eabb7c308647105","urls":["bzzr://791459b59693dfa6a89ca506d7fee0d0bce276cfff308377231a70db50ce0bc1"]}},"version":1}
test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820bd38bb8b5ffb032a4322f07f56de155725cc725c0b4b7c7286c0a0276640a8090029
test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_be9900ecc0e2e59938c41aaf0f5edbffa201c267dc51c9dee17adbc0c257b83f.sol":{"keccak256":"0x90ef6b7c38411ecd19b4cdf6e1cada4bb9224ea33e7a9aef9d331bcfa02393d8","urls":["bzzr://91b3a3eeed669f6eca699381425622a62ee4b22693556c419fe0b37eff017c43"]}},"version":1}
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058200cb85d47800e3dd2e380bff98549d5453d052ffcea0b15a475c1a93cc238286b0029
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":{"keccak256":"0xcbaa007cb948dcf1a0c736a55a6c4e1bfd58a034008399f5bc7b12810b4bdc0d","urls":["bzzr://899b8e723f0ac1899ca71c0dd437593480c2f2d53682afb16253ca348f31b103"]}},"version":1}
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:D 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c70cee20c0063801df61d2ea33d5982a987fe47ee12854e33afa4db33ba9c7d40029
test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol:D {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":"D"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bec1ff0ebcca9396041af49b58c4094b24910a91603fa9f6f7182e1795d90aed.sol":{"keccak256":"0xcbaa007cb948dcf1a0c736a55a6c4e1bfd58a034008399f5bc7b12810b4bdc0d","urls":["bzzr://899b8e723f0ac1899ca71c0dd437593480c2f2d53682afb16253ca348f31b103"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol:test 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d406534c8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805b50905600a165627a7a72305820975102f1cd52eb2245a91c186669f30af01ac3113ff4cf46e8d91260147481ca0029
test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"delLocal","outputs":[{"name":"res","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bec4c1ed01554f3938f6c02b3a80bb3e2c302fe7d84c808baf2a265106e6b766.sol":{"keccak256":"0x6c83cfca492eb8bd33fb9f882747a02b27023af364355436c0766727c16e3a40","urls":["bzzr://a7696cf333418b135c308eef54c4e4ac9ca8abd8bc60bb4677c4b97fc8a30ddf"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol:C 6060604052604119600055341561001557600080fd5b5b60bc806100246000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a723058206099aad6cc963c28049b3f1dd4a08d688ffdf53041fc145a2231bb8c632e73b20029
test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bee62a520e0e70d27d5b0f7c38cdfffca49e6daff71320db8f18301d842276da.sol":{"keccak256":"0x666008c10b46ce76de7171fac62ea320f186e947a3433365ec8f019b367155aa","urls":["bzzr://ef904bee1cefe03abf54e36ee6b5891bb0db776d376de698ba8d3387faf8d01b"]}},"version":1}
test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol:C 60606040523415600e57600080fd5b5b60918061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b600a8110156061576001015b6051565b5b505600a165627a7a7230582009e3e21351205617324de9f4b3a66024d92bf6e78b6ab8989b59cee66936bf310029
test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bf32d86194a2a4e908921b181a9a4355df3d47ca496b05889f753d9c73188bc2.sol":{"keccak256":"0x456df14344d00e8ebc5f1d7c53251970d6603b0d9a4694d1b66ff7d615ab6823","urls":["bzzr://e45bfba950aa7195220f6b08e48e334b6e3e4713516f920b7f7641e54ca12941"]}},"version":1}
test_bf798fd980a2088d40696dd9316a40ed569f531137602b3d645d1f8961b9ecc5.sol: ERROR
 conv enum test.Choice -> enum test.Choice
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_enum$_Choice_$4_to_t_enum$_Choice_$4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_enum$_Choice_$4(value))

			}
		
			function cleanup_assert_t_enum$_Choice_$4(value) -> cleaned {
				switch lt(value, 3) case 0 { invalid() }
			}
		

test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol:test 6060604052341561000f57600080fd5b5b60d08061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166385bb7d698114603c575b600080fd5b3415604657600080fd5b604c609e565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6093565b6000600382108015608b57608d565bfe5b50919050565b505060405180910390f35b60015b905600a165627a7a72305820a411e4ec5708fd20d41e12b7864fb5332c74c12a48262c5d63cc8e61bc2922580029
test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"answer","outputs":[{"name":"_ret","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bf90235e414dd44625c668298398aa6183ac77547769d8860351ea247b900bdf.sol":{"keccak256":"0x89ef320f55e63233de8e528404ef2b533a2cb09c8968a00a1a1ba7a487e0be29","urls":["bzzr://ccf8dfd46d17203604f52522d725cbae2ede7fd396dc83196858e8c69fa34550"]}},"version":1}
test_bfbb9c384603a8e4665a18d56e4fec627959780456dc5bd7136fd1239065a126.sol: ERROR
test_bfdf2d2e140616f5b9a7c6ed475c623179db9b56f8db974e0d9ce6de34b24886.sol: ERROR
test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol:test 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b505600a165627a7a72305820299a958155f5320254919068fb2fc3506862a0a438c630766f12ffaffd8386120029
test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_bff20c0308feb3b5f60c6218e9056b9fea35f11821b335dd91e2daf38179a98e.sol":{"keccak256":"0xc7d8415981ad26b519f24bf645ffa5cf8f4615e2cf4b41e0f1271765ec5f1714","urls":["bzzr://998bb76fb71beed2f09d655d3c4f5e657d79976adb1fd5324be742431d0791a2"]}},"version":1}
test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820033fd9aaf62fc320ca906b196a2388cc17f62dd8dfe9acaf08140b52e010108d0029
test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c0b2075252c086b2c9d344d89083f6f3ccb84cc38dbe4f63fb428547f4b3f492.sol":{"keccak256":"0xaa12a3c29b083f91d969333efe4d5def0f496668d6fc2b8208aff94bce7dfc2b","urls":["bzzr://f49518d43cef209f340daf92b06233d8604ddc42f7533e5685b5ef8a0e13fb60"]}},"version":1}
test_c0e4874cb837080bd0c2b961c9f26bff7d4e7e4ef4ce80153e285ac100c9bdcc.sol: ERROR
test_c102b695c3fe66c6b89aa75a9d78153e154f8351a0b9f4442a84c6f8b6382201.sol: ERROR
test_c10c4b99f575f8c052694a3bdc4048c229f5fed1f714a4b2b5855dcb4fd564f2.sol: ERROR
 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 160)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value4,
				$headStart,
				add($headStart, 128),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

 conv uint8 -> uint8
 conv uint16 -> uint16
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint16_to_t_uint16(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint16_to_t_uint16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint16(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_uint16(value) -> cleaned {
				cleaned := and(value, 0xFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol:Test 6060604052341561000f57600080fd5b5b6106178061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635a61549b8114610053578063b5d11e9914610129578063f4eaeb4e14610234575b600080fd5b341561005e57600080fd5b61006661030a565b60405160808101610079818380896100e8565b905061008a816020840184886100b6565b905061009b816040840184876100cf565b90506100ac816060840184866100e8565b90508095506100ca565b836100c082610101565b8452949350505050565b6100e3565b836100c08261010d565b8452949350505050565b6100fc565b836100c082610115565b8452949350505050565b610108565b61ffff1690565b610110565b90565b61011b565b60ff1690565b505050505060405180910390f35b341561013457600080fd5b61013c610478565b60405160a0810161014f8183808a6100e8565b9050610160816020840184896100b6565b9050610171816040840184886100cf565b9050610182816060840184876100e8565b90506101938160808401848661019d565b90508096506101b1565b836100c082610201565b8452949350505050565b6101ca565b836100c082610101565b8452949350505050565b6101e3565b836100c08261010d565b8452949350505050565b6101fc565b836100c082610115565b8452949350505050565b610206565b151590565b610212565b61ffff1690565b61021a565b90565b610225565b60ff1690565b50505050505060405180910390f35b341561023f57600080fd5b6100666104d6565b60405160808101610079818380896100e8565b905061008a816020840184886100b6565b905061009b816040840184876100cf565b90506100ac816060840184866100e8565b90508095506100ca565b836100c082610101565b8452949350505050565b6100e3565b836100c08261010d565b8452949350505050565b6100fc565b836100c082610115565b8452949350505050565b610108565b61ffff1690565b610110565b90565b61011b565b60ff1690565b505050505060405180910390f35b60008060008061031861053a565b6001600060025b6003020160005b50805460ff191660ff9290921691909117905560026000815b6003020160005b50805461ffff929092166101000262ffff00199092169190911790556003600060025b6003020160005b50600101556004600060025b6003020160005b5060020160015b602091828204019190065b6101000a81548160ff021916908360ff160217905550600060026005811015156103bb57fe5b6003020160005b5060806040519081016040908152825460ff81168352610100900461ffff166020830152600183015481830152909190606083019060028084019180519081016040908152909291908301826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116104125790505b5050505050815250509050806000015194508060200151935080604001519250806060015160015b602002015191505b5090919293565b6000806000806000610488610568565b8060005b60200201515195508060005b60200201516020015194508060005b60200201516040015193508060005b60200201516060015160015b60200201519250600191505b509091929394565b6000806000806104e461053a565b6001815260026020820152600360408201526004606082015160015b60ff909216602092909202015280519450806020015193508060400151925080606001516001610469565b602002015191505b5090919293565b60a060405190810160409081526000808352602083018190529082015260608101610563610596565b905290565b6101406040519081016040526002815b61058061053a565b8152602001906001900390816105785790505090565b604080519081016040526002815b6000815260001990910190602001816105a45790505090565b60a060405190810160409081526000808352602083018190529082015260608101610563610596565b9052905600a165627a7a723058205ab94e2694947f0b00b6ba911de1a68ab851d8146510d84d3341345a3a77e98f0029
test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"testCopyRead","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testInit","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"},{"name":"flag","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"testAssign","outputs":[{"name":"x","type":"uint8"},{"name":"y","type":"uint16"},{"name":"z","type":"uint256"},{"name":"a","type":"uint8"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c11ff2a3bfb71603ebbd49fcbc9a9ae50c95a037cc630e456424ae370b6292a9.sol":{"keccak256":"0x8169d71ea63e69cb9527e25648bb4382d25cc731a57aa03a9b5702bb2ae27902","urls":["bzzr://b22d0bd8f60ec2e60f33488a0a5041561f7861017a9ff0aa4362b25ddc92d23b"]}},"version":1}
test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol:C 6060604052341561000f57600080fd5b5b61019f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b61005a61011d565b60806040519081016040528060806040519081016040908152600182526002602080840191909152600382840152600460608401529183529101906080905190810160409081526002825260036020808401919091526004828401526005606084015291835291019060809051908101604090815260038252600460208084019190915260058284015260066060840152918352910190608090519081016040908152600482526005602083015260069082015260076060820152905290505b50565b6102006040519081016040526004815b61013561014b565b81526020019060019003908161012d5790505090565b60806040519081016040526004815b60008152600019909101906020018161015a57905050905600a165627a7a723058200cf11c4f4d77a755defdf941af96d75cef9ca42aa5bcb0ce2566e6e79bd38f660029
test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c16909255f984221fb00c0d3a52ad1f2d67d93d36e355a80963f696d7cfd807e.sol":{"keccak256":"0xd1304f13bf778eb6660088e73ef92a4aff882a0577a320c9aa61b49098011142","urls":["bzzr://0e3bce25cbb92f680119f5cb5d1b328e7f114a07dc2bb594f29ce3cfd6b0d678"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol:A 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60303b5b905600a165627a7a72305820c03b9f6941fd5cb6b8c842cc770ace0ce915789ecf132d115d229f8e3a2181620029
test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"_s","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c1bc606c0ad514ea64bd96379bb60dc27d684fc2518ee9b0ee3248cd20ca4379.sol":{"keccak256":"0xfd8c0df43624a92920e51c1fdf94cbc66303a4e32641122f55f251f6882e89b9","urls":["bzzr://1bfc0600a5dfb15974bd1965bbfb73c105f366f3559c02cc9effdc218adc6533"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c1f57b79ad8852a8ca40e6a06d7d8c835475399b9acdc15e8553519953860abd.sol: ERROR
 conv int_const 2 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_2_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_2_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_2_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol:c 6060604052341561000f57600080fd5b5b6101138061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60017f61626300000000000000000000000000000000000000000000000000000000007f95f5d4b57ca025e2036c05fcd6cfa13dbb055e82087915d265a5ae772e54ff1a60026040516020810160a58183808660ae565b905080925060c0565b8360b68260cb565b8452949350505050565b60c7565b90565b60da565b600060d48260c4565b92915050565b505060405180910390a35b5600a165627a7a72305820bb775bc87149ede9a04b64cf14c3e2fad59a593b7fe748665f9861e1febe3cc10029
test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"a","type":"uint256"},{"indexed":true,"name":"s","type":"bytes3"},{"indexed":true,"name":"b","type":"bool"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c22ecedb1ec3590c961ac3628cbb42e15dd3669a60f6091c990efb425817b690.sol":{"keccak256":"0x3ac192e159b6ea23946238f164909bf6ec27d94579ff335b73cd128538ab76ac","urls":["bzzr://8e5215ab91585261ff7230445e4161d3edce7f695a7cd81b2e52756238c8df3b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:helper 6060604052341561000f57600080fd5b5b60c88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b905600a165627a7a72305820244a2fc0bfaa0f115901d5d5434e8484039388034159ad4579ec65bb18250e500029
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":"helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":{"keccak256":"0x4284c863cfef5beaaf3e221a641dc1025ae08d76f8b99cbec8da58a8307d551c","urls":["bzzr://e879205a15df76f08afb8d5cca60e02ac4efd54d1e3fd906d0048c60f728fba1"]}},"version":1}
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:test 60606040525b61000d610049565b604051809103906000f080151561002357600080fd5b60008054600160a060020a031916600160a060020a03929092169190911790555b610058565b60405160e6806101bc83390190565b610155806100676000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663fd72b6e9811461003d575b600080fd5b61004860043561008c565b6040516020810161005b81838086610065565b9050809250610079565b8361006f8261007e565b8452949350505050565b610081565b90565b505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff166312065fe083601483836103e884838383600384016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303818589803b151561010157600080fd5b88f1151561010e57600080fd5b505050505060405180519950505b50505050505050509190505600a165627a7a72305820339681c87ed08e609af867fda0c9d69c29e76c44664832cc22ed6354b178edbf00296060604052341561000f57600080fd5b5b60c88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b905600a165627a7a72305820244a2fc0bfaa0f115901d5d5434e8484039388034159ad4579ec65bb18250e500029
test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c25db213bf8b2c870392e3391bec56e6da731525246e8176099d0df55c9a969e.sol":{"keccak256":"0x4284c863cfef5beaaf3e221a641dc1025ae08d76f8b99cbec8da58a8307d551c","urls":["bzzr://e879205a15df76f08afb8d5cca60e02ac4efd54d1e3fd906d0048c60f728fba1"]}},"version":1}
test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol:test 60606040523415600e57600080fd5b5b6002600160405190815260200160405180910390a15b5b60368060336000396000f30060606040525b600080fd00a165627a7a72305820898905c20d3cdcbc362e5aa649cfbcf9d18466c148cacaceab3f7596380b3f120029
test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c2eed43f80f40824163c215b553d7388ba411ad5e4224bedf9917e2061a4b522.sol":{"keccak256":"0xe98effa0cd590902903106e2eb15c58fcc68a793d0ce7b0563fbb25e28714b8c","urls":["bzzr://bd5486171e957bfae4c072352e63f8215167010bb2f9d1357e5d9a997c869c1b"]}},"version":1}
test_c3e9738d0c612381a210b684cd39db65807246a6e39cfd7100641402cb951e13.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Base 6060604052341561000f57600080fd5b5b60bd8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd9788114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820ea20770b2f0d2737775fbf394f1ff22247e9b96ec54826e869afeb682e3baa010029
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":{"keccak256":"0xdd6ae81b45280e669de8c40c29c316137de15a5e41d686c721c3dce52870fd94","urls":["bzzr://1ce54022baf45f78967f6f6d00441f689808c7be8f93bd84444f878c743d4c88"]}},"version":1}
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Derived 6060604052341561000f57600080fd5b5b6101c18061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663099bd9788114610053578063214cd4cc146100aa5780634848b1a514610113575b600080fd5b341561005e57600080fd5b610066610172565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b6100bd610179565b604051604081016100d081838087610083565b90506100e181602084018486610083565b90508093506100ff565b8361008d8261009c565b8452949350505050565b610107565b90565b50505060405180910390f35b341561011e57600080fd5b61012c600435602435610184565b6040516020810161007981838086610149565b9050809250610097565b8361008d82610162565b8452949350505050565b61009f565b151590565b505060405180910390f35b6000545b90565b6000546001545b9091565b600082905560018181555b929150505600a165627a7a723058203c69d19f0eca42aa89af1971a5db281c8fc9fe46fddaf7a1e265719db8ba74590029
test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getViaBase","outputs":[{"name":"i","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getViaDerived","outputs":[{"name":"base","type":"uint256"},{"name":"derived","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"base","type":"uint256"},{"name":"derived","type":"uint256"}],"name":"setData","outputs":[{"name":"r","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c42a3ce55bb01ad70690c71534b2576cc356957aea4b3ffaa304ee30d4417fe5.sol":{"keccak256":"0xdd6ae81b45280e669de8c40c29c316137de15a5e41d686c721c3dce52870fd94","urls":["bzzr://1ce54022baf45f78967f6f6d00441f689808c7be8f93bd84444f878c743d4c88"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol:test 6060604052341561000f57600080fd5b5b60de8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398c3a6c18114603c575b600080fd5b3415604657600080fd5b60516004351515608f565b60405160208101606281838086606b565b9050809250607d565b836073826081565b8452949350505050565b6084565b90565b505060405180910390f35b600060cd61abab83609f578060a4565b8160ff165b61ffff1692505b50509190505600a165627a7a723058207fbb8fcbf8ea55a3ad4aeb4a78352ddd281f2095b4aae154de70f9a479d34b330029
test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"cond","type":"bool"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c43737c903a513fdc9c9ba1d62e1f9dace04191bcace804cfa452a9008037ac6.sol":{"keccak256":"0x60aa6a5917f23531286a7878855489cd03f59702d808a1728f0c548caa19e3f6","urls":["bzzr://b84afdfdd9e1f48f3b479aae3213f9a9ab23aeb057ba7dbcf602bcc13f48a44a"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol:c 6060604052341561000f57600080fd5b5b6102708061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100a6565b604051604081016100638183808761007e565b90506100748160208401848661007e565b9050809350610092565b8361008882610097565b8452949350505050565b61009a565b90565b50505060405180910390f35b60008060096100b5828261018a565b506004600060088154811015156100c857fe5b906000526020600020906002020160005b5055600080546005919060089081106100ee57fe5b906000526020600020906002020160005b5060010181905550600060019080546101199291906101bc565b5060018054600890811061012957fe5b906000526020600020906002020160005b50546001805491935090600890811061014f57fe5b906000526020600020906002020160005b506001015490506000610173818061018a565b5060008054610184916001916101bc565b505b9091565b8154818355818115116101b6576002028160020283600052602060002091820191016101b6919061021d565b5b505050565b82805482825590600052602060002090600202810192821561020c5760005260206000209160020282015b8281111561020c578254825560018084015490830155600292830192909101906101e7565b5b5061021992915061021d565b5090565b61009791905b808211156102195760008082556001820155600201610223565b5090565b905600a165627a7a72305820840824ab03df3856107749ea065fcea5708f38a89c75e256460c12c0d4ba65770029
test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c48f13e95055265999e4cf91af23241ac26b9f15e0d45cd822baea4ddd7aa7f1.sol":{"keccak256":"0x5906c74ba4ad307944d02a450a538848d103d10a612cb84b4871ff757a658dee","urls":["bzzr://9c3c942b8ff83eae40df5e10643a47c2265fbe5165b6d2fb51083c0f5d73222e"]}},"version":1}
test_c56f8ba3e97156a43695c25fefb95edeb24f22fc31ac660904516eb02daec3ea.sol: ERROR
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:C 6060604052341561000f57600080fd5b5b6101758061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610055565b005b61005d610101565b610065610101565b61006d610101565b600a60405180591061007c5750595b9080825280602002602001820160405280156100b257816020015b61009f610101565b8152602001906001900390816100975790505b50925060146040518059106100c45750595b908082528060200260200182016040525b509150836040518059106100e65750595b908082528060200260200182016040525b5090505b50505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820c750c9b8b35f06cab21cdc78474e8db98a3f421d567e90c386adb458068f53d40029
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"size","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":{"keccak256":"0x582625b40d3b77a5de2a37e1fcdd958de2748a3aac236f4308410f4b3563cf37","urls":["bzzr://c44f13dd0b0f28e1e0fb4d25ed19b778f73c760417c26257fc57b22f68e6e0e0"]}},"version":1}
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582078b5638836be1eeae08911c331c5b87a89c569683e0c68363badc0ebe37c466d0029
test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c6107e35cffebe497914f5c8ca83631ed4ed78f7c092723b95879d233b4776fe.sol":{"keccak256":"0x582625b40d3b77a5de2a37e1fcdd958de2748a3aac236f4308410f4b3563cf37","urls":["bzzr://c44f13dd0b0f28e1e0fb4d25ed19b778f73c760417c26257fc57b22f68e6e0e0"]}},"version":1}
test_c63bad54c107d0b6f60b8f3319d2545bb09d21903776a034630a4f7491bb2936.sol: ERROR
test_c6808ce893159d734383920da3efb9f96c4b876bb3b033a5f73557bf4b73bac8.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol:test 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000600a6095565b60055b60ff1690505b905600a165627a7a7230582099ca6cac6fc52ed1ca3d601e4664da49bd13aa8dbb8cec6a8f112389c656988e0029
test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c691af168123ce54aa795ad5f142ac45d96703249526e60d63c7b2ab136d7f1c.sol":{"keccak256":"0x89f66411972bc76e949eee143624da199562fb30c34073a43b450d48425b218c","urls":["bzzr://1dc5c59520ed93936c2cc8c2a3cd72dba87691c74e8bcb208bbe6084e95ee20c"]}},"version":1}
test_c69631d68bc35421f7f05e8aa1e929dfb476e4e2c34f307f35622f9f2730484c.sol: ERROR
test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820db29ef936ae2c1c63e0e7d5f8157611402ab0490fed6d6ca5ca298d3a69600160029
test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c770fadafbe9fc69c4d66e5de5ed8582b240355ba622b14735163bb9fe8bc421.sol":{"keccak256":"0xcf2087f305855203588e7946ccc5a099e8e8befd4354a22168fd9af88c22e668","urls":["bzzr://329d497952a2a3caab683829a164bcc21f95e35077894cb0aa49c5eb201f237d"]}},"version":1}
test_c781a0c0a0a85155c5c8a946ed05a37df01b9cdb664d7925441b32af7309d5dd.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol:Test 60606040526064600055341561001457600080fd5b5b610232806100246000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318160ddd811461005357806326121ff0146100aa578063f8a8fd6d14610101575b600080fd5b341561005e57600080fd5b610066610158565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b34156100b557600080fd5b61006661015e565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b341561010c57600080fd5b61006661016f565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b61009f565b90565b505060405180910390f35b60005481565b60005b600080546009190190555b90565b600061017961015e565b503073ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156101e657600080fd5b6102c65a03f115156101f757600080fd5b50505060405180519150505b905600a165627a7a7230582052a4d242c42ad9dc9ec316ec9eca68cc92caf0478cc0c38bec7d014f80b5466a0029
test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c795e12563ed472ed4cad4b15f421d67d6b08968869147de8c9d10330556d347.sol":{"keccak256":"0x6f85d66c337362b9eb2924ff9df929a9783ef0e51ab28c2f38a9d93ff165748a","urls":["bzzr://2c2bcf33aaa25056970bab3f2f38214cb6e3b6238d4f7e0706f5b10aa4424b92"]}},"version":1}
test_c79a5d10c1c97ed4fb713ca30564dfe3589a2a6ff9e16f2a43365875b868b12a.sol: ERROR
test_c7a88d81f06d6e1a616075bfe3ab854e5d6daa3e4a784eb88c8d9f0c058f0659.sol: ERROR
test_c7b4660768fb82780eff0d3eb258de67517b1a5b3cc519763e37ca7661538d03.sol: ERROR
test_c83a84ed18c674b35b576360d0753a0ea1c7eb8bce23f8470b2d035babd10184.sol: ERROR
test_c85cbc5cb39b530c421b26bc00b4d6a145d564d7032665c716560e31ab965cdf.sol: ERROR
test_c863ff7a131f672a5e3839286b6a37856806f65028c1100827f49dc3c2045a1f.sol: ERROR
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol:Test 6060604052341561000f57600080fd5b5b6101078061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663de3a22df8114603c575b600080fd5b3415604657600080fd5b605260ff6004351660b2565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b60a7565b7fff000000000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b7f010000000000000000000000000000000000000000000000000000000000000081025b9190505600a165627a7a72305820b165626842505a942edbfb00c0881cdc81cd5388d4a5eaa2381ea6b1ce5ae0d80029
test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"uint8"}],"name":"UintToBytes","outputs":[{"name":"s","type":"bytes1"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_c8e0c036c289d7676c19e0248a071d111eb25dd141bd5091b971b017d7b9d7ca.sol":{"keccak256":"0x88be3a4637a9b15ff03f77c9dba9c12d0500801ce74cae63083baaddb4c2193f","urls":["bzzr://93f891c0a78425bef8d67a96632ee170bc730becfabf2a7da482118fc2c37b70"]}},"version":1}
test_c95108771355062981fa5830dd8dd1bc4504a90ed9e575dd9aa12c1704b828bb.sol: ERROR
test_c9a50eae0aee126fe7cc2ec442144ebcf4e1e03225e790d5e3f09a2f03296200.sol: ERROR
test_c9b6ca50a18023082e1b022e18639236e91ef53711491273cde893cb2d1ebc7f.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol:c 6060604052341561000f57600080fd5b5b61019a8061001f6000396000f3006060604052361561003e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b8e010de811461005f575b341561004957600080fd5b61005d5b610059600080366100ce565b505b565b005b341561006a57600080fd5b6100726100b8565b604051602081016100858183808661008f565b90508092506100a3565b83610099826100a8565b8452949350505050565b6100ad565b151590565b505060405180910390f35b60006100c58180366100ce565b50600190505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010f5782800160ff1982351617855561013c565b8280016001018555821561013c579182015b8281111561013c578235825591602001919060010190610121565b5b5061014992915061014d565b5090565b6100cb91905b808211156101495760008155600101610153565b5090565b905600a165627a7a723058207a9288ff26ed5a5101ab16bdce97545202e68d6186739004f806e5f9635a00950029
test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ca046ecddf704f2614eab0285867e1710a466d87bd50daa81a35a869bcf8849e.sol":{"keccak256":"0x892bd8d870b70dcaab7953eed50918b09c976add0414c5ebb05ec9dd6861eb7f","urls":["bzzr://3c91e9eb1f95cce761e984ee200d520f03220f06b8c34b780642df52cc8017be"]}},"version":1}
test_ca123ddeb260ca56629f5e6d9aec10189795f5948fcad5a7d30a5f23097a833e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol:c 6060604052341561000f57600080fd5b5b60d58061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b6001600081815560028083558281556003559081905b91505b50905600a165627a7a72305820aa2cfb7c1ffe95df4c26a85a14153438188be0f471c953e7441ebede373654050029
test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ca635d7fbddc5be9b98f679306618558dd50f3492753473816f954ec5837cdd6.sol":{"keccak256":"0x39ea50f103480de6e8165f2da7c36c539251117883cbe86de7ee4cec6e07141d","urls":["bzzr://d504842e03bf9b5d33b8d2f5b5a31ee9ef7ab9870e1ba17c07cc779db23a5ab8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol:C 6060604052341561000f57600080fd5b5b61030d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114610048578063b8c9d3651461009f575b600080fd5b341561005357600080fd5b61005b610108565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b6100b2610281565b604051604081016100c581838087610078565b90506100d681602084018486610078565b90508093506100f4565b8361008282610091565b8452949350505050565b6100fc565b90565b50505060405180910390f35b600080808060016101198282610296565b50600360008081548110151561012b57fe5b906000526020600020900160005b505573ffffffffffffffffffffffffffffffffffffffff301663b8c9d3656000604051604001526040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15156101a657600080fd5b6102c65a03f115156101b757600080fd5b5050506040518051906020018051919450909250506005831415806101dd575081600614155b156101eb576001935061027a565b6101f361028a565b9194509250905060018314158061020b575081600214155b80610235575080600081548110151561022057fe5b906000526020600020900160005b5054600314155b15610243576002935061027a565b909190600283141580610257575081600114155b15610265576003935061027a565b60089250600a915060005b1561027a57600493505b5b50505090565b600560065b9091565b6001600260005b909192565b8154818355818115116102ba576000838152602090206102ba9181019083016102c0565b5b505050565b61009191905b808211156102da57600081556001016102c6565b5090565b905600a165627a7a7230582034b9810c4131c2a09c1d2c9901ad03202dc1bf71041e12c8e96dcdb819fc19370029
test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cac16e5a3811f63fa6252e5dcd1c980ad3363a30d1c5041c6b79364a179414bb.sol":{"keccak256":"0x2e7498eb5c653b7de6d3d79c9bc9f55e37dca170496e164c7967349dec19077d","urls":["bzzr://18d84e263ac7fd1bdd1fc31cef299c609a428243315025c5411ae3d62cb2db1b"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_cb0b1234506abbcfc770d706e735d7354e8f4001417d44ceab72ccc29b5a0d3a.sol: ERROR
test_cb0d6bcddc160f1530191ecde9c3504762b58b9aac2f77cc9527d5ca4ea09ba0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol:C 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60015b905600a165627a7a72305820bac9e10ff24c5ba62d7940f34c1b0d88b4fd6a6189a6b105ab4c1fc0bd5ce7440029
test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cb1be9dbc52ea43035df55e0bb052087dd1fabed8fb3f58d887a0a688413c988.sol":{"keccak256":"0xf6213cd71a2ab316c282220bfe621d8cd6cffc510ec7f2caf134cb7e98517af9","urls":["bzzr://e184fda19567889a61e51a18d93320493bb579a0d50ebec58d333e1643476e41"]}},"version":1}
test_cb39e3821328aa47bf83778de0f86c7fdbe1146e031afeb189e5966a0a3db86b.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol:c 6060604052341561000f57600080fd5b5b6101df8061001f6000396000f3006060604052361561003e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b6588ffd811461005f575b341561004957600080fd5b61005d5b610059600080366100cb565b505b565b005b341561006a57600080fd5b6100726100b8565b604051602081016100858183808661008f565b90508092506100a3565b83610099826100a8565b8452949350505050565b6100ad565b151590565b505060405180910390f35b60006100c4818061014a565b5060015b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010c5782800160ff19823516178555610139565b82800160010185558215610139579182015b8281111561013957823582559160200191906001019061011e565b5b50610146929150610192565b5090565b50805460018160011615610100020316600290046000825580601f106101705750610059565b601f0160209004906000526020600020908101906100599190610192565b5b50565b6100c891905b808211156101465760008155600101610198565b5090565b905600a165627a7a72305820065ab5f21a75de56fec333a019bd40adff49662b962a1ed99bda7aae43fb6ea00029
test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"del","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cb48ebb23c49f314f284fd3d97a94bcae0a20cbf567cf31cafea17d9957c0264.sol":{"keccak256":"0xc4e319ee62035714d629e9be535a2e02341bbb61e72fafd96e64dfa3e56d4072","urls":["bzzr://3bf9229e833cb4dc002d650344af9bd9fe5393ccbdb4ee62a702fedadfc747df"]}},"version":1}
test_cbe18949ebd1b897a84be8466e3ea02a8ab71a1763db8627510a5d2396d5330a.sol: ERROR
test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol:C 6060604052341561000f57600080fd5b5b61026d8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b600061005c6100b1565b6100646100e7565b60028083526000935060099060015b610190020160005b5060025b6014020160005b5060035b0160005b50556003611f42840160025b600a020160005b5060025b0160005b50555b505050565b6203f4c06040519081016040528060008152602001600081526020016100d5610116565b81526020016100e2610145565b905290565b62278f80604051908101604052600a815b6101006100b1565b8152602001906001900390816100f85790505090565b6203e8006040519081016040526014815b61012f610195565b8152602001906001900390816101275790505090565b610c80604051908101604052806100e26101c3565b905290565b6203f4c06040519081016040528060008152602001600081526020016100d5610116565b81526020016100e2610145565b905290565b6132006040519081016040526014815b6101ad6101f1565b8152602001906001900390816101a55790505090565b610c80604051908101604052600a815b6101db610219565b8152602001906001900390816101d35790505090565b6102806040519081016040526014815b60008152602001906001900390816102015790505090565b610140604051908101604052600a815b600081526020019060019003908161020157905050905600a165627a7a72305820623d7789e53f93f71e6d513eb2d006bfce9cf5e9f3bad17410817caea56f61db0029
test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cc6f5a4832dc0d452fb2f9873b5329446244a50f00af447a8daf34253c106bed.sol":{"keccak256":"0x74893a0a80843c50636a775ff92c736c504ce29fc6d37fd86448de82ff9c7be5","urls":["bzzr://16d89ba3c8f16e66b9ae445043e0ef173f11d5ad4630c4c32854cdacdd8ca477"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv contract Fund -> contract Fund
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_contract$_Fund_$92_to_t_contract$_Fund_$92(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_contract$_Fund_$92_to_t_contract$_Fund_$92(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_contract$_Fund_$92(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_contract$_Fund_$92(value) -> cleaned {
				cleaned := cleanup_assert_t_address(value)
			}
		

 conv int_const 10 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_10_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_10_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_10_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

 conv int_const 10 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_rational_10_by_1_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_rational_10_by_1_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, convert_t_rational_10_by_1_to_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		
			function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
				converted := cleanup_assert_t_uint256(value)
			}
		

test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Attacker 6060604052341561000f57600080fd5b6040516020806103b8833981016040528080519150505b60008054600160a060020a031916600160a060020a0383161790555b505b610365806100536000396000f3006060604052361561003b5763ffffffff60e060020a6000350416631c02bc3181146100615780639e5faafc1461007b578063b60d4288146100d2575b61005f5b60018054810190819055600490101561005c5761005a610155565b505b5b565b005b341561006c57600080fd5b61005f60043515156102f6565b005b341561008657600080fd5b61008e610308565b604051602081016100a1818380866100ab565b90508092506100bf565b836100b5826100c4565b8452949350505050565b6100c7565b90565b505060405180910390f35b34156100dd57600080fd5b6100e561031d565b604051602081016100f881838086610102565b9050809250610116565b836100b582610139565b8452949350505050565b6100bf565b73ffffffffffffffffffffffffffffffffffffffff1690565b6100c7565b60006101448261011b565b92915050565b505060405180910390f35b60025460009060ff161561022d576000805473ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90600a906040516020015260405160e060020a63ffffffff841602815260048101906024016101b4818380866101be565b90508092506101d2565b836100b5826101df565b8452949350505050565b6101da565b90565b6101f0565b6000610144826100c4565b92915050565b5050602060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b5050506040518051905090506100c4565b6000805473ffffffffffffffffffffffffffffffffffffffff169063ccb1183490600a906040516020015260405160e060020a63ffffffff841602815260048101906024016101b4818380866101be565b90508092506101d2565b836100b5826101df565b8452949350505050565b6101da565b90565b6101f0565b6000610144826100c4565b92915050565b5050602060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b50505060405180519150505b5b90565b6002805460ff19168215151790555b50565b60006001819055610317610155565b90505b90565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205b1e9cd7883429058e4fb83b5ed7dc17b09cba7b0dc60b19761b9ae11f85bd9a0029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Attacker {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_protected","type":"bool"}],"name":"setProtected","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"attack","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"fund","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"_fund","type":"address"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"Attacker"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Fund 60606040525b346001555b5b61020c8061001a6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632e1a7d4d8114610048578063ccb11834146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fc565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b61005e600435610182565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b6000805460ff161561010d57600080fd5b6000805460ff191660019081179091555482111561012a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185876187965a03f192505050151561016557600080fd5b5060018054829003908190555b6000805460ff191690555b919050565b600060015482111561019357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185876187965a03f19250505015156101ce57600080fd5b5060018054829003908190555b9190505600a165627a7a72305820fb8290b24dc136e160f9386b73d8a4eaf73b449d27b3800e4705c05c711a8bf50029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:Fund {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawUnprotected","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"Fund"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:mutexed 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e1443dcc641d73adfc07b71bb41b34bf000ffaa51400d79488c4ce8812a892080029
test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol:mutexed {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":"mutexed"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cc75550359d035fe3843d2ac5f9886de3ff59fb646d1c51ca73cf10a8d67f1ba.sol":{"keccak256":"0x33991546d409adbbf8ac8b8a696297c79d107558fc2a8c4314f93eb318bd624e","urls":["bzzr://9c47e8f0d703749dfe236f2d812ca53a89392a9b04a03d023fa792e5f1a01840"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol:test 6060604052341561000f57600080fd5b5b61014b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304bc52f881146100485780635ddab4d4146100a5575b600080fd5b341561005357600080fd5b610061600435602435610105565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b61006163ffffffff6004351661010f565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b8181015b92915050565b63ffffffff60048202165b9190505600a165627a7a72305820fa904a1cfd17c7176a57864194ef699560837df3967c51172cdeb473af0f3f650029
test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"foo","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint32"}],"name":"boo","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cd63e6252d641efacdeab010049995d1d49b155132e369e5e4b0b3529f68f870.sol":{"keccak256":"0xaa4526796eb63baf216201022f58e189a73f04947a4614340508fcf4f07ee05b","urls":["bzzr://33eff1ffe749df104041d3865c46754f8000cc4a644ce8a569437a3eb4ace5a1"]}},"version":1}
test_cd903d35787731950130a24739537691e2894ffc7ae8d0622ac322639f888fa0.sol: ERROR
test_cdabf0465c419b5182e6f5429a562f92b491a70ad5a63fa6b4f03e4208f85902.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820c15fa7d5305829f9b0293278d12616058ea6da602cb9097fb54c01590bfd44f50029
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":{"keccak256":"0x42a448953c0e6cf9281c79285f8af56434e8103f0f35804dde442fb3f618ca73","urls":["bzzr://02a9367fb30190699bc6caf9aedcb45542591705707ad6476262c721f3b6e269"]}},"version":1}
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:B 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60075b905600a165627a7a723058201f68e223c8f8841439cd0bc270aca12250ca82c4a9fa562f839e2886d9c39a140029
test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cdffed1b01d4b52d7adb89192f9857d64b34744145ca796a75c11e386fe40edc.sol":{"keccak256":"0x42a448953c0e6cf9281c79285f8af56434e8103f0f35804dde442fb3f618ca73","urls":["bzzr://02a9367fb30190699bc6caf9aedcb45542591705707ad6476262c721f3b6e269"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol:C 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663ab5ed1508114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b6000803411156072575060015b5b5b905600a165627a7a7230582023459c695b2422757a46b936473aa372c36d88ece216e06c2ea04b7b00a879b20029
test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getOne","outputs":[{"name":"r","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ce0f5ab5730de623b45d632dad30c91e6cabfdc12dfb07dbf5e951a111dcdffe.sol":{"keccak256":"0xcac44ad3d57b8ff2632a76f7c86b16f187705bb112e3bf1f5f68a428f693e3b2","urls":["bzzr://7de50acb41ebc644b4dc1c5f3bd7d7ca137b8821ab1d0c1432fd68c5fc502f4e"]}},"version":1}
 conv bytes6 -> bytes6
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes6_to_t_bytes6(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes6_to_t_bytes6(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes6(value))

			}
		
			function cleanup_assert_t_bytes6(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000)
			}
		

 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol:test 6060604052341561000f57600080fd5b5b60086000556001805465ffffffffffff19166543656c696e61179055607b604051808260ff167f010000000000000000000000000000000000000000000000000000000000000002815260010191505060405190819003902060025560038054600160a060020a031916611337179055602a6004555b5b610264806100966000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461005e578063236fa0d3146100d257806373d4a13a14610129578063d2407f6b14610180575b600080fd5b341561006957600080fd5b6100716101ed565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100c7565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b34156100dd57600080fd5b6100e5610210565b6040516020810161008481838086610102565b90508092506100a2565b836100988261011b565b8452949350505050565b6100c7565b90565b505060405180910390f35b341561013457600080fd5b6100e5610216565b6040516020810161008481838086610102565b90508092506100a2565b836100988261011b565b8452949350505050565b6100c7565b90565b505060405180910390f35b341561018b57600080fd5b61019361021c565b60405160208101610084818380866101b0565b90508092506100a2565b83610098826101c9565b8452949350505050565b6100c7565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b6001547a0100000000000000000000000000000000000000000000000000000281565b60025481565b60005481565b60035473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058204e90465b9033bc5cdf6b16446dcb2d7f819493249aa234e2534db20e602086a70029
test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"bytes6"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"a_hash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"an_address","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ce7a7de625ce9881317d62b55cb9c5b5a0e12c9268fe8fe89a24b8a21e280cd5.sol":{"keccak256":"0x718c959a3ecf4ec1d0fe83099da96c3641b3126a71ee73a2794a84a8f1a8e022","urls":["bzzr://55879a15659e505272cc797505999864416aeb6f139cf688befa4c11a3ab270a"]}},"version":1}
test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582069eb1ef9943e36e342d0d25aacae8a503c14ddcdee04e8bfb0a42f9f7662ea770029
test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ce98f3583175eab6af23240339fc7d76453640acb77d39036398119a9630bc87.sol":{"keccak256":"0xcda14e8608bdf12341111747e168568f288402bcc34bfa884d4ad6b367a6cef6","urls":["bzzr://6c822e7a49de5ae0fc53b0cd5c1490091494ab1be8cf914e731cb1cb7e5a3dbc"]}},"version":1}
test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol:test 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663946644cd8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058200c1e6d3d5fe2f445ebb24a0d325fa08e2d72544170ca44b21dded889ffcc17390029
test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"fun","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cee0c7a60a2188747065ba56196f5e407e7b984ad107de81a6e749b0ff686ad6.sol":{"keccak256":"0x310535a8e0e82493341024dd4b94619f526290cdf0362383392e4c7f5772d39d","urls":["bzzr://224e22cc63d85386b9b61ab6d14885288c851b910c5dfa69f0468be84e0508a7"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol:test 6060604052341561000f57600080fd5b5b60c68061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b8181015b929150505600a165627a7a72305820801f9ea5f4cd19e261edb422b0ad2b528cfb92870216807aff9b90cdc00c573b0029
test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cf0f87bd8d17c277172163587a8bd0b886e7c9a74bdde7bc073c15e436f7636d.sol":{"keccak256":"0x73cb65c9b742f5754ec28400d192f055f9a40e75c49e6a37f84487716f4c1461","urls":["bzzr://1777f0771f08499a1abf10e4adb6d369c6538edefda79fa833cce2caaa160cc9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:C 6060604052341561000f57600080fd5b5b6000805467ffffffffffffffff19166100406401000000000261009f1767ffffffffffffffff161790555b610046565b60075b90565b60d1806100546000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166392d0d1538114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805460999063ffffffff16565b90505b90565b60075b905600a165627a7a7230582005f7d0a4bf1ac8590f6a5cd892fe226fdf3e830aaf45140640ed7eb3ee3ca7610029
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"t","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":{"keccak256":"0x14be052e2d8e9eedb75bb251f34c9ed0c736812fa91a3212873c9dba19b2b7a3","urls":["bzzr://4a3da0f2c41303218bb475d88f5559c1dee7186152270b3c54c12e36b7025ccc"]}},"version":1}
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:L 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582005c213d170f72556de67c8d1c76c4b0537ae1d1af44694d92274a5ed1d6f1b260029
test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cf22ed47664b0b56354d9df1d42485a49f42627f993fa9318d171db341fa959d.sol":{"keccak256":"0x14be052e2d8e9eedb75bb251f34c9ed0c736812fa91a3212873c9dba19b2b7a3","urls":["bzzr://4a3da0f2c41303218bb475d88f5559c1dee7186152270b3c54c12e36b7025ccc"]}},"version":1}
test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol:Lib 60606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058207e07aad01539291818f7b6ab9491b843bdf7e83a4588ceb6de5d59cd268f71a80029
test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol:Lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol":"Lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cf39004a7696439777a85b2b90cea6e72046616dc0b4fa59cee6fe4a8f8a4e3e.sol":{"keccak256":"0x25280e415fb0ecfbd906f8af4cd3ac82c105bcee064272340653de36c0cbabc2","urls":["bzzr://85c43aa472f6b151837c709dd91dad524795f342a8f0785a0e1eff86c3f8cd06"]}},"version":1}
test_cfd3290c5f8ee0d23d9253726e911b739b28cbfb118677a3204591cba3adf2ca.sol: ERROR
test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol:test 606060405260408051908101604052600b81527f48656c6c6f203420796f750000000000000000000000000000000000000000006020820152600090805161004b92916020019061005c565b50341561005757600080fd5b6100fc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009d57805160ff19168380011785556100ca565b828001600101855582156100ca579182015b828111156100ca5782518255916020019190600101906100af565b5b506100d79291506100db565b5090565b6100f991905b808211156100d757600081556001016100e1565b5090565b90565b60a08061010a6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600060566062565b6005915060155b505050565b602060405190810160405260008152905600a165627a7a723058209a2c09a1d8cae4dca07af01a0759daffa07bd0ea4ed330228287c52a42960a4b0029
test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cfd7c9c7b47b804543c4c7c64f0da379043da34dd7d6466e858c6ce3dbc81be7.sol":{"keccak256":"0x445bf31722f471ab130ac09fd70fd4ea22861b0a47d249379ed9ace8e8ca0c31","urls":["bzzr://e3427a956345696646cb40a09211e0e0204b91cf24ba64885138fcac3bf44c84"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol:test 6060604052341561000f57600080fd5b5b6101c28061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114610053578063f88e9fbf146100b0578063fa3bd6c51461010d575b600080fd5b341561005e57600080fd5b61006c600435602435610167565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b34156100bb57600080fd5b61006c600435602435610174565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b341561011857600080fd5b61006c60043561018b565b6040516020810161007f81838086610089565b905080925061009d565b83610093826100a2565b8452949350505050565b6100a5565b90565b505060405180910390f35b6007820281015b92915050565b6000818381151561018157fe5b0490505b92915050565b60021981015b9190505600a165627a7a723058207abf81b4f389397619e6a8b481e7f631621250ebc4934103522de19e0f35000e0029
test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"uint256"},{"name":"div","type":"uint256"}],"name":"divide","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"input","type":"int256"}],"name":"sub","outputs":[{"name":"d","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"divide(uint256,uint256)":{"details":"Divides 2 numbers","params":{"div":"Documentation for the div parameter","input":"Documentation for the input parameter"}},"mul(uint256,uint256)":{"details":"Multiplies a number by 7 and adds second parameter","params":{"a":"Documentation for the first parameter","second":"Documentation for the second parameter"}},"sub(int256)":{"details":"Subtracts 3 from `input`","params":{"input":"Documentation for the input parameter"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cfe040ae55e597c685cb31102726900a6dedd002a66fe3cf1de5b3f57d7ec9e6.sol":{"keccak256":"0x451d55d99ccbde4d0d1758d1808e8013db51b552627defa0fe2cbcb60b3f26df","urls":["bzzr://1b634a40165e80154d8e48e88ffed6ee60a0a2d8375db6e7be7e06a19869ca30"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol:c 6060604052341561000f57600080fd5b5b6101938061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100a6565b604051604081016100638183808761007e565b90506100748160208401848661007e565b9050809350610092565b8361008882610097565b8452949350505050565b61009a565b90565b50505060405180910390f35b600080600481601e5b0160005b50556007600060025b0160005b50556009600060035b0160005b50556008602860035b0160005b50556100ea60006028601461010a565b50600060035b0160005b505491506000601e5b0160005b505490505b9091565b8260288101928215610135579182015b8281111561013557825482559160010191906001019061011a565b5b50610142929150610146565b5090565b61009791905b80821115610142576000815560010161014c565b5090565b905600a165627a7a723058209ff26c3b3a1b1af34b265dfe5071616c962fbaaf8eb65d5148cfde9bdd5d26c10029
test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_cfe388430162ba2b43a46cbeb0404b5683baccbf466897f830bc076a4fe74173.sol":{"keccak256":"0x671d5084b04160eb56a37f7d8c0c805146e9e7a7a73af045bebf0f75da74c827","urls":["bzzr://ff77d5e403c15271170ee771f67a7fd3b6520c53e3ba7b53ce86c7b4d38a336c"]}},"version":1}
test_d0567ea01ffc566140aa18712e4c539e16b5b9b0d610bbf60f9bf7d7d7759527.sol: ERROR
test_d0585813516d37ac436e224e27b05798ed8763cc3c3261895ee8bbe1adb76715.sol: ERROR
test_d06278468ea035a7c89f48f1e75ac9103c3a3dd1db78e2cbdcef61265d49a96b.sol: ERROR
test_d07ce54801f1a65d068b1a21311dcca054fcdaa2fdeff7f340f4b3238b12fc6e.sol: ERROR
test_d0938ed60736408242b64baf8e20b2e769375012e97d17a33b940380955f53a4.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol:C 6060604052341561000f57600080fd5b5b6101c68061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d6cd49748114610048578063e2179b8e146100c6575b600080fd5b341561005357600080fd5b6100826c010000000000000000000000006004359081049068010000000000000000900463ffffffff1661011d565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b34156100d157600080fd5b610082610194565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b600082826000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561017157600080fd5b6102c65a03f1151561018257600080fd5b50505060405180519150505b92915050565b60075b905600a165627a7a723058202694ca5222fdde32fc48de535341fe28e2d7ab12ec0aa160ba3a00a0b42debc10029
test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"g","type":"function"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d0962023e4e0f2b5d5ecc16a7f7cc6caa96c16934189d597543bbc2ebab4e481.sol":{"keccak256":"0x340d5335679e10f374984a0377001b4edc922b1fd373355384bfe79c7b3d4953","urls":["bzzr://14a65252b776edc9f3a1dadc55d7523c5a762e34ce3c525f4a6c507c465957b9"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:C 6060604052341561000f57600080fd5b5b61013f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b610045610089565b6040516020810161005881838086610062565b9050809250610076565b8361006c8261007b565b8452949350505050565b61007e565b90565b505060405180910390f35b600073__test_d0b5c1a016dfcee9cd37dc3a2bb2cf0__6326121ff06000604051602001526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15156100f357600080fd5b6102c65a03f4151561010457600080fd5b50505060405180519150505b905600a165627a7a7230582061ce02fd7283573f449d5909a9254aca2b6c6d05249f703ede0e18bae76f10c00029
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":{"keccak256":"0xf179900b53247143ae0d6bf60e6a61ef924cb39ed547a03094c87b1893b06168","urls":["bzzr://ff0f6e429cf1e74be6364b0c1f7db62e906077be5970de3bb71d81975ba326e9"]}},"version":1}
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:L 6060604052341561000f57600080fd5b5b60b28061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b60075b905600a165627a7a7230582035738e470a2929f234826e4d528c31b7b93e7a3e39799437b7e2c675554590a70029
test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol:L {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":"L"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d0b5c1a016dfcee9cd37dc3a2bb2cf04074d8c3d5d47524e57716f4e4b9d2f49.sol":{"keccak256":"0xf179900b53247143ae0d6bf60e6a61ef924cb39ed547a03094c87b1893b06168","urls":["bzzr://ff0f6e429cf1e74be6364b0c1f7db62e906077be5970de3bb71d81975ba326e9"]}},"version":1}
test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820be4692cd79e3abab561bbebc4378ed60776c14982de81b546690efb06306cf520029
test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d0eeefccfe24d92adc5d1d376555e1dfab74d49721a82d87cb36572b1a8cae92.sol":{"keccak256":"0xae5113220d8061c6843e3bbd049908ec6b86fbfa69e7bc567a59a5b493c3a80a","urls":["bzzr://142e3f9a4822ddd765668e5b37d7631653806f6d4c13df153a89f9f4815a1837"]}},"version":1}
test_d1314322f54b33dc2286aa10dbd99c61b4dc4814f55512016d776ec59a7f6591.sol: ERROR
test_d1580ef7c807f595ffce3752c183fa0ce029f9a37efc546825e433835571cca6.sol: ERROR
test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207978a7137d2aef7665162ba4f535b8c6e9810ddf18d1efd059be2a14d34690cf0029
test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d1b51b9a7428f8e31a2a20f14a335e972002191f432842c16cac171a814cfa97.sol":{"keccak256":"0xe7ca804e188fac4e3bc80d7e7ce3b20882be7a2cdd4f2eca30a882983917f1b9","urls":["bzzr://24511bcb33a247b385568ca0a93d8d102e6ef339eb39efcacc668038d7a4ba26"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol:test 6060604052341561000f57600080fd5b5b60c08061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435607f565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b805b9190505600a165627a7a723058205a55daf91ffab2eec5593ed07b2bfbccdedda156263fffd89bd4bb82b1db1c880029
test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d1c26cd49e6f7e5e3a1725593f0ae51959fdb139c84ea76c79b6415bf8c7cb1b.sol":{"keccak256":"0x01cb8c72652a4d76067599f78a3c72199f40b4ad174b6f256ed847d9746a45b5","urls":["bzzr://4bcad9eb4fc73ea9a9b47b7fcdcb49c8429b04ae1bfc2c4a7f7f36c5b40b9f21"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol:test 6060604052341561000f57600080fd5b5b6101548061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634df7e3d08114610048578063bf3b9e381461009f575b600080fd5b341561005357600080fd5b61005b6100ff565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b34156100aa57600080fd5b61005b600435602435604435610115565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610094565b90565b505060405180910390f35b600061010f600160026003610115565b90505b90565b60648302600a83020181015b93925050505600a165627a7a7230582043f779242e82f5878df2f24e8f5a82c1856c42d8f88319c70a83c3ca4e9925650029
test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"b","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"},{"name":"c","type":"uint256"}],"name":"a","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d29ffdf1bdea7783d1abe88d20e15fe1e555328335c6773deb0fa9a43b77e12e.sol":{"keccak256":"0xf2572c91aaa005f552181a740d38618ce4c6c5feceee79a2b414127f23d46a7e","urls":["bzzr://12e770a1ef30448bb90bd8c7513edcfe394b8eaac76b69f97b3650d49ddfe39c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol:test 6060604052341561000f57600080fd5b5b60c98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c8a4ac9c8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b6007820281015b929150505600a165627a7a72305820f4d94fbf76c0c15ceafa2d5a384f85a753d98a6439f513a768fd33fe8ef125f60029
test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"second","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"author":"Lefteris","methods":{"mul(uint256,uint256)":{"details":"Mul function"}},"title":"Just a test contract"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d304a1a4518b358076c43d6db9a3897fc18dad02ce80b346935b4e5bb7959af9.sol":{"keccak256":"0x4262df9eb0dfe2d3f4245c9e7d849f57494b10d90689fd94981550eeadcf5b2b","urls":["bzzr://10e629fd878f2108bfb9689e32958094fc1218e1769dd4ccfebaff135971b4a5"]}},"version":1}
test_d33f1923bf06f7875363da79166f083986e9085dc0a750c929fa683a2586c011.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Child 6060604052341561000f57600080fd5b5b61011b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398ba71bc81146046578063c2985578146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660e8565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b60005481565b6000545b905600a165627a7a72305820aaa393dac51b13be5630b8cea0e63b4ac1b0dfbc3dbf60146a623e1c8534c7f70029
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Child {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"m_aMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":"Child"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":{"keccak256":"0xea7e4e84868e09e483e447ad2eaef0a426b2c43d3813e3eab40bfed091af06e0","urls":["bzzr://a560c5ab4c7929f9e007458376e8ef76f2f6b6e5649d8bf2cc9c86cabe29bb1b"]}},"version":1}
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Parent 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398ba71bc8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600054815600a165627a7a7230582011300a46233bea50775e52fd09925476aae041d1792a49c43aef32030801aa650029
test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol:Parent {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"m_aMember","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":"Parent"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d384bc40cd73ccc97f2f7d81f25a4e6f673837eacef17306eda731d53b03fe4c.sol":{"keccak256":"0xea7e4e84868e09e483e447ad2eaef0a426b2c43d3813e3eab40bfed091af06e0","urls":["bzzr://a560c5ab4c7929f9e007458376e8ef76f2f6b6e5649d8bf2cc9c86cabe29bb1b"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol:test 6060604052341561000f57600080fd5b5b60026000555b5b60c1806100256000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663278be33f8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000808055805b50905600a165627a7a723058207f963621e6e48a5a7cf44a70ce8b0516c5987f39ae2c7b362ca0008e4a74ba790029
test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deleteMember","outputs":[{"name":"ret_value","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d3d594b5aa10189fd6814706e8f1e62923d74d1425e996d19242112ed9bd789b.sol":{"keccak256":"0x387cf06e53edb6507e838d9f36f5b015c2f1d9091236b1f5e7e579efba0d056e","urls":["bzzr://1a221747d94001db3612f9e6fb9deedeb36672ef8b4550a87a6ce95aa307d103"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol:Test 6060604052341561000f57600080fd5b5b60c48061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663857258e18114603c575b600080fd5b3415604657600080fd5b605260ff600435166090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b60055b9190505600a165627a7a72305820762f668fa02c4e62aead4fef3a607536999b3496cd06889394021a10ba9ff0a90029
test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"enumArg","type":"uint8"}],"name":"boo","outputs":[{"name":"ret","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d3e26fb7991aeadb8ad8329f1d1eb544c866249e50297bae0e817fb6ac8f608e.sol":{"keccak256":"0x58029daaadfa6d136ce8a3a53494bf59042ff09754e475571fe70797b693b429","urls":["bzzr://8d367fd3a5b705b4f0a11a176a8cb41c22d0387d1973ead46ae2b2dc7357a741"]}},"version":1}
test_d4071568b79775f3a73215ab8b629e7670d43535e1b58a97ff2335593958f687.sol: ERROR
test_d483d32c25dfe7eab973f9c8c80d011fb391584eb0402c153108ba2360bd4ebe.sol: ERROR
test_d4b2111b523335c2c5f6d2acb4eed3a1aca8f91be40a4d80d17431c1ac4c0067.sol: ERROR
test_d4b73f92cccdafde05f5376282b77b6a538be86448b78c1290c6a05db3a56b3e.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol:C 6060604052341561000f57600080fd5b5b6102298061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b600060026100a48282610133565b507901000000000000000000000000000000000000000000000000006000808154811015156100cf57fe5b906000526020600020906002020160005b5055600080547901000000000000000000000000000000000000000000000000009190600190811061010e57fe5b906000526020600020906002020160005b505561012c600080610165565b5060015b90565b81548183558181151161015f5760020281600202836000526020600020918201910161015f919061018a565b5b505050565b5080546000825560020290600052602060002090810190610186919061018a565b5b50565b61013091905b808211156101b35760008082556101aa60018301826101ba565b50600201610190565b5090565b90565b508054600082559060005260206000209081019061018691906101dc565b5b50565b61013091905b808211156101b357600081556001016101e2565b5090565b905600a165627a7a7230582024b843e40dfad9089c4a4725d034788b8ebc161b2f2fcf318eb8edbca9f5fa970029
test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d4be4d09066aca747289f9179ec71add68ac0fdb2eafa6fd4a47a11ba85488b0.sol":{"keccak256":"0x808700fd0f1bbdbcc85b88029436aac378288056024a82df10eef38fa04c907b","urls":["bzzr://fa63a9fe9705e3916572520c23b20707d7b1d6388517a97f96febe99aab0db70"]}},"version":1}
 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv int8 -> int8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int8_to_t_int8(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int8_to_t_int8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int8(value))

			}
		
			function cleanup_assert_t_int8(value) -> cleaned {
				cleaned := signextend(0, value)
			}
		

 conv int16 -> int16
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int16_to_t_int16(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int16_to_t_int16(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int16(value))

			}
		
			function cleanup_assert_t_int16(value) -> cleaned {
				cleaned := signextend(1, value)
			}
		

test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol:test 606060405260008054600260ff199091161761ff001916617f001763ffff0000191662fa0000179055341561003357600080fd5b5b6101b3806100436000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c8114610053578063a56dfe4a146100ad578063fd3ab28214610107575b600080fd5b341561005e57600080fd5b610066610161565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a2565b60000b90565b505060405180910390f35b34156100b857600080fd5b61006661016a565b6040516020810161007981838086610083565b9050809250610097565b8361008d8261009c565b8452949350505050565b6100a2565b60000b90565b505060405180910390f35b341561011257600080fd5b61011a610178565b6040516020810161007981838086610137565b9050809250610097565b8361008d82610150565b8452949350505050565b6100a2565b60010b90565b505060405180910390f35b60008054900b81565b600080546101009004900b81565b60005462010000900460010b815600a165627a7a7230582059b05a167fb7cdcc7f491f7e28889dfda060992eab148dff833e9af5d0aae8080029
test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"","type":"int8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"q","outputs":[{"name":"","type":"int16"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d4df57cac61dbd8e8a69ee6bc25e8b4ea2d915a1bab08916c9607fd5a9244410.sol":{"keccak256":"0x0fe550b67a1dc1ed4d45dabf85d87411b90535471088de51a9c14c7b3f95ff7d","urls":["bzzr://5cb47083a70ec1680302fb23fa42a1986bfe28de01f05bbd95218064c413649a"]}},"version":1}
test_d4e3dd9f031cfbc9129ba103f8b4333ecafb477e5664027f3dd650322946e1f7.sol: ERROR
test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol:C 60606040523415600e57600080fd5b5b60b18061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6054606e565b604080519081016040526001808252602082015290505b50565b6040805190810160405260008082526020820152905600a165627a7a72305820e87dfd2b26f236d80261ac3a51f2acab66b8247361c863e3091f7387a5f3da940029
test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d52d50538eda03edb033e9b952ac4631a3a0f79b7d1cb9522290dc7ec7f41818.sol":{"keccak256":"0x5911f13adc2f8828da64949ebc4bfda3169335b8ea00faebbd23834848709b16","urls":["bzzr://b87e20fb43b4d6f18625e516d2f8901f5f7a17dd7ff685374f6e1f27dd1e1ff9"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:c 60606040525b5b5b610111806100166000396000f30060606040523615603c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663fc68521a81146044575b60425b5b565b005b3415604e57600080fd5b606d73ffffffffffffffffffffffffffffffffffffffff6004351660ad565b60405160208101607e818380866087565b90508092506099565b83608f82609d565b8452949350505050565b60a2565b151590565b505060405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff8216816001604051600060405180830381858888f19450505050505b9190505600a165627a7a723058209669d2c3050b8efc53c3ce8641ef6ae112ba410fc21c387dac42610816f3faa60029
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"address"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"},{"payable":true,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":{"keccak256":"0x4c0856dde6e220b2bd97c3071ae933e954927d8c08037c05be33873b1a81d8b8","urls":["bzzr://4b741d81637c885f50e28560fad4b41b9b446adc0fbeb71825d2231d87e0cb60"]}},"version":1}
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:lib 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820a381b1d0338a5698fc0258f56d1e731a155f94f4a080ea994473124406b2ca790029
test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol:lib {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":"lib"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d53b9e0c6d0cec9c872ad3e8fa111509dacdb008f83a0644f68c9c9da9da5059.sol":{"keccak256":"0x4c0856dde6e220b2bd97c3071ae933e954927d8c08037c05be33873b1a81d8b8","urls":["bzzr://4b741d81637c885f50e28560fad4b41b9b446adc0fbeb71825d2231d87e0cb60"]}},"version":1}
test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol:test 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d7d150598114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820cfdcdedc25ed3ef3c7a4e7285d6fa72ed64ba82d80912861a999834d9627ccd90029
test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"functionName","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d5a25b8cdf3595976f3601ee91c37c459c6898eb2cc46d71d0da31b5c4e80734.sol":{"keccak256":"0xc535d0ec6c55a018cb7eeb0c44a2d753d27204b879224414bad00dcc4bbf3f61","urls":["bzzr://62166854a29746f8f70fd584b6d5e84aaeaa91426d28111bd1aee04f1966b3c0"]}},"version":1}
test_d5ee7685ef3e8968b30539153dcdf6b5791157b08d76f76e94a3d184abbc7eec.sol: ERROR
test_d6126f5aa85009e683b9fb0a92912d0daf4905e8718597f12d0725eb98d81e0f.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol:c 6060604052341561000f57600080fd5b5b6101c18061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c811461005e5780638119c065146100c7578063a56dfe4a146100dc578063b8e010de14610145575b600080fd5b341561006957600080fd5b61007161015a565b604051604081016100848183808761009f565b90506100958160208401848661009f565b90508093506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b50505060405180910390f35b34156100d257600080fd5b6100da610163565b005b34156100e757600080fd5b610071610172565b604051604081016100848183808761009f565b90506100958160208401848661009f565b90508093506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b50505060405180910390f35b341561015057600080fd5b6100da61017b565b005b60005460015482565b6000546002556001546003555b565b60025460035482565b60016000819055600290819055600390819055600490555b5600a165627a7a723058208809c912c1ae974fc4826152f745bcdae2c84ef8550c16c3071e369fcf07fff90029
test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"swap","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"y","outputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"set","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d64e94e476e180ab3212b03bafee68b52e06667b06e78714f7895b62f5df9462.sol":{"keccak256":"0xc8bc71cc338e93c0b113ba633ddfa1d3f388793fcbf3e5b5790c871c04e8d61e","urls":["bzzr://3ae183730e623125b6966bdaab0cd198501bc270df0601514115fc4ddf5564e2"]}},"version":1}
test_d68ffcf4441ddb1e8c694dfe3a3a718de2275504963bd867a21cb86b3a1e9092.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d6d3a9200bce4b55771072d46edd6c8fcfb0845282d759c6d8ef14c4b96b7511.sol: ERROR
test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol:test 60606040523415600e57600080fd5b5b600260008190555b6001805460ff191681836003811115602b57fe5b02179055505b5b603680603f6000396000f30060606040525b600080fd00a165627a7a7230582093b4c97c8f0ad531a355a23c886bde5189c06a108f8e130d597003ddcd2564010029
test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d73934758e147f27d28cbfb7a254ba6d91df5a036a116be78a567b481559a646.sol":{"keccak256":"0x50a094c6ad738ab49a68b3f0f84c2c7e8df8ff024ab42e47264f2ddd8166be00","urls":["bzzr://bcdc5baed01125fc3ab085a8a02ca7af442a786b382abfa41edf3550ebe91b50"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol:C 6060604052341561000f57600080fd5b5b6101608061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114610048578063e420264a146100a2575b600080fd5b341561005357600080fd5b61005e6004356100fc565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b61005e600435610112565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b600061010a6101128361011c565b90505b919050565b600181015b919050565b600061012b828463ffffffff16565b90505b929150505600a165627a7a7230582064aa1579d1adff5c3ce927a06e782f86d5a70b20b9f72096c39195b3dfc05b240029
test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d7a8f5898456e189ea29d13e3828c2f4cfb269947adcdf88e0ac97ddc687fd92.sol":{"keccak256":"0x2b67e196918be53bcc26dc3f36b7d804de45807c8632a32f1e56636f57a8e3e4","urls":["bzzr://cdf0bff15a9e8d4cfbd9cb4a60f0667cadfcdfb3909db1e79d72fd39829f4f35"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol:test 6060604052341561000f57600080fd5b5b61010e8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b2550378114603c575b600080fd5b3415604657600080fd5b6067600435151563ffffffff6024351667ffffffffffffffff6044351660a5565b604051602081016078818380866081565b90508092506093565b836089826097565b8452949350505050565b609a565b90565b505060405180910390f35b6000831560b0575060015b6801000000000000000064010000000090910263ffffffff841916170267ffffffffffffffff821916175b93925050505600a165627a7a72305820c954e9f07f673f750579c8973e3182eff580309f25f06c14ca2dd172b76080ba0029
test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"bool"},{"name":"b","type":"uint32"},{"name":"c","type":"uint64"}],"name":"run","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d7cf08bdb5850681f4d0eb81911201a8b8000b3f8dc079aab88bf3fd470a15fd.sol":{"keccak256":"0x8ea1691334ac3d565eddf54ac81ce95bada02327ca3b56c93d78e21824d9d20c","urls":["bzzr://fafbb014953b367bc4247f4eb140d6f0ba9f6653c0f899bb5f93da2723e569bb"]}},"version":1}
test_d7facf7a630417658826e9627a8451c47ba73460b30e76878a43b34e2b729a52.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol:test 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663131e2f188114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600781025b9190505600a165627a7a723058204130ab48a1b049ef724b354af28f2662ddb552324fb64c74701480cfc1f6aad30029
test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"mul","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{"mul(uint256)":{"details":"Multiplies a number by 7"}}},"userdoc":{"methods":{"mul(uint256)":{"notice":"Multiplies `a` by 7"}}}},"settings":{"compilationTarget":{"test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d81febbb02f2fbc83bc835187d5871482cfa6a53a72e3d2988f1e5ad38e22229.sol":{"keccak256":"0x52465e77932448b520e7a7e59b6dc623d491ccf904804a2655dd818002a2d38f","urls":["bzzr://a3b7f798a468ce5b9059a3a5ee79cd8ace5327afdbf279ffd9357b69d7a9b9ec"]}},"version":1}
test_d8c0b1137de617b022d53135b4d472c09f7e7dc1c9a2a7cf195a45f97e510000.sol: ERROR
test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b6000546002556001546003555b5600a165627a7a72305820faf15582ad61052c733aecdb77a24a91be3eaf4a1a4bdd8be0c70718f1c47d780029
test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d8eb76a3b56fb57359eda9a7cd1bec27846bdc7f102dc14f8f3bbbf46db17922.sol":{"keccak256":"0x149e129ee5110d650fd35a37c3913f9f7b50cd2f14abd24c5b1473f7e7e68c8d","urls":["bzzr://5b13e25f09b523d11f1b5d6100fc9e7de730cf664c238b804d90d372d2102d76"]}},"version":1}
 conv bytes1 -> bytes1
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes1_to_t_bytes1(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes1_to_t_bytes1(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes1(value))

			}
		
			function cleanup_assert_t_bytes1(value) -> cleaned {
				cleaned := and(value, 0xFF00000000000000000000000000000000000000000000000000000000000000)
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol:Test 6060604052341561000f57600080fd5b5b61036b8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663589002fb8114610048578063ece866b914610101575b600080fd5b341561005357600080fd5b61009b60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061015892505050565b604051602081016100ae818380866100b8565b90508092506100cc565b836100c2826100d1565b8452949350505050565b6100f6565b7fff000000000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b341561010c57600080fd5b6101146101ff565b604051602081016100ae81838086610131565b90508092506100cc565b836100c28261014a565b8452949350505050565b6100f6565b90565b505060405180910390f35b6000600183805161016d929160200190610219565b506001805461019091600091600260001961010083851615020190911604610298565b5060008281546001816001161561010002031660029004811015156101b157fe5b8154600116156101d05790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000290505b92915050565b600054600260001961010060018416150201909116045b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061025a57805160ff1916838001178555610287565b82800160010185558215610287579182015b8281111561028757825182559160200191906001019061026c565b5b5061029492915061031e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102d15780548555610287565b8280016001018555821561028757600052602060002091601f016020900482015b828111156102875782548255916001019190600101906102f2565b5b5061029492915061031e565b5090565b61014a91905b808211156102945760008155600101610324565b5090565b905600a165627a7a7230582022c23f01d4becb8c694b12020d9006be539cf8caafbd4859af9dd5901d62a9720029
test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"},{"name":"n","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"bytes1"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"l","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d9998a5202ed26bd3d61d53a56224ea6d0fa0e608b0225279903e4baa969d72e.sol":{"keccak256":"0xad17e5cf10a6da67370b56aa9f5501629d0846f19957da221a27f9b3324e75d8","urls":["bzzr://7905868b5493168c11b12c0b28ad45ead13924be20a5db4ccd4b9e6c981ac81e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol:test 6060604052341561000f57600080fd5b5b6101938061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b6000818160075b602091828204019190065b815460ff8481166101009390930a92830292021916179055600060025b602091828204019190065b6101000a81548160ff021916908360ff160217905550600060036028811015156100f757fe5b602091828204019190065b905460ff6101009290920a900416600060025b602091828204019190065b9054906101000a900460ff16600a02016000600460288110151561014057fe5b602091828204019190065b6101000a81548160ff021916908360ff1602179055505b9190505600a165627a7a7230582066050a7a1ef7440120a20eaf259514e9436c015bf1bf4c7b0e5b44b145c680e10029
test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_d9a0a537bb1114760a62f1e18f0fc3e803aaca532a93b7c6113d49041824788b.sol":{"keccak256":"0x1cf1560b51e1293d52b2ec001d46a73f07bfe792518f20b93f3276d336f3d216","urls":["bzzr://d7a8be212cdb1a47c752eef36c38e3c7466a3c0bf3db57fc4f71c71ed0f2885b"]}},"version":1}
test_d9f8d3cbd1c9f348fab5d27a4cfd2c9da6ea3630a5c00db89d2ae8a0680e893c.sol: ERROR
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:A 60606040523415600e57600080fd5b604051602080606a833981016040528080519150505b5b505b60368060346000396000f30060606040525b600080fd00a165627a7a72305820371f1208cd558083f3b2d486ad3d4e67c932ecc5d84795a8a49653a0681ea7aa0029
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol":{"keccak256":"0x01245aa769974bb72a76e28eef8efdc8c3d46933ef91d06ddb00823acddbd76d","urls":["bzzr://e1eb4771afaea79a4eb5888f667031a468234a6e9354c56a97123d33f4250383"]}},"version":1}
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:B 
test_da0de4878443ec35bd2d88e13048258e38e50cc30cf81c8cd0d6c67c887f5501.sol:B 
test_da37018c0029fcc2870353344414819f8f82a579477c57f79af04957ecc8ce8e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol:C 6060604052341561000f57600080fd5b5b60d68061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ea703418114603c575b600080fd5b3415604657600080fd5b605860ff600435811690602435166096565b604051602081016069818380866072565b90508092506084565b83607a826088565b8452949350505050565b608b565b90565b505060405180910390f35b60ff80821660020a83821604165b929150505600a165627a7a723058209cc196130afe4b6651cab3fc380f6cde5d066c972581a5bf88b1aad3902234220029
test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_da87217560f97b583a44a469d44ecc35b402293a6a37b1d96dfc728196d3c08a.sol":{"keccak256":"0xf624823107aa1ac0448e2220550930112cdca500f45fbfdd22b2b87ea9bcd2b3","urls":["bzzr://bff018928ee46161b8a56987804c20cf51d065b4dc5dac0efde081a756ada5be"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol:test 6060604052341561000f57600080fd5b5b60d98061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b605260043560243560a0565b60405160408101606381838087607b565b9050607281602084018486607b565b9050809350608d565b836083826091565b8452949350505050565b6094565b90565b50505060405180910390f35b806008805b5092509290505600a165627a7a72305820408c02efdaf138698d94e0cf263a96bec43423827ac67ddc42bf6f78d5c84fd00029
test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"},{"name":"ret_g","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_da9700824b7ffe275975ff0da870a91ef75ee7af2048c4312b558509bb1fcfbe.sol":{"keccak256":"0xaa63526a5236472f32d8dc7c899f719b41d9eff9a82b1ba08074892ad0cb99b2","urls":["bzzr://46f49f3e6ec0ba70ae173d525e581ebb3bc2bb191cc2e70ce5ae3b997732409d"]}},"version":1}
test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol:test 6060604052341561000f57600080fd5b5b60a68061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a0b2b43b8114603c575b600080fd5b3415604657600080fd5b60736c010000000000000000000000006004359081049068010000000000000000900463ffffffff166075565b005b5b50505600a165627a7a7230582076bab1cc0af9c7bfb141035b00699a767363905d4a0f8f4a9b9dc87c27d69f260029
test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"function"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dab6a842ba85ec271141f3389d554a38f1e6a8202aa0399192721eb748435ee1.sol":{"keccak256":"0x3b8b229ae07dcd64018a85a308f69820c5be4be73018ce4552542851067f5b85","urls":["bzzr://5d1a4c46376f41fe6cc9ab64d96a4553f504083286a927365d011be9e1c90b8a"]}},"version":1}
test_daea685c5ffa914fea616a8d39c8298f50a9ddfa9831874087b613b14a283871.sol: ERROR
test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820e10893a0c24c511948c81a905ca6aebcc59814900e772fe15b6046f73c7f0ee40029
test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dafdb9093657e942a8bfd11419ebb755d0661a800dc0db6035085cbcba45ea8c.sol":{"keccak256":"0x14f907e88c8560f486d4be0af44c602f4f1955204eab18256e914575e9dd0faf","urls":["bzzr://3bd1cd19567d0e147945cc8ce4a5a0558ef3888f38d68162003e086fa645afd3"]}},"version":1}
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:base 
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:base 
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:derived 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c29855788114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058206b11b6e51cde0c7f70973b14d29053972e8c55bd1f15db11f671c25f3c3ccc3e0029
test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol":"derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_db0b38c6982b524337b21845d21122ea341c509dc809ad112b3c400f21c0176a.sol":{"keccak256":"0x3c3d6c4ff401b1a906ded84b2fbedfeab996c76135cc1d4c2a95c53e38b67e73","urls":["bzzr://8399dec1842010a1ba94963f1a30a94c9a9e9678be3f430591897750ab34bccb"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:derived 6060604052341561000f57600080fd5b5b60c78061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146050578063e2179b8e146062578063f5df1a33146050575b600080fd5b3415605a57600080fd5b60606086565b005b3415606c57600080fd5b60606089565b005b3415605a57600080fd5b60606086565b005b5b565b608f6086565b60866086565b5b565b5b5600a165627a7a72305820c9f88f46d6e22774c0b4f3d556884580c3934344295feeedc8f5129c70311b200029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter1 60606040523415600e57600080fd5b5b609c8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063f5df1a33146046575b600080fd5b3415605057600080fd5b6056606a565b005b3415605057600080fd5b6056606a565b005b5b565b5b5600a165627a7a723058208140e96c57ba924c65aa94781613f0f02701c275e92b1e48b098fd4584c5dc8c0029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter1 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"inter1"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter2 60606040523415600e57600080fd5b5b609c8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff081146046578063f5df1a33146046575b600080fd5b3415605057600080fd5b6056606a565b005b3415605057600080fd5b6056606a565b005b5b565b5b5600a165627a7a7230582012740de3a84143b2956de358b53f314fa10b4013a1ed4b3f4ed270816e52d32a0029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:inter2 {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"inter2"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:root 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f5df1a338114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a723058200c1c123a5caf5f30644252de70ed3332f04af86a8f4e05fbe9e48087e6d3148a0029
test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol:root {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"rootFunction","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":"root"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_db6e01ec3df82c95afdada9372b633348465549b5ac60d29c7870ce4957e099f.sol":{"keccak256":"0x987d0528d57e26504959329388cd6e7b12289d78f5fd5ae7e36b6af68778ca57","urls":["bzzr://16b0c05e0ad3b63522c38f932e0ca9c0f5bdab67871143b26f7863e9c184e8df"]}},"version":1}
test_dbb36bdcc2430bcb8facbc5135cb03f15cd5ab2dccd53d2ebf8697b6f6e8a726.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol:C 6060604052341561000f57600080fd5b5b61024f8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b6000805460ff1916600290811780835560ff16146100b457506002610086565b6000805462abcd0062ffff00199091161790819055610100900461ffff1661abcd146100e257506003610086565b600180547fff000000000000000000000000000000000000000000000000000000000000001664123456789090811791829055600160f860020a03919091161461012e57506004610086565b60005460ff1660021461014357506005610086565b6000805460ff191660089081179182905560ff919091161461016757506006610086565b600054610100900461ffff1661abcd1461018357506007610086565b6000805462dcab0062ffff00199091161790819055610100900461ffff1661dcab146101b157506008610086565b600154600160f860020a0316641234567890146101d057506009610086565b600180547fff000000000000000000000000000000000000000000000000000000000000001664987654321090811791829055600160f860020a03919091161461021c5750600a610086565b5060015b905600a165627a7a72305820c3005329b20c7b3005d9d2bbc8411cbce58f8640e537d39e0e7260f662a817ef0029
test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dbbd6491ec2707efa1df24bbd03de746f64a56b110ab39f10bebe624a483a82b.sol":{"keccak256":"0xb2ba62142e06cf85c56e3d01267a9d853ce66f6b4b34cd2c7d6e06312c2e4ff1","urls":["bzzr://80a8b5432a58eba7b69c5475748e7ab07074bfd436c7beda10a29011ab8a21bc"]}},"version":1}
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

 conv bytes32 -> bytes32
 conv uint8 -> uint8
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint8_to_t_uint8(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint8_to_t_uint8(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint8(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint8(value) -> cleaned {
				cleaned := and(value, 0xFF)
			}
		

test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol:test 6060604052341561000f57600080fd5b5b6101ce8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166371ef8592811461003d575b600080fd5b341561004857600080fd5b61005f60043560ff602435166044356064356100b9565b604051602081016100728183808661007c565b9050809250610090565b8361008682610095565b8452949350505050565b6100ae565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390f35b600060018585858560405180600052602001604052600060405160200152604051608081016100ea81838089610127565b90506100fb81602084018488610140565b905061010c81604084018487610127565b905061011d81606084018486610127565b905080955061013b565b8361008682610159565b8452949350505050565b610154565b8361008682610161565b8452949350505050565b61015c565b90565b610167565b60ff1690565b5050505050602060405160208103908084039060008661646e5a03f1151561018e57600080fd5b50506020604051035190505b9493505050505600a165627a7a72305820fcfa66eefa5983e17af6b3f2c6ac7e9877e6de6a1b709573131d92013e36a4d60029
test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"h","type":"bytes32"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"a","outputs":[{"name":"addr","type":"address"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dbdb4f1280b3503791f8892ace0095c43d5b4e5155c58ace6379cc025cb6a003.sol":{"keccak256":"0x9c226581973e27646c2e14550a2763fd8cb4c92355b34d6da97b941976b9b303","urls":["bzzr://4747eaf1e42dfcffba21d42260083362e734b4571fe645b563b7e6ee540a0ae0"]}},"version":1}
test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058207ad2467ea75fad78c01fdcd8f80c7a0a907ab653f39d6e17fac4f810fc0fc71b0029
test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dbeb869ab56da1adb5b8ada08238d36cd14066539027a2041c14da28b425c0b1.sol":{"keccak256":"0x20ae1b5b15a27a5e0ba59faa55ce5bbba9a63a7cc2086cfc5144edbc210f8b43","urls":["bzzr://8b39f6d0a0b2594ce1212010a21e48831be6cf337f77eadc27b8b1fd923f2173"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Bike 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d45754f88114603c575b600080fd5b3415604657600080fd5b605760048035602481019101356095565b604051602081016068818380866071565b90508092506083565b836079826087565b8452949350505050565b608a565b90565b505060405180910390f35b602a5b929150505600a165627a7a723058204bd4894f1d775a5715f95a751f094cf61c5aacbacb254086b9d4d38254ef6e660029
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Bike {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":"Bike"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":{"keccak256":"0x55fdbd981526d341b6ee185b04d761e112171e9912b89d01635a863ca38222a1","urls":["bzzr://14c08e1e2efd71f8d60ea64038e003ceb4ce7261d11ddf9d6b01b306e6890729"]}},"version":1}
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Vehicle 6060604052341561000f57600080fd5b5b60ca8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d45754f88114603c575b600080fd5b3415604657600080fd5b605760048035602481019101356095565b604051602081016068818380866071565b90508092506083565b836079826087565b8452949350505050565b608a565b90565b505060405180910390f35b60015b929150505600a165627a7a7230582077c6cffe9e8ccec18d205bb02e3dde92e5366fb5242d6c2c89596fa54ddd60c20029
test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol:Vehicle {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"bytes"}],"name":"f","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":"Vehicle"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dc7b3a903746be0843c1f3535ac88b50e3e8432adafd5a3b9413222e27ef1859.sol":{"keccak256":"0x55fdbd981526d341b6ee185b04d761e112171e9912b89d01635a863ca38222a1","urls":["bzzr://14c08e1e2efd71f8d60ea64038e003ceb4ce7261d11ddf9d6b01b306e6890729"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol:C 6060604052602a600055341561001457600080fd5b5b61010c806100246000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114605057806326121ff014609e578063e2179b8e14609e575b600080fd5b3415605a57600080fd5b606060c2565b60405160208101607181838086607a565b9050809250608c565b836082826090565b8452949350505050565b6093565b90565b505060405180910390f35b341560a857600080fd5b60ae60c8565b005b341560a857600080fd5b60ae60c8565b005b60005481565b6001600090815580fd5b565b6001600090815580fd5b5600a165627a7a723058204da9dc827dc197d2e984e617c50de0320163e6bfce53d2915bd4b01239f3db120029
test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dd080b707c3cd5fb504179ce2a101cfb91f488d47d26a0d7fdb0e62b14b21670.sol":{"keccak256":"0x1b947ef437f2a53fc381b05d29bf06dc4633e030222840ff73638b98a465e542","urls":["bzzr://8b412ecf2c845a1576ca54979c0352af917ea02e2404118660661d4b9192ea52"]}},"version":1}
test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol:test 60606040523415600e57600080fd5b5b608b8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600060015b15156001141590505b505600a165627a7a723058200639b86368c92ad6c90e7bfa97a734bd505ac1ce19bd791d92027681c70765e70029
test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dd1656183cefed699b955fdd739e85089a19d74885f163cabbcd2a4a8fac6105.sol":{"keccak256":"0x779c5488253957465cb34085c22b44667cce9a1edddda7882d72e0111acfb4ca","urls":["bzzr://a07225418b80d595154b99df4748a5015f7416a1e3d62a160533516cfd81c01b"]}},"version":1}
 conv address -> address
 conv bytes32 -> bytes32
 conv uint256 -> uint256
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol:ClientReceipt 6060604052341561000f57600080fd5b5b6101948061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b214faa5811461003d575b600080fd5b61004860043561004a565b005b7f95f016c9564e5db4b6e5851ee7934799bf3299644de9136bfadb23efaee5ada2338234600160405160808101610083818380896100c0565b9050610094816020840184886100f2565b90506100a5816040840184876100f2565b90506100b6816060840184866100d9565b90508095506100d4565b836100ca82610124565b8452949350505050565b6100ed565b836100ca82610142565b8452949350505050565b610106565b836100ca8261014c565b8452949350505050565b61011f565b836100ca8261014c565b8452949350505050565b61013d565b73ffffffffffffffffffffffffffffffffffffffff1690565b610147565b151590565b61014f565b90565b610157565b90565b505050505060405180910390a15b505600a165627a7a72305820eb968de7de4432345b06526386989b34806260cb8901dc8e82f710c44a7f62bf0029
test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_id","type":"bytes32"}],"name":"deposit","outputs":[],"payable":true,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_from","type":"address"},{"indexed":false,"name":"_id","type":"bytes32"},{"indexed":false,"name":"_value","type":"uint256"},{"indexed":false,"name":"_flag","type":"bool"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dd46647f208e151c51914052a2ad9663aff2f2d534e9aa2b7056092f3b1d8105.sol":{"keccak256":"0xbb141f1576a03192661377bb9c07d53cb411e4b5a919d53b335aa8498cccc2c7","urls":["bzzr://3a261ae160016784cde612438e144e93f89a2de08eb01d5c4f306675dd3f764b"]}},"version":1}
test_dd77f04f230fc436669b424e113692488f3d322ef7c0590e7501e7fb5decce59.sol: ERROR
test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820aea36bb29bea23569da3ef0acf1a0978bf4880567b486882c245043256ecf1fe0029
test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_de74e531f445d13be208b434f61d6252949afdbb11d22c967bd78fecab03b900.sol":{"keccak256":"0x544ec358c22852273deefab7c2e5b1636887c5f35c145053e8539c486a964e1c","urls":["bzzr://456efd9fa2c3f9d81a853315ff25d2756e78965eda21d0b611c7ba88e14a15cb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		

test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ab414372bd5356383ba6b4b3e16264265d6e711c2f4a9041baf7d9a51776f9090029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820227e369f991147ebc92c7cb736a5f2e1c35e454efbc27dc847257c2f34e440580029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"_addr","type":"address"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:ClientReceipt 6060604052341561000f57600080fd5b5b61032f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166347e7ef248114610053578063d0e30db0146100c6578063f340fa011461011d575b600080fd5b341561005e57600080fd5b61008273ffffffffffffffffffffffffffffffffffffffff6004351660243561018d565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b34156100d157600080fd5b610082610248565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b341561012857600080fd5b61008273ffffffffffffffffffffffffffffffffffffffff6004351661027d565b604051602081016100958183808661009f565b90508092506100b3565b836100a9826100b8565b8452949350505050565b6100bb565b90565b505060405180910390f35b60007fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8383604051604081016101c5818380876101e0565b90506101d68160208401848661009f565b90508093506101f4565b836100a982610212565b8452949350505050565b61020d565b836100a9826100b8565b8452949350505050565b61022b565b73ffffffffffffffffffffffffffffffffffffffff1690565b610233565b90565b50505060405180910390a15060015b92915050565b60007fed21248cb703b524cc0029bb8669df941baca560163a3bc6ad184e7e9c26807060405160405180910390a15060015b90565b60007f8ce0bd46ec50cf39f0d0ea8686a686eb226af5796dcda4231b26fb84b5ef123482604051602081016102b4818380866101e0565b90508092506102d2565b836100a982610212565b8452949350505050565b6102f0565b73ffffffffffffffffffffffffffffffffffffffff1690565b505060405180910390a15060015b9190505600a165627a7a7230582073602506d6a5fa340aa6c065be0c0b704d3734c3bdfd0c9e4b942cf5f38c78c10029
test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_addr","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_deb59110212499668b921fffef5ad11888de532828de422a2fa93fa0cb0848c1.sol":{"keccak256":"0xe777067ac54821bdb5667c9b9b032966c51997601adf699cc3c000380d2fef36","urls":["bzzr://6595a2bfa7d1689db3c38a1392129adfb34df0d04a27b64e07b80edd8adf1f66"]}},"version":1}
test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol:test 60606040523415600e57600080fd5b5b608c8061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c008df98114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b600260008290031914155b50505600a165627a7a72305820ca07f86ee2a34b5beca4dafc9aa82376c6a816921d6f11c83487990d3c3a4f970029
test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"y","type":"int256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_decf79db2c084841845f6e5f1f22f799856b4980c28277863f98e93bd98b799e.sol":{"keccak256":"0x57f7058f8663e11125840c0dfb322d46652b1b9cfca20560e188557375a11086","urls":["bzzr://dc27e9c55fe0c80bffc7d077b58c4e250bb82906469a62a517b47909275a9d1d"]}},"version":1}
test_ded1de94c5ac6df46f1068027afc9f9b14c99e86be8c37faec808b5fef7993b5.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol:DCE 6060604052341561000f57600080fd5b5b6000805467ffffffffffffffff19166100406401000000000261009f1767ffffffffffffffff161790555b610046565b60075b90565b60d1806100546000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000805460999063ffffffff16565b90505b90565b60075b905600a165627a7a7230582006d4d6f88432883151ed19745b029e004ae6f74a899063eb1fe52a93716bc0750029
test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol:DCE {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol":"DCE"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_deefe7ad388cc67e7be1de64754c66f58a5915777143bf0f0e5d86b86d50321e.sol":{"keccak256":"0x999986be4ab5299a7074e2403e23c835d6ab9226c94b7b46b34e736f14190443","urls":["bzzr://70903bff1e7b9878d9965408f63d7bede6ad1d07cfccc7bb773115e80646b4eb"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol:test 6060604052341561000f57600080fd5b5b61025e8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318159cfb811461003d575b600080fd5b341561004857600080fd5b6100d060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061011695505050505050565b604051602081016100e3818380866100ed565b9050809250610101565b836100f782610106565b8452949350505050565b61010b565b151590565b505060405180910390f35b60006002826000604051602001526040518082805190602001908083835b6020831061015457805182525b601f199092019160209182019101610134565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f1151561019657600080fd5b5050604051805190506002846000604051602001526040518082805190602001908083835b602083106101db57805182525b601f1990920191602091820191016101bb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f1151561021d57600080fd5b50506040518051919091149150505b929150505600a165627a7a72305820c26843ec49b58bf52b6702739e7403b901d2da87b136173b4d53f5e30ea1cefd0029
test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"string"},{"name":"b","type":"string"}],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_df9c5725e0a846de93226f2af2a5853c4216d3edda641fde3246c9da2e720721.sol":{"keccak256":"0xe4b6f42dbddda423139a183e70428d7ada73b03f7b7a54fc323b9e05d041c6c1","urls":["bzzr://13826e88d4303a13449119634777f7e49a1bfb82217bf21a7edcc93b92e92f9e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol:test 6060604052341561000f57600080fd5b5b6101478061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b6000818155808211156100be57600080546001908101808355825260205260409020600890555b60018211156100d257600080546000190190555b60028211156100f557600080548152600160208190526040909120805490910190555b50600080546001818101835590825260205260409020805460001901908190555b9190505600a165627a7a72305820d661e902c92b30eef54a1dbeef2599554810426defdbb80b241a54ca01f0ec8d0029
test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[{"name":"y","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_dff90ca18bcb26da17ee9e6e6a049d43cdffd937cff1656b3bff27427bead105.sol":{"keccak256":"0x6fa328c95e9d7cdfbfd97c23355f078b6f99717093dc9c35b0106729ec2528ca","urls":["bzzr://e137f6fcb6a3c3d032796be923ddec09d8c5d151759a648abfaa330d15e44134"]}},"version":1}
test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol:C 6060604052341561000f57600080fd5b5b61018f8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461003d575b600080fd5b341561004857600080fd5b610050610052565b005b61005a610105565b60408051908101604052806040805190810160405280600181526020016040805190810160405280600481526020017f6669736800000000000000000000000000000000000000000000000000000000815250815250815260200160408051908101604052806002815260200160408051908101604052600481527f666973680000000000000000000000000000000000000000000000000000000060208201529052905290505b50565b60806040519081016040526002815b61011c610132565b8152602001906001900390816101145790505090565b60408051908101604052806000815260200161014c610151565b905290565b602060405190810160405260008152905600a165627a7a72305820a00cf63dea04703b15e2c521504f58c760f68d42abe22ebd32628e7e6be70de70029
test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e01caebcd10ed00797553b37c5ef2bb6ad03db9b94d40f55cc4f137ee89ce782.sol":{"keccak256":"0xc02cf166d106a205ba0b42c2750fa4e108f5f6bddb171798140279c282145d3d","urls":["bzzr://b0b1e076ae41994c313fb4326dc1d2f39a5e2b197fa78f244c1bd644a3415a10"]}},"version":1}
test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol:ClientReceipt 60606040523415600e57600080fd5b5b60888061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d0e30db08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60405160405180910390a05b5600a165627a7a723058205d7f5c3320837b41ad288420cee8ad75d05f26c2771987c477d6de20c8d7edb30029
test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol:ClientReceipt {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":false,"type":"function"},{"anonymous":true,"inputs":[],"name":"Deposit","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol":"ClientReceipt"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e02f20f7b2d19914d622c2ef535f7e10a986a83603edb35b3acca83825f665ce.sol":{"keccak256":"0x1cecf73941feb687a879b36b5659b3eee3a87cd9ef9effa5ad3f9860fcdc4fe7","urls":["bzzr://ce8a3abd31c360e4a06b5b91026cf6ecffd8f455feb6e88f718332cc6698464d"]}},"version":1}
test_e05ed06c27762b5bf8c278f6c3652b2fb8885bbbe9457c22fd8f272c2fd26219.sol: ERROR
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:A 60606040523415600e57600080fd5b5b5b5b603680601e6000396000f30060606040525b600080fd00a165627a7a723058202a25b2e3d2a474029ab836fe6da9ae9929f5fec5b13a4bded96ef3d075818c640029
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":{"keccak256":"0x8cc450af09c348555e0e7e5b3d74ea5eaa987205cdc8756cefd8ca1e3014fb44","urls":["bzzr://d2abab32401241937f747048edf8f303b1d3ea16754b87036cf3217667208542"]}},"version":1}
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:B 60606040525b5b5b60808060146000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a72305820ac4dae48ca22be6c193212a98eb282efa9cac30dc5550c9750616d735bb518a50029
test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e0aeecdc7f82a0035faa2f8c057205b6998121b5b48d4b00f13466372c262cb5.sol":{"keccak256":"0x8cc450af09c348555e0e7e5b3d74ea5eaa987205cdc8756cefd8ca1e3014fb44","urls":["bzzr://d2abab32401241937f747048edf8f303b1d3ea16754b87036cf3217667208542"]}},"version":1}
test_e0b1b588b7f192c154215e87bad5a9aad4c5df5ff2c0da4dfe5e459f44c3fada.sol: ERROR
test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol:C 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60015b505600a165627a7a7230582029f095dd72b38243e9aa2ba1b71e5d0c7cd43678a1ac8f890c4502492a8be2020029
test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e0b2d29e64102a09bc0771149758e6fa9e72373b93a124d66bf74844b87e6a09.sol":{"keccak256":"0xf1b4cad448cbb0592beba1e57633bb24e6e28096822a2a2098d755f122d13481","urls":["bzzr://8199c262a57db64de67071753d0fdd7a9aba7ced9ae7f0c2a9b4238964bb9164"]}},"version":1}
test_e0fe9fdc669a37a359d107cb9046f1bafc9f4fb5dc6140dda0890d279e60cd47.sol: ERROR
test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820057963ee01b7f9cb04ef1abfefe42e3d258244d45012e6c8ec767ae81d54ab1b0029
test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e1b66e0db604df1e150197ea4d983c3d2c01028df642621ed71f7a45bc31af9f.sol":{"keccak256":"0x9dd9548ee5d77b8e7345a98b5f140d3af1ceb3168a84592192a1af5591c3d7ac","urls":["bzzr://e670f56af6133bc1a148ec6968b1497a8e839eea1a208dc2fcf099c16ad285b5"]}},"version":1}
test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol:test 60606040523415600e57600080fd5b5b60968061001d6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630dbe671f8114603c575b600080fd5b3415604657600080fd5b604c604e565b005b600460036002600160405190815260200160405180910390a35b5600a165627a7a723058206a356168dda9c0be74c2577e4468d91db81920efdfd9f941c1eb4ffe8fd0b9410029
test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"a","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e1d8bc756c3a9999bfe6039b4cf369403fe2e5ea9a87557492500aaa429ea75b.sol":{"keccak256":"0x36982b2c987a42bb43a6ac39363948b0b7afee7771ff9f2af9ee25a520fb8c39","urls":["bzzr://c628b210fe870ffe438e86e354675fcecca7bdfb94d404137f081b48d3f082c5"]}},"version":1}
test_e1f3db885ac258676e130e02223f5e3eefd789c6af957675bf1745ea29f16aec.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol:C 6060604052341561000f57600080fd5b5b61011f8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f60043560ad565b604051606081016060818380886087565b9050606f816020840184876087565b9050607e816040840184866087565b90508094506099565b83608f82609d565b8452949350505050565b60a0565b90565b5050505060405180910390f35b6000808055808060c6565b600080549091019055600190565b835b60d0600260b8565b81141560e557925060005b60038201915060c8565b5060005491505b91939092505600a165627a7a723058201533e9ffda2e6cf8f8d18f98f0892edc40fa9d2525e10f68e60cacc18ef282f40029
test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"},{"name":"c","type":"uint256"},{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e20c3e5cc05ed7e82f0354ea453bebba61e3a7cbc9aa1e37eba552975a5dd5d4.sol":{"keccak256":"0x095ae0876261ad63f24f09a9496c3f5efd124424618ea235f8fee78fb8d0b6b4","urls":["bzzr://5a31c23725d8cd5982286bddb78acb869f2bf9e0b70db450422aaa3b5dc65866"]}},"version":1}
test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol:test 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ab78035a888b181c27c6aec820d0489d17a3996bb623af838d067519181616050029
test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e218b26ed7f92c1d94021ffd3d0389eed690d6811fd1f5662c3f25b549b9e6ba.sol":{"keccak256":"0x45b2871769bc1e439b4c35515ea3ae524e634382048588031c4e4073c4361320","urls":["bzzr://8bd3e105558e5621ab001d2a0073b077a89b69cbc06a1974e9ac3a118177f127"]}},"version":1}
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol:c 6060604052341561000f57600080fd5b5b6101688061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a481e08c811461003d575b600080fd5b341561004857600080fd5b6100566004356024356100cd565b6040516040810161006981838087610084565b905061007a81602084018486610084565b9050809350610098565b8361008e826100b6565b8452949350505050565b6100b1565b8361008e826100b6565b8452949350505050565b6100b9565b90565b6100c1565b90565b50505060405180910390f35b60008060008360405190815260200160405180910390209050600885111561010e578360405190815260200160405190819003902060018690559050610129565b83604051908152602001604051908190039020600186905590505b600154925060005491505b5092509290505600a165627a7a72305820317f3574197727d518f78e5d6491a049a0a2d3e8dce710f6fd7fb2c67812db0e0029
test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"f","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e24e7b01f0078a6ee829900883c97beab69631614ca8d9b12b6b3a168ee2829a.sol":{"keccak256":"0x0a0c5db1151974627d4036fbcd3109f4a85d05f125eaabc50da387b7d67899c3","urls":["bzzr://95e9e4a0d7fc04d05bbb35f9939a9761797edc02447f21d5b7dd204cb79e9513"]}},"version":1}
test_e26db6eaa849c25017da21d010cfc1b8543b636a4f064b3bcde1958727f5d0cc.sol: ERROR
test_e2bff6a7aacc188df31498aa8f60d60e7bf00386539e5c77a58d535e1ba173f8.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol:c 6060604052341561000f57600080fd5b5b6103fe8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c2985578811461003d575b600080fd5b341561004857600080fd5b610050610094565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b610089565b90565b505060405180910390f35b600060036100a282826102e8565b507f780000000000000000000000000000000000000000000000000000000000000060008081546001816001161561010002031660029004811015156100e457fe5b8154600116156101035790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055507f790000000000000000000000000000000000000000000000000000000000000060006001815460018160011615610100020316600290048110151561016157fe5b8154600116156101805790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055507f7a000000000000000000000000000000000000000000000000000000000000006000600281546001816001161561010002031660029004811015156101de57fe5b8154600116156101fd5790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a84040217905550600060405180828054600181600116156101000203166002900480156102765780601f10610254576101008083540402835291820191610276565b820191906000526020600020905b815481529060010190602001808311610262575b505091505060405180910390206040517f6200000000000000000000000000000000000000000000000000000000000000815260018101919091527f61000000000000000000000000000000000000000000000000000000000000006021820152602201604051809103902090505b90565b81546001816001161561010002031660029004825481601f106103435782601f10610328575b826008026101000360020a809104028280011783556103ab565b60ff19168360005260206000205581800160010183556103ab565b82601f10610373575082600052602060002080549082601f016020900481019061036d91906103b1565b5061030e565b508180016001018355818115116103ab57601f016020900481601f016020900483600052602060002091820191016103ab91906103b1565b5b505050565b61008691905b808211156103cb57600081556001016103b7565b5090565b905600a165627a7a723058206dbde7f987544eb6ffa2a3b81d37ce5e2b4f9d93b544de4bf706c1e373d638df0029
test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"foo","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e3414994c2e066385416be07dff0b675a30c5ad3249283eb28d90add6f9f1cca.sol":{"keccak256":"0x54dd2c1d3f9ca465f7b6725dc2f38a8756af00dea2662a35ff6c909f3ab93e71","urls":["bzzr://e6ae9efed4440f2a2384164fd7706f5fb4bcd6c19f0217d9f3feea8d622a6caf"]}},"version":1}
test_e3708ac73fbf9f34811b455a13bfe1de5a890cbdec9cd5b401bef2c883538124.sol: ERROR
test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol:A 60606040523415600e57600080fd5b5b60928061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b60075b605c565b5b60025b5b60ff1690505b505600a165627a7a72305820e022bffdeaf02b44ac42c4a5d2b58031f34d989299b98d6e3d35f08b73edf38a0029
test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e3e6f044240024e0c767ab2ba7c0d43284aa09095ac576a82aa9b706c079af57.sol":{"keccak256":"0x12789cd62ff5bae856aa9a893a5f3242745af3f31db0bfddf16721d05a2871ba","urls":["bzzr://2b57441fb5e1542e0bd93ee36ac4d8227c0fe89330f73cd7b736aa42d35e7eed"]}},"version":1}
test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol:c 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a7230582098c98db6af90ff93f26df86393fb7c0cee434486e6cac0b9bd23fed279c24d140029
test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":true,"inputs":[{"indexed":true,"name":"a","type":"uint256"},{"indexed":true,"name":"b","type":"bytes3"},{"indexed":true,"name":"c","type":"bool"},{"indexed":true,"name":"d","type":"uint256"}],"name":"e","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e3f5718c398a192b3f2d3fa4e56af8aaefa45c2b0e9329ca3f2d0eef7f9df708.sol":{"keccak256":"0x2f255f7a70ad5e4c9adad58636730cd26778a4362ce5f434d2b5c5457312aafe","urls":["bzzr://65fe837a03e7011bc4e14bcc36bcb7b5586f03bc2f928091f5a404a1c97a9604"]}},"version":1}
test_e4518e8a8b97b0948b2be33360d9d830e1163de72033ba0bf5e821799c2d0183.sol: ERROR
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol:C 6060604052341561000f57600080fd5b5b61010b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c60b7565b60405160408101605d818380876075565b9050606c816020840184866075565b90508093506087565b83607d8260a1565b8452949350505050565b609d565b83607d8260a1565b8452949350505050565b60a4565b90565b60ab565b90565b50505060405180910390f35b60077f61626364656600000000000000000000000000000000000000000000000000005b90915600a165627a7a72305820d3fa00265546c1e1a7c9aff8fc88fb984084e0160aeec4074041e53c440bfe5b0029
test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"r","type":"uint256"},{"name":"r2","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e49674d32a3f104fea0577f976a58b44dc85a0bcbfc152610b3b94587d5921c8.sol":{"keccak256":"0x9bf6e50f07ae82177b8a92e4aa85a9a018784bd0b6094cf49788cc86bafe9ceb","urls":["bzzr://3bc346cbf1f1cab820e2363b0b744fc64854e04cc1c380dfd582121f79394fb5"]}},"version":1}
test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol:Test 6060604052341561000f57600080fd5b5b60b68061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634f744b53811460465780636258b270146046575b600080fd5b3415605057600080fd5b606160048035602481019101356080565b005b3415605057600080fd5b606160048035602481019101356080565b005b5b5050565b5b50505600a165627a7a72305820a419e2c35816d4df3401cad484b419fbade3194b5d74108500a956f356e37b140029
test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_s","type":"string"}],"name":"h","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_b","type":"bytes"}],"name":"k","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e4f1db1878d562792cf0e6edb0a48da0c32c4b10fe577692c659514f94c2229a.sol":{"keccak256":"0x3f3dd703fe7bc05b939e4e4169ebc37ee75bf28ad1e71fc812e010f6338847a4","urls":["bzzr://5cfd59b5e38bc77e9fa0c878d5db80a6b8001abefcee2d0cb3181dd2ea5c7ee1"]}},"version":1}
test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol:I 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058202f9cb00c13de1164ab629505eee62c97881a4438f5e854803dfe341d981aa6ec0029
test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol:I {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[],"name":"E","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol":"I"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e4f546ac9183fe5b3887f66847bc8f61ae6ab6ef6fdc81be9e86b7a59451928c.sol":{"keccak256":"0x74667c6ca37470f10af734ce28386fc6b8c2308eed445060f1e21c9ebd3e7878","urls":["bzzr://cf2d12cf763dfd10788fae485e6112f04849ce886f9551d0153b5afaa236d5d7"]}},"version":1}
test_e4fefbd3c69dd3ff2e22565bd9497c06ffad754886205a536e7408ef269c52b1.sol: ERROR
test_e550f9aade49bdb71ef62088da2ce09e2ceb75bca85e3953922386264860fab6.sol: ERROR
test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol:C 60606040523415600e57600080fd5b5b60938061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b73fa0bfc97e48458494ccd857e1a85dc91f7f0046e5b505600a165627a7a7230582089cda2c235000241a1a4a915062740d09a3a23858a17a0d31346804f3eeb30650029
test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e5524c46273842a5e353dad28dc0b2f57e2a668e5abbffa5d05693be7781ac78.sol":{"keccak256":"0x95637432bfbaa0708b8ab090af7798627ec55e254c8e615ca4ad7d8e59f7b7d3","urls":["bzzr://b3a0b8ef486d34b4c9baf46a8b1c7a4816e891c3c9ce3dee9038a621a13c07d0"]}},"version":1}
test_e55f140c8d277029a254dbcaa9c334d07cf113466c9e812c2bdcbb92380cc926.sol: ERROR
test_e583007eebec18ce43eb260c8946fe6bb6ad3068bb3e5941221f5637c826ae54.sol: ERROR
 conv int_const 10 -> uint256
test_e5a3a1358ac2725a86129940641c98cfc1dc34d41d29f11d32eb98ad96738234.sol: ERROR
test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol:c 6060604052341561000f57600080fd5b5b60fe8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166352efea6e81146046578063d9c55ce1146058575b600080fd5b3415605057600080fd5b6056606a565b005b3415606257600080fd5b60566077565b005b60746002600060a4565b5b565b60005b601481101560a0576001810160028260148110609257fe5b0160005b50555b600101607a565b5b50565b5060a090601481019060b4565b50565b60cf91905b8082111560cb576000815560010160b9565b5090565b905600a165627a7a72305820435e55b2bd639d485cd743c5aff48fadfdff61fa4dd02e2b0f66e2bbaecf94a00029
test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"clear","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fill","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e5f1916d86b51f655073e1745a53ec63ad4c58adb627f406ebf50df1d59b0038.sol":{"keccak256":"0xfde7b0962f7c8a4813a948b38e1c2fa5b2eec75910b2dd0230af323e8bbdc774","urls":["bzzr://735f4a2c5f197511ded8d460c39e5bbb7942a9965931191c84cc0301592b4ae0"]}},"version":1}
test_e652194011b367d2eebb93b84f16727a535ccff3872821db3eef8de910c26f81.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol:C 6060604052341561000f57600080fd5b5b60dc8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663491daff18114603c575b600080fd5b3415604657600080fd5b605b63ffffffff600435811690602435166099565b60405160208101606c818380866075565b90508092506087565b83607d82608b565b8452949350505050565b608e565b90565b505060405180910390f35b63ffffffff80821660020a83821604165b929150505600a165627a7a72305820e939089168bda3c5e89d72fc4e41884e4b1bd01614a57b47a1d12d46d360e6b30029
test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint32"},{"name":"b","type":"uint32"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e7210e98da83ae82d2da97cb603b632b7b893052cb9547a48d850faa45613777.sol":{"keccak256":"0x744e3b9590bcae837371a4d49f28308605938c6aa296e157bebbc8f39844a683","urls":["bzzr://dd019f102bb50f6651cb8e8a929fafa777b59b6ba5f3623b38e823d292e99b01"]}},"version":1}
test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol:C 60606040523415600e57600080fd5b5b60828061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b5b505600a165627a7a72305820490e45cd22065a760ab05cb225421feaaa7c2aa99c09a1143eb33be2eff0f19f0029
test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e770baa5bfdd3daea760e09a867f5197dbef1f90fc7d0a542383b5b6dafdd815.sol":{"keccak256":"0x268e3f400852e8d0a62954b2d2a8b653183c0a7748416a81212edc165caa29e2","urls":["bzzr://ec09a25cd692f1e1c6c27bdae71509702a692e2a5f54f194719b6a0dacbed2a6"]}},"version":1}
test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol:c 60606040523415600e57600080fd5b5b607d8061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b5b5600a165627a7a72305820b0a22fc8e55321e00061e3bc5780a9500f76571c57602e7ca315175dcee9719d0029
test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e78da38a434037613f6e23653137180354e0f30e265d9276db07a3cfc0d44065.sol":{"keccak256":"0xf3f73edb8fe64249334856e4dfc7592c7c5e69e7ca2c6d1913e93880ae996e68","urls":["bzzr://bf2dc0f4578fb4c5eee8e100ad1ccf5416e7d13facef7b1448bf344310005b0d"]}},"version":1}
test_e7ebb750458f0d8349fe733780cb4f2dbf086a354f596a40310e07566e06fae8.sol: ERROR
test_e85d2204d820a4857e2185a2b8eb6f197c535c65ea1f88eaa9a12e0c15d04ca0.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol:C 6060604052341561000f57600080fd5b5b6102df8061001f6000396000f300606060405236156100755763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461007a578063b4f40c61146100d1578063b582ec5f14610128578063b8c9d3651461017f578063e2179b8e146101d6578063e5aa3d581461022d575b600080fd5b341561008557600080fd5b61008d610284565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b34156100dc57600080fd5b61008d61028e565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561013357600080fd5b61008d610295565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561018a57600080fd5b61008d61029c565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b34156101e157600080fd5b61008d6102a2565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b341561023857600080fd5b61008d6102a8565b604051602081016100a0818380866100aa565b90508092506100be565b836100b4826100c3565b8452949350505050565b6100c6565b90565b505060405180910390f35b6404a817c8005b90565b6018195b90565b6001195b90565b60195b90565b60025b90565b6404a817c7ff195b905600a165627a7a72305820b2b2660e5c90e3f9146418f9ce4f7f19b119e7815ca90822dae5d7a805b949800029
test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"k","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"j","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"i","outputs":[{"name":"","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e885a22faab8b3538dcad56da15eb87aaaa3f75258b9431a0828e283953f9dc0.sol":{"keccak256":"0x52136acec0360acb078582f4a8a820e7b69439331574fe9ffcee79504f350647","urls":["bzzr://d48268e09ed9433077a1ec1c89a2c6e1bcbde537ae5777efb98096f7e77ee64f"]}},"version":1}
test_e8e77a6bf81898712169f45beae16d889419128b45a0fecf177c94420faff096.sol: ERROR
test_e90e34c9fb16773afb1c7994c0978fe5f87a83caf38401356f7a7e56194f6044.sol: ERROR
test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol:test 60606040523415600e57600080fd5b5b60978061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b6007811115606157600180556067565b60016000555b5b505600a165627a7a723058208e2ea9afc3193d78c32d38e64c721411893cec4be90e5395e44920222d04c57d0029
test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e91d1071344aba816dd75f01df875dc5032cfdede32b6e61b64948325044e2ff.sol":{"keccak256":"0x05b8236c756e376998cf71f5849d4355c02370dfdc4db4d02c233712b36d5463","urls":["bzzr://2c62e8066271e1f672238d1102efbf8c600ef7dc46f8bc55c85e2035bcad91fb"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol:test 6060604052341561000f57600080fd5b5b600260008181526020526008907fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a569905b0160005b505560026000526001602052600361006a60008051602061028c833981519152826100aa565b5060026000819052600160205260008051602061028c833981519152805460089290811061009457fe5b906000526020600020900160005b50555b6100f5565b8154818355818115116100ce576000838152602090206100ce9181019083016100d4565b5b505050565b6100f291905b808211156100ee57600081556001016100da565b5090565b90565b610188806101046000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635173bd1e8114610048578063d3c5fe1e146100a5575b600080fd5b341561005357600080fd5b610061600435602435610102565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b34156100b057600080fd5b61006160043560243561012a565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009a565b90565b505060405180910390f35b60006020528160005260406000208160088110151561011d57fe5b0160005b91509150505481565b60016020528160005260406000208181548110151561014557fe5b906000526020600020900160005b915091505054815600a165627a7a723058200dbce6788f57ce5fae5f6757ab9acc8f02f3f0fc34e56f527b084c3cf0ce1c7f0029d9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f
test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"data","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"dynamicData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_e94a0503a0f3a2556c7c21b3dacc7086432b786b29c5ccf3b773ab402e787b5d.sol":{"keccak256":"0x4862ea0e74023999943f02d4fa141cc1076c91bf7ce03afc6b4ba11caaab8207","urls":["bzzr://ec7831094c98860d90cc2b1ea336af80a176996f2c49d3c19e85d1972daff521"]}},"version":1}
test_e97e8c6580429a479c514f13c0cca16890a0163f1520b08b878eeb0648170a86.sol: ERROR
test_e9a3f7fce3eb1c6bf5fe30c4e6af7d946899889fb1dd5f8d59dc306c81185fd0.sol: ERROR
test_ea48c483ca4c70b2fd1a3af3414f584afd8425e0f384291d844d2e8e8c22023f.sol: ERROR
test_ea5f7b9233654b1e03d2c52f0104775866cbfb8cb3cfb7578bd9cefabe819a45.sol: ERROR
test_eaf00fab7663d9d3f86f7c113ceb1a06fb6c3e3e29da0df2255000064d5899b0.sol: ERROR
test_eb58426739c26f6c5f88e4622067968a7c16c9f6531e22028e74998822ad6f1a.sol: ERROR
test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol:C 60606040523415600e57600080fd5b5b60738061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b60426044565b005b5b5600a165627a7a723058202144ae27629ca0f3d32c4f62c8e73e30189874cfadeff2e8487eaf5db0e004ab0029
test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_eb703ca48b618bcfd62583836204604bf57c77e7766d3d5b57b8d2429985329e.sol":{"keccak256":"0x4db7f7cdbe58955987d8782d7448ae96299c179b8db9e2d0e71a92131a7c710a","urls":["bzzr://1e39041f51fb48e55601efc575f2c7d24814e79536ddd328ada68345aca61407"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 128)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value3,
				$headStart,
				add($headStart, 96),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol:Test 6060604052341561000f57600080fd5b5b6102318061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d811461003d575b600080fd5b341561004857600080fd5b6100506100ca565b60405160808101610063818380896100a0565b9050610074816020840184886100a0565b9050610085816040840184876100a0565b9050610096816060840184866100a0565b90508095506100b4565b836100aa826100b9565b8452949350505050565b6100bc565b90565b505050505060405180910390f35b6000806000806100d86101c5565b6100e86001600260036004610126565b90506100f5816000610165565b9450610102816001610165565b935061010f816002610165565b925061011c816003610165565b91505b5090919293565b61012e6101c5565b60ff8516815283602082015160ff909116905282602082015161ffff9091166020918201528290820151604001525b949350505050565b600081151561017a57825160ff1690506101bc565b81600114156101935782602001515160ff1690506101bc565b81600214156101b05782602001516020015161ffff1690506101bc565b82602001516040015190505b5b5b5b92915050565b608060405190810160405260008152602081016101e06101e5565b905290565b6060604051908101604090815260008083526020830181905290820152905600a165627a7a723058202e84b605b13b1913230fd2b8c004c8d41f7bc50b64c1840db80fadb2790692360029
test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"a","type":"uint256"},{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"z","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_eb9aa347d394cc714ba54277fa0251d008231315ce210e525cb7a2088f733c55.sol":{"keccak256":"0x3ab4ad02c3940bb8b58e9fe59cec329b1a4fc7a8ba3ca6e2291af830b369560a","urls":["bzzr://7cb4e30ad0148a447e40ae6e79a270c9417630adb2079f074c72d81c76aaa3a3"]}},"version":1}
 conv int256 -> int256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_int256_to_t_int256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_int256_to_t_int256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_int256(value))

			}
		
			function cleanup_assert_t_int256(value) -> cleaned {
				cleaned := value
			}
		

test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol:test 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c04062268114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60c85b905600a165627a7a72305820e629da9de6a9a26332292b67315fc56b2635d0a24c06a9a1aebded74a62565220029
test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"run","outputs":[{"name":"y","type":"int256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ebfa8a9cc4c3e7a2f67acebf4ef1b089a4c6c9dc18da3ec95eec73d4d8a01058.sol":{"keccak256":"0x35fbac479595f6f8de3aa5698e2131b125a0618a6dad636fb96c36b93ebc6a6e","urls":["bzzr://80a9fb98173807466178090f9bc61e3bb88da3fee379678c229a0a42d87bfb14"]}},"version":1}
test_ec427fad860fcfb10000e70395cc2ca6503cf215b20e63d106595e59bc6a1066.sol: ERROR
test_ec91f01fd9c7364a4c49cec35580ee003f2279a92b4efdcfa84d1d432426af5b.sol: ERROR
 conv uint256 -> uint256
 conv address -> address
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 96)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_address_to_t_address(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value2,
				$headStart,
				add($headStart, 64),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_address_to_t_address(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_address(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_address(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol:test 60606040525b5b5b610108806100166000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166376bb682a8114603c575b600080fd5b604260d3565b604051606081016053818380886090565b9050606281602084018487607a565b90506071816040840184866090565b9050809450608c565b8360828260a6565b8452949350505050565b60a2565b8360828260c3565b8452949350505050565b60bf565b73ffffffffffffffffffffffffffffffffffffffff1690565b60c6565b90565b5050505060405180910390f35b3441435b9091925600a165627a7a72305820c3fa49381e2b91e5e9a283ac34fe3ea50adc0eb780222c0f20f06c7f39d482fc0029
test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"someInfo","outputs":[{"name":"value","type":"uint256"},{"name":"coinbase","type":"address"},{"name":"blockNumber","type":"uint256"}],"payable":true,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_eca951dfc1782eac2f56e903d72758fde83ac29f4e4ffe766352796831577d15.sol":{"keccak256":"0x9278eee4315af0e18406f987b6a10091ab5e89b57ce5626430af3eabb4b9e406","urls":["bzzr://9523d4769a1c3ec589e6ad13f2e49e1baa24339376f8cbe07ee318142eb9f340"]}},"version":1}
test_ecd11e79ae47c7cbfa8e7da14f9d4f1ef0a1f5544a987c56ae9504ba6eaf047f.sol: ERROR
test_ecde836616e740e0167926bf464f4ad41920c0808c455da8398c9f6bd968998a.sol: ERROR
test_ecef8879783d5143af5530201bbc1f41d6bdec8d3f329b804123153e23dd6653.sol: ERROR
test_ecf87ab567f9b08ebe1ac9e3ea9c8c90c6acbc95a12677ea77b57f561f9f3990.sol: ERROR
test_ed1454e3d73b8e9bd568046b592a9b37ce275bb75adb70fc453df6c3e0cba5bf.sol: ERROR
test_ed46b2829ae05c533d5fc022bb175b881c68d1a2af217af73644de565c71bc42.sol: ERROR
test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol:C 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a7230582030c9786c0d6fa15b441390036fa3e70b54a2d2125c7b94990f53e089de6547230029
test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ee26360a10d62c5b2f636cc10694530c5f105b497deb8f50c4156bd155973bac.sol":{"keccak256":"0x1e9315ac91e65f8b34566af563b17c608ca73d927494f6c3117e4c8f36f8a442","urls":["bzzr://ae6affd031ba00379a4baa267ed6a12a547b3503ed0aa67da76a4ea45e6bd014"]}},"version":1}
test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b505600a165627a7a72305820e206bb7445d4aae807e0758341dfa9b5168b3245702fb3309033e940ddc22c220029
test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ee2f46196ea84f7ba06854f1e0843f6a7dbf7a53f28de86e828215f03d6f66ab.sol":{"keccak256":"0x9b03b27fc579d3f0db2a880be6f7ba6758409273af673b8856de09768ea384ea","urls":["bzzr://2c6020946175083d69092c559351f98f4b8001e4c79eca9c31860a91506db23a"]}},"version":1}
test_ee74663549c24d355f2be5db73f1b9151ce1664b9d737b556944ca8407e2d3b4.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol:c 6060604052341561000f57600080fd5b5b6102b98061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ff2af2d811461004857806360fe47b1146100a7575b600080fd5b341561005357600080fd5b610061600435602435610103565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009c565b151590565b505060405180910390f35b34156100b257600080fd5b610061600435610143565b604051602081016100748183808661007e565b9050809250610092565b8361008882610097565b8452949350505050565b61009c565b151590565b505060405180910390f35b6000828152602081905260408082208383529082208154610137929060026000196101006001841615020190911604610167565b50600190505b92915050565b600081815260208190526040812061015c9082366101ed565b50600190505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101a057805485556101dc565b828001600101855582156101dc57600052602060002091601f016020900482015b828111156101dc5782548255916001019190600101906101c1565b5b506101e992915061026c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061022e5782800160ff198235161785556101dc565b828001600101855582156101dc579182015b828111156101dc578235825591602001919060010190610240565b5b506101e992915061026c565b5090565b61028a91905b808211156101e95760008155600101610272565b5090565b905600a165627a7a72305820e24bd3178a66d78297772130af607b53dfc9ff836773acb0370939b47b9694130029
test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"from","type":"uint256"},{"name":"to","type":"uint256"}],"name":"copy","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"key","type":"uint256"}],"name":"set","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_ee7abb4c9beb2bf39901a00f1a58c57353bed617e064c769de910f24229c82da.sol":{"keccak256":"0xd869b45239cb2a5776635e001bcfeb8d07e3a60b778fba0951898c069d4975e0","urls":["bzzr://189a8841f9120d3da974377f902acec7daa689f8083e984120c9ff2fc3d01860"]}},"version":1}
test_eeb99a9f467edccd8109f6c463095392da7e994aecb295d89359bb365c461fd4.sol: ERROR
 conv bytes3 -> bytes3
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes3_to_t_bytes3(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes3_to_t_bytes3(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes3(value))

			}
		
			function cleanup_assert_t_bytes3(value) -> cleaned {
				cleaned := and(value, 0xFFFFFF0000000000000000000000000000000000000000000000000000000000)
			}
		

 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol:Main 6060604052341561000f57600080fd5b6040516040806101fd83398101604052808051919060200180519150505b6000805462ffffff19167d01000000000000000000000000000000000000000000000000000000000084041763ff00000019166301000000831515021790555b50505b61017e8061007f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166317d7de7c8114610048578063f9633930146100c1575b600080fd5b341561005357600080fd5b61005b61011a565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b6100b6565b7fffffff00000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b34156100cc57600080fd5b6100d4610141565b6040516020810161006e818380866100f1565b905080925061008c565b836100828261010a565b8452949350505050565b6100b6565b151590565b505060405180910390f35b6000547d010000000000000000000000000000000000000000000000000000000000025b90565b6000546301000000900460ff165b905600a165627a7a72305820a99f739f3685d966b512ca8e6107d61d02a608eaba07fd8b068e1682849c88220029
test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol:Main {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getName","outputs":[{"name":"ret","type":"bytes3"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"getFlag","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"bytes3"},{"name":"f","type":"bool"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol":"Main"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_eeeb26963ae057111f95fe99fb41ad4a88f6031a55800e8f5c43f9b8478d2553.sol":{"keccak256":"0x17a42f5c9c8f3cb837512ca3cdcecd8f0a0e232e095fd07f5c812ebf45f30dd6","urls":["bzzr://f6b9cc89c89ec8177d6a3864ec5d67e58424a9ea6fa12060109c36a47393c91c"]}},"version":1}
test_ef20eab0ee82598a33a4db7d89cb5f893ebc01f85aa95b026c0aaf64ff8614db.sol: ERROR
test_ef2f610fc6c9c86992bb6e28dcd279c6f67fd3c1976ac4e2b49229b0a3e268c6.sol: ERROR
test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol:C 60606040523415600e57600080fd5b5b60818061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f6004356051565b005b5b505600a165627a7a723058208748bdb3c6180c0c035845b6a6197c8885225dbb30a495705164ab5beed87cbf0029
test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f06dff900a715a3d5f2a65cbcad5b5a62e02b49bed1684847118b7dea4eb3da5.sol":{"keccak256":"0x3d69cb8b491136fcbb5e0e1d84333fab9cf5faea986256e224b0109508cfa929","urls":["bzzr://a1290bdb81b90f61fd36b6f9133eb9a1b290e67eb2b184fdf5aa67e31c61726e"]}},"version":1}
test_f0df0417210f7aa25b87f760af8488841b76dec9e9aba3de4f5356cae3837f22.sol: ERROR
test_f12d326edfa3146f6ee10563423a2d8f309d51bfa230bf149eded1dd3f5ec8bf.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol:test 6060604052341561000f57600080fd5b5b60d98061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663824a62108114603c575b600080fd5b3415604657600080fd5b605860043563ffffffff602435166098565b604051602081016069818380866072565b90508092506084565b83607a826088565b8452949350505050565b608d565b151590565b505060405180910390f35b600863ffffffff8216830114805b50929150505600a165627a7a7230582025a6da679bd2c75689f49d8861ae03981a4dafaae6b68b1f1fd50dd3c3860b260029
test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"arg1","type":"uint256"},{"name":"arg2","type":"uint32"}],"name":"f","outputs":[{"name":"ret","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f1826a10b1a8be08fff76eea15df33dad2fb8b71df5feb59d17a62165423ed6f.sol":{"keccak256":"0x894c8996ee0b97e798d7fc4aebb73408d3b83fd7119e439f50dcaed59b2e0620","urls":["bzzr://34c3ddb8279fb5297fa9ce795fa624fee1178056614236e4142282e5ad1939e3"]}},"version":1}
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:BaseBase 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:BaseBase 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:base 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:base 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:derived 
test_f197e8b52282d4922dbc657c532100a56bb526d42b23514da7a0470d8329388d.sol:derived 
test_f1c5a3c5898b5bdba5d48272e23ab1aeccfca509ff2f6508f80b25b0804f6111.sol: ERROR
test_f1f25723e2547b5a8cbcca70cedf7923e5277745c793e05cdffd0e2b25cf3f92.sol: ERROR
test_f21407ccaa09d80d789d8f7a97092fb42c2fd90fd6abd402ce1be83b9e94f007.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol:C 6060604052341561000f57600080fd5b5b60ed8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600060b2565b6001815b600081111560ac57908102905b600019016097565b50919050565b60b9826093565b90505b9190505600a165627a7a72305820bbe350221024cedebbcefd8952d9404798b0adc6894e5a7a786a6bf46b35136c0029
test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"b","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f25c49319a8c043f4c170c876101e15dc577e6e384cd69bbacd0701b4e5db747.sol":{"keccak256":"0x6f5ff9f4d2d926169d2ac1f446c5cc85026b91baf820ab827d41fa9db1ad0ed3","urls":["bzzr://5a2c7c002c53e9f4e9d089ef0c2b2895f94e925f887c2b015cedb326bf90a308"]}},"version":1}
test_f2ef815238e9e82eb33d9dfefff3e9e0e73191e39a9d98209d2bd04f84d28efa.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Base 606060405260025b60008190555b505b603680601c6000396000f30060606040525b600080fd00a165627a7a723058201d1651e24d660e7b960eae2e48d7854f1336a0fe7b99865939d63aba2b3f52b50029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Base {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"Base"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:BaseBase 60606040523415600e57600080fd5b604051602080606f833981016040528080519150505b60008190555b505b60368060396000396000f30060606040525b600080fd00a165627a7a72305820dea49387da1985f77e674422e5c95d736a65054555328fc105f2a6454efac4600029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:BaseBase {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[{"name":"a","type":"uint256"}],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"BaseBase"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Derived 606060405260035b60008190555b505b60bd8061001d6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d46300fd8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6000545b905600a165627a7a72305820568d5d7b581b1ead74a2ce85779086d9196c4000d187578267e0fec3f29943cf0029
test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol:Derived {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getA","outputs":[{"name":"r","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":"Derived"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f302b990dad08c7c8534625d414853e52d8faab4d6f53284338dc9021e5ba3ce.sol":{"keccak256":"0xa9da37a3083b4733f3f77dff14be37d78c8e4993b49982476c5daca7102b36e5","urls":["bzzr://d4f16889b9b9aa2859e81964081d7efee830464c1bab2aed1389ebb49470ca17"]}},"version":1}
test_f3130849c7ad69d82f1ca2cac18fd7771ffe13d49c116d20a4f3030c08d1ffed.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol:test 6060604052341561000f57600080fd5b5b60bf8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060645b50905600a165627a7a723058209999087257464912e001758c38648ca1851b63dfed84ed02ec940c68355629c10029
test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f3708060eb06d86438e6a03b5795349387e8ef5dbf20c6052352e762c8256331.sol":{"keccak256":"0xf42e118d83b7c1aff0abbd90846b99bf8b87b4bddaa33c6ff1c384b75a26a4e8","urls":["bzzr://9517c66e6418bda52c7b5ca0e77247a00b4131711c4847622b61c0a3f209debe"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:A 60606040523415600e57600080fd5b5b30600160a060020a03166040517f3132330000000000000000000000000000000000000000000000000000000000815260200160006040518083038160008661646e5a03f15050505b5b60368060666000396000f30060606040525b600080fd00a165627a7a723058208c8c012633b2d123fda6f7f9ce9b0fe7f05ff763cc9808208edeeb10a86157300029
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":{"keccak256":"0xaa40d5cde2e8cad93499910490aefc93be43805b1113889d1211635b31835c50","urls":["bzzr://35dde2522afa026a289d9f8b27a17e4fcea0c92ac136822d728e4ee1a661a651"]}},"version":1}
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:B 60606040526001600055341561001457600080fd5b5b6101c0806100246000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f7cb8e668114610048578063f8a8fd6d1461005d575b600080fd5b341561005357600080fd5b61005b6100b4565b005b341561006857600080fd5b6100706100e3565b604051602081016100838183808661008d565b90508092506100a1565b83610097826100a6565b8452949350505050565b6100a9565b90565b505060405180910390f35b60006100be6100e9565b604051809103906000f08015156100d457600080fd5b60008054600101905590505b50565b60005481565b604051609c806100f983390190560060606040523415600e57600080fd5b5b30600160a060020a03166040517f3132330000000000000000000000000000000000000000000000000000000000815260200160006040518083038160008661646e5a03f15050505b5b60368060666000396000f30060606040525b600080fd00a165627a7a723058208c8c012633b2d123fda6f7f9ce9b0fe7f05ff763cc9808208edeeb10a86157300029a165627a7a72305820864eaaafbd73aec7aa52e78650f06e75d3aed56b8e9a4d7a0cc7a70588f0bd1d0029
test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"testIt","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f375a43fca6e21c12d7f34eedac6f5bfd1359437e97e2e2cafec32f9660a58be.sol":{"keccak256":"0xaa40d5cde2e8cad93499910490aefc93be43805b1113889d1211635b31835c50","urls":["bzzr://35dde2522afa026a289d9f8b27a17e4fcea0c92ac136822d728e4ee1a661a651"]}},"version":1}
test_f37871936bf1c6afa11b22caf18d05c1041f24c68a493c0a8e284050a5086121.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol:c 6060604052341561000f57600080fd5b5b61051f8061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636b59084d811461003d575b600080fd5b341561004857600080fd5b610050610096565b604051602081016100638183808661006d565b9050809250610081565b8361007782610086565b8452949350505050565b61008b565b151590565b505060405180910390f35b60008060646100a58282610409565b50600090505b60005460026000196101006001841615020190911604811015610133578060f860020a0260008281546001816001161561010002031660029004811015156100ef57fe5b81546001161561010e5790600052602060002090602091828204019190065b601f036101000a81548160ff0219169060f860020a840402179055505b6001016100ab565b6000605e815460018160011615610100020316600290048110151561015457fe5b8154600116156101735790600052602060002090602091828204019190065b601f036101000a81549060ff02191690556000606081546001816001161561010002031660029004811015156101a557fe5b8154600116156101c45790600052602060002090602091828204019190065b601f036101000a81549060ff02191690556000606281546001816001161561010002031660029004811015156101f657fe5b8154600116156102155790600052602060002090602091828204019190065b601f036101000a81549060ff02191690556000605e815460018160011615610100020316600290048110151561024757fe5b8154600116156102665790600052602060002090602091828204019190065b9054901a60f860020a027fff000000000000000000000000000000000000000000000000000000000000001615801561031057506000605f81546001816001161561010002031660029004811015156102bb57fe5b8154600116156102da5790600052602060002090602091828204019190065b9054901a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916605f60f860020a02145b8015610385575060006060815460018160011615610100020316600290048110151561033857fe5b8154600116156103575790600052602060002090602091828204019190065b9054901a60f860020a027fff0000000000000000000000000000000000000000000000000000000000000016155b801561040257506000606181546001816001161561010002031660029004811015156103ad57fe5b8154600116156103cc5790600052602060002090602091828204019190065b9054901a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916606160f860020a02145b91505b5090565b81546001816001161561010002031660029004825481601f106104645782601f10610449575b826008026101000360020a809104028280011783556104cc565b60ff19168360005260206000205581800160010183556104cc565b82601f10610494575082600052602060002080549082601f016020900481019061048e91906104d2565b5061042f565b508180016001018355818115116104cc57601f016020900481601f016020900483600052602060002091820191016104cc91906104d2565b5b505050565b6104f091905b8082111561040557600081556001016104d8565b5090565b905600a165627a7a723058201f06d70bd29251eae43074072e36ab80c80224e40d988b419d203643a22d814b0029
test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test1","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f3bb52b88e6dbfdd738c4e8d1c7d8d799a6836881a76fe4a22c22ce32cfdb547.sol":{"keccak256":"0x413c9119883acda5355461329ed8b5abfc09a8f9550411c11ae3896a33a202a3","urls":["bzzr://19758fb62978ba541392d7a3b9cdfb8deedff924067606865eda771cb885312a"]}},"version":1}
test_f3fd9103612d3eb90f43cd25ea85615ae44c120d9d6920a07a60287755ddb485.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:A 6060604052341561000f57600080fd5b5b60c38061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114603c575b600080fd5b3415604657600080fd5b604f600435608d565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b6082565b90565b505060405180910390f35b600281025b9190505600a165627a7a72305820d0e2724ac396122f6e2fb8bb6ac03940ad961c8642502b26c024d8b276c265b30029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:B 6060604052341561000f57600080fd5b5b60bc8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600a5b905600a165627a7a7230582042bd0a806ce5771c1ee0db99617d9da67983126beb7e486c633df92ca06c79470029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:C 6060604052341561000f57600080fd5b5b61021b8061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff0811461005e578063b3de648b146100b5578063b8c9d3651461010f578063e2179b8e14610166575b600080fd5b341561006957600080fd5b6100716101bd565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b34156100c057600080fd5b6100716004356101c3565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561011a57600080fd5b6100716101cd565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b341561017157600080fd5b6100716101df565b604051602081016100848183808661008e565b90508092506100a2565b83610098826100a7565b8452949350505050565b6100aa565b90565b505060405180910390f35b600a5b90565b600281025b919050565b60006101d960016101c3565b90505b90565b60006101d96101bd565b90505b905600a165627a7a7230582044041db2a300710a28466e563774d62eb32c896d7989e03d2b3394d4cf2834d80029
test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"h","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f4525d732d16622a3cb14f7bff044fb215488fdc13748350fc7fda2688c94d24.sol":{"keccak256":"0xe65c43b55bebef3c298bb0479e7d1a40aaeade5469325a0884a82073ed143320","urls":["bzzr://f9d79f0482d1445ec1dac3eb1f2f12a0a9ce8190ab045a24f6e2087e2463c81e"]}},"version":1}
test_f4cefe1c53736c4e5c4cf7b998fdfa5fdaaa1611994d2514767b6c117ec4cf25.sol: ERROR
test_f5910e6344b84b5fc4e64197a9a628f45d7e88ba640415dc7c019e72943ae7ce.sol: ERROR
test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol:test 60606040523415600e57600080fd5b5b60808061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60bf5b505600a165627a7a72305820d5e8c2d9a9ef2d8ee5c9c1b70ccc4ea33954311d27cfac01326516b768ffd8fc0029
test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f60bf0bbf421edb01eb108a060ab10196795e3718d4cba259dca0fb9496fd6b8.sol":{"keccak256":"0xf0a0d44e883b150a63676d8af087cae5255f614055c90b7deef821ed62a352f1","urls":["bzzr://09ef66fceef2776394cc2f6d72f1a903623a7e8a74ed6d2dd5ae7c7fdaa93e87"]}},"version":1}
 conv bytes2 -> bytes2
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes2_to_t_bytes2(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes2_to_t_bytes2(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes2(value))

			}
		
			function cleanup_assert_t_bytes2(value) -> cleaned {
				cleaned := and(value, 0xFFFF000000000000000000000000000000000000000000000000000000000000)
			}
		

test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol:Test 6060604052341561000f57600080fd5b5b6101048061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166399dbd65d8114603c575b600080fd5b3415604657600080fd5b60717fffffffff000000000000000000000000000000000000000000000000000000006004351660d1565b60405160208101608281838086608b565b9050809250609d565b8360938260a1565b8452949350505050565b60c6565b7fffff0000000000000000000000000000000000000000000000000000000000001690565b505060405180910390f35b805b9190505600a165627a7a723058209df0c175fd2850c1aae1a17b080151af16c5f0e5041281352955265508378c830029
test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol:Test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"input","type":"bytes4"}],"name":"bytesToBytes","outputs":[{"name":"ret","type":"bytes2"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol":"Test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f695652c9a8c9c2e8f0767c27c01ad85ddd0e1d2bc048fa3d62a2944a2fee2b7.sol":{"keccak256":"0x205fae0e8d86ee857fec04c1b719c174287dc9a933ea0e393fc32f9c00a4fdd9","urls":["bzzr://7c8f548ab941d8cd82bf9b0ab5ace772a7b6fb449e50bc011234a4caf6ad0b7c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol:test 6060604052341561000f57600080fd5b5b60be8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6001805b50905600a165627a7a72305820bc83636e23e05676decbe3a1b320ba5c24840f1f071bdc25364e207f54478dae0029
test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f6c3e51202fec63c4dd6509d21d632c15d975495bb67d96a5e560fc554c50745.sol":{"keccak256":"0x2ebd87d980e99eb8471b630ca1c42cb1380704138c0283badce3d8f56daeff05","urls":["bzzr://5d1deeda396a5981a697784976960b19127be003bb721fa666d43f0c43aae451"]}},"version":1}
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol:Flow 6060604052341561000f57600080fd5b5b33600160a060020a0316600090815260016020526040902080546001604060020a0319166100546401000000000261013a176001604060020a03161790555b6100e6565b33600160a060020a0316600090815260016020526040902080546001604060020a03191661009564010000000002610175176001604060020a03161790555b565b33600160a060020a0316600090815260016020526040902080546001604060020a0319166100d6640100000000026101b0176001604060020a03161790555b565b6000805460ff191660011790555b565b6101ec806100f56000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b93381b811461004857806326121ff0146100a1575b600080fd5b341561005357600080fd5b61005b6100f8565b6040516020810161006e81838086610078565b905080925061008c565b8361008282610091565b8452949350505050565b610096565b151590565b505060405180910390f35b34156100ac57600080fd5b6100b4610101565b6040516020810161006e818380866100d1565b905080925061008c565b83610082826100ea565b8452949350505050565b610096565b90565b505060405180910390f35b60005460ff1681565b73ffffffffffffffffffffffffffffffffffffffff33166000908152600160205260408120546101339063ffffffff16565b5060075b90565b3373ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020805467ffffffffffffffff19166101751790555b565b3373ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020805467ffffffffffffffff19166101b01790555b565b6000805460ff191660011790555b5600a165627a7a723058208e8e1111eb9d388dbf028ec97e4c21da49319f2a0e96ac56ee2684f3539b495d0029
test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol:Flow {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"success","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol":"Flow"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f6c4b79e6799a604465e92355a38a03ae766a21def1888315b72186ee86b8b0c.sol":{"keccak256":"0x057130dd6625afd5cc5df7675c3b0c0a6b9efb7506fbd4d0e65ecd82e8bce263","urls":["bzzr://f43d11d41f892a0d9ce90d4d89d3b762bee5d0bfd998fe0957372abe9ab9e463"]}},"version":1}
test_f6d0e65ec93c757919a71ec488c1e6200b85fcb92c0f87e921a96d2d25ac9e2e.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:helper 6060604052341561000f57600080fd5b5b60c88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b905600a165627a7a72305820a1ad3da959a57a76db13da0b407e553747f1421c7ae2aa6008842875cb259bb60029
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:helper {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"getBalance","outputs":[{"name":"myBalance","type":"uint256"}],"payable":true,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":"helper"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":{"keccak256":"0x034120ba0fdc54466a83dc0f42be8d8f8ef67f60d4a56359fd74d0ea04079b91","urls":["bzzr://71ce8a6dda634788a6bcc94b52d47ca4c3b04a0ed1e042e9a266725c25993697"]}},"version":1}
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:test 60606040525b61000d610049565b604051809103906000f080151561002357600080fd5b60008054600160a060020a031916600160a060020a03929092169190911790555b610058565b60405160e6806101c883390190565b610161806100676000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663fd72b6e9811461003d575b600080fd5b341561004857600080fd5b610053600435610097565b6040516020810161006681838086610070565b9050809250610084565b8361007a82610089565b8452949350505050565b61008c565b90565b505060405180910390f35b6000805473ffffffffffffffffffffffffffffffffffffffff166312065fe081818582826103e883838383600384016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303818589803b151561010c57600080fd5b88f1151561011957600080fd5b505050505060405180519a50505b5050505050505050509190505600a165627a7a72305820b663b3981baeb0ed7c470a00cfb908d02566b6da4964bf544dafeb517a7ed9d300296060604052341561000f57600080fd5b5b60c88061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe08114603c575b600080fd5b60426080565b60405160208101605381838086605c565b9050809250606e565b836064826072565b8452949350505050565b6075565b90565b505060405180910390f35b73ffffffffffffffffffffffffffffffffffffffff3016315b905600a165627a7a72305820a1ad3da959a57a76db13da0b407e553747f1421c7ae2aa6008842875cb259bb60029
test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"sendAmount","outputs":[{"name":"bal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":true,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f7cc9f4889531c7fd4f49664a208ee6a04d5030fedc33315fc2ee47fe039266c.sol":{"keccak256":"0x034120ba0fdc54466a83dc0f42be8d8f8ef67f60d4a56359fd74d0ea04079b91","urls":["bzzr://71ce8a6dda634788a6bcc94b52d47ca4c3b04a0ed1e042e9a266725c25993697"]}},"version":1}
test_f7ceccaac3093ca0d4bdbab6daf34468411f20dbaf135f594b6784688459f6c3.sol: ERROR
test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol:C 60606040523415600e57600080fd5b5b60898061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b5b6001016051565b5b505600a165627a7a7230582076fa4517c63da31a54ad8387bd9ff3d6a8623c5addd9bf12380dac6bd50b27640029
test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f7f447e9e6c15a9cb927e8371ce24d9aa65b359b086927ad2f68e2b5c2a5a959.sol":{"keccak256":"0x90c8ced439eab90dc7588356532bfab1e74634ca562475589a932f78b7aff5b4","urls":["bzzr://c73e170ef842e31e4d6b056f642a17c6fc4d8988ff76122d1196ab423e04bbde"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol:test 6060604052341561000f57600080fd5b5b60c58061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b60005b60055b60ff1690505b905600a165627a7a72305820c9e760c41c69f4a6d8adc29da379c8765811e9844a525f412bf910b1698761700029
test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"d","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f84d76ec09859dd1d53b4971e594a49c6751ae7cc62f1b018ef353088bb78284.sol":{"keccak256":"0xeb1645289222e741292413f3f6729a1f1576460be1d5de9dd6a160c4168749fe","urls":["bzzr://1c15ba7f0853d5f523aa4662dcccb9467f991b841c587a220d75df9374d47ca2"]}},"version":1}
test_f8594d665f125e3c69990502f2d03a76f616db15369e98122d4a71601133359d.sol: ERROR
test_f8b1795bb9c09b308719a066a1e9245094176c4a4d81148c2ce0acfb5be2151c.sol: ERROR
 conv bytes4 -> bytes4
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes4_to_t_bytes4(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes4_to_t_bytes4(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes4(value))

			}
		
			function cleanup_assert_t_bytes4(value) -> cleaned {
				cleaned := and(value, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)
			}
		

test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol:test 6060604052341561000f57600080fd5b5b6101008061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632fbebd388114603c575b600080fd5b3415604657600080fd5b604f60043560ac565b604051602081016060818380866069565b9050809250607b565b83607182607f565b8452949350505050565b60a1565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690565b505060405180910390f35b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035165b9190505600a165627a7a7230582084ebf3ef3c64399399d0836250136c3b1a16beea3d1c2ba93b49b7b4de9005bf0029
test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"foo","outputs":[{"name":"value","type":"bytes4"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f90af76526c3248c4c4db8202d5fea31713cbdf399419825b3bc04660404a063.sol":{"keccak256":"0xfc3f3ce5371511cca77a1d0d0960b67316faffb2b0bac2e032f5c756fbda189d","urls":["bzzr://e9d37bf43cb6c4e75bd31a7be5d617647acb263b50780aca6742846e1f5d3a31"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256_lib(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256_lib(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f90f129afab3d0d67d1e57444efd657ce4b7f045d7fc09a0c5523d5ce969efb9.sol: ERROR
test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol:test 60606040523415600e57600080fd5b5b60938061001d6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c604e565b005b60005b3660ff821610156063575b6001016051565b5b505600a165627a7a723058209181722097da5f6abbeb75d2ead22d743d33467d898bbb73bf093f587efb0d8c0029
test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f93a52e40c6ad3687f2c078f7ebf6a64fab606fa3fb1eab1c8fbac3832c2d8a9.sol":{"keccak256":"0x1a96aa96e80ecb2b0c7da80ce9c00e931089b253f9f5887b6750fb5dca5065db","urls":["bzzr://2ffbfe719b806217970d261dd9b6a3fc12046001b5c66cb0b2198c42bde793d7"]}},"version":1}
test_f9477f76545ee95d8326c92bc9636a79ac26e756f58411674a783d15e6d79d6f.sol: ERROR
test_f9593609ddda18e90929158c630a33fca3cee055b9c5273c71d737ed7ab9b78f.sol:I 
test_f9593609ddda18e90929158c630a33fca3cee055b9c5273c71d737ed7ab9b78f.sol:I 
test_f97a204dcc58c14efe762e9343fd93ed6fda74849b74081f1d15ebbd29ef0a5e.sol: ERROR
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:A 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820ad058600c3a2ffa971b64d8bbdf54285c882919003a3164fc54ad2780c7994550029
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:A {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":"A"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":{"keccak256":"0x1a634596f0f3bcb152c2b6b3ee5b0994fea50761c1031649922ead3b2b57d9fc","urls":["bzzr://99d9383eaa4ec533498ceca357c443b7b5300eec563cf30960e3bfc98604a6f0"]}},"version":1}
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:B 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058205faff205b3af2b07c938dc83627b7343592aa1b6b779646e5ce3c8d53147ad6f0029
test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol:B {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":"B"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f9980ad0c8fb8e59ab4cdeb429ae6baad9bbbdce279e7df3eca18d0591e8b3f6.sol":{"keccak256":"0x1a634596f0f3bcb152c2b6b3ee5b0994fea50761c1031649922ead3b2b57d9fc","urls":["bzzr://99d9383eaa4ec533498ceca357c443b7b5300eec563cf30960e3bfc98604a6f0"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol:C 6060604052341561000f57600080fd5b5b6101208061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c55699c8114604657806326121ff0146094575b600080fd5b3415605057600080fd5b605660e2565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b3415609e57600080fd5b605660e8565b604051602081016067818380866070565b90508092506082565b836078826086565b8452949350505050565b6089565b90565b505060405180910390f35b60005481565b60025b60096000555b905600a165627a7a72305820aea2a5ed1aa3ae5e58563da6e3b0739f137d261e40e11e2f1c93651904b09e720029
test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"x","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_f9ba78098eafe915bbb66ac29dfb622834ef401012aa5dd33522db41da999f82.sol":{"keccak256":"0x638aa67be5f6d0a01e86f08988d5bacea387145bf3216c6a37d64a227697c3ec","urls":["bzzr://b80bcd04ebeeaa48be7cedc1ae332998c9846e2621c7e645705ded495f3c2b1d"]}},"version":1}
test_f9c4b423afa9b47cdfe95f357d6fb74e5f9d9112ba63fe905b177cf3377ab0be.sol: ERROR
 conv uint16 -> uint16
test_fa36310c8f110d204e319cf5e4cedf42ab1923010f06843c60930c07ec879a2d.sol: ERROR
test_fa6e250d66c3c318ac64ba4ddab6ff9e488dac7c85a0e746dc8876deffe28142.sol: ERROR
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol:C 6060604052341561000f57600080fd5b5b60cd8061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b600281900a90910290815b929150505600a165627a7a72305820a9035abc8226dd0846c8e7c760103b257e67c8956a8db0bcaf2ef616a8cea9810029
test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fa7a3151ff9dacaf0e9d073513d5da7da3e9ed6dc68f71506e62f85a7f448914.sol":{"keccak256":"0x3a947e171020a0f065d5e2900cef920b31cab3a58addf74a442025b5058d9169","urls":["bzzr://bf9589379a2ae14150eedba4542e354d3ee4bb32e49a4a089c06c0a61957da73"]}},"version":1}
 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 64)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value1,
				$headStart,
				add($headStart, 32),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol:test 6060604052341561000f57600080fd5b5b6102328061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631e3185928114610048578063a481e08c146100d8575b600080fd5b341561005357600080fd5b610061600435602435610168565b604051604081016100748183808761008f565b90506100858160208401848661008f565b90508093506100a3565b83610099826100c1565b8452949350505050565b6100bc565b83610099826100c1565b8452949350505050565b6100c4565b90565b6100cc565b90565b50505060405180910390f35b34156100e357600080fd5b6100616004356024356101ac565b604051604081016100748183808761008f565b90506100858160208401848661008f565b90508093506100a3565b83610099826100c1565b8452949350505050565b6100bc565b83610099826100c1565b8452949350505050565b6100c4565b90565b6100cc565b90565b50505060405180910390f35b6000808260405190815260200160405180910390209050610188836101ec565b826040519081526020016040519081900390206007925060020190505b9250929050565b60008082604051908152602001604051809103902090506101cc836101ec565b8260405190815260200160405180910390209050600591505b9250929050565b806040519081526020016040519081900390206000555b505600a165627a7a7230582006db74a866d1b8766a7d4271ed00bd1dbaf3ee737fd054ab295a63044a7e5a8f0029
test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"g","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"bytes32"}],"name":"f","outputs":[{"name":"r_a","type":"uint256"},{"name":"r_d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fa89a0b283cf1f5643ad3a0f22914da5d2f8a2749e8fd2ddaa045d89cf1277e5.sol":{"keccak256":"0xa330cfd008276dabedee6d54b1de3b0725fb92a8fedf44f02e84e5de8e86b7a4","urls":["bzzr://adbf4ee90486b9ebe8a6df758ef06ced98246b6b062094403110ecc145c0f62a"]}},"version":1}
test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol:C 60606040523415600e57600080fd5b5b604880601c6000396000f30060606040525b3415600f57600080fd5b601a5b60026000555b565b0000a165627a7a72305820257d79f6ac2795a8f98fe38697adeada27ee61d44b4bcdeb64aef23d4dbb8a3f0029
test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"payable":false,"type":"fallback"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fa8f60fdd5475f93efe790a2c24838fd5aa840a23499ed3790ea8101120f2a46.sol":{"keccak256":"0x114c878eda0416e8acea39062d9e09ff7954055fdf4b6c64c64c3941aa1a07ec","urls":["bzzr://b0c9a46f750aa726bd67a9d9dfcea20344372ab90387a209d042cc8462d0e046"]}},"version":1}
test_fa8faf7902e893064deb69745da6485a922561e17037ea14ced3a8d38e73f66d.sol: ERROR
 conv bytes32 -> bytes32
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bytes32_to_t_bytes32(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bytes32_to_t_bytes32(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bytes32(value))

			}
		
			function cleanup_assert_t_bytes32(value) -> cleaned {
				cleaned := value
			}
		

test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol:c 6060604052341561000f57600080fd5b5b6101418061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663561536c7811461003d575b600080fd5b341561004857600080fd5b61005a60043561ffff6024351661009e565b6040516020810161006d81838086610077565b905080925061008b565b8361008182610090565b8452949350505050565b610093565b90565b505060405180910390f35b60008282609160405192835261ffff919091167e0100000000000000000000000000000000000000000000000000000000000002602083015260ff167f0100000000000000000000000000000000000000000000000000000000000000026022820152602301604051809103902090505b929150505600a165627a7a7230582022ea1e2211d9b0fbfd9564f77de8a4e7e62f2449103e9aa1d7732cb39ba431b10029
test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol:c {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint16"}],"name":"foo","outputs":[{"name":"d","type":"bytes32"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol":"c"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fad873cafb863678b83f1146a69b9c6113a6655c15764212e248ebdfbad4f4bc.sol":{"keccak256":"0xa1e668887b09bc808b1c9fda187402c231548a7086f5289401e2fbb20a69225c","urls":["bzzr://d727fe47733b548e4867e9484236419e2ead7adae93bf488fca7173b87b17766"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol:test 6060604052341561000f57600080fd5b5b60c68061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b6a01000000000000000000005b905600a165627a7a72305820ce4a55b9500223722eec8006f9f5ba7fef351092f23fac84ad2c175a9f3f27620029
test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fb562b6a4f11bc370a2889e90ad7040d97327a80ea498f85b0e354f8ae093321.sol":{"keccak256":"0xbb431c5a3b83419fd13af36f15721f05f83215a4f93a4584be9993fc72583447","urls":["bzzr://d5a04df3780ae3eab3f703772ba08e58cd13994f451f292f945ffb857e6f5693"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol:test 6060604052341561000f57600080fd5b5b61014b8061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663b3de648b8114610048578063e2179b8e146100a2575b600080fd5b341561005357600080fd5b61005e6004356100f9565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b34156100ad57600080fd5b61005e610103565b604051602081016100718183808661007b565b905080925061008f565b8361008582610094565b8452949350505050565b610097565b90565b505060405180910390f35b600281025b919050565b60006100f9610116600763ffffffff8316565b91505b5090565bfe00a165627a7a723058200873ec42e3f63e1cd097455005e543f60229af2702e6874a99f0cbd865d850750029
test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"f","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"g","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fb60340b0ad2c88253fbf0142466eaf497f9e4d049791b6a5ffc7e67088ea661.sol":{"keccak256":"0xe2c2c3eb762bdd0cfb3d662e61f6ce1baac80eba05a162da3e541bd01c5d7ead","urls":["bzzr://d1580b711bce73df4d4f406c856b291aee605e6c8aef4c42fc30b7e650df69cd"]}},"version":1}
test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol:C 60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058201fdcb2a7666e071044e30b65982dfa840eb0ed489a7ac46ea79636db707e45ff0029
test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fb67ad7e25b49fce44068a3aa3895c5c5343148893f5611106b9aa4bc48bf9d6.sol":{"keccak256":"0xb68b00335972d61569e9ba198ed9007e06241476214289dbc548efc058c2e349","urls":["bzzr://c1c2c761d5d486b14ccc2e8323bb4a63d91136d64e3c9555a754c3c03371186e"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol:C 6060604052341561000f57600080fd5b5b6101238061001f6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663f8a8fd6d8114603c575b600080fd5b3415604657600080fd5b604c608a565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b607f565b90565b505060405180910390f35b600060077f8000000000000000000000000000000000000000000000000000000000000000800860021460be57506001607c565b60077f8000000000000000000000000000000000000000000000000000000000000000800860021460f057506002607c565b5060005b905600a165627a7a72305820dd29cf52e2793464db12751b2eb018a775524156c44e09c74b75c0cb266164aa0029
test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fb93dfe6d65b3e4bfa7203414f350a18385e5336f6b539fb8f936580d6e38669.sol":{"keccak256":"0x1308d234ee0c0d7ae515e945cab47f05f21a422a5977045877c6d1f8ea0a16ad","urls":["bzzr://7725144fb016d0a5056cd22f4f66c4d1a6a68d4fd6727f27a033bd52d9753b76"]}},"version":1}
test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol:Foo 606060405260076000553415601357600080fd5b5b60368060216000396000f30060606040525b600080fd00a165627a7a72305820ee0ba9d45e07e4685e97f92584017b7c2b65f2f064bc47c2c1885cc19557366a0029
test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol:Foo {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol":"Foo"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fbb9b2ecc2f8777e1c06584927504fbb6d73dff76ea95b7464637e90862c54fd.sol":{"keccak256":"0x5ade9f72caa39ccf90942c6d0f31c9ac303bff7cc20b6efc5c1eb7be914f5103","urls":["bzzr://d5bd69fdd8e583b65a869708aa4382843ee55b50c20e197d0998cbb7d32ec78c"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol:test 6060604052341561000f57600080fd5b5b60c48061001e6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313d1aa2e8114603c575b600080fd5b3415604657600080fd5b60526004356024356090565b60405160208101606381838086606c565b9050809250607e565b836074826082565b8452949350505050565b6085565b90565b505060405180910390f35b805b929150505600a165627a7a7230582079d6c5d9c98c668f916e50160bed1fb35dcbe5dc4d425fdf3c13ccfbc4a0bde50029
test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"","type":"uint256"},{"name":"k","type":"uint256"}],"name":"f","outputs":[{"name":"ret_k","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fbc912ec957e4128e0ef626ba2bffde8028d6e5def9acdda95f3a1b3aaf14d35.sol":{"keccak256":"0x45194a70cbfe2b4e8669f4dfdaa35b0e2246311f207c66d7ec567de18f055237","urls":["bzzr://954aa02286ac4bc6e29407888656d84beeb6468dd896034ff6ba87538f53e9d8"]}},"version":1}
 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

 conv uint256 -> uint256
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_uint256_to_t_uint256(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_uint256_to_t_uint256(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_uint256(value))

			}
		
			function cleanup_assert_t_uint256(value) -> cleaned {
				cleaned := value
			}
		

test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol:C 6060604052341561000f57600080fd5b5b61042a8061001f6000396000f300606060405236156100755763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634f8dd50d811461007a5780637f6b590c146100d4578063cd580ff31461012e578063eb8ac92114610188578063f0fdf834146101e5578063f37cdc8e1461023f575b600080fd5b341561008557600080fd5b610090600435610299565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b34156100df57600080fd5b6100906004356102a3565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b341561013957600080fd5b6100906004356102ad565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b341561019357600080fd5b6100906004356024356102b7565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b34156101f057600080fd5b6100906004356103d8565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b341561024a57600080fd5b6100906004356103e2565b604051602081016100a3818380866100ad565b90508092506100c1565b836100b7826100c6565b8452949350505050565b6100c9565b90565b505060405180910390f35b600381015b919050565b600581015b919050565b600281015b919050565b60006102c16103ec565b600a6040518059106102d05750595b908082528060200260200182016040525b5090506103d8816000815181106102f457fe5b67ffffffffffffffff9092166020928302909101909101526102ad8160018151811061031c57fe5b67ffffffffffffffff9092166020928302909101909101526102998160028151811061034457fe5b67ffffffffffffffff9092166020928302909101909101526102a38160038151811061036c57fe5b67ffffffffffffffff9092166020928302909101909101526103e28160048151811061039457fe5b67ffffffffffffffff9092166020928302909101909101526103ce848285815181106103bc57fe5b9060200190602002015163ffffffff16565b91505b5092915050565b600181015b919050565b600881015b919050565b602060405190810160405260008152905600a165627a7a72305820073df2deaa2ea2f28e22caa63928b396cb1ca812b36ec6a1da9050490ee6fc110029
test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"c","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"d","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"b","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"i","type":"uint256"}],"name":"test","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"a","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"e","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fbd5c0fa3d10eb1083ac247a1d59652c771f1151424116bf3a96035f3d47ac32.sol":{"keccak256":"0x8bd0b9ed679b800faee43b71f9a42d9b5fcb0314dc4e082919d3b5a6e6839f45","urls":["bzzr://986ca05426a4ef05ff46e7b4881123b76d6e1d56b19c0eceb6aeb1ff3681c5f7"]}},"version":1}
test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol:test 60606040523415600e57600080fd5b5b60025b60005560035b6001805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b5b60368060496000396000f30060606040525b600080fd00a165627a7a7230582094955a8b92a80b32820345f73cc12127befce594903a36fe9adf3b394e16a8910029
test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"type":"constructor"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fbf344f422f787b0883a93aa7e6817020da395889468adca1d4989b70fcf76c0.sol":{"keccak256":"0x3562cf9886aa8d1dd92e8f20bf3dc19c5a9cab93745afe6ebee384017a288c6b","urls":["bzzr://4785bec136c4e9721e7b44537704db7a6074560d0ff201398dbadf0a0b6cb140"]}},"version":1}
test_fc486cd829d4e77e1189052fedd226c227717735c1c71c49c7ab4d98e0fd58d4.sol: ERROR
test_fcc1614db08f5cb9d3cabe08c5dd544bff406d71f133e3eb089af47f2b37b4a0.sol: ERROR
test_fcc804381c9d07ecc445eb2edf4cce4029785b4d852c4632045320033dae44f0.sol: ERROR
test_fccc0ba1b76970e0b00a19cff04e8e7891596b9cd275b2cbe195205307c07b2c.sol: ERROR
 conv bool -> bool
 --------------------- encoder routine ------------------

		let dynFree := add($headStart, 32)
		
			dynFree := abi_encode_t_bool_to_t_bool(
				$value0,
				$headStart,
				add($headStart, 0),
				dynFree
			)
		
		$value0 := dynFree
	
			function abi_encode_t_bool_to_t_bool(value, headStart, headPos, dyn) -> newDyn {
				newDyn := dyn
mstore(headPos, cleanup_assert_t_bool(value))

			}
		
			function cleanup_assert_t_bool(value) -> cleaned {
				cleaned := iszero(iszero(value))
			}
		

test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol:test 6060604052341561000f57600080fd5b5b6101298061001f6000396000f300606060405263ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326121ff08114603c575b600080fd5b3415604657600080fd5b604c608c565b60405160208101605d818380866066565b90508092506078565b83606e82607c565b8452949350505050565b6081565b151590565b505060405180910390f35b60007f61000000000000000000000000000000000000000000000000000000000000007f61610000000000000000000000000000000000000000000000000000000000007f620000000000000000000000000000000000000000000000000000000000000060015b93505b505050905600a165627a7a723058208277c5980e0f3c9f31791ed7a12a31b8f6523cf9ffa9c2c0cae83879c34d292c0029
test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol:test {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"f","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol":"test"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fd7be380a94af0aba022f61811867f5e4de0feeb959e9d8e6438883ef82055e0.sol":{"keccak256":"0x5fd172af84ec6a0fc315d4707d056337f61b6daccf784a27a76502cb44020781","urls":["bzzr://5617bfa3e1e74bcddff81bb52d8cd2079cc94c47aae0bf04efcaa1d07663115a"]}},"version":1}
test_fd8a2cdaf57061acf281e59144b4162589a2f2fe769ae49f3c17c2b92aa8ce73.sol: ERROR
test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol:C 6060604052341561000f57600080fd5b5b60ba8061001e6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663baf716098114603c575b600080fd5b3415604657600080fd5b60886004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650608a95505050505050565b005b5b505600a165627a7a72305820b9699db2c58f4e5b5fa77b5f2118c8edce63694f318c16bf93cb495e1ca920cf0029
test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol:C {"compiler":{"version":"0.4.12-nightly.2017.7.1+commit.b3d58cfb"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256[]"}],"name":"g","outputs":[],"payable":false,"type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol":"C"},"libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"test_fdafd8b32420d5d773b1e51f4e82fd7a8558f15f03c0874e380d77b3a3316fa4.sol":{"keccak256":"0x80eaf1367b6a644d2f0be4eb8e9ce9b9dc0460034d18daa6390ff3e114362952","urls":["bzzr://181f6641b4b46f2b6c8b80118085a4e193f63e296ac2c422dc18d1c90ad32af9"]}},"version":1}
 conv uint256 -> uint256
test_fe9472a4282cb0bce91b95dc7abd114abc4c0f93ea6e77a0f3844df98d9eaa74.sol: ERROR
test_ff8b90917b4b02f8080d8b197a5d5d717ec22e2fa195c8c97d810d9336a40698.sol: ERROR
test_ffc3194b07f039a009aabeecf99fcd143aacbe257123fa9ed858afe8124ec480.sol: ERROR
